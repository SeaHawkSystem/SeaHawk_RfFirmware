
HC12_FreeRTOS_Recv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd0c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800bfdc  0800bfdc  0000cfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c114  0800c114  0000d114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c11c  0800c11c  0000d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c120  0800c120  0000d120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  0800c124  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cd8  24000070  0800c194  0000e070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d48  0800c194  0000ed48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021ce9  00000000  00000000  0000e09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003fac  00000000  00000000  0002fd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001998  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013e7  00000000  00000000  000356d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000056b8  00000000  00000000  00036ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000208be  00000000  00000000  0003c16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a6c4  00000000  00000000  0005ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b70f1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074b8  00000000  00000000  001b7134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  001be5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bfc4 	.word	0x0800bfc4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800bfc4 	.word	0x0800bfc4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fa64 	bl	8000b80 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fd90 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f840 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f946 	bl	8000950 <MX_GPIO_Init>
  MX_UART7_Init();
 80006c4:	f000 f8ac 	bl	8000820 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80006c8:	f000 f8f6 	bl	80008b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uartQueueHandle = osMessageQueueNew(UART_QUEUE_SIZE, sizeof(uint32_t), NULL);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2104      	movs	r1, #4
 80006d0:	200a      	movs	r0, #10
 80006d2:	f007 fd6c 	bl	80081ae <osMessageQueueNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000718 <main+0x68>)
 80006da:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart7, rx_buffer, sizeof(uint32_t));
 80006dc:	2204      	movs	r2, #4
 80006de:	490f      	ldr	r1, [pc, #60]	@ (800071c <main+0x6c>)
 80006e0:	480f      	ldr	r0, [pc, #60]	@ (8000720 <main+0x70>)
 80006e2:	f004 ffb9 	bl	8005658 <HAL_UART_Receive_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e6:	f007 fc6b 	bl	8007fc0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000724 <main+0x74>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <main+0x78>)
 80006f0:	f007 fcb0 	bl	8008054 <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <main+0x7c>)
 80006f8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(UARTTask, NULL, &uartTask_attributes);
 80006fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <main+0x80>)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <main+0x84>)
 8000700:	f007 fca8 	bl	8008054 <osThreadNew>
  osThreadNew(HC12ComSERIALTask, NULL, &hc12comserialTask_attributes);
 8000704:	4a0c      	ldr	r2, [pc, #48]	@ (8000738 <main+0x88>)
 8000706:	2100      	movs	r1, #0
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <main+0x8c>)
 800070a:	f007 fca3 	bl	8008054 <osThreadNew>
  /* USER CODE BEGIN BSP */

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 800070e:	f007 fc7b 	bl	8008008 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <main+0x62>
 8000716:	bf00      	nop
 8000718:	240001bc 	.word	0x240001bc
 800071c:	240001b8 	.word	0x240001b8
 8000720:	2400008c 	.word	0x2400008c
 8000724:	0800c03c 	.word	0x0800c03c
 8000728:	08000b71 	.word	0x08000b71
 800072c:	240001b4 	.word	0x240001b4
 8000730:	0800c060 	.word	0x0800c060
 8000734:	08000af9 	.word	0x08000af9
 8000738:	0800c084 	.word	0x0800c084
 800073c:	08000b51 	.word	0x08000b51

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b09c      	sub	sp, #112	@ 0x70
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074a:	224c      	movs	r2, #76	@ 0x4c
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f00a fdea 	bl	800b328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2220      	movs	r2, #32
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f00a fde4 	bl	800b328 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000760:	2002      	movs	r0, #2
 8000762:	f001 fe15 	bl	8002390 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <SystemClock_Config+0xdc>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000772:	4a2a      	ldr	r2, [pc, #168]	@ (800081c <SystemClock_Config+0xdc>)
 8000774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <SystemClock_Config+0xdc>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000786:	bf00      	nop
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <SystemClock_Config+0xdc>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000794:	d1f8      	bne.n	8000788 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000796:	2302      	movs	r3, #2
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800079a:	2301      	movs	r3, #1
 800079c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800079e:	2340      	movs	r3, #64	@ 0x40
 80007a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007ae:	230c      	movs	r3, #12
 80007b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007be:	230c      	movs	r3, #12
 80007c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fe18 	bl	8002404 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007da:	f000 fa0f 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	233f      	movs	r3, #63	@ 0x3f
 80007e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ea:	2308      	movs	r3, #8
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ee:	2340      	movs	r3, #64	@ 0x40
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f2:	2340      	movs	r3, #64	@ 0x40
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007fc:	2340      	movs	r3, #64	@ 0x40
 80007fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2101      	movs	r1, #1
 8000804:	4618      	mov	r0, r3
 8000806:	f002 f9d7 	bl	8002bb8 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000810:	f000 f9f4 	bl	8000bfc <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3770      	adds	r7, #112	@ 0x70
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58024800 	.word	0x58024800

08000820 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000824:	4b22      	ldr	r3, [pc, #136]	@ (80008b0 <MX_UART7_Init+0x90>)
 8000826:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <MX_UART7_Init+0x94>)
 8000828:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800082a:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <MX_UART7_Init+0x90>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_UART7_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_UART7_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_UART7_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_UART7_Init+0x90>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <MX_UART7_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_UART7_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_UART7_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_UART7_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_UART7_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000868:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <MX_UART7_Init+0x90>)
 800086a:	f004 fe17 	bl	800549c <HAL_UART_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000874:	f000 f9c2 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000878:	2100      	movs	r1, #0
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_UART7_Init+0x90>)
 800087c:	f007 fa91 	bl	8007da2 <HAL_UARTEx_SetTxFifoThreshold>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000886:	f000 f9b9 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <MX_UART7_Init+0x90>)
 800088e:	f007 fac6 	bl	8007e1e <HAL_UARTEx_SetRxFifoThreshold>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 f9b0 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_UART7_Init+0x90>)
 800089e:	f007 fa47 	bl	8007d30 <HAL_UARTEx_DisableFifoMode>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80008a8:	f000 f9a8 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2400008c 	.word	0x2400008c
 80008b4:	40007800 	.word	0x40007800

080008b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 80008bc:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	@ (800094c <MX_USART3_UART_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  husart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  husart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  husart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&husart3) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 8000902:	f004 fdcb 	bl	800549c <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f976 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&husart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 8000914:	f007 fa45 	bl	8007da2 <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 f96d 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&husart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 8000926:	f007 fa7a 	bl	8007e1e <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f964 	bl	8000bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_USART3_UART_Init+0x90>)
 8000936:	f007 f9fb 	bl	8007d30 <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f95c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	24000120 	.word	0x24000120
 800094c:	40004800 	.word	0x40004800

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b42      	ldr	r3, [pc, #264]	@ (8000a70 <MX_GPIO_Init+0x120>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	4a40      	ldr	r2, [pc, #256]	@ (8000a70 <MX_GPIO_Init+0x120>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000976:	4b3e      	ldr	r3, [pc, #248]	@ (8000a70 <MX_GPIO_Init+0x120>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000984:	4b3a      	ldr	r3, [pc, #232]	@ (8000a70 <MX_GPIO_Init+0x120>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	4a39      	ldr	r2, [pc, #228]	@ (8000a70 <MX_GPIO_Init+0x120>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000994:	4b36      	ldr	r3, [pc, #216]	@ (8000a70 <MX_GPIO_Init+0x120>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	4b33      	ldr	r3, [pc, #204]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	4a31      	ldr	r2, [pc, #196]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <MX_GPIO_Init+0x120>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a02:	481c      	ldr	r0, [pc, #112]	@ (8000a74 <MX_GPIO_Init+0x124>)
 8000a04:	f001 fcaa 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	481a      	ldr	r0, [pc, #104]	@ (8000a78 <MX_GPIO_Init+0x128>)
 8000a0e:	f001 fca5 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4815      	ldr	r0, [pc, #84]	@ (8000a7c <MX_GPIO_Init+0x12c>)
 8000a28:	f001 faf0 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a2c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <MX_GPIO_Init+0x124>)
 8000a46:	f001 fae1 	bl	800200c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_GPIO_Init+0x128>)
 8000a62:	f001 fad3 	bl	800200c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	@ 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58024400 	.word	0x58024400
 8000a74:	58020400 	.word	0x58020400
 8000a78:	58021000 	.word	0x58021000
 8000a7c:	58020800 	.word	0x58020800

08000a80 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char*ptr, int len)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&husart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <_write+0x28>)
 8000a98:	f004 fd50 	bl	800553c <HAL_UART_Transmit>
	return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	24000120 	.word	0x24000120

08000aac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART7)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x3c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d10f      	bne.n	8000ade <HAL_UART_RxCpltCallback+0x32>
	{
		uint32_t received_value;
		memcpy(&received_value, rx_buffer, sizeof(received_value));
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <HAL_UART_RxCpltCallback+0x40>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	60fb      	str	r3, [r7, #12]

		osMessageQueuePut(uartQueueHandle, &received_value, 0, 0);
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <HAL_UART_RxCpltCallback+0x44>)
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	f107 010c 	add.w	r1, r7, #12
 8000acc:	2300      	movs	r3, #0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f007 fbe0 	bl	8008294 <osMessageQueuePut>

		HAL_UART_Receive_IT(&huart7, rx_buffer, sizeof(received_value));
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	4905      	ldr	r1, [pc, #20]	@ (8000aec <HAL_UART_RxCpltCallback+0x40>)
 8000ad8:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <HAL_UART_RxCpltCallback+0x48>)
 8000ada:	f004 fdbd 	bl	8005658 <HAL_UART_Receive_IT>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40007800 	.word	0x40007800
 8000aec:	240001b8 	.word	0x240001b8
 8000af0:	240001bc 	.word	0x240001bc
 8000af4:	2400008c 	.word	0x2400008c

08000af8 <UARTTask>:

void UARTTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	@ 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	uint32_t msg;
	char txBuffer[32];

	for(;;)
	{
		if(osMessageQueueGet(uartQueueHandle, &msg, NULL, osWaitForever) == osOK)
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <UARTTask+0x4c>)
 8000b02:	6818      	ldr	r0, [r3, #0]
 8000b04:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f007 fc21 	bl	8008354 <osMessageQueueGet>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1f3      	bne.n	8000b00 <UARTTask+0x8>
		{
			sprintf(txBuffer, "Received: %lu\r\n", msg);
 8000b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	490a      	ldr	r1, [pc, #40]	@ (8000b48 <UARTTask+0x50>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f00a fb09 	bl	800b138 <siprintf>
			HAL_UART_Transmit(&husart3, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fbf0 	bl	8000310 <strlen>
 8000b30:	4603      	mov	r3, r0
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	f107 010c 	add.w	r1, r7, #12
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <UARTTask+0x54>)
 8000b3e:	f004 fcfd 	bl	800553c <HAL_UART_Transmit>
		if(osMessageQueueGet(uartQueueHandle, &msg, NULL, osWaitForever) == osOK)
 8000b42:	e7dd      	b.n	8000b00 <UARTTask+0x8>
 8000b44:	240001bc 	.word	0x240001bc
 8000b48:	0800c008 	.word	0x0800c008
 8000b4c:	24000120 	.word	0x24000120

08000b50 <HC12ComSERIALTask>:
		}
	}
}

void HC12ComSERIALTask(void* argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("HC-12 TASK\r\n");
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <HC12ComSERIALTask+0x1c>)
 8000b5a:	f00a fae5 	bl	800b128 <puts>
		osDelay(1000);
 8000b5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b62:	f007 fb09 	bl	8008178 <osDelay>
		printf("HC-12 TASK\r\n");
 8000b66:	bf00      	nop
 8000b68:	e7f6      	b.n	8000b58 <HC12ComSERIALTask+0x8>
 8000b6a:	bf00      	nop
 8000b6c:	0800c018 	.word	0x0800c018

08000b70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f007 fafd 	bl	8008178 <osDelay>
 8000b7e:	e7fb      	b.n	8000b78 <StartDefaultTask+0x8>

08000b80 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b92:	f000 fc5f 	bl	8001454 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ba6:	2387      	movs	r3, #135	@ 0x87
 8000ba8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fc7d 	bl	80014c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bca:	2004      	movs	r0, #4
 8000bcc:	f000 fc5a 	bl	8001484 <HAL_MPU_Enable>

}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bea:	f000 fb33 	bl	8001254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40000800 	.word	0x40000800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <HAL_MspInit+0x38>)
 8000c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_MspInit+0x38>)
 8000c16:	f043 0302 	orr.w	r3, r3, #2
 8000c1a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <HAL_MspInit+0x38>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f06f 0001 	mvn.w	r0, #1
 8000c34:	f000 fbe6 	bl	8001404 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	58024400 	.word	0x58024400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ba      	sub	sp, #232	@ 0xe8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	22b8      	movs	r2, #184	@ 0xb8
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f00a fb5f 	bl	800b328 <memset>
  if(huart->Instance==UART7)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a55      	ldr	r2, [pc, #340]	@ (8000dc4 <HAL_UART_MspInit+0x180>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d14e      	bne.n	8000d12 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000c74:	f04f 0202 	mov.w	r2, #2
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fb62 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c96:	f7ff ffb1 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca0:	4a49      	ldr	r2, [pc, #292]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000ca2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000caa:	4b47      	ldr	r3, [pc, #284]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb8:	4b43      	ldr	r3, [pc, #268]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a42      	ldr	r2, [pc, #264]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    PB4(NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000cd6:	2318      	movs	r3, #24
 8000cd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000cee:	230b      	movs	r3, #11
 8000cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4834      	ldr	r0, [pc, #208]	@ (8000dcc <HAL_UART_MspInit+0x188>)
 8000cfc:	f001 f986 	bl	800200c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2105      	movs	r1, #5
 8000d04:	2052      	movs	r0, #82	@ 0x52
 8000d06:	f000 fb7d 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000d0a:	2052      	movs	r0, #82	@ 0x52
 8000d0c:	f000 fb94 	bl	8001438 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d10:	e053      	b.n	8000dba <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd0 <HAL_UART_MspInit+0x18c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d14e      	bne.n	8000dba <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d1c:	f04f 0202 	mov.w	r2, #2
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	4618      	mov	r0, r3
 8000d34:	f002 fb0e 	bl	8003354 <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000d3e:	f7ff ff5d 	bl	8000bfc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d42:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d48:	4a1f      	ldr	r2, [pc, #124]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000d4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	4a18      	ldr	r2, [pc, #96]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_UART_MspInit+0x184>)
 8000d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da2:	4619      	mov	r1, r3
 8000da4:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <HAL_UART_MspInit+0x190>)
 8000da6:	f001 f931 	bl	800200c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2105      	movs	r1, #5
 8000dae:	2027      	movs	r0, #39	@ 0x27
 8000db0:	f000 fb28 	bl	8001404 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000db4:	2027      	movs	r0, #39	@ 0x27
 8000db6:	f000 fb3f 	bl	8001438 <HAL_NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	37e8      	adds	r7, #232	@ 0xe8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40007800 	.word	0x40007800
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	40004800 	.word	0x40004800
 8000dd4:	58020c00 	.word	0x58020c00

08000dd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b090      	sub	sp, #64	@ 0x40
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d827      	bhi.n	8000e36 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	201e      	movs	r0, #30
 8000dec:	f000 fb0a 	bl	8001404 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000df0:	201e      	movs	r0, #30
 8000df2:	f000 fb21 	bl	8001438 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000df6:	4a29      	ldr	r2, [pc, #164]	@ (8000e9c <HAL_InitTick+0xc4>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000dfc:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <HAL_InitTick+0xc8>)
 8000dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e02:	4a27      	ldr	r2, [pc, #156]	@ (8000ea0 <HAL_InitTick+0xc8>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <HAL_InitTick+0xc8>)
 8000e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e1a:	f107 0210 	add.w	r2, r7, #16
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fa53 	bl	80032d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d106      	bne.n	8000e42 <HAL_InitTick+0x6a>
 8000e34:	e001      	b.n	8000e3a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e02b      	b.n	8000e92 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e3a:	f002 fa1d 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8000e3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000e40:	e004      	b.n	8000e4c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e42:	f002 fa19 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8000e46:	4603      	mov	r3, r0
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ea4 <HAL_InitTick+0xcc>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	0c9b      	lsrs	r3, r3, #18
 8000e56:	3b01      	subs	r3, #1
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <HAL_InitTick+0xd0>)
 8000e5c:	4a13      	ldr	r2, [pc, #76]	@ (8000eac <HAL_InitTick+0xd4>)
 8000e5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_InitTick+0xd0>)
 8000e62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e66:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000e68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <HAL_InitTick+0xd0>)
 8000e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e6c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_InitTick+0xd0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_InitTick+0xd0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e7a:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <HAL_InitTick+0xd0>)
 8000e7c:	f004 f82c 	bl	8004ed8 <HAL_TIM_Base_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d104      	bne.n	8000e90 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e86:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <HAL_InitTick+0xd0>)
 8000e88:	f004 f888 	bl	8004f9c <HAL_TIM_Base_Start_IT>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e000      	b.n	8000e92 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3740      	adds	r7, #64	@ 0x40
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	24000008 	.word	0x24000008
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	240001c0 	.word	0x240001c0
 8000eac:	40000800 	.word	0x40000800

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <TIM4_IRQHandler+0x10>)
 8000eee:	f004 f8db 	bl	80050a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	240001c0 	.word	0x240001c0

08000efc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&husart3);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <USART3_IRQHandler+0x10>)
 8000f02:	f004 fbf5 	bl	80056f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000120 	.word	0x24000120

08000f10 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <UART7_IRQHandler+0x10>)
 8000f16:	f004 fbeb 	bl	80056f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2400008c 	.word	0x2400008c

08000f24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e00a      	b.n	8000f4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f36:	f3af 8000 	nop.w
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf0      	blt.n	8000f36 <_read+0x12>
  }

  return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f86:	605a      	str	r2, [r3, #4]
  return 0;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <_isatty>:

int _isatty(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	@ (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	@ (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	@ (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	@ (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f00a fa3a 	bl	800b470 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24050000 	.word	0x24050000
 8001028:	00000400 	.word	0x00000400
 800102c:	2400020c 	.word	0x2400020c
 8001030:	24004d48 	.word	0x24004d48

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001038:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <SystemInit+0x100>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800103e:	4a3d      	ldr	r2, [pc, #244]	@ (8001134 <SystemInit+0x100>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001048:	4b3b      	ldr	r3, [pc, #236]	@ (8001138 <SystemInit+0x104>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	2b06      	cmp	r3, #6
 8001052:	d807      	bhi.n	8001064 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001054:	4b38      	ldr	r3, [pc, #224]	@ (8001138 <SystemInit+0x104>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 030f 	bic.w	r3, r3, #15
 800105c:	4a36      	ldr	r2, [pc, #216]	@ (8001138 <SystemInit+0x104>)
 800105e:	f043 0307 	orr.w	r3, r3, #7
 8001062:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001064:	4b35      	ldr	r3, [pc, #212]	@ (800113c <SystemInit+0x108>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a34      	ldr	r2, [pc, #208]	@ (800113c <SystemInit+0x108>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <SystemInit+0x108>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001076:	4b31      	ldr	r3, [pc, #196]	@ (800113c <SystemInit+0x108>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4930      	ldr	r1, [pc, #192]	@ (800113c <SystemInit+0x108>)
 800107c:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <SystemInit+0x10c>)
 800107e:	4013      	ands	r3, r2
 8001080:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001082:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <SystemInit+0x104>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <SystemInit+0x104>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 030f 	bic.w	r3, r3, #15
 8001096:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <SystemInit+0x104>)
 8001098:	f043 0307 	orr.w	r3, r3, #7
 800109c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800109e:	4b27      	ldr	r3, [pc, #156]	@ (800113c <SystemInit+0x108>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <SystemInit+0x108>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <SystemInit+0x108>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <SystemInit+0x108>)
 80010b2:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <SystemInit+0x110>)
 80010b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <SystemInit+0x108>)
 80010b8:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <SystemInit+0x114>)
 80010ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <SystemInit+0x108>)
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <SystemInit+0x118>)
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <SystemInit+0x108>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <SystemInit+0x108>)
 80010ca:	4a20      	ldr	r2, [pc, #128]	@ (800114c <SystemInit+0x118>)
 80010cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <SystemInit+0x108>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <SystemInit+0x108>)
 80010d6:	4a1d      	ldr	r2, [pc, #116]	@ (800114c <SystemInit+0x118>)
 80010d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <SystemInit+0x108>)
 80010dc:	2200      	movs	r2, #0
 80010de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <SystemInit+0x108>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a15      	ldr	r2, [pc, #84]	@ (800113c <SystemInit+0x108>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <SystemInit+0x108>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <SystemInit+0x108>)
 80010f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d113      	bne.n	8001128 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <SystemInit+0x108>)
 8001102:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001106:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <SystemInit+0x108>)
 8001108:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800110c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <SystemInit+0x11c>)
 8001112:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001116:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <SystemInit+0x108>)
 800111a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800111e:	4a07      	ldr	r2, [pc, #28]	@ (800113c <SystemInit+0x108>)
 8001120:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001124:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00
 8001138:	52002000 	.word	0x52002000
 800113c:	58024400 	.word	0x58024400
 8001140:	eaf6ed7f 	.word	0xeaf6ed7f
 8001144:	02020200 	.word	0x02020200
 8001148:	01ff0000 	.word	0x01ff0000
 800114c:	01010280 	.word	0x01010280
 8001150:	52004000 	.word	0x52004000

08001154 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <ExitRun0Mode+0x2c>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4a08      	ldr	r2, [pc, #32]	@ (8001180 <ExitRun0Mode+0x2c>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001164:	bf00      	nop
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <ExitRun0Mode+0x2c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f9      	beq.n	8001166 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	58024800 	.word	0x58024800

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80011c0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001188:	f7ff ffe4 	bl	8001154 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800118c:	f7ff ff52 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	@ (80011c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	@ (80011d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b6:	f00a f961 	bl	800b47c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fa79 	bl	80006b0 <main>
  bx  lr
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011c8:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80011cc:	0800c124 	.word	0x0800c124
  ldr r2, =_sbss
 80011d0:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80011d4:	24004d48 	.word	0x24004d48

080011d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC3_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f000 f903 	bl	80013ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011e8:	f001 fe9c 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_Init+0x68>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	4913      	ldr	r1, [pc, #76]	@ (8001248 <HAL_Init+0x6c>)
 80011fa:	5ccb      	ldrb	r3, [r1, r3]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <HAL_Init+0x68>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <HAL_Init+0x6c>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <HAL_Init+0x70>)
 800121e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001220:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <HAL_Init+0x74>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001226:	200f      	movs	r0, #15
 8001228:	f7ff fdd6 	bl	8000dd8 <HAL_InitTick>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e002      	b.n	800123c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001236:	f7ff fce7 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58024400 	.word	0x58024400
 8001248:	0800c0a8 	.word	0x0800c0a8
 800124c:	24000004 	.word	0x24000004
 8001250:	24000000 	.word	0x24000000

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	2400000c 	.word	0x2400000c
 8001278:	24000210 	.word	0x24000210

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	24000210 	.word	0x24000210

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <__NVIC_SetPriorityGrouping+0x40>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <__NVIC_SetPriorityGrouping+0x40>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00
 80012d8:	05fa0000 	.word	0x05fa0000

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	@ (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	@ (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	@ (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	@ 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff4c 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001412:	f7ff ff63 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001416:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f7ff ffb3 	bl	8001388 <NVIC_EncodePriority>
 8001422:	4602      	mov	r2, r0
 8001424:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff82 	bl	8001334 <__NVIC_SetPriority>
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff56 	bl	80012f8 <__NVIC_EnableIRQ>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001458:	f3bf 8f5f 	dmb	sy
}
 800145c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <HAL_MPU_Disable+0x28>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	4a06      	ldr	r2, [pc, #24]	@ (800147c <HAL_MPU_Disable+0x28>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001468:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800146a:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <HAL_MPU_Disable+0x2c>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	e000ed90 	.word	0xe000ed90

08001484 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800148c:	4a0b      	ldr	r2, [pc, #44]	@ (80014bc <HAL_MPU_Enable+0x38>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_MPU_Enable+0x3c>)
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	4a09      	ldr	r2, [pc, #36]	@ (80014c0 <HAL_MPU_Enable+0x3c>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a8:	f3bf 8f6f 	isb	sy
}
 80014ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed90 	.word	0xe000ed90
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785a      	ldrb	r2, [r3, #1]
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014e0:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7b1b      	ldrb	r3, [r3, #12]
 80014ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7adb      	ldrb	r3, [r3, #11]
 80014f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a9b      	ldrb	r3, [r3, #10]
 80014fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7b5b      	ldrb	r3, [r3, #13]
 8001502:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001504:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7b9b      	ldrb	r3, [r3, #14]
 800150a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800150c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7bdb      	ldrb	r3, [r3, #15]
 8001512:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001514:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7a5b      	ldrb	r3, [r3, #9]
 800151a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800151c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001524:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800152e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001530:	6113      	str	r3, [r2, #16]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed90 	.word	0xe000ed90

08001544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fe96 	bl	800127c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2dc      	b.n	8001b16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d008      	beq.n	800157a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2280      	movs	r2, #128	@ 0x80
 800156c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e2cd      	b.n	8001b16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a76      	ldr	r2, [pc, #472]	@ (8001758 <HAL_DMA_Abort+0x214>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d04a      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a74      	ldr	r2, [pc, #464]	@ (800175c <HAL_DMA_Abort+0x218>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d045      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a73      	ldr	r2, [pc, #460]	@ (8001760 <HAL_DMA_Abort+0x21c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d040      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a71      	ldr	r2, [pc, #452]	@ (8001764 <HAL_DMA_Abort+0x220>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d03b      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a70      	ldr	r2, [pc, #448]	@ (8001768 <HAL_DMA_Abort+0x224>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d036      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6e      	ldr	r2, [pc, #440]	@ (800176c <HAL_DMA_Abort+0x228>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d031      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001770 <HAL_DMA_Abort+0x22c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d02c      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001774 <HAL_DMA_Abort+0x230>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d027      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6a      	ldr	r2, [pc, #424]	@ (8001778 <HAL_DMA_Abort+0x234>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d022      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a68      	ldr	r2, [pc, #416]	@ (800177c <HAL_DMA_Abort+0x238>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01d      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a67      	ldr	r2, [pc, #412]	@ (8001780 <HAL_DMA_Abort+0x23c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d018      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a65      	ldr	r2, [pc, #404]	@ (8001784 <HAL_DMA_Abort+0x240>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a64      	ldr	r2, [pc, #400]	@ (8001788 <HAL_DMA_Abort+0x244>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d00e      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a62      	ldr	r2, [pc, #392]	@ (800178c <HAL_DMA_Abort+0x248>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d009      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a61      	ldr	r2, [pc, #388]	@ (8001790 <HAL_DMA_Abort+0x24c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d004      	beq.n	800161a <HAL_DMA_Abort+0xd6>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a5f      	ldr	r2, [pc, #380]	@ (8001794 <HAL_DMA_Abort+0x250>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_DMA_Abort+0xda>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_DMA_Abort+0xdc>
 800161e:	2300      	movs	r3, #0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 021e 	bic.w	r2, r2, #30
 8001632:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001642:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	e00a      	b.n	8001662 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020e 	bic.w	r2, r2, #14
 800165a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a3c      	ldr	r2, [pc, #240]	@ (8001758 <HAL_DMA_Abort+0x214>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d072      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a3a      	ldr	r2, [pc, #232]	@ (800175c <HAL_DMA_Abort+0x218>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d06d      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a39      	ldr	r2, [pc, #228]	@ (8001760 <HAL_DMA_Abort+0x21c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d068      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a37      	ldr	r2, [pc, #220]	@ (8001764 <HAL_DMA_Abort+0x220>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d063      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a36      	ldr	r2, [pc, #216]	@ (8001768 <HAL_DMA_Abort+0x224>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d05e      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a34      	ldr	r2, [pc, #208]	@ (800176c <HAL_DMA_Abort+0x228>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d059      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a33      	ldr	r2, [pc, #204]	@ (8001770 <HAL_DMA_Abort+0x22c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d054      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a31      	ldr	r2, [pc, #196]	@ (8001774 <HAL_DMA_Abort+0x230>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d04f      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <HAL_DMA_Abort+0x234>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d04a      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2e      	ldr	r2, [pc, #184]	@ (800177c <HAL_DMA_Abort+0x238>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d045      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001780 <HAL_DMA_Abort+0x23c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d040      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001784 <HAL_DMA_Abort+0x240>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d03b      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a2a      	ldr	r2, [pc, #168]	@ (8001788 <HAL_DMA_Abort+0x244>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d036      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a28      	ldr	r2, [pc, #160]	@ (800178c <HAL_DMA_Abort+0x248>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d031      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a27      	ldr	r2, [pc, #156]	@ (8001790 <HAL_DMA_Abort+0x24c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d02c      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_DMA_Abort+0x250>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d027      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a24      	ldr	r2, [pc, #144]	@ (8001798 <HAL_DMA_Abort+0x254>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d022      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a22      	ldr	r2, [pc, #136]	@ (800179c <HAL_DMA_Abort+0x258>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01d      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <HAL_DMA_Abort+0x25c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d018      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1f      	ldr	r2, [pc, #124]	@ (80017a4 <HAL_DMA_Abort+0x260>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_DMA_Abort+0x264>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d00e      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <HAL_DMA_Abort+0x268>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d009      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <HAL_DMA_Abort+0x26c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d004      	beq.n	8001752 <HAL_DMA_Abort+0x20e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <HAL_DMA_Abort+0x270>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d132      	bne.n	80017b8 <HAL_DMA_Abort+0x274>
 8001752:	2301      	movs	r3, #1
 8001754:	e031      	b.n	80017ba <HAL_DMA_Abort+0x276>
 8001756:	bf00      	nop
 8001758:	40020010 	.word	0x40020010
 800175c:	40020028 	.word	0x40020028
 8001760:	40020040 	.word	0x40020040
 8001764:	40020058 	.word	0x40020058
 8001768:	40020070 	.word	0x40020070
 800176c:	40020088 	.word	0x40020088
 8001770:	400200a0 	.word	0x400200a0
 8001774:	400200b8 	.word	0x400200b8
 8001778:	40020410 	.word	0x40020410
 800177c:	40020428 	.word	0x40020428
 8001780:	40020440 	.word	0x40020440
 8001784:	40020458 	.word	0x40020458
 8001788:	40020470 	.word	0x40020470
 800178c:	40020488 	.word	0x40020488
 8001790:	400204a0 	.word	0x400204a0
 8001794:	400204b8 	.word	0x400204b8
 8001798:	58025408 	.word	0x58025408
 800179c:	5802541c 	.word	0x5802541c
 80017a0:	58025430 	.word	0x58025430
 80017a4:	58025444 	.word	0x58025444
 80017a8:	58025458 	.word	0x58025458
 80017ac:	5802546c 	.word	0x5802546c
 80017b0:	58025480 	.word	0x58025480
 80017b4:	58025494 	.word	0x58025494
 80017b8:	2300      	movs	r3, #0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d007      	beq.n	80017ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001988 <HAL_DMA_Abort+0x444>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04a      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a6b      	ldr	r2, [pc, #428]	@ (800198c <HAL_DMA_Abort+0x448>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d045      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001990 <HAL_DMA_Abort+0x44c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d040      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a68      	ldr	r2, [pc, #416]	@ (8001994 <HAL_DMA_Abort+0x450>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d03b      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a67      	ldr	r2, [pc, #412]	@ (8001998 <HAL_DMA_Abort+0x454>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d036      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a65      	ldr	r2, [pc, #404]	@ (800199c <HAL_DMA_Abort+0x458>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d031      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a64      	ldr	r2, [pc, #400]	@ (80019a0 <HAL_DMA_Abort+0x45c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d02c      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a62      	ldr	r2, [pc, #392]	@ (80019a4 <HAL_DMA_Abort+0x460>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d027      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a61      	ldr	r2, [pc, #388]	@ (80019a8 <HAL_DMA_Abort+0x464>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d022      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a5f      	ldr	r2, [pc, #380]	@ (80019ac <HAL_DMA_Abort+0x468>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01d      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a5e      	ldr	r2, [pc, #376]	@ (80019b0 <HAL_DMA_Abort+0x46c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d018      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a5c      	ldr	r2, [pc, #368]	@ (80019b4 <HAL_DMA_Abort+0x470>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5b      	ldr	r2, [pc, #364]	@ (80019b8 <HAL_DMA_Abort+0x474>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00e      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a59      	ldr	r2, [pc, #356]	@ (80019bc <HAL_DMA_Abort+0x478>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d009      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a58      	ldr	r2, [pc, #352]	@ (80019c0 <HAL_DMA_Abort+0x47c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d004      	beq.n	800186e <HAL_DMA_Abort+0x32a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a56      	ldr	r2, [pc, #344]	@ (80019c4 <HAL_DMA_Abort+0x480>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d108      	bne.n	8001880 <HAL_DMA_Abort+0x33c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e007      	b.n	8001890 <HAL_DMA_Abort+0x34c>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001890:	e013      	b.n	80018ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001892:	f7ff fcf3 	bl	800127c <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b05      	cmp	r3, #5
 800189e:	d90c      	bls.n	80018ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e12d      	b.n	8001b16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e5      	bne.n	8001892 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001988 <HAL_DMA_Abort+0x444>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d04a      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2d      	ldr	r2, [pc, #180]	@ (800198c <HAL_DMA_Abort+0x448>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d045      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2c      	ldr	r2, [pc, #176]	@ (8001990 <HAL_DMA_Abort+0x44c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d040      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001994 <HAL_DMA_Abort+0x450>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d03b      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a29      	ldr	r2, [pc, #164]	@ (8001998 <HAL_DMA_Abort+0x454>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d036      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a27      	ldr	r2, [pc, #156]	@ (800199c <HAL_DMA_Abort+0x458>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d031      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a26      	ldr	r2, [pc, #152]	@ (80019a0 <HAL_DMA_Abort+0x45c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d02c      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a24      	ldr	r2, [pc, #144]	@ (80019a4 <HAL_DMA_Abort+0x460>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d027      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <HAL_DMA_Abort+0x464>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d022      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <HAL_DMA_Abort+0x468>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01d      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a20      	ldr	r2, [pc, #128]	@ (80019b0 <HAL_DMA_Abort+0x46c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d018      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1e      	ldr	r2, [pc, #120]	@ (80019b4 <HAL_DMA_Abort+0x470>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1d      	ldr	r2, [pc, #116]	@ (80019b8 <HAL_DMA_Abort+0x474>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00e      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1b      	ldr	r2, [pc, #108]	@ (80019bc <HAL_DMA_Abort+0x478>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d009      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1a      	ldr	r2, [pc, #104]	@ (80019c0 <HAL_DMA_Abort+0x47c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_DMA_Abort+0x422>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <HAL_DMA_Abort+0x480>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_DMA_Abort+0x426>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_DMA_Abort+0x428>
 800196a:	2300      	movs	r3, #0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d02b      	beq.n	80019c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	223f      	movs	r2, #63	@ 0x3f
 8001980:	409a      	lsls	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	e02a      	b.n	80019de <HAL_DMA_Abort+0x49a>
 8001988:	40020010 	.word	0x40020010
 800198c:	40020028 	.word	0x40020028
 8001990:	40020040 	.word	0x40020040
 8001994:	40020058 	.word	0x40020058
 8001998:	40020070 	.word	0x40020070
 800199c:	40020088 	.word	0x40020088
 80019a0:	400200a0 	.word	0x400200a0
 80019a4:	400200b8 	.word	0x400200b8
 80019a8:	40020410 	.word	0x40020410
 80019ac:	40020428 	.word	0x40020428
 80019b0:	40020440 	.word	0x40020440
 80019b4:	40020458 	.word	0x40020458
 80019b8:	40020470 	.word	0x40020470
 80019bc:	40020488 	.word	0x40020488
 80019c0:	400204a0 	.word	0x400204a0
 80019c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2201      	movs	r2, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001b20 <HAL_DMA_Abort+0x5dc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d072      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001b24 <HAL_DMA_Abort+0x5e0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d06d      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b28 <HAL_DMA_Abort+0x5e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d068      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a4a      	ldr	r2, [pc, #296]	@ (8001b2c <HAL_DMA_Abort+0x5e8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d063      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a49      	ldr	r2, [pc, #292]	@ (8001b30 <HAL_DMA_Abort+0x5ec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d05e      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a47      	ldr	r2, [pc, #284]	@ (8001b34 <HAL_DMA_Abort+0x5f0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d059      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a46      	ldr	r2, [pc, #280]	@ (8001b38 <HAL_DMA_Abort+0x5f4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d054      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a44      	ldr	r2, [pc, #272]	@ (8001b3c <HAL_DMA_Abort+0x5f8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d04f      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a43      	ldr	r2, [pc, #268]	@ (8001b40 <HAL_DMA_Abort+0x5fc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d04a      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a41      	ldr	r2, [pc, #260]	@ (8001b44 <HAL_DMA_Abort+0x600>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d045      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a40      	ldr	r2, [pc, #256]	@ (8001b48 <HAL_DMA_Abort+0x604>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d040      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3e      	ldr	r2, [pc, #248]	@ (8001b4c <HAL_DMA_Abort+0x608>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d03b      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b50 <HAL_DMA_Abort+0x60c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d036      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a3b      	ldr	r2, [pc, #236]	@ (8001b54 <HAL_DMA_Abort+0x610>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d031      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b58 <HAL_DMA_Abort+0x614>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d02c      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a38      	ldr	r2, [pc, #224]	@ (8001b5c <HAL_DMA_Abort+0x618>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d027      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a37      	ldr	r2, [pc, #220]	@ (8001b60 <HAL_DMA_Abort+0x61c>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d022      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a35      	ldr	r2, [pc, #212]	@ (8001b64 <HAL_DMA_Abort+0x620>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01d      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a34      	ldr	r2, [pc, #208]	@ (8001b68 <HAL_DMA_Abort+0x624>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d018      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a32      	ldr	r2, [pc, #200]	@ (8001b6c <HAL_DMA_Abort+0x628>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a31      	ldr	r2, [pc, #196]	@ (8001b70 <HAL_DMA_Abort+0x62c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00e      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8001b74 <HAL_DMA_Abort+0x630>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d009      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a2e      	ldr	r2, [pc, #184]	@ (8001b78 <HAL_DMA_Abort+0x634>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d004      	beq.n	8001ace <HAL_DMA_Abort+0x58a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b7c <HAL_DMA_Abort+0x638>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_DMA_Abort+0x58e>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_DMA_Abort+0x590>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ae0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001b02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020010 	.word	0x40020010
 8001b24:	40020028 	.word	0x40020028
 8001b28:	40020040 	.word	0x40020040
 8001b2c:	40020058 	.word	0x40020058
 8001b30:	40020070 	.word	0x40020070
 8001b34:	40020088 	.word	0x40020088
 8001b38:	400200a0 	.word	0x400200a0
 8001b3c:	400200b8 	.word	0x400200b8
 8001b40:	40020410 	.word	0x40020410
 8001b44:	40020428 	.word	0x40020428
 8001b48:	40020440 	.word	0x40020440
 8001b4c:	40020458 	.word	0x40020458
 8001b50:	40020470 	.word	0x40020470
 8001b54:	40020488 	.word	0x40020488
 8001b58:	400204a0 	.word	0x400204a0
 8001b5c:	400204b8 	.word	0x400204b8
 8001b60:	58025408 	.word	0x58025408
 8001b64:	5802541c 	.word	0x5802541c
 8001b68:	58025430 	.word	0x58025430
 8001b6c:	58025444 	.word	0x58025444
 8001b70:	58025458 	.word	0x58025458
 8001b74:	5802546c 	.word	0x5802546c
 8001b78:	58025480 	.word	0x58025480
 8001b7c:	58025494 	.word	0x58025494

08001b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e237      	b.n	8002002 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d004      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2280      	movs	r2, #128	@ 0x80
 8001ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e22c      	b.n	8002002 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a5c      	ldr	r2, [pc, #368]	@ (8001d20 <HAL_DMA_Abort_IT+0x1a0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d04a      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d24 <HAL_DMA_Abort_IT+0x1a4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d045      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a59      	ldr	r2, [pc, #356]	@ (8001d28 <HAL_DMA_Abort_IT+0x1a8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d040      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a58      	ldr	r2, [pc, #352]	@ (8001d2c <HAL_DMA_Abort_IT+0x1ac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d03b      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a56      	ldr	r2, [pc, #344]	@ (8001d30 <HAL_DMA_Abort_IT+0x1b0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d036      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a55      	ldr	r2, [pc, #340]	@ (8001d34 <HAL_DMA_Abort_IT+0x1b4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d031      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a53      	ldr	r2, [pc, #332]	@ (8001d38 <HAL_DMA_Abort_IT+0x1b8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d02c      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_DMA_Abort_IT+0x1bc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d027      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <HAL_DMA_Abort_IT+0x1c0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d022      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_DMA_Abort_IT+0x1c4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d01d      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	@ (8001d48 <HAL_DMA_Abort_IT+0x1c8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d018      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001d4c <HAL_DMA_Abort_IT+0x1cc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a4a      	ldr	r2, [pc, #296]	@ (8001d50 <HAL_DMA_Abort_IT+0x1d0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00e      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a49      	ldr	r2, [pc, #292]	@ (8001d54 <HAL_DMA_Abort_IT+0x1d4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d009      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a47      	ldr	r2, [pc, #284]	@ (8001d58 <HAL_DMA_Abort_IT+0x1d8>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a46      	ldr	r2, [pc, #280]	@ (8001d5c <HAL_DMA_Abort_IT+0x1dc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_DMA_Abort_IT+0xcc>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_DMA_Abort_IT+0xce>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8086 	beq.w	8001d60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2204      	movs	r2, #4
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2f      	ldr	r2, [pc, #188]	@ (8001d20 <HAL_DMA_Abort_IT+0x1a0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d04a      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d24 <HAL_DMA_Abort_IT+0x1a4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d045      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	@ (8001d28 <HAL_DMA_Abort_IT+0x1a8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d040      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d2c <HAL_DMA_Abort_IT+0x1ac>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d03b      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a29      	ldr	r2, [pc, #164]	@ (8001d30 <HAL_DMA_Abort_IT+0x1b0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d036      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a28      	ldr	r2, [pc, #160]	@ (8001d34 <HAL_DMA_Abort_IT+0x1b4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d031      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a26      	ldr	r2, [pc, #152]	@ (8001d38 <HAL_DMA_Abort_IT+0x1b8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02c      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a25      	ldr	r2, [pc, #148]	@ (8001d3c <HAL_DMA_Abort_IT+0x1bc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d027      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <HAL_DMA_Abort_IT+0x1c0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d022      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a22      	ldr	r2, [pc, #136]	@ (8001d44 <HAL_DMA_Abort_IT+0x1c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01d      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a20      	ldr	r2, [pc, #128]	@ (8001d48 <HAL_DMA_Abort_IT+0x1c8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d018      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1f      	ldr	r2, [pc, #124]	@ (8001d4c <HAL_DMA_Abort_IT+0x1cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_DMA_Abort_IT+0x1d0>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <HAL_DMA_Abort_IT+0x1d4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1a      	ldr	r2, [pc, #104]	@ (8001d58 <HAL_DMA_Abort_IT+0x1d8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_DMA_Abort_IT+0x17c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <HAL_DMA_Abort_IT+0x1dc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d108      	bne.n	8001d0e <HAL_DMA_Abort_IT+0x18e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e178      	b.n	8002000 <HAL_DMA_Abort_IT+0x480>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e16f      	b.n	8002000 <HAL_DMA_Abort_IT+0x480>
 8001d20:	40020010 	.word	0x40020010
 8001d24:	40020028 	.word	0x40020028
 8001d28:	40020040 	.word	0x40020040
 8001d2c:	40020058 	.word	0x40020058
 8001d30:	40020070 	.word	0x40020070
 8001d34:	40020088 	.word	0x40020088
 8001d38:	400200a0 	.word	0x400200a0
 8001d3c:	400200b8 	.word	0x400200b8
 8001d40:	40020410 	.word	0x40020410
 8001d44:	40020428 	.word	0x40020428
 8001d48:	40020440 	.word	0x40020440
 8001d4c:	40020458 	.word	0x40020458
 8001d50:	40020470 	.word	0x40020470
 8001d54:	40020488 	.word	0x40020488
 8001d58:	400204a0 	.word	0x400204a0
 8001d5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020e 	bic.w	r2, r2, #14
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a6c      	ldr	r2, [pc, #432]	@ (8001f28 <HAL_DMA_Abort_IT+0x3a8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d04a      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f2c <HAL_DMA_Abort_IT+0x3ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d045      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a69      	ldr	r2, [pc, #420]	@ (8001f30 <HAL_DMA_Abort_IT+0x3b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d040      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a68      	ldr	r2, [pc, #416]	@ (8001f34 <HAL_DMA_Abort_IT+0x3b4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d03b      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a66      	ldr	r2, [pc, #408]	@ (8001f38 <HAL_DMA_Abort_IT+0x3b8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d036      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a65      	ldr	r2, [pc, #404]	@ (8001f3c <HAL_DMA_Abort_IT+0x3bc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d031      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a63      	ldr	r2, [pc, #396]	@ (8001f40 <HAL_DMA_Abort_IT+0x3c0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02c      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a62      	ldr	r2, [pc, #392]	@ (8001f44 <HAL_DMA_Abort_IT+0x3c4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d027      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a60      	ldr	r2, [pc, #384]	@ (8001f48 <HAL_DMA_Abort_IT+0x3c8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5f      	ldr	r2, [pc, #380]	@ (8001f4c <HAL_DMA_Abort_IT+0x3cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01d      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f50 <HAL_DMA_Abort_IT+0x3d0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f54 <HAL_DMA_Abort_IT+0x3d4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a5a      	ldr	r2, [pc, #360]	@ (8001f58 <HAL_DMA_Abort_IT+0x3d8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a59      	ldr	r2, [pc, #356]	@ (8001f5c <HAL_DMA_Abort_IT+0x3dc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a57      	ldr	r2, [pc, #348]	@ (8001f60 <HAL_DMA_Abort_IT+0x3e0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Abort_IT+0x290>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a56      	ldr	r2, [pc, #344]	@ (8001f64 <HAL_DMA_Abort_IT+0x3e4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <HAL_DMA_Abort_IT+0x2a2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e007      	b.n	8001e32 <HAL_DMA_Abort_IT+0x2b2>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	@ (8001f28 <HAL_DMA_Abort_IT+0x3a8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d072      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a3a      	ldr	r2, [pc, #232]	@ (8001f2c <HAL_DMA_Abort_IT+0x3ac>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d06d      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a39      	ldr	r2, [pc, #228]	@ (8001f30 <HAL_DMA_Abort_IT+0x3b0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d068      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <HAL_DMA_Abort_IT+0x3b4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d063      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a36      	ldr	r2, [pc, #216]	@ (8001f38 <HAL_DMA_Abort_IT+0x3b8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d05e      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_DMA_Abort_IT+0x3bc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d059      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a33      	ldr	r2, [pc, #204]	@ (8001f40 <HAL_DMA_Abort_IT+0x3c0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d054      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <HAL_DMA_Abort_IT+0x3c4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d04f      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a30      	ldr	r2, [pc, #192]	@ (8001f48 <HAL_DMA_Abort_IT+0x3c8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d04a      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <HAL_DMA_Abort_IT+0x3cc>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d045      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <HAL_DMA_Abort_IT+0x3d0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d040      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f54 <HAL_DMA_Abort_IT+0x3d4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d03b      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_DMA_Abort_IT+0x3d8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d036      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <HAL_DMA_Abort_IT+0x3dc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d031      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_DMA_Abort_IT+0x3e0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d02c      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	@ (8001f64 <HAL_DMA_Abort_IT+0x3e4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d027      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <HAL_DMA_Abort_IT+0x3e8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d022      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_DMA_Abort_IT+0x3ec>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01d      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_DMA_Abort_IT+0x3f0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d018      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f74 <HAL_DMA_Abort_IT+0x3f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d013      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1e      	ldr	r2, [pc, #120]	@ (8001f78 <HAL_DMA_Abort_IT+0x3f8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00e      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1c      	ldr	r2, [pc, #112]	@ (8001f7c <HAL_DMA_Abort_IT+0x3fc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <HAL_DMA_Abort_IT+0x400>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d004      	beq.n	8001f22 <HAL_DMA_Abort_IT+0x3a2>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	@ (8001f84 <HAL_DMA_Abort_IT+0x404>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d132      	bne.n	8001f88 <HAL_DMA_Abort_IT+0x408>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e031      	b.n	8001f8a <HAL_DMA_Abort_IT+0x40a>
 8001f26:	bf00      	nop
 8001f28:	40020010 	.word	0x40020010
 8001f2c:	40020028 	.word	0x40020028
 8001f30:	40020040 	.word	0x40020040
 8001f34:	40020058 	.word	0x40020058
 8001f38:	40020070 	.word	0x40020070
 8001f3c:	40020088 	.word	0x40020088
 8001f40:	400200a0 	.word	0x400200a0
 8001f44:	400200b8 	.word	0x400200b8
 8001f48:	40020410 	.word	0x40020410
 8001f4c:	40020428 	.word	0x40020428
 8001f50:	40020440 	.word	0x40020440
 8001f54:	40020458 	.word	0x40020458
 8001f58:	40020470 	.word	0x40020470
 8001f5c:	40020488 	.word	0x40020488
 8001f60:	400204a0 	.word	0x400204a0
 8001f64:	400204b8 	.word	0x400204b8
 8001f68:	58025408 	.word	0x58025408
 8001f6c:	5802541c 	.word	0x5802541c
 8001f70:	58025430 	.word	0x58025430
 8001f74:	58025444 	.word	0x58025444
 8001f78:	58025458 	.word	0x58025458
 8001f7c:	5802546c 	.word	0x5802546c
 8001f80:	58025480 	.word	0x58025480
 8001f84:	58025494 	.word	0x58025494
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d028      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001fde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800201a:	4b86      	ldr	r3, [pc, #536]	@ (8002234 <HAL_GPIO_Init+0x228>)
 800201c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800201e:	e18c      	b.n	800233a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 817e 	beq.w	8002334 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d005      	beq.n	8002050 <HAL_GPIO_Init+0x44>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d130      	bne.n	80020b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002086:	2201      	movs	r2, #1
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 0201 	and.w	r2, r3, #1
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d017      	beq.n	80020ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d123      	bne.n	8002142 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	69b9      	ldr	r1, [r7, #24]
 800213e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0203 	and.w	r2, r3, #3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80d8 	beq.w	8002334 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002184:	4b2c      	ldr	r3, [pc, #176]	@ (8002238 <HAL_GPIO_Init+0x22c>)
 8002186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800218a:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <HAL_GPIO_Init+0x22c>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002194:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <HAL_GPIO_Init+0x22c>)
 8002196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a26      	ldr	r2, [pc, #152]	@ (800223c <HAL_GPIO_Init+0x230>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002240 <HAL_GPIO_Init+0x234>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d04a      	beq.n	8002264 <HAL_GPIO_Init+0x258>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002244 <HAL_GPIO_Init+0x238>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x222>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002248 <HAL_GPIO_Init+0x23c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d025      	beq.n	800222a <HAL_GPIO_Init+0x21e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1a      	ldr	r2, [pc, #104]	@ (800224c <HAL_GPIO_Init+0x240>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01f      	beq.n	8002226 <HAL_GPIO_Init+0x21a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <HAL_GPIO_Init+0x244>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x216>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a18      	ldr	r2, [pc, #96]	@ (8002254 <HAL_GPIO_Init+0x248>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x212>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a17      	ldr	r2, [pc, #92]	@ (8002258 <HAL_GPIO_Init+0x24c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x20e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a16      	ldr	r2, [pc, #88]	@ (800225c <HAL_GPIO_Init+0x250>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x20a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a15      	ldr	r2, [pc, #84]	@ (8002260 <HAL_GPIO_Init+0x254>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x206>
 800220e:	2309      	movs	r3, #9
 8002210:	e029      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 8002212:	230a      	movs	r3, #10
 8002214:	e027      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 8002216:	2307      	movs	r3, #7
 8002218:	e025      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 800221a:	2306      	movs	r3, #6
 800221c:	e023      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 800221e:	2305      	movs	r3, #5
 8002220:	e021      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 8002222:	2304      	movs	r3, #4
 8002224:	e01f      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 8002226:	2303      	movs	r3, #3
 8002228:	e01d      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 800222a:	2302      	movs	r3, #2
 800222c:	e01b      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 800222e:	2301      	movs	r3, #1
 8002230:	e019      	b.n	8002266 <HAL_GPIO_Init+0x25a>
 8002232:	bf00      	nop
 8002234:	58000080 	.word	0x58000080
 8002238:	58024400 	.word	0x58024400
 800223c:	58000400 	.word	0x58000400
 8002240:	58020000 	.word	0x58020000
 8002244:	58020400 	.word	0x58020400
 8002248:	58020800 	.word	0x58020800
 800224c:	58020c00 	.word	0x58020c00
 8002250:	58021000 	.word	0x58021000
 8002254:	58021400 	.word	0x58021400
 8002258:	58021800 	.word	0x58021800
 800225c:	58021c00 	.word	0x58021c00
 8002260:	58022400 	.word	0x58022400
 8002264:	2300      	movs	r3, #0
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	f002 0203 	and.w	r2, r2, #3
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	4093      	lsls	r3, r2
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002276:	4938      	ldr	r1, [pc, #224]	@ (8002358 <HAL_GPIO_Init+0x34c>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3301      	adds	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	f47f ae6b 	bne.w	8002020 <HAL_GPIO_Init+0x14>
  }
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	3724      	adds	r7, #36	@ 0x24
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	58000400 	.word	0x58000400

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002398:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d00a      	beq.n	80023ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01f      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e01d      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	490f      	ldr	r1, [pc, #60]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023ca:	f7fe ff57 	bl	800127c <HAL_GetTick>
 80023ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023d0:	e009      	b.n	80023e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023d2:	f7fe ff53 	bl	800127c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e0:	d901      	bls.n	80023e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e007      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_PWREx_ConfigSupply+0x70>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f2:	d1ee      	bne.n	80023d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	58024800 	.word	0x58024800

08002404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	@ 0x30
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e3c8      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8087 	beq.w	8002532 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002424:	4b88      	ldr	r3, [pc, #544]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800242e:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002436:	2b10      	cmp	r3, #16
 8002438:	d007      	beq.n	800244a <HAL_RCC_OscConfig+0x46>
 800243a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243c:	2b18      	cmp	r3, #24
 800243e:	d110      	bne.n	8002462 <HAL_RCC_OscConfig+0x5e>
 8002440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d10b      	bne.n	8002462 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244a:	4b7f      	ldr	r3, [pc, #508]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d06c      	beq.n	8002530 <HAL_RCC_OscConfig+0x12c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d168      	bne.n	8002530 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e3a2      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x76>
 800246c:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a75      	ldr	r2, [pc, #468]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e02e      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x98>
 8002482:	4b71      	ldr	r3, [pc, #452]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a70      	ldr	r2, [pc, #448]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b6e      	ldr	r3, [pc, #440]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6d      	ldr	r2, [pc, #436]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0xbc>
 80024a6:	4b68      	ldr	r3, [pc, #416]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a67      	ldr	r2, [pc, #412]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b65      	ldr	r3, [pc, #404]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a64      	ldr	r2, [pc, #400]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 80024c0:	4b61      	ldr	r3, [pc, #388]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a60      	ldr	r2, [pc, #384]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fecc 	bl	800127c <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7fe fec8 	bl	800127c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	@ 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e356      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fa:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe4>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe feb8 	bl	800127c <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe feb4 	bl	800127c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e342      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002522:	4b49      	ldr	r3, [pc, #292]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x10c>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 808c 	beq.w	8002658 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002540:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002548:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254a:	4b3f      	ldr	r3, [pc, #252]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_RCC_OscConfig+0x162>
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b18      	cmp	r3, #24
 800255a:	d137      	bne.n	80025cc <HAL_RCC_OscConfig+0x1c8>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d132      	bne.n	80025cc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x17a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e314      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800257e:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0219 	bic.w	r2, r3, #25
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	492f      	ldr	r1, [pc, #188]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fe74 	bl	800127c <HAL_GetTick>
 8002594:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe fe70 	bl	800127c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e2fe      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025aa:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	4920      	ldr	r1, [pc, #128]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ca:	e045      	b.n	8002658 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d026      	beq.n	8002622 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0219 	bic.w	r2, r3, #25
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4919      	ldr	r1, [pc, #100]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fe49 	bl	800127c <HAL_GetTick>
 80025ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fe45 	bl	800127c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e2d3      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	490b      	ldr	r1, [pc, #44]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 8002620:	e01a      	b.n	8002658 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a08      	ldr	r2, [pc, #32]	@ (8002648 <HAL_RCC_OscConfig+0x244>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fe25 	bl	800127c <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002636:	f7fe fe21 	bl	800127c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d903      	bls.n	800264c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e2af      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
 8002648:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800264c:	4b96      	ldr	r3, [pc, #600]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d06a      	beq.n	800273a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002664:	4b90      	ldr	r3, [pc, #576]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800266c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800266e:	4b8e      	ldr	r3, [pc, #568]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b08      	cmp	r3, #8
 8002678:	d007      	beq.n	800268a <HAL_RCC_OscConfig+0x286>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b18      	cmp	r3, #24
 800267e:	d11b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2b4>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d116      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800268a:	4b87      	ldr	r3, [pc, #540]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_RCC_OscConfig+0x29e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	2b80      	cmp	r3, #128	@ 0x80
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e282      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a2:	4b81      	ldr	r3, [pc, #516]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	497d      	ldr	r1, [pc, #500]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b6:	e040      	b.n	800273a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d023      	beq.n	8002708 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026c0:	4b79      	ldr	r3, [pc, #484]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a78      	ldr	r2, [pc, #480]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80026c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fdd6 	bl	800127c <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026d4:	f7fe fdd2 	bl	800127c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e260      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026e6:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f2:	4b6d      	ldr	r3, [pc, #436]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	4969      	ldr	r1, [pc, #420]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	60cb      	str	r3, [r1, #12]
 8002706:	e018      	b.n	800273a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002708:	4b67      	ldr	r3, [pc, #412]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a66      	ldr	r2, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800270e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fdb2 	bl	800127c <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800271c:	f7fe fdae 	bl	800127c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e23c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800272e:	4b5e      	ldr	r3, [pc, #376]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d036      	beq.n	80027b4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d019      	beq.n	8002782 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274e:	4b56      	ldr	r3, [pc, #344]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002752:	4a55      	ldr	r2, [pc, #340]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7fe fd8f 	bl	800127c <HAL_GetTick>
 800275e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002762:	f7fe fd8b 	bl	800127c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e219      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002774:	4b4c      	ldr	r3, [pc, #304]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x35e>
 8002780:	e018      	b.n	80027b4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002782:	4b49      	ldr	r3, [pc, #292]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002786:	4a48      	ldr	r2, [pc, #288]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe fd75 	bl	800127c <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002796:	f7fe fd71 	bl	800127c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1ff      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027a8:	4b3f      	ldr	r3, [pc, #252]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d036      	beq.n	800282e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d019      	beq.n	80027fc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c8:	4b37      	ldr	r3, [pc, #220]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a36      	ldr	r2, [pc, #216]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80027ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027d4:	f7fe fd52 	bl	800127c <HAL_GetTick>
 80027d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027dc:	f7fe fd4e 	bl	800127c <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1dc      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027ee:	4b2e      	ldr	r3, [pc, #184]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x3d8>
 80027fa:	e018      	b.n	800282e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fc:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a29      	ldr	r2, [pc, #164]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002806:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002808:	f7fe fd38 	bl	800127c <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002810:	f7fe fd34 	bl	800127c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e1c2      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002822:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8086 	beq.w	8002948 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x4a8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a1a      	ldr	r2, [pc, #104]	@ (80028ac <HAL_RCC_OscConfig+0x4a8>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002846:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002848:	f7fe fd18 	bl	800127c <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002850:	f7fe fd14 	bl	800127c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	@ 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1a2      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <HAL_RCC_OscConfig+0x4a8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d106      	bne.n	8002884 <HAL_RCC_OscConfig+0x480>
 8002876:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6713      	str	r3, [r2, #112]	@ 0x70
 8002882:	e032      	b.n	80028ea <HAL_RCC_OscConfig+0x4e6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4ac>
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a05      	ldr	r2, [pc, #20]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	4a02      	ldr	r2, [pc, #8]	@ (80028a8 <HAL_RCC_OscConfig+0x4a4>)
 800289e:	f023 0304 	bic.w	r3, r3, #4
 80028a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a4:	e021      	b.n	80028ea <HAL_RCC_OscConfig+0x4e6>
 80028a6:	bf00      	nop
 80028a8:	58024400 	.word	0x58024400
 80028ac:	58024800 	.word	0x58024800
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4ce>
 80028b8:	4b83      	ldr	r3, [pc, #524]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	4a82      	ldr	r2, [pc, #520]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c4:	4b80      	ldr	r3, [pc, #512]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d0:	e00b      	b.n	80028ea <HAL_RCC_OscConfig+0x4e6>
 80028d2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028de:	4b7a      	ldr	r3, [pc, #488]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	4a79      	ldr	r2, [pc, #484]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d015      	beq.n	800291e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fcc3 	bl	800127c <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe fcbf 	bl	800127c <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e14b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002910:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ee      	beq.n	80028fa <HAL_RCC_OscConfig+0x4f6>
 800291c:	e014      	b.n	8002948 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fcad 	bl	800127c <HAL_GetTick>
 8002922:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fca9 	bl	800127c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e135      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800293c:	4b62      	ldr	r3, [pc, #392]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ee      	bne.n	8002926 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 812a 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002952:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800295a:	2b18      	cmp	r3, #24
 800295c:	f000 80ba 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	2b02      	cmp	r3, #2
 8002966:	f040 8095 	bne.w	8002a94 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b57      	ldr	r3, [pc, #348]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a56      	ldr	r2, [pc, #344]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002970:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002976:	f7fe fc81 	bl	800127c <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297e:	f7fe fc7d 	bl	800127c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e10b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002990:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 800299e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a0:	4b4a      	ldr	r3, [pc, #296]	@ (8002acc <HAL_RCC_OscConfig+0x6c8>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	430a      	orrs	r2, r1
 80029b0:	4945      	ldr	r1, [pc, #276]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	628b      	str	r3, [r1, #40]	@ 0x28
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c4:	3b01      	subs	r3, #1
 80029c6:	025b      	lsls	r3, r3, #9
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d0:	3b01      	subs	r3, #1
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029de:	3b01      	subs	r3, #1
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029e6:	4938      	ldr	r1, [pc, #224]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029ec:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	4a35      	ldr	r2, [pc, #212]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80029f2:	f023 0301 	bic.w	r3, r3, #1
 80029f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029f8:	4b33      	ldr	r3, [pc, #204]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 80029fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029fc:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_RCC_OscConfig+0x6cc>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a04:	00d2      	lsls	r2, r2, #3
 8002a06:	4930      	ldr	r1, [pc, #192]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	f023 020c 	bic.w	r2, r3, #12
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	492b      	ldr	r1, [pc, #172]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	f023 0202 	bic.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	4927      	ldr	r1, [pc, #156]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a30:	4b25      	ldr	r3, [pc, #148]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	4a24      	ldr	r2, [pc, #144]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	4a21      	ldr	r2, [pc, #132]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b19      	ldr	r3, [pc, #100]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a18      	ldr	r2, [pc, #96]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fc06 	bl	800127c <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fc02 	bl	800127c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e090      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x670>
 8002a92:	e088      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002a9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fbec 	bl	800127c <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fbe8 	bl	800127c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e076      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aba:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <HAL_RCC_OscConfig+0x6c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x6a4>
 8002ac6:	e06e      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a2>
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	fffffc0c 	.word	0xfffffc0c
 8002ad0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ad4:	4b36      	ldr	r3, [pc, #216]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ada:	4b35      	ldr	r3, [pc, #212]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d031      	beq.n	8002b4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d12a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d122      	bne.n	8002b4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d11a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0a5b      	lsrs	r3, r3, #9
 8002b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d111      	bne.n	8002b4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	0e1b      	lsrs	r3, r3, #24
 8002b3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e02b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d01f      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	4a11      	ldr	r2, [pc, #68]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b72:	f7fe fb83 	bl	800127c <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b78:	bf00      	nop
 8002b7a:	f7fe fb7f 	bl	800127c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d0f9      	beq.n	8002b7a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_RCC_OscConfig+0x7b0>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b92:	00d2      	lsls	r2, r2, #3
 8002b94:	4906      	ldr	r1, [pc, #24]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b9a:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	4a04      	ldr	r2, [pc, #16]	@ (8002bb0 <HAL_RCC_OscConfig+0x7ac>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3730      	adds	r7, #48	@ 0x30
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	ffff0007 	.word	0xffff0007

08002bb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e19c      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b8a      	ldr	r3, [pc, #552]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b87      	ldr	r3, [pc, #540]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 020f 	bic.w	r2, r3, #15
 8002be2:	4985      	ldr	r1, [pc, #532]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b83      	ldr	r3, [pc, #524]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e184      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d908      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c18:	4b78      	ldr	r3, [pc, #480]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	4975      	ldr	r1, [pc, #468]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	4b70      	ldr	r3, [pc, #448]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d908      	bls.n	8002c58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c46:	4b6d      	ldr	r3, [pc, #436]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	496a      	ldr	r1, [pc, #424]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699a      	ldr	r2, [r3, #24]
 8002c68:	4b64      	ldr	r3, [pc, #400]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d908      	bls.n	8002c86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c74:	4b61      	ldr	r3, [pc, #388]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	495e      	ldr	r1, [pc, #376]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	4b59      	ldr	r3, [pc, #356]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d908      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ca2:	4b56      	ldr	r3, [pc, #344]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4953      	ldr	r1, [pc, #332]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d908      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f023 020f 	bic.w	r2, r3, #15
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4947      	ldr	r1, [pc, #284]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d055      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cee:	4b43      	ldr	r3, [pc, #268]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4940      	ldr	r1, [pc, #256]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d08:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d121      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0f6      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d20:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d115      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0ea      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d38:	4b30      	ldr	r3, [pc, #192]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0de      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d48:	4b2c      	ldr	r3, [pc, #176]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0d6      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d58:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f023 0207 	bic.w	r2, r3, #7
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4925      	ldr	r1, [pc, #148]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6a:	f7fe fa87 	bl	800127c <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d70:	e00a      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d72:	f7fe fa83 	bl	800127c <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0be      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d88:	4b1c      	ldr	r3, [pc, #112]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d1eb      	bne.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d208      	bcs.n	8002dc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	490e      	ldr	r1, [pc, #56]	@ (8002dfc <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d214      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b08      	ldr	r3, [pc, #32]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 020f 	bic.w	r2, r3, #15
 8002dde:	4906      	ldr	r1, [pc, #24]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e086      	b.n	8002f06 <HAL_RCC_ClockConfig+0x34e>
 8002df8:	52002000 	.word	0x52002000
 8002dfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	4b3f      	ldr	r3, [pc, #252]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d208      	bcs.n	8002e2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	4939      	ldr	r1, [pc, #228]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d208      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e4a:	4b31      	ldr	r3, [pc, #196]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	492e      	ldr	r1, [pc, #184]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d208      	bcs.n	8002e8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e78:	4b25      	ldr	r3, [pc, #148]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4922      	ldr	r1, [pc, #136]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d208      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4917      	ldr	r1, [pc, #92]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002eb8:	f000 f834 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	4912      	ldr	r1, [pc, #72]	@ (8002f14 <HAL_RCC_ClockConfig+0x35c>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_RCC_ClockConfig+0x35c>)
 8002ee0:	5cd3      	ldrb	r3, [r2, r3]
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <HAL_RCC_ClockConfig+0x360>)
 8002eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <HAL_RCC_ClockConfig+0x364>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_RCC_ClockConfig+0x368>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd ff6c 	bl	8000dd8 <HAL_InitTick>
 8002f00:	4603      	mov	r3, r0
 8002f02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	58024400 	.word	0x58024400
 8002f14:	0800c0a8 	.word	0x0800c0a8
 8002f18:	24000004 	.word	0x24000004
 8002f1c:	24000000 	.word	0x24000000
 8002f20:	24000008 	.word	0x24000008

08002f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b089      	sub	sp, #36	@ 0x24
 8002f28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2a:	4bb3      	ldr	r3, [pc, #716]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f32:	2b18      	cmp	r3, #24
 8002f34:	f200 8155 	bhi.w	80031e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f38:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002fa5 	.word	0x08002fa5
 8002f44:	080031e3 	.word	0x080031e3
 8002f48:	080031e3 	.word	0x080031e3
 8002f4c:	080031e3 	.word	0x080031e3
 8002f50:	080031e3 	.word	0x080031e3
 8002f54:	080031e3 	.word	0x080031e3
 8002f58:	080031e3 	.word	0x080031e3
 8002f5c:	080031e3 	.word	0x080031e3
 8002f60:	08002fcb 	.word	0x08002fcb
 8002f64:	080031e3 	.word	0x080031e3
 8002f68:	080031e3 	.word	0x080031e3
 8002f6c:	080031e3 	.word	0x080031e3
 8002f70:	080031e3 	.word	0x080031e3
 8002f74:	080031e3 	.word	0x080031e3
 8002f78:	080031e3 	.word	0x080031e3
 8002f7c:	080031e3 	.word	0x080031e3
 8002f80:	08002fd1 	.word	0x08002fd1
 8002f84:	080031e3 	.word	0x080031e3
 8002f88:	080031e3 	.word	0x080031e3
 8002f8c:	080031e3 	.word	0x080031e3
 8002f90:	080031e3 	.word	0x080031e3
 8002f94:	080031e3 	.word	0x080031e3
 8002f98:	080031e3 	.word	0x080031e3
 8002f9c:	080031e3 	.word	0x080031e3
 8002fa0:	08002fd7 	.word	0x08002fd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fa4:	4b94      	ldr	r3, [pc, #592]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fb0:	4b91      	ldr	r3, [pc, #580]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	4a90      	ldr	r2, [pc, #576]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fc2:	e111      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fc4:	4b8d      	ldr	r3, [pc, #564]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fc6:	61bb      	str	r3, [r7, #24]
      break;
 8002fc8:	e10e      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fca:	4b8d      	ldr	r3, [pc, #564]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fcc:	61bb      	str	r3, [r7, #24]
      break;
 8002fce:	e10b      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fd2:	61bb      	str	r3, [r7, #24]
      break;
 8002fd4:	e108      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fd6:	4b88      	ldr	r3, [pc, #544]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002fe0:	4b85      	ldr	r3, [pc, #532]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002fec:	4b82      	ldr	r3, [pc, #520]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ff6:	4b80      	ldr	r3, [pc, #512]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	08db      	lsrs	r3, r3, #3
 8002ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80e1 	beq.w	80031dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b02      	cmp	r3, #2
 800301e:	f000 8083 	beq.w	8003128 <HAL_RCC_GetSysClockFreq+0x204>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b02      	cmp	r3, #2
 8003026:	f200 80a1 	bhi.w	800316c <HAL_RCC_GetSysClockFreq+0x248>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x114>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d056      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003036:	e099      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003038:	4b6f      	ldr	r3, [pc, #444]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02d      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003044:	4b6c      	ldr	r3, [pc, #432]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	08db      	lsrs	r3, r3, #3
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	4a6b      	ldr	r2, [pc, #428]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
 8003054:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306e:	4b62      	ldr	r3, [pc, #392]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003082:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800309e:	e087      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800320c <HAL_RCC_GetSysClockFreq+0x2e8>
 80030ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b2:	4b51      	ldr	r3, [pc, #324]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030e2:	e065      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003210 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f6:	4b40      	ldr	r3, [pc, #256]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003106:	ed97 6a02 	vldr	s12, [r7, #8]
 800310a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 800310e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800311a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003126:	e043      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003214 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313a:	4b2f      	ldr	r3, [pc, #188]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314a:	ed97 6a02 	vldr	s12, [r7, #8]
 800314e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800315e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800316a:	e021      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003210 <HAL_RCC_GetSysClockFreq+0x2ec>
 800317a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317e:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003192:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003208 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	0a5b      	lsrs	r3, r3, #9
 80031b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ba:	3301      	adds	r3, #1
 80031bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80031cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d4:	ee17 3a90 	vmov	r3, s15
 80031d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031da:	e005      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
      break;
 80031e0:	e002      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031e2:	4b07      	ldr	r3, [pc, #28]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031e4:	61bb      	str	r3, [r7, #24]
      break;
 80031e6:	bf00      	nop
  }

  return sysclockfreq;
 80031e8:	69bb      	ldr	r3, [r7, #24]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3724      	adds	r7, #36	@ 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	58024400 	.word	0x58024400
 80031fc:	03d09000 	.word	0x03d09000
 8003200:	003d0900 	.word	0x003d0900
 8003204:	007a1200 	.word	0x007a1200
 8003208:	46000000 	.word	0x46000000
 800320c:	4c742400 	.word	0x4c742400
 8003210:	4a742400 	.word	0x4a742400
 8003214:	4af42400 	.word	0x4af42400

08003218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800321e:	f7ff fe81 	bl	8002f24 <HAL_RCC_GetSysClockFreq>
 8003222:	4602      	mov	r2, r0
 8003224:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <HAL_RCC_GetHCLKFreq+0x50>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	490f      	ldr	r1, [pc, #60]	@ (800326c <HAL_RCC_GetHCLKFreq+0x54>)
 8003230:	5ccb      	ldrb	r3, [r1, r3]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800323c:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <HAL_RCC_GetHCLKFreq+0x50>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	4a09      	ldr	r2, [pc, #36]	@ (800326c <HAL_RCC_GetHCLKFreq+0x54>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a07      	ldr	r2, [pc, #28]	@ (8003270 <HAL_RCC_GetHCLKFreq+0x58>)
 8003254:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003256:	4a07      	ldr	r2, [pc, #28]	@ (8003274 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <HAL_RCC_GetHCLKFreq+0x58>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	58024400 	.word	0x58024400
 800326c:	0800c0a8 	.word	0x0800c0a8
 8003270:	24000004 	.word	0x24000004
 8003274:	24000000 	.word	0x24000000

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800327c:	f7ff ffcc 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b06      	ldr	r3, [pc, #24]	@ (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4904      	ldr	r1, [pc, #16]	@ (80032a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	58024400 	.word	0x58024400
 80032a0:	0800c0a8 	.word	0x0800c0a8

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032a8:	f7ff ffb6 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	0a1b      	lsrs	r3, r3, #8
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4904      	ldr	r1, [pc, #16]	@ (80032cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	58024400 	.word	0x58024400
 80032cc:	0800c0a8 	.word	0x0800c0a8

080032d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	223f      	movs	r2, #63	@ 0x3f
 80032de:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e0:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <HAL_RCC_GetClockConfig+0x7c>)
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0207 	and.w	r2, r3, #7
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <HAL_RCC_GetClockConfig+0x7c>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80032f8:	4b14      	ldr	r3, [pc, #80]	@ (800334c <HAL_RCC_GetClockConfig+0x7c>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_RCC_GetClockConfig+0x7c>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003310:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <HAL_RCC_GetClockConfig+0x7c>)
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800331c:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <HAL_RCC_GetClockConfig+0x7c>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003328:	4b08      	ldr	r3, [pc, #32]	@ (800334c <HAL_RCC_GetClockConfig+0x7c>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <HAL_RCC_GetClockConfig+0x80>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 020f 	and.w	r2, r3, #15
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	601a      	str	r2, [r3, #0]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	58024400 	.word	0x58024400
 8003350:	52002000 	.word	0x52002000

08003354 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b0c6      	sub	sp, #280	@ 0x118
 800335a:	af00      	add	r7, sp, #0
 800335c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003360:	2300      	movs	r3, #0
 8003362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003366:	2300      	movs	r3, #0
 8003368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800336c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003378:	2500      	movs	r5, #0
 800337a:	ea54 0305 	orrs.w	r3, r4, r5
 800337e:	d049      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003386:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800338a:	d02f      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800338c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003390:	d828      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003396:	d01a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003398:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800339c:	d822      	bhi.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033a6:	d007      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033a8:	e01c      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033aa:	4bab      	ldr	r3, [pc, #684]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	4aaa      	ldr	r2, [pc, #680]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033b6:	e01a      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033bc:	3308      	adds	r3, #8
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f001 fc25 	bl	8004c10 <RCCEx_PLL2_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033cc:	e00f      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d2:	3328      	adds	r3, #40	@ 0x28
 80033d4:	2102      	movs	r1, #2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 fccc 	bl	8004d74 <RCCEx_PLL3_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033e2:	e004      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033f6:	4b98      	ldr	r3, [pc, #608]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003404:	4a94      	ldr	r2, [pc, #592]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003406:	430b      	orrs	r3, r1
 8003408:	6513      	str	r3, [r2, #80]	@ 0x50
 800340a:	e003      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003420:	f04f 0900 	mov.w	r9, #0
 8003424:	ea58 0309 	orrs.w	r3, r8, r9
 8003428:	d047      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800342a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003430:	2b04      	cmp	r3, #4
 8003432:	d82a      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003434:	a201      	add	r2, pc, #4	@ (adr r2, 800343c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003451 	.word	0x08003451
 8003440:	0800345f 	.word	0x0800345f
 8003444:	08003475 	.word	0x08003475
 8003448:	08003493 	.word	0x08003493
 800344c:	08003493 	.word	0x08003493
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003450:	4b81      	ldr	r3, [pc, #516]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	4a80      	ldr	r2, [pc, #512]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800345c:	e01a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800345e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003462:	3308      	adds	r3, #8
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f001 fbd2 	bl	8004c10 <RCCEx_PLL2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003472:	e00f      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003478:	3328      	adds	r3, #40	@ 0x28
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f001 fc79 	bl	8004d74 <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003488:	e004      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800349c:	4b6e      	ldr	r3, [pc, #440]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800349e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a0:	f023 0107 	bic.w	r1, r3, #7
 80034a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80034c6:	f04f 0b00 	mov.w	fp, #0
 80034ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80034ce:	d05b      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80034d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034d8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80034dc:	d03b      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80034de:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80034e2:	d834      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034e8:	d037      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80034ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ee:	d82e      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034f4:	d033      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034fa:	d828      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80034fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003500:	d01a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003506:	d822      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800350c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003510:	d007      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003512:	e01c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003514:	4b50      	ldr	r3, [pc, #320]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003518:	4a4f      	ldr	r2, [pc, #316]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800351a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800351e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003520:	e01e      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003526:	3308      	adds	r3, #8
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f001 fb70 	bl	8004c10 <RCCEx_PLL2_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003536:	e013      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800353c:	3328      	adds	r3, #40	@ 0x28
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fc17 	bl	8004d74 <RCCEx_PLL3_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800354c:	e008      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003554:	e004      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003556:	bf00      	nop
 8003558:	e002      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800355a:	bf00      	nop
 800355c:	e000      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800355e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10b      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003568:	4b3b      	ldr	r3, [pc, #236]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003578:	4a37      	ldr	r2, [pc, #220]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800357a:	430b      	orrs	r3, r1
 800357c:	6593      	str	r3, [r2, #88]	@ 0x58
 800357e:	e003      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003594:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800359e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035a2:	460b      	mov	r3, r1
 80035a4:	4313      	orrs	r3, r2
 80035a6:	d05d      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035b4:	d03b      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80035b6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035ba:	d834      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c0:	d037      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80035c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c6:	d82e      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035cc:	d033      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80035ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80035d2:	d828      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035d8:	d01a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80035da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035de:	d822      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80035e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e8:	d007      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80035ea:	e01c      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	4a19      	ldr	r2, [pc, #100]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f8:	e01e      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fe:	3308      	adds	r3, #8
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fb04 	bl	8004c10 <RCCEx_PLL2_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800360e:	e013      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003614:	3328      	adds	r3, #40	@ 0x28
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fbab 	bl	8004d74 <RCCEx_PLL3_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003624:	e008      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800362c:	e004      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800362e:	bf00      	nop
 8003630:	e002      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003632:	bf00      	nop
 8003634:	e000      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003644:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003650:	4a01      	ldr	r2, [pc, #4]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003652:	430b      	orrs	r3, r1
 8003654:	6593      	str	r3, [r2, #88]	@ 0x58
 8003656:	e005      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003658:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003660:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003670:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800367a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800367e:	460b      	mov	r3, r1
 8003680:	4313      	orrs	r3, r2
 8003682:	d03a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	2b30      	cmp	r3, #48	@ 0x30
 800368c:	d01f      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800368e:	2b30      	cmp	r3, #48	@ 0x30
 8003690:	d819      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003692:	2b20      	cmp	r3, #32
 8003694:	d00c      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003696:	2b20      	cmp	r3, #32
 8003698:	d815      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d019      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d111      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a2:	4baa      	ldr	r3, [pc, #680]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	4aa9      	ldr	r2, [pc, #676]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036ae:	e011      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b4:	3308      	adds	r3, #8
 80036b6:	2102      	movs	r1, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 faa9 	bl	8004c10 <RCCEx_PLL2_Config>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036cc:	e002      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80036d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10a      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036dc:	4b9b      	ldr	r3, [pc, #620]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	4a98      	ldr	r2, [pc, #608]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036f0:	e003      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003706:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800370a:	2300      	movs	r3, #0
 800370c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003710:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d051      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800371a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003720:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003724:	d035      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003726:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800372a:	d82e      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800372c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003730:	d031      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003732:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003736:	d828      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373c:	d01a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003742:	d822      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374c:	d007      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800374e:	e01c      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b7e      	ldr	r3, [pc, #504]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	4a7d      	ldr	r2, [pc, #500]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800375c:	e01c      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003762:	3308      	adds	r3, #8
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fa52 	bl	8004c10 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003778:	3328      	adds	r3, #40	@ 0x28
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f001 faf9 	bl	8004d74 <RCCEx_PLL3_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003788:	e006      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003790:	e002      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037a0:	4b6a      	ldr	r3, [pc, #424]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	4a67      	ldr	r2, [pc, #412]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80037ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d053      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037e8:	d033      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80037ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ee:	d82c      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037f4:	d02f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80037f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037fa:	d826      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003800:	d02b      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003802:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003806:	d820      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003808:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800380c:	d012      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800380e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003812:	d81a      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d022      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381c:	d115      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800381e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003822:	3308      	adds	r3, #8
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f001 f9f2 	bl	8004c10 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003838:	3328      	adds	r3, #40	@ 0x28
 800383a:	2101      	movs	r1, #1
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fa99 	bl	8004d74 <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003848:	e00a      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003852:	bf00      	nop
 8003854:	e004      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003868:	4b38      	ldr	r3, [pc, #224]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003876:	4a35      	ldr	r2, [pc, #212]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003878:	430b      	orrs	r3, r1
 800387a:	6513      	str	r3, [r2, #80]	@ 0x50
 800387c:	e003      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003882:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800389c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038a0:	460b      	mov	r3, r1
 80038a2:	4313      	orrs	r3, r2
 80038a4:	d058      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b2:	d033      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80038b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b8:	d82c      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038be:	d02f      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c4:	d826      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038ca:	d02b      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80038cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038d0:	d820      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d6:	d012      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d81a      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d022      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e6:	d115      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ec:	3308      	adds	r3, #8
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 f98d 	bl	8004c10 <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038fc:	e015      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003902:	3328      	adds	r3, #40	@ 0x28
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fa34 	bl	8004d74 <RCCEx_PLL3_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003912:	e00a      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800391a:	e006      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800391c:	bf00      	nop
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003932:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003936:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800393a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003942:	4a02      	ldr	r2, [pc, #8]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003944:	430b      	orrs	r3, r1
 8003946:	6593      	str	r3, [r2, #88]	@ 0x58
 8003948:	e006      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800394a:	bf00      	nop
 800394c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003968:	2300      	movs	r3, #0
 800396a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800396e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003972:	460b      	mov	r3, r1
 8003974:	4313      	orrs	r3, r2
 8003976:	d037      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003982:	d00e      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003988:	d816      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d018      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800398e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003992:	d111      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003994:	4bc4      	ldr	r3, [pc, #784]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	4ac3      	ldr	r2, [pc, #780]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800399a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800399e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039a0:	e00f      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a6:	3308      	adds	r3, #8
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 f930 	bl	8004c10 <RCCEx_PLL2_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ca:	4bb7      	ldr	r3, [pc, #732]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80039d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d8:	4ab3      	ldr	r2, [pc, #716]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80039de:	e003      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	d039      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d81c      	bhi.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a12:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a55 	.word	0x08003a55
 8003a1c:	08003a29 	.word	0x08003a29
 8003a20:	08003a37 	.word	0x08003a37
 8003a24:	08003a55 	.word	0x08003a55
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a28:	4b9f      	ldr	r3, [pc, #636]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	4a9e      	ldr	r2, [pc, #632]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a34:	e00f      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f8e6 	bl	8004c10 <RCCEx_PLL2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a4a:	e004      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a5e:	4b92      	ldr	r3, [pc, #584]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a62:	f023 0103 	bic.w	r1, r3, #3
 8003a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6c:	4a8e      	ldr	r2, [pc, #568]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a72:	e003      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f000 8099 	beq.w	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a9e:	4b83      	ldr	r3, [pc, #524]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a82      	ldr	r2, [pc, #520]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd fbe7 	bl	800127c <HAL_GetTick>
 8003aae:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab2:	e00b      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab4:	f7fd fbe2 	bl	800127c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	@ 0x64
 8003ac2:	d903      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aca:	e005      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003acc:	4b77      	ldr	r3, [pc, #476]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ed      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d173      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ae0:	4b71      	ldr	r3, [pc, #452]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003aec:	4053      	eors	r3, r2
 8003aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d015      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003af6:	4b6c      	ldr	r3, [pc, #432]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b02:	4b69      	ldr	r3, [pc, #420]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	4a68      	ldr	r2, [pc, #416]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b0e:	4b66      	ldr	r3, [pc, #408]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	4a65      	ldr	r2, [pc, #404]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b18:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b1a:	4a63      	ldr	r2, [pc, #396]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b20:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2e:	d118      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fd fba4 	bl	800127c <HAL_GetTick>
 8003b34:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b38:	e00d      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd fb9f 	bl	800127c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b44:	1ad2      	subs	r2, r2, r3
 8003b46:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d903      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003b54:	e005      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b56:	4b54      	ldr	r3, [pc, #336]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0eb      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003b62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d129      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b7a:	d10e      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b8c:	091a      	lsrs	r2, r3, #4
 8003b8e:	4b48      	ldr	r3, [pc, #288]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	4a45      	ldr	r2, [pc, #276]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6113      	str	r3, [r2, #16]
 8003b98:	e005      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003b9a:	4b43      	ldr	r3, [pc, #268]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	4a42      	ldr	r2, [pc, #264]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ba4:	6113      	str	r3, [r2, #16]
 8003ba6:	4b40      	ldr	r3, [pc, #256]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003bc6:	e003      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f002 0301 	and.w	r3, r2, #1
 8003bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003be6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003bea:	460b      	mov	r3, r1
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f000 808f 	beq.w	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bf8:	2b28      	cmp	r3, #40	@ 0x28
 8003bfa:	d871      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8003c04 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003ce9 	.word	0x08003ce9
 8003c08:	08003ce1 	.word	0x08003ce1
 8003c0c:	08003ce1 	.word	0x08003ce1
 8003c10:	08003ce1 	.word	0x08003ce1
 8003c14:	08003ce1 	.word	0x08003ce1
 8003c18:	08003ce1 	.word	0x08003ce1
 8003c1c:	08003ce1 	.word	0x08003ce1
 8003c20:	08003ce1 	.word	0x08003ce1
 8003c24:	08003cb5 	.word	0x08003cb5
 8003c28:	08003ce1 	.word	0x08003ce1
 8003c2c:	08003ce1 	.word	0x08003ce1
 8003c30:	08003ce1 	.word	0x08003ce1
 8003c34:	08003ce1 	.word	0x08003ce1
 8003c38:	08003ce1 	.word	0x08003ce1
 8003c3c:	08003ce1 	.word	0x08003ce1
 8003c40:	08003ce1 	.word	0x08003ce1
 8003c44:	08003ccb 	.word	0x08003ccb
 8003c48:	08003ce1 	.word	0x08003ce1
 8003c4c:	08003ce1 	.word	0x08003ce1
 8003c50:	08003ce1 	.word	0x08003ce1
 8003c54:	08003ce1 	.word	0x08003ce1
 8003c58:	08003ce1 	.word	0x08003ce1
 8003c5c:	08003ce1 	.word	0x08003ce1
 8003c60:	08003ce1 	.word	0x08003ce1
 8003c64:	08003ce9 	.word	0x08003ce9
 8003c68:	08003ce1 	.word	0x08003ce1
 8003c6c:	08003ce1 	.word	0x08003ce1
 8003c70:	08003ce1 	.word	0x08003ce1
 8003c74:	08003ce1 	.word	0x08003ce1
 8003c78:	08003ce1 	.word	0x08003ce1
 8003c7c:	08003ce1 	.word	0x08003ce1
 8003c80:	08003ce1 	.word	0x08003ce1
 8003c84:	08003ce9 	.word	0x08003ce9
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003ce1 	.word	0x08003ce1
 8003c94:	08003ce1 	.word	0x08003ce1
 8003c98:	08003ce1 	.word	0x08003ce1
 8003c9c:	08003ce1 	.word	0x08003ce1
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003ce9 	.word	0x08003ce9
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	58024800 	.word	0x58024800
 8003cb0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb8:	3308      	adds	r3, #8
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 ffa7 	bl	8004c10 <RCCEx_PLL2_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cce:	3328      	adds	r3, #40	@ 0x28
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f84e 	bl	8004d74 <RCCEx_PLL3_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003cde:	e004      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003cf2:	4bbf      	ldr	r3, [pc, #764]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d00:	4abb      	ldr	r2, [pc, #748]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d02:	430b      	orrs	r3, r1
 8003d04:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d06:	e003      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f002 0302 	and.w	r3, r2, #2
 8003d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d041      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d824      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d8d 	.word	0x08003d8d
 8003d44:	08003d59 	.word	0x08003d59
 8003d48:	08003d6f 	.word	0x08003d6f
 8003d4c:	08003d8d 	.word	0x08003d8d
 8003d50:	08003d8d 	.word	0x08003d8d
 8003d54:	08003d8d 	.word	0x08003d8d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 ff55 	bl	8004c10 <RCCEx_PLL2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e00f      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d72:	3328      	adds	r3, #40	@ 0x28
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fffc 	bl	8004d74 <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d82:	e004      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d96:	4b96      	ldr	r3, [pc, #600]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9a:	f023 0107 	bic.w	r1, r3, #7
 8003d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da4:	4a92      	ldr	r2, [pc, #584]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003db0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f002 0304 	and.w	r3, r2, #4
 8003dc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d044      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d825      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003de0:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e35 	.word	0x08003e35
 8003dec:	08003e01 	.word	0x08003e01
 8003df0:	08003e17 	.word	0x08003e17
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e35 	.word	0x08003e35
 8003dfc:	08003e35 	.word	0x08003e35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e04:	3308      	adds	r3, #8
 8003e06:	2101      	movs	r1, #1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 ff01 	bl	8004c10 <RCCEx_PLL2_Config>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e14:	e00f      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1a:	3328      	adds	r3, #40	@ 0x28
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 ffa8 	bl	8004d74 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e2a:	e004      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f023 0107 	bic.w	r1, r3, #7
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	4a68      	ldr	r2, [pc, #416]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f002 0320 	and.w	r3, r2, #32
 8003e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	d055      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e8a:	d033      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e90:	d82c      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e96:	d02f      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9c:	d826      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ea2:	d02b      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ea4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ea8:	d820      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eae:	d012      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eb4:	d81a      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d022      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ebe:	d115      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fea1 	bl	8004c10 <RCCEx_PLL2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ed4:	e015      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eda:	3328      	adds	r3, #40	@ 0x28
 8003edc:	2102      	movs	r1, #2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ff48 	bl	8004d74 <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003eea:	e00a      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ef2:	e006      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e004      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e002      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f40:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d058      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f52:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f56:	d033      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003f58:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f5c:	d82c      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f62:	d02f      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f68:	d826      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f6e:	d02b      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f74:	d820      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7a:	d012      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f80:	d81a      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d022      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8a:	d115      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f90:	3308      	adds	r3, #8
 8003f92:	2100      	movs	r1, #0
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe3b 	bl	8004c10 <RCCEx_PLL2_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e015      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa6:	3328      	adds	r3, #40	@ 0x28
 8003fa8:	2102      	movs	r1, #2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fee2 	bl	8004d74 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fb6:	e00a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fbe:	e006      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10e      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd6:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fe6:	4a02      	ldr	r2, [pc, #8]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004008:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004012:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d055      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800401c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004020:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004024:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004028:	d033      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800402a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800402e:	d82c      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004034:	d02f      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800403a:	d826      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800403c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004040:	d02b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004042:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004046:	d820      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004048:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800404c:	d012      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800404e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004052:	d81a      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d022      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405c:	d115      	bne.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800405e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004062:	3308      	adds	r3, #8
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fdd2 	bl	8004c10 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004072:	e015      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004078:	3328      	adds	r3, #40	@ 0x28
 800407a:	2102      	movs	r1, #2
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fe79 	bl	8004d74 <RCCEx_PLL3_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004088:	e00a      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004092:	bf00      	nop
 8004094:	e004      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10b      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040a8:	4ba0      	ldr	r3, [pc, #640]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040b8:	4a9c      	ldr	r2, [pc, #624]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ba:	430b      	orrs	r3, r1
 80040bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80040c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d0:	f002 0308 	and.w	r3, r2, #8
 80040d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d01e      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fa:	3328      	adds	r3, #40	@ 0x28
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fe38 	bl	8004d74 <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004110:	4b86      	ldr	r3, [pc, #536]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004114:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004120:	4a82      	ldr	r2, [pc, #520]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004122:	430b      	orrs	r3, r1
 8004124:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f002 0310 	and.w	r3, r2, #16
 8004132:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800413c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d01e      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004152:	d10c      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004158:	3328      	adds	r3, #40	@ 0x28
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe09 	bl	8004d74 <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800416e:	4b6f      	ldr	r3, [pc, #444]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417e:	4a6b      	ldr	r2, [pc, #428]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004190:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004192:	2300      	movs	r3, #0
 8004194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004196:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800419a:	460b      	mov	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	d03e      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ac:	d022      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80041ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b2:	d81b      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041bc:	d00b      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80041be:	e015      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c4:	3308      	adds	r3, #8
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fd21 	bl	8004c10 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041d4:	e00f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fdc8 	bl	8004d74 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041fe:	4b4b      	ldr	r3, [pc, #300]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800420e:	4a47      	ldr	r2, [pc, #284]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6593      	str	r3, [r2, #88]	@ 0x58
 8004214:	e003      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800421a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004226:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800422a:	673b      	str	r3, [r7, #112]	@ 0x70
 800422c:	2300      	movs	r3, #0
 800422e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004230:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004234:	460b      	mov	r3, r1
 8004236:	4313      	orrs	r3, r2
 8004238:	d03b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800423a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004242:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004246:	d01f      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004248:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800424c:	d818      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800424e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004252:	d003      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004254:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004258:	d007      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800425a:	e011      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	4a32      	ldr	r2, [pc, #200]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004268:	e00f      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800426a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800426e:	3328      	adds	r3, #40	@ 0x28
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fd7e 	bl	8004d74 <RCCEx_PLL3_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800427e:	e004      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004292:	4b26      	ldr	r3, [pc, #152]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004296:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800429a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a2:	4a22      	ldr	r2, [pc, #136]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80042a8:	e003      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042c0:	2300      	movs	r3, #0
 80042c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042c4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042c8:	460b      	mov	r3, r1
 80042ca:	4313      	orrs	r3, r2
 80042cc:	d034      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80042ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042dc:	d007      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80042de:	e011      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e0:	4b12      	ldr	r3, [pc, #72]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	4a11      	ldr	r2, [pc, #68]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042ec:	e00e      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f2:	3308      	adds	r3, #8
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fc8a 	bl	8004c10 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004302:	e003      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800430a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004318:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004322:	4a02      	ldr	r2, [pc, #8]	@ (800432c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004324:	430b      	orrs	r3, r1
 8004326:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004328:	e006      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800432a:	bf00      	nop
 800432c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004334:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004344:	663b      	str	r3, [r7, #96]	@ 0x60
 8004346:	2300      	movs	r3, #0
 8004348:	667b      	str	r3, [r7, #100]	@ 0x64
 800434a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	d00c      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004358:	3328      	adds	r3, #40	@ 0x28
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fd09 	bl	8004d74 <RCCEx_PLL3_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800436e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800437a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800437c:	2300      	movs	r3, #0
 800437e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004380:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004384:	460b      	mov	r3, r1
 8004386:	4313      	orrs	r3, r2
 8004388:	d036      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800438a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800438e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004390:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004394:	d018      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439a:	d811      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800439c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a0:	d014      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a6:	d80b      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d011      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80043ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043b0:	d106      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b2:	4bb7      	ldr	r3, [pc, #732]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	4ab6      	ldr	r2, [pc, #728]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043be:	e008      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043c6:	e004      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043c8:	bf00      	nop
 80043ca:	e002      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043cc:	bf00      	nop
 80043ce:	e000      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80043d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043da:	4bad      	ldr	r3, [pc, #692]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043e8:	4aa9      	ldr	r2, [pc, #676]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80043ee:	e003      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004404:	653b      	str	r3, [r7, #80]	@ 0x50
 8004406:	2300      	movs	r3, #0
 8004408:	657b      	str	r3, [r7, #84]	@ 0x54
 800440a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800440e:	460b      	mov	r3, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004414:	4b9e      	ldr	r3, [pc, #632]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004418:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	4a9b      	ldr	r2, [pc, #620]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004424:	430b      	orrs	r3, r1
 8004426:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004436:	2300      	movs	r3, #0
 8004438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800443a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d009      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004444:	4b92      	ldr	r3, [pc, #584]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004448:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004452:	4a8f      	ldr	r2, [pc, #572]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004454:	430b      	orrs	r3, r1
 8004456:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004464:	643b      	str	r3, [r7, #64]	@ 0x40
 8004466:	2300      	movs	r3, #0
 8004468:	647b      	str	r3, [r7, #68]	@ 0x44
 800446a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800446e:	460b      	mov	r3, r1
 8004470:	4313      	orrs	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004474:	4b86      	ldr	r3, [pc, #536]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4a85      	ldr	r2, [pc, #532]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800447a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800447e:	6113      	str	r3, [r2, #16]
 8004480:	4b83      	ldr	r3, [pc, #524]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004482:	6919      	ldr	r1, [r3, #16]
 8004484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004488:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800448c:	4a80      	ldr	r2, [pc, #512]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800448e:	430b      	orrs	r3, r1
 8004490:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800449e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044a0:	2300      	movs	r3, #0
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044a8:	460b      	mov	r3, r1
 80044aa:	4313      	orrs	r3, r2
 80044ac:	d009      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ae:	4b78      	ldr	r3, [pc, #480]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	4a74      	ldr	r2, [pc, #464]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044be:	430b      	orrs	r3, r1
 80044c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d0:	2300      	movs	r3, #0
 80044d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044de:	4b6c      	ldr	r3, [pc, #432]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ee:	4a68      	ldr	r2, [pc, #416]	@ (8004690 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	2100      	movs	r1, #0
 80044fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004506:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800450a:	460b      	mov	r3, r1
 800450c:	4313      	orrs	r3, r2
 800450e:	d011      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004514:	3308      	adds	r3, #8
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fb79 	bl	8004c10 <RCCEx_PLL2_Config>
 800451e:	4603      	mov	r3, r0
 8004520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	2100      	movs	r1, #0
 800453e:	6239      	str	r1, [r7, #32]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
 8004546:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d011      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004554:	3308      	adds	r3, #8
 8004556:	2101      	movs	r1, #1
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fb59 	bl	8004c10 <RCCEx_PLL2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004564:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	2100      	movs	r1, #0
 800457e:	61b9      	str	r1, [r7, #24]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800458a:	460b      	mov	r3, r1
 800458c:	4313      	orrs	r3, r2
 800458e:	d011      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004594:	3308      	adds	r3, #8
 8004596:	2102      	movs	r1, #2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fb39 	bl	8004c10 <RCCEx_PLL2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	2100      	movs	r1, #0
 80045be:	6139      	str	r1, [r7, #16]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d011      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d4:	3328      	adds	r3, #40	@ 0x28
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fbcb 	bl	8004d74 <RCCEx_PLL3_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80045e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	2100      	movs	r1, #0
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800460a:	460b      	mov	r3, r1
 800460c:	4313      	orrs	r3, r2
 800460e:	d011      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004614:	3328      	adds	r3, #40	@ 0x28
 8004616:	2101      	movs	r1, #1
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fbab 	bl	8004d74 <RCCEx_PLL3_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004630:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	2100      	movs	r1, #0
 800463e:	6039      	str	r1, [r7, #0]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	607b      	str	r3, [r7, #4]
 8004646:	e9d7 1200 	ldrd	r1, r2, [r7]
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d011      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	3328      	adds	r3, #40	@ 0x28
 8004656:	2102      	movs	r1, #2
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fb8b 	bl	8004d74 <RCCEx_PLL3_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004674:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
}
 8004682:	4618      	mov	r0, r3
 8004684:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004688:	46bd      	mov	sp, r7
 800468a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400

08004694 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004698:	f7fe fdbe 	bl	8003218 <HAL_RCC_GetHCLKFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	4904      	ldr	r1, [pc, #16]	@ (80046bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046aa:	5ccb      	ldrb	r3, [r1, r3]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	58024400 	.word	0x58024400
 80046bc:	0800c0a8 	.word	0x0800c0a8

080046c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	@ 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d6:	0b1b      	lsrs	r3, r3, #12
 80046d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046de:	4b9c      	ldr	r3, [pc, #624]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046ea:	4b99      	ldr	r3, [pc, #612]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8111 	beq.w	8004930 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b02      	cmp	r3, #2
 8004712:	f000 8083 	beq.w	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b02      	cmp	r3, #2
 800471a:	f200 80a1 	bhi.w	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d056      	beq.n	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800472a:	e099      	b.n	8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800472c:	4b88      	ldr	r3, [pc, #544]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02d      	beq.n	8004794 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004738:	4b85      	ldr	r3, [pc, #532]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	4a84      	ldr	r2, [pc, #528]	@ (8004954 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b7b      	ldr	r3, [pc, #492]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a03 	vldr	s12, [r7, #12]
 8004776:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004792:	e087      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800495c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d6:	e065      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b59      	ldr	r3, [pc, #356]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481a:	e043      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004964 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b48      	ldr	r3, [pc, #288]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485e:	e021      	b.n	80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a8:	0a5b      	lsrs	r3, r3, #9
 80048aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048be:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ca:	ee17 2a90 	vmov	r2, s15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f8:	ee17 2a90 	vmov	r2, s15
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004900:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	0e1b      	lsrs	r3, r3, #24
 8004906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491a:	edd7 6a07 	vldr	s13, [r7, #28]
 800491e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004926:	ee17 2a90 	vmov	r2, s15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800492e:	e008      	b.n	8004942 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	@ 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	58024400 	.word	0x58024400
 8004954:	03d09000 	.word	0x03d09000
 8004958:	46000000 	.word	0x46000000
 800495c:	4c742400 	.word	0x4c742400
 8004960:	4a742400 	.word	0x4a742400
 8004964:	4af42400 	.word	0x4af42400

08004968 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004968:	b480      	push	{r7}
 800496a:	b089      	sub	sp, #36	@ 0x24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004970:	4ba1      	ldr	r3, [pc, #644]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800497a:	4b9f      	ldr	r3, [pc, #636]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	0d1b      	lsrs	r3, r3, #20
 8004980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004984:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004986:	4b9c      	ldr	r3, [pc, #624]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004992:	4b99      	ldr	r3, [pc, #612]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	08db      	lsrs	r3, r3, #3
 8004998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8111 	beq.w	8004bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	f000 8083 	beq.w	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f200 80a1 	bhi.w	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d056      	beq.n	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049d2:	e099      	b.n	8004b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d4:	4b88      	ldr	r3, [pc, #544]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02d      	beq.n	8004a3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049e0:	4b85      	ldr	r3, [pc, #532]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	4a84      	ldr	r2, [pc, #528]	@ (8004bfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a3a:	e087      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a7e:	e065      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b59      	ldr	r3, [pc, #356]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac2:	e043      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b48      	ldr	r3, [pc, #288]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b06:	e021      	b.n	8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b37      	ldr	r3, [pc, #220]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b72:	ee17 2a90 	vmov	r2, s15
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba0:	ee17 2a90 	vmov	r2, s15
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ba8:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	0e1b      	lsrs	r3, r3, #24
 8004bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bce:	ee17 2a90 	vmov	r2, s15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004bd6:	e008      	b.n	8004bea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
}
 8004bea:	bf00      	nop
 8004bec:	3724      	adds	r7, #36	@ 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	58024400 	.word	0x58024400
 8004bfc:	03d09000 	.word	0x03d09000
 8004c00:	46000000 	.word	0x46000000
 8004c04:	4c742400 	.word	0x4c742400
 8004c08:	4a742400 	.word	0x4a742400
 8004c0c:	4af42400 	.word	0x4af42400

08004c10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c1e:	4b53      	ldr	r3, [pc, #332]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d101      	bne.n	8004c2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e099      	b.n	8004d62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a4e      	ldr	r2, [pc, #312]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004c34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3a:	f7fc fb1f 	bl	800127c <HAL_GetTick>
 8004c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c40:	e008      	b.n	8004c54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c42:	f7fc fb1b 	bl	800127c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e086      	b.n	8004d62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c54:	4b45      	ldr	r3, [pc, #276]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f0      	bne.n	8004c42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c60:	4b42      	ldr	r3, [pc, #264]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	031b      	lsls	r3, r3, #12
 8004c6e:	493f      	ldr	r1, [pc, #252]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	025b      	lsls	r3, r3, #9
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	041b      	lsls	r3, r3, #16
 8004c92:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ca4:	4931      	ldr	r1, [pc, #196]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004caa:	4b30      	ldr	r3, [pc, #192]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	492d      	ldr	r1, [pc, #180]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	f023 0220 	bic.w	r2, r3, #32
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	4928      	ldr	r1, [pc, #160]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cce:	4b27      	ldr	r3, [pc, #156]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	4a26      	ldr	r2, [pc, #152]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	f023 0310 	bic.w	r3, r3, #16
 8004cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cda:	4b24      	ldr	r3, [pc, #144]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cde:	4b24      	ldr	r3, [pc, #144]	@ (8004d70 <RCCEx_PLL2_Config+0x160>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	69d2      	ldr	r2, [r2, #28]
 8004ce6:	00d2      	lsls	r2, r2, #3
 8004ce8:	4920      	ldr	r1, [pc, #128]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cee:	4b1f      	ldr	r3, [pc, #124]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	f043 0310 	orr.w	r3, r3, #16
 8004cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d00:	4b1a      	ldr	r3, [pc, #104]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	4a19      	ldr	r2, [pc, #100]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d0c:	e00f      	b.n	8004d2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d14:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d18:	4a14      	ldr	r2, [pc, #80]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d20:	e005      	b.n	8004d2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d22:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	4a11      	ldr	r2, [pc, #68]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a0e      	ldr	r2, [pc, #56]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d3a:	f7fc fa9f 	bl	800127c <HAL_GetTick>
 8004d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d40:	e008      	b.n	8004d54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d42:	f7fc fa9b 	bl	800127c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <RCCEx_PLL2_Config+0x15c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	ffff0007 	.word	0xffff0007

08004d74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d82:	4b53      	ldr	r3, [pc, #332]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d101      	bne.n	8004d92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e099      	b.n	8004ec6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d92:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a4e      	ldr	r2, [pc, #312]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fc fa6d 	bl	800127c <HAL_GetTick>
 8004da2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da4:	e008      	b.n	8004db8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004da6:	f7fc fa69 	bl	800127c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e086      	b.n	8004ec6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004db8:	4b45      	ldr	r3, [pc, #276]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004dc4:	4b42      	ldr	r3, [pc, #264]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	051b      	lsls	r3, r3, #20
 8004dd2:	493f      	ldr	r1, [pc, #252]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	025b      	lsls	r3, r3, #9
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e08:	4931      	ldr	r1, [pc, #196]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e0e:	4b30      	ldr	r3, [pc, #192]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	492d      	ldr	r1, [pc, #180]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e20:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	4928      	ldr	r1, [pc, #160]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e32:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a26      	ldr	r2, [pc, #152]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e42:	4b24      	ldr	r3, [pc, #144]	@ (8004ed4 <RCCEx_PLL3_Config+0x160>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	69d2      	ldr	r2, [r2, #28]
 8004e4a:	00d2      	lsls	r2, r2, #3
 8004e4c:	4920      	ldr	r1, [pc, #128]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e52:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e64:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4a19      	ldr	r2, [pc, #100]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e70:	e00f      	b.n	8004e92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e78:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e84:	e005      	b.n	8004e92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e86:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	4a11      	ldr	r2, [pc, #68]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e92:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9e:	f7fc f9ed 	bl	800127c <HAL_GetTick>
 8004ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea4:	e008      	b.n	8004eb8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ea6:	f7fc f9e9 	bl	800127c <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e006      	b.n	8004ec6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004eb8:	4b05      	ldr	r3, [pc, #20]	@ (8004ed0 <RCCEx_PLL3_Config+0x15c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	58024400 	.word	0x58024400
 8004ed4:	ffff0007 	.word	0xffff0007

08004ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e049      	b.n	8004f7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f841 	bl	8004f86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f000 f9f6 	bl	8005308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d001      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e05e      	b.n	8005072 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8005080 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d02c      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fde:	d027      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	@ (8005084 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d022      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a26      	ldr	r2, [pc, #152]	@ (8005088 <HAL_TIM_Base_Start_IT+0xec>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d01d      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	@ (800508c <HAL_TIM_Base_Start_IT+0xf0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a23      	ldr	r2, [pc, #140]	@ (8005090 <HAL_TIM_Base_Start_IT+0xf4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a21      	ldr	r2, [pc, #132]	@ (8005094 <HAL_TIM_Base_Start_IT+0xf8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a20      	ldr	r2, [pc, #128]	@ (8005098 <HAL_TIM_Base_Start_IT+0xfc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <HAL_TIM_Base_Start_IT+0x100>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x94>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1d      	ldr	r2, [pc, #116]	@ (80050a0 <HAL_TIM_Base_Start_IT+0x104>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d115      	bne.n	800505c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <HAL_TIM_Base_Start_IT+0x108>)
 8005038:	4013      	ands	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b06      	cmp	r3, #6
 8005040:	d015      	beq.n	800506e <HAL_TIM_Base_Start_IT+0xd2>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005048:	d011      	beq.n	800506e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	e008      	b.n	800506e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e000      	b.n	8005070 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40010400 	.word	0x40010400
 8005094:	40001800 	.word	0x40001800
 8005098:	40014000 	.word	0x40014000
 800509c:	4000e000 	.word	0x4000e000
 80050a0:	4000e400 	.word	0x4000e400
 80050a4:	00010007 	.word	0x00010007

080050a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d020      	beq.n	800510c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01b      	beq.n	800510c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0202 	mvn.w	r2, #2
 80050dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8e9 	bl	80052ca <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8db 	bl	80052b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f8ec 	bl	80052de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d020      	beq.n	8005158 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01b      	beq.n	8005158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0204 	mvn.w	r2, #4
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8c3 	bl	80052ca <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8b5 	bl	80052b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f8c6 	bl	80052de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b00      	cmp	r3, #0
 8005160:	d020      	beq.n	80051a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0208 	mvn.w	r2, #8
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2204      	movs	r2, #4
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f89d 	bl	80052ca <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f88f 	bl	80052b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8a0 	bl	80052de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d020      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0210 	mvn.w	r2, #16
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2208      	movs	r2, #8
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f877 	bl	80052ca <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f869 	bl	80052b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f87a 	bl	80052de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0201 	mvn.w	r2, #1
 800520c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fb fce2 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00c      	beq.n	8005242 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800523a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f919 	bl	8005474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00c      	beq.n	8005266 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f911 	bl	8005488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00c      	beq.n	800528a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f834 	bl	80052f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0220 	mvn.w	r2, #32
 80052a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f8d9 	bl	8005460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a47      	ldr	r2, [pc, #284]	@ (8005438 <TIM_Base_SetConfig+0x130>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005326:	d00f      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a44      	ldr	r2, [pc, #272]	@ (800543c <TIM_Base_SetConfig+0x134>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a43      	ldr	r2, [pc, #268]	@ (8005440 <TIM_Base_SetConfig+0x138>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a42      	ldr	r2, [pc, #264]	@ (8005444 <TIM_Base_SetConfig+0x13c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a41      	ldr	r2, [pc, #260]	@ (8005448 <TIM_Base_SetConfig+0x140>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a36      	ldr	r2, [pc, #216]	@ (8005438 <TIM_Base_SetConfig+0x130>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d027      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005368:	d023      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a33      	ldr	r2, [pc, #204]	@ (800543c <TIM_Base_SetConfig+0x134>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01f      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a32      	ldr	r2, [pc, #200]	@ (8005440 <TIM_Base_SetConfig+0x138>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01b      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a31      	ldr	r2, [pc, #196]	@ (8005444 <TIM_Base_SetConfig+0x13c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d017      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a30      	ldr	r2, [pc, #192]	@ (8005448 <TIM_Base_SetConfig+0x140>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2f      	ldr	r2, [pc, #188]	@ (800544c <TIM_Base_SetConfig+0x144>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00f      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2e      	ldr	r2, [pc, #184]	@ (8005450 <TIM_Base_SetConfig+0x148>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2d      	ldr	r2, [pc, #180]	@ (8005454 <TIM_Base_SetConfig+0x14c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005458 <TIM_Base_SetConfig+0x150>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_Base_SetConfig+0xaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2b      	ldr	r2, [pc, #172]	@ (800545c <TIM_Base_SetConfig+0x154>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d108      	bne.n	80053c4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <TIM_Base_SetConfig+0x130>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00f      	beq.n	800540a <TIM_Base_SetConfig+0x102>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <TIM_Base_SetConfig+0x140>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <TIM_Base_SetConfig+0x102>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a15      	ldr	r2, [pc, #84]	@ (800544c <TIM_Base_SetConfig+0x144>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d007      	beq.n	800540a <TIM_Base_SetConfig+0x102>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <TIM_Base_SetConfig+0x148>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_Base_SetConfig+0x102>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <TIM_Base_SetConfig+0x14c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d103      	bne.n	8005412 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f043 0204 	orr.w	r2, r3, #4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800
 8005458:	4000e000 	.word	0x4000e000
 800545c:	4000e400 	.word	0x4000e400

08005460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e042      	b.n	8005534 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fb fbbf 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2224      	movs	r2, #36	@ 0x24
 80054ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f001 fb64 	bl	8006bb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fcf5 	bl	8005edc <UART_SetConfig>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e01b      	b.n	8005534 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800550a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800551a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f001 fbe3 	bl	8006cf8 <UART_CheckIdleState>
 8005532:	4603      	mov	r3, r0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005552:	2b20      	cmp	r3, #32
 8005554:	d17b      	bne.n	800564e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_UART_Transmit+0x26>
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e074      	b.n	8005650 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2221      	movs	r2, #33	@ 0x21
 8005572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005576:	f7fb fe81 	bl	800127c <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005594:	d108      	bne.n	80055a8 <HAL_UART_Transmit+0x6c>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	e003      	b.n	80055b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055b0:	e030      	b.n	8005614 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2200      	movs	r2, #0
 80055ba:	2180      	movs	r1, #128	@ 0x80
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f001 fc45 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e03d      	b.n	8005650 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	3302      	adds	r3, #2
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	e007      	b.n	8005602 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	3301      	adds	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1c8      	bne.n	80055b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	2140      	movs	r1, #64	@ 0x40
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f001 fc0e 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e006      	b.n	8005650 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	@ 0x28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800566c:	2b20      	cmp	r3, #32
 800566e:	d137      	bne.n	80056e0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_UART_Receive_IT+0x24>
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e030      	b.n	80056e2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <HAL_UART_Receive_IT+0x94>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d01f      	beq.n	80056d0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d018      	beq.n	80056d0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	613b      	str	r3, [r7, #16]
   return(result);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	69f9      	ldr	r1, [r7, #28]
 80056c2:	6a3a      	ldr	r2, [r7, #32]
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e6      	bne.n	800569e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056d0:	88fb      	ldrh	r3, [r7, #6]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f001 fc26 	bl	8006f28 <UART_Start_Receive_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	e000      	b.n	80056e2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056e0:	2302      	movs	r3, #2
  }
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3728      	adds	r7, #40	@ 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	58000c00 	.word	0x58000c00

080056f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b0ba      	sub	sp, #232	@ 0xe8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005716:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800571a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800571e:	4013      	ands	r3, r2
 8005720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11b      	bne.n	8005764 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 8393 	beq.w	8005e80 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	4798      	blx	r3
      }
      return;
 8005762:	e38d      	b.n	8005e80 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8123 	beq.w	80059b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800576e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005772:	4b8d      	ldr	r3, [pc, #564]	@ (80059a8 <HAL_UART_IRQHandler+0x2b8>)
 8005774:	4013      	ands	r3, r2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800577a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800577e:	4b8b      	ldr	r3, [pc, #556]	@ (80059ac <HAL_UART_IRQHandler+0x2bc>)
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8116 	beq.w	80059b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d011      	beq.n	80057b8 <HAL_UART_IRQHandler+0xc8>
 8005794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ae:	f043 0201 	orr.w	r2, r3, #1
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d011      	beq.n	80057e8 <HAL_UART_IRQHandler+0xf8>
 80057c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00b      	beq.n	80057e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2202      	movs	r2, #2
 80057d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d011      	beq.n	8005818 <HAL_UART_IRQHandler+0x128>
 80057f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2204      	movs	r2, #4
 8005806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	f043 0202 	orr.w	r2, r3, #2
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d017      	beq.n	8005854 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d105      	bne.n	800583c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005830:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005834:	4b5c      	ldr	r3, [pc, #368]	@ (80059a8 <HAL_UART_IRQHandler+0x2b8>)
 8005836:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2208      	movs	r2, #8
 8005842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584a:	f043 0208 	orr.w	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <HAL_UART_IRQHandler+0x196>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005864:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00c      	beq.n	8005886 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 82f9 	beq.w	8005e84 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005896:	f003 0320 	and.w	r3, r3, #32
 800589a:	2b00      	cmp	r3, #0
 800589c:	d013      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800589e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058da:	2b40      	cmp	r3, #64	@ 0x40
 80058dc:	d005      	beq.n	80058ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d054      	beq.n	8005994 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fc3e 	bl	800716c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d146      	bne.n	800598c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005914:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005918:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800591c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800592a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800592e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005936:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1d9      	bne.n	80058fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d017      	beq.n	8005984 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800595a:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <HAL_UART_IRQHandler+0x2c0>)
 800595c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005964:	4618      	mov	r0, r3
 8005966:	f7fc f90b 	bl	8001b80 <HAL_DMA_Abort_IT>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d019      	beq.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800597e:	4610      	mov	r0, r2
 8005980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005982:	e00f      	b.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa93 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598a:	e00b      	b.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa8f 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005992:	e007      	b.n	80059a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fa8b 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80059a2:	e26f      	b.n	8005e84 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	bf00      	nop
    return;
 80059a6:	e26d      	b.n	8005e84 <HAL_UART_IRQHandler+0x794>
 80059a8:	10000001 	.word	0x10000001
 80059ac:	04000120 	.word	0x04000120
 80059b0:	08007239 	.word	0x08007239

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f040 8203 	bne.w	8005dc4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 81fc 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d0:	f003 0310 	and.w	r3, r3, #16
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 81f5 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2210      	movs	r2, #16
 80059e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	f040 816d 	bne.w	8005ccc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4aa4      	ldr	r2, [pc, #656]	@ (8005c8c <HAL_UART_IRQHandler+0x59c>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d068      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4aa1      	ldr	r2, [pc, #644]	@ (8005c90 <HAL_UART_IRQHandler+0x5a0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d061      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a9f      	ldr	r2, [pc, #636]	@ (8005c94 <HAL_UART_IRQHandler+0x5a4>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d05a      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a9c      	ldr	r2, [pc, #624]	@ (8005c98 <HAL_UART_IRQHandler+0x5a8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d053      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a9a      	ldr	r2, [pc, #616]	@ (8005c9c <HAL_UART_IRQHandler+0x5ac>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d04c      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a97      	ldr	r2, [pc, #604]	@ (8005ca0 <HAL_UART_IRQHandler+0x5b0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d045      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a95      	ldr	r2, [pc, #596]	@ (8005ca4 <HAL_UART_IRQHandler+0x5b4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d03e      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a92      	ldr	r2, [pc, #584]	@ (8005ca8 <HAL_UART_IRQHandler+0x5b8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d037      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a90      	ldr	r2, [pc, #576]	@ (8005cac <HAL_UART_IRQHandler+0x5bc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d030      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a8d      	ldr	r2, [pc, #564]	@ (8005cb0 <HAL_UART_IRQHandler+0x5c0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d029      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a8b      	ldr	r2, [pc, #556]	@ (8005cb4 <HAL_UART_IRQHandler+0x5c4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a88      	ldr	r2, [pc, #544]	@ (8005cb8 <HAL_UART_IRQHandler+0x5c8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01b      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a86      	ldr	r2, [pc, #536]	@ (8005cbc <HAL_UART_IRQHandler+0x5cc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d014      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a83      	ldr	r2, [pc, #524]	@ (8005cc0 <HAL_UART_IRQHandler+0x5d0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00d      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a81      	ldr	r2, [pc, #516]	@ (8005cc4 <HAL_UART_IRQHandler+0x5d4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d006      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x3e2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a7e      	ldr	r2, [pc, #504]	@ (8005cc8 <HAL_UART_IRQHandler+0x5d8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d106      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x3f0>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	e005      	b.n	8005aec <HAL_UART_IRQHandler+0x3fc>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80ad 	beq.w	8005c54 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f080 80a5 	bcs.w	8005c54 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b20:	f000 8087 	beq.w	8005c32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1da      	bne.n	8005b24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e1      	bne.n	8005b6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e4      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fb fc89 	bl	8001544 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f939 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c52:	e119      	b.n	8005e88 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	f040 8112 	bne.w	8005e88 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c70:	f040 810a 	bne.w	8005e88 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c80:	4619      	mov	r1, r3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f91e 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
      return;
 8005c88:	e0fe      	b.n	8005e88 <HAL_UART_IRQHandler+0x798>
 8005c8a:	bf00      	nop
 8005c8c:	40020010 	.word	0x40020010
 8005c90:	40020028 	.word	0x40020028
 8005c94:	40020040 	.word	0x40020040
 8005c98:	40020058 	.word	0x40020058
 8005c9c:	40020070 	.word	0x40020070
 8005ca0:	40020088 	.word	0x40020088
 8005ca4:	400200a0 	.word	0x400200a0
 8005ca8:	400200b8 	.word	0x400200b8
 8005cac:	40020410 	.word	0x40020410
 8005cb0:	40020428 	.word	0x40020428
 8005cb4:	40020440 	.word	0x40020440
 8005cb8:	40020458 	.word	0x40020458
 8005cbc:	40020470 	.word	0x40020470
 8005cc0:	40020488 	.word	0x40020488
 8005cc4:	400204a0 	.word	0x400204a0
 8005cc8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80cf 	beq.w	8005e8c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80ca 	beq.w	8005e8c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e4      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d3e:	6a3a      	ldr	r2, [r7, #32]
 8005d40:	4b55      	ldr	r3, [pc, #340]	@ (8005e98 <HAL_UART_IRQHandler+0x7a8>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d5a:	e841 2300 	strex	r3, r2, [r1]
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e3      	bne.n	8005d2e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0310 	bic.w	r3, r3, #16
 8005d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	69b9      	ldr	r1, [r7, #24]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	617b      	str	r3, [r7, #20]
   return(result);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e4      	bne.n	8005d7a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f881 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc2:	e063      	b.n	8005e8c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <HAL_UART_IRQHandler+0x6fe>
 8005dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 ff84 	bl	8007cf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dec:	e051      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d014      	beq.n	8005e24 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d008      	beq.n	8005e24 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d03a      	beq.n	8005e90 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
    }
    return;
 8005e22:	e035      	b.n	8005e90 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <HAL_UART_IRQHandler+0x754>
 8005e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 fa0d 	bl	800725c <UART_EndTransmit_IT>
    return;
 8005e42:	e026      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_UART_IRQHandler+0x774>
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f001 ff5d 	bl	8007d1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e62:	e016      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d010      	beq.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da0c      	bge.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 ff45 	bl	8007d08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e7e:	e008      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005e80:	bf00      	nop
 8005e82:	e006      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005e84:	bf00      	nop
 8005e86:	e004      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005e88:	bf00      	nop
 8005e8a:	e002      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005e8c:	bf00      	nop
 8005e8e:	e000      	b.n	8005e92 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005e90:	bf00      	nop
  }
}
 8005e92:	37e8      	adds	r7, #232	@ 0xe8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	effffffe 	.word	0xeffffffe

08005e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee0:	b092      	sub	sp, #72	@ 0x48
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4bbe      	ldr	r3, [pc, #760]	@ (8006204 <UART_SetConfig+0x328>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4ab3      	ldr	r2, [pc, #716]	@ (8006208 <UART_SetConfig+0x32c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f44:	4313      	orrs	r3, r2
 8005f46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	4baf      	ldr	r3, [pc, #700]	@ (800620c <UART_SetConfig+0x330>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	f023 010f 	bic.w	r1, r3, #15
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4aa6      	ldr	r2, [pc, #664]	@ (8006210 <UART_SetConfig+0x334>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d177      	bne.n	800606c <UART_SetConfig+0x190>
 8005f7c:	4ba5      	ldr	r3, [pc, #660]	@ (8006214 <UART_SetConfig+0x338>)
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f84:	2b28      	cmp	r3, #40	@ 0x28
 8005f86:	d86d      	bhi.n	8006064 <UART_SetConfig+0x188>
 8005f88:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <UART_SetConfig+0xb4>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08006035 	.word	0x08006035
 8005f94:	08006065 	.word	0x08006065
 8005f98:	08006065 	.word	0x08006065
 8005f9c:	08006065 	.word	0x08006065
 8005fa0:	08006065 	.word	0x08006065
 8005fa4:	08006065 	.word	0x08006065
 8005fa8:	08006065 	.word	0x08006065
 8005fac:	08006065 	.word	0x08006065
 8005fb0:	0800603d 	.word	0x0800603d
 8005fb4:	08006065 	.word	0x08006065
 8005fb8:	08006065 	.word	0x08006065
 8005fbc:	08006065 	.word	0x08006065
 8005fc0:	08006065 	.word	0x08006065
 8005fc4:	08006065 	.word	0x08006065
 8005fc8:	08006065 	.word	0x08006065
 8005fcc:	08006065 	.word	0x08006065
 8005fd0:	08006045 	.word	0x08006045
 8005fd4:	08006065 	.word	0x08006065
 8005fd8:	08006065 	.word	0x08006065
 8005fdc:	08006065 	.word	0x08006065
 8005fe0:	08006065 	.word	0x08006065
 8005fe4:	08006065 	.word	0x08006065
 8005fe8:	08006065 	.word	0x08006065
 8005fec:	08006065 	.word	0x08006065
 8005ff0:	0800604d 	.word	0x0800604d
 8005ff4:	08006065 	.word	0x08006065
 8005ff8:	08006065 	.word	0x08006065
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08006065 	.word	0x08006065
 8006004:	08006065 	.word	0x08006065
 8006008:	08006065 	.word	0x08006065
 800600c:	08006065 	.word	0x08006065
 8006010:	08006055 	.word	0x08006055
 8006014:	08006065 	.word	0x08006065
 8006018:	08006065 	.word	0x08006065
 800601c:	08006065 	.word	0x08006065
 8006020:	08006065 	.word	0x08006065
 8006024:	08006065 	.word	0x08006065
 8006028:	08006065 	.word	0x08006065
 800602c:	08006065 	.word	0x08006065
 8006030:	0800605d 	.word	0x0800605d
 8006034:	2301      	movs	r3, #1
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e326      	b.n	800668a <UART_SetConfig+0x7ae>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e322      	b.n	800668a <UART_SetConfig+0x7ae>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e31e      	b.n	800668a <UART_SetConfig+0x7ae>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e31a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006054:	2320      	movs	r3, #32
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e316      	b.n	800668a <UART_SetConfig+0x7ae>
 800605c:	2340      	movs	r3, #64	@ 0x40
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e312      	b.n	800668a <UART_SetConfig+0x7ae>
 8006064:	2380      	movs	r3, #128	@ 0x80
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e30e      	b.n	800668a <UART_SetConfig+0x7ae>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a69      	ldr	r2, [pc, #420]	@ (8006218 <UART_SetConfig+0x33c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d130      	bne.n	80060d8 <UART_SetConfig+0x1fc>
 8006076:	4b67      	ldr	r3, [pc, #412]	@ (8006214 <UART_SetConfig+0x338>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b05      	cmp	r3, #5
 8006080:	d826      	bhi.n	80060d0 <UART_SetConfig+0x1f4>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <UART_SetConfig+0x1ac>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060a1 	.word	0x080060a1
 800608c:	080060a9 	.word	0x080060a9
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c9 	.word	0x080060c9
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e2f0      	b.n	800668a <UART_SetConfig+0x7ae>
 80060a8:	2304      	movs	r3, #4
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e2ec      	b.n	800668a <UART_SetConfig+0x7ae>
 80060b0:	2308      	movs	r3, #8
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e2e8      	b.n	800668a <UART_SetConfig+0x7ae>
 80060b8:	2310      	movs	r3, #16
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e2e4      	b.n	800668a <UART_SetConfig+0x7ae>
 80060c0:	2320      	movs	r3, #32
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e2e0      	b.n	800668a <UART_SetConfig+0x7ae>
 80060c8:	2340      	movs	r3, #64	@ 0x40
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e2dc      	b.n	800668a <UART_SetConfig+0x7ae>
 80060d0:	2380      	movs	r3, #128	@ 0x80
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d6:	e2d8      	b.n	800668a <UART_SetConfig+0x7ae>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a4f      	ldr	r2, [pc, #316]	@ (800621c <UART_SetConfig+0x340>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d130      	bne.n	8006144 <UART_SetConfig+0x268>
 80060e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006214 <UART_SetConfig+0x338>)
 80060e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d826      	bhi.n	800613c <UART_SetConfig+0x260>
 80060ee:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <UART_SetConfig+0x218>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	0800610d 	.word	0x0800610d
 80060f8:	08006115 	.word	0x08006115
 80060fc:	0800611d 	.word	0x0800611d
 8006100:	08006125 	.word	0x08006125
 8006104:	0800612d 	.word	0x0800612d
 8006108:	08006135 	.word	0x08006135
 800610c:	2300      	movs	r3, #0
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e2ba      	b.n	800668a <UART_SetConfig+0x7ae>
 8006114:	2304      	movs	r3, #4
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e2b6      	b.n	800668a <UART_SetConfig+0x7ae>
 800611c:	2308      	movs	r3, #8
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e2b2      	b.n	800668a <UART_SetConfig+0x7ae>
 8006124:	2310      	movs	r3, #16
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612a:	e2ae      	b.n	800668a <UART_SetConfig+0x7ae>
 800612c:	2320      	movs	r3, #32
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e2aa      	b.n	800668a <UART_SetConfig+0x7ae>
 8006134:	2340      	movs	r3, #64	@ 0x40
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613a:	e2a6      	b.n	800668a <UART_SetConfig+0x7ae>
 800613c:	2380      	movs	r3, #128	@ 0x80
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006142:	e2a2      	b.n	800668a <UART_SetConfig+0x7ae>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a35      	ldr	r2, [pc, #212]	@ (8006220 <UART_SetConfig+0x344>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d130      	bne.n	80061b0 <UART_SetConfig+0x2d4>
 800614e:	4b31      	ldr	r3, [pc, #196]	@ (8006214 <UART_SetConfig+0x338>)
 8006150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	2b05      	cmp	r3, #5
 8006158:	d826      	bhi.n	80061a8 <UART_SetConfig+0x2cc>
 800615a:	a201      	add	r2, pc, #4	@ (adr r2, 8006160 <UART_SetConfig+0x284>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	08006179 	.word	0x08006179
 8006164:	08006181 	.word	0x08006181
 8006168:	08006189 	.word	0x08006189
 800616c:	08006191 	.word	0x08006191
 8006170:	08006199 	.word	0x08006199
 8006174:	080061a1 	.word	0x080061a1
 8006178:	2300      	movs	r3, #0
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e284      	b.n	800668a <UART_SetConfig+0x7ae>
 8006180:	2304      	movs	r3, #4
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e280      	b.n	800668a <UART_SetConfig+0x7ae>
 8006188:	2308      	movs	r3, #8
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e27c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006190:	2310      	movs	r3, #16
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006196:	e278      	b.n	800668a <UART_SetConfig+0x7ae>
 8006198:	2320      	movs	r3, #32
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e274      	b.n	800668a <UART_SetConfig+0x7ae>
 80061a0:	2340      	movs	r3, #64	@ 0x40
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a6:	e270      	b.n	800668a <UART_SetConfig+0x7ae>
 80061a8:	2380      	movs	r3, #128	@ 0x80
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ae:	e26c      	b.n	800668a <UART_SetConfig+0x7ae>
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006224 <UART_SetConfig+0x348>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d142      	bne.n	8006240 <UART_SetConfig+0x364>
 80061ba:	4b16      	ldr	r3, [pc, #88]	@ (8006214 <UART_SetConfig+0x338>)
 80061bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d838      	bhi.n	8006238 <UART_SetConfig+0x35c>
 80061c6:	a201      	add	r2, pc, #4	@ (adr r2, 80061cc <UART_SetConfig+0x2f0>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061e5 	.word	0x080061e5
 80061d0:	080061ed 	.word	0x080061ed
 80061d4:	080061f5 	.word	0x080061f5
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006229 	.word	0x08006229
 80061e0:	08006231 	.word	0x08006231
 80061e4:	2300      	movs	r3, #0
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e24e      	b.n	800668a <UART_SetConfig+0x7ae>
 80061ec:	2304      	movs	r3, #4
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e24a      	b.n	800668a <UART_SetConfig+0x7ae>
 80061f4:	2308      	movs	r3, #8
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e246      	b.n	800668a <UART_SetConfig+0x7ae>
 80061fc:	2310      	movs	r3, #16
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006202:	e242      	b.n	800668a <UART_SetConfig+0x7ae>
 8006204:	cfff69f3 	.word	0xcfff69f3
 8006208:	58000c00 	.word	0x58000c00
 800620c:	11fff4ff 	.word	0x11fff4ff
 8006210:	40011000 	.word	0x40011000
 8006214:	58024400 	.word	0x58024400
 8006218:	40004400 	.word	0x40004400
 800621c:	40004800 	.word	0x40004800
 8006220:	40004c00 	.word	0x40004c00
 8006224:	40005000 	.word	0x40005000
 8006228:	2320      	movs	r3, #32
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e22c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006230:	2340      	movs	r3, #64	@ 0x40
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e228      	b.n	800668a <UART_SetConfig+0x7ae>
 8006238:	2380      	movs	r3, #128	@ 0x80
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e224      	b.n	800668a <UART_SetConfig+0x7ae>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4ab1      	ldr	r2, [pc, #708]	@ (800650c <UART_SetConfig+0x630>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d176      	bne.n	8006338 <UART_SetConfig+0x45c>
 800624a:	4bb1      	ldr	r3, [pc, #708]	@ (8006510 <UART_SetConfig+0x634>)
 800624c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006252:	2b28      	cmp	r3, #40	@ 0x28
 8006254:	d86c      	bhi.n	8006330 <UART_SetConfig+0x454>
 8006256:	a201      	add	r2, pc, #4	@ (adr r2, 800625c <UART_SetConfig+0x380>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006301 	.word	0x08006301
 8006260:	08006331 	.word	0x08006331
 8006264:	08006331 	.word	0x08006331
 8006268:	08006331 	.word	0x08006331
 800626c:	08006331 	.word	0x08006331
 8006270:	08006331 	.word	0x08006331
 8006274:	08006331 	.word	0x08006331
 8006278:	08006331 	.word	0x08006331
 800627c:	08006309 	.word	0x08006309
 8006280:	08006331 	.word	0x08006331
 8006284:	08006331 	.word	0x08006331
 8006288:	08006331 	.word	0x08006331
 800628c:	08006331 	.word	0x08006331
 8006290:	08006331 	.word	0x08006331
 8006294:	08006331 	.word	0x08006331
 8006298:	08006331 	.word	0x08006331
 800629c:	08006311 	.word	0x08006311
 80062a0:	08006331 	.word	0x08006331
 80062a4:	08006331 	.word	0x08006331
 80062a8:	08006331 	.word	0x08006331
 80062ac:	08006331 	.word	0x08006331
 80062b0:	08006331 	.word	0x08006331
 80062b4:	08006331 	.word	0x08006331
 80062b8:	08006331 	.word	0x08006331
 80062bc:	08006319 	.word	0x08006319
 80062c0:	08006331 	.word	0x08006331
 80062c4:	08006331 	.word	0x08006331
 80062c8:	08006331 	.word	0x08006331
 80062cc:	08006331 	.word	0x08006331
 80062d0:	08006331 	.word	0x08006331
 80062d4:	08006331 	.word	0x08006331
 80062d8:	08006331 	.word	0x08006331
 80062dc:	08006321 	.word	0x08006321
 80062e0:	08006331 	.word	0x08006331
 80062e4:	08006331 	.word	0x08006331
 80062e8:	08006331 	.word	0x08006331
 80062ec:	08006331 	.word	0x08006331
 80062f0:	08006331 	.word	0x08006331
 80062f4:	08006331 	.word	0x08006331
 80062f8:	08006331 	.word	0x08006331
 80062fc:	08006329 	.word	0x08006329
 8006300:	2301      	movs	r3, #1
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e1c0      	b.n	800668a <UART_SetConfig+0x7ae>
 8006308:	2304      	movs	r3, #4
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630e:	e1bc      	b.n	800668a <UART_SetConfig+0x7ae>
 8006310:	2308      	movs	r3, #8
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006316:	e1b8      	b.n	800668a <UART_SetConfig+0x7ae>
 8006318:	2310      	movs	r3, #16
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e1b4      	b.n	800668a <UART_SetConfig+0x7ae>
 8006320:	2320      	movs	r3, #32
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e1b0      	b.n	800668a <UART_SetConfig+0x7ae>
 8006328:	2340      	movs	r3, #64	@ 0x40
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e1ac      	b.n	800668a <UART_SetConfig+0x7ae>
 8006330:	2380      	movs	r3, #128	@ 0x80
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e1a8      	b.n	800668a <UART_SetConfig+0x7ae>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a75      	ldr	r2, [pc, #468]	@ (8006514 <UART_SetConfig+0x638>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d130      	bne.n	80063a4 <UART_SetConfig+0x4c8>
 8006342:	4b73      	ldr	r3, [pc, #460]	@ (8006510 <UART_SetConfig+0x634>)
 8006344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b05      	cmp	r3, #5
 800634c:	d826      	bhi.n	800639c <UART_SetConfig+0x4c0>
 800634e:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <UART_SetConfig+0x478>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	0800636d 	.word	0x0800636d
 8006358:	08006375 	.word	0x08006375
 800635c:	0800637d 	.word	0x0800637d
 8006360:	08006385 	.word	0x08006385
 8006364:	0800638d 	.word	0x0800638d
 8006368:	08006395 	.word	0x08006395
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006372:	e18a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800637a:	e186      	b.n	800668a <UART_SetConfig+0x7ae>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006382:	e182      	b.n	800668a <UART_SetConfig+0x7ae>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638a:	e17e      	b.n	800668a <UART_SetConfig+0x7ae>
 800638c:	2320      	movs	r3, #32
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006392:	e17a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006394:	2340      	movs	r3, #64	@ 0x40
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e176      	b.n	800668a <UART_SetConfig+0x7ae>
 800639c:	2380      	movs	r3, #128	@ 0x80
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a2:	e172      	b.n	800668a <UART_SetConfig+0x7ae>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5b      	ldr	r2, [pc, #364]	@ (8006518 <UART_SetConfig+0x63c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d130      	bne.n	8006410 <UART_SetConfig+0x534>
 80063ae:	4b58      	ldr	r3, [pc, #352]	@ (8006510 <UART_SetConfig+0x634>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d826      	bhi.n	8006408 <UART_SetConfig+0x52c>
 80063ba:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <UART_SetConfig+0x4e4>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d9 	.word	0x080063d9
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063e9 	.word	0x080063e9
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	08006401 	.word	0x08006401
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063de:	e154      	b.n	800668a <UART_SetConfig+0x7ae>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e6:	e150      	b.n	800668a <UART_SetConfig+0x7ae>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ee:	e14c      	b.n	800668a <UART_SetConfig+0x7ae>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e148      	b.n	800668a <UART_SetConfig+0x7ae>
 80063f8:	2320      	movs	r3, #32
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e144      	b.n	800668a <UART_SetConfig+0x7ae>
 8006400:	2340      	movs	r3, #64	@ 0x40
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e140      	b.n	800668a <UART_SetConfig+0x7ae>
 8006408:	2380      	movs	r3, #128	@ 0x80
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e13c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a41      	ldr	r2, [pc, #260]	@ (800651c <UART_SetConfig+0x640>)
 8006416:	4293      	cmp	r3, r2
 8006418:	f040 8082 	bne.w	8006520 <UART_SetConfig+0x644>
 800641c:	4b3c      	ldr	r3, [pc, #240]	@ (8006510 <UART_SetConfig+0x634>)
 800641e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006420:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006424:	2b28      	cmp	r3, #40	@ 0x28
 8006426:	d86d      	bhi.n	8006504 <UART_SetConfig+0x628>
 8006428:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <UART_SetConfig+0x554>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	080064d5 	.word	0x080064d5
 8006434:	08006505 	.word	0x08006505
 8006438:	08006505 	.word	0x08006505
 800643c:	08006505 	.word	0x08006505
 8006440:	08006505 	.word	0x08006505
 8006444:	08006505 	.word	0x08006505
 8006448:	08006505 	.word	0x08006505
 800644c:	08006505 	.word	0x08006505
 8006450:	080064dd 	.word	0x080064dd
 8006454:	08006505 	.word	0x08006505
 8006458:	08006505 	.word	0x08006505
 800645c:	08006505 	.word	0x08006505
 8006460:	08006505 	.word	0x08006505
 8006464:	08006505 	.word	0x08006505
 8006468:	08006505 	.word	0x08006505
 800646c:	08006505 	.word	0x08006505
 8006470:	080064e5 	.word	0x080064e5
 8006474:	08006505 	.word	0x08006505
 8006478:	08006505 	.word	0x08006505
 800647c:	08006505 	.word	0x08006505
 8006480:	08006505 	.word	0x08006505
 8006484:	08006505 	.word	0x08006505
 8006488:	08006505 	.word	0x08006505
 800648c:	08006505 	.word	0x08006505
 8006490:	080064ed 	.word	0x080064ed
 8006494:	08006505 	.word	0x08006505
 8006498:	08006505 	.word	0x08006505
 800649c:	08006505 	.word	0x08006505
 80064a0:	08006505 	.word	0x08006505
 80064a4:	08006505 	.word	0x08006505
 80064a8:	08006505 	.word	0x08006505
 80064ac:	08006505 	.word	0x08006505
 80064b0:	080064f5 	.word	0x080064f5
 80064b4:	08006505 	.word	0x08006505
 80064b8:	08006505 	.word	0x08006505
 80064bc:	08006505 	.word	0x08006505
 80064c0:	08006505 	.word	0x08006505
 80064c4:	08006505 	.word	0x08006505
 80064c8:	08006505 	.word	0x08006505
 80064cc:	08006505 	.word	0x08006505
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064da:	e0d6      	b.n	800668a <UART_SetConfig+0x7ae>
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064e2:	e0d2      	b.n	800668a <UART_SetConfig+0x7ae>
 80064e4:	2308      	movs	r3, #8
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e0ce      	b.n	800668a <UART_SetConfig+0x7ae>
 80064ec:	2310      	movs	r3, #16
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e0ca      	b.n	800668a <UART_SetConfig+0x7ae>
 80064f4:	2320      	movs	r3, #32
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e0c6      	b.n	800668a <UART_SetConfig+0x7ae>
 80064fc:	2340      	movs	r3, #64	@ 0x40
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e0c2      	b.n	800668a <UART_SetConfig+0x7ae>
 8006504:	2380      	movs	r3, #128	@ 0x80
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e0be      	b.n	800668a <UART_SetConfig+0x7ae>
 800650c:	40011400 	.word	0x40011400
 8006510:	58024400 	.word	0x58024400
 8006514:	40007800 	.word	0x40007800
 8006518:	40007c00 	.word	0x40007c00
 800651c:	40011800 	.word	0x40011800
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4aad      	ldr	r2, [pc, #692]	@ (80067dc <UART_SetConfig+0x900>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d176      	bne.n	8006618 <UART_SetConfig+0x73c>
 800652a:	4bad      	ldr	r3, [pc, #692]	@ (80067e0 <UART_SetConfig+0x904>)
 800652c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006532:	2b28      	cmp	r3, #40	@ 0x28
 8006534:	d86c      	bhi.n	8006610 <UART_SetConfig+0x734>
 8006536:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <UART_SetConfig+0x660>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	080065e1 	.word	0x080065e1
 8006540:	08006611 	.word	0x08006611
 8006544:	08006611 	.word	0x08006611
 8006548:	08006611 	.word	0x08006611
 800654c:	08006611 	.word	0x08006611
 8006550:	08006611 	.word	0x08006611
 8006554:	08006611 	.word	0x08006611
 8006558:	08006611 	.word	0x08006611
 800655c:	080065e9 	.word	0x080065e9
 8006560:	08006611 	.word	0x08006611
 8006564:	08006611 	.word	0x08006611
 8006568:	08006611 	.word	0x08006611
 800656c:	08006611 	.word	0x08006611
 8006570:	08006611 	.word	0x08006611
 8006574:	08006611 	.word	0x08006611
 8006578:	08006611 	.word	0x08006611
 800657c:	080065f1 	.word	0x080065f1
 8006580:	08006611 	.word	0x08006611
 8006584:	08006611 	.word	0x08006611
 8006588:	08006611 	.word	0x08006611
 800658c:	08006611 	.word	0x08006611
 8006590:	08006611 	.word	0x08006611
 8006594:	08006611 	.word	0x08006611
 8006598:	08006611 	.word	0x08006611
 800659c:	080065f9 	.word	0x080065f9
 80065a0:	08006611 	.word	0x08006611
 80065a4:	08006611 	.word	0x08006611
 80065a8:	08006611 	.word	0x08006611
 80065ac:	08006611 	.word	0x08006611
 80065b0:	08006611 	.word	0x08006611
 80065b4:	08006611 	.word	0x08006611
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006601 	.word	0x08006601
 80065c0:	08006611 	.word	0x08006611
 80065c4:	08006611 	.word	0x08006611
 80065c8:	08006611 	.word	0x08006611
 80065cc:	08006611 	.word	0x08006611
 80065d0:	08006611 	.word	0x08006611
 80065d4:	08006611 	.word	0x08006611
 80065d8:	08006611 	.word	0x08006611
 80065dc:	08006609 	.word	0x08006609
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e6:	e050      	b.n	800668a <UART_SetConfig+0x7ae>
 80065e8:	2304      	movs	r3, #4
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e04c      	b.n	800668a <UART_SetConfig+0x7ae>
 80065f0:	2308      	movs	r3, #8
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e048      	b.n	800668a <UART_SetConfig+0x7ae>
 80065f8:	2310      	movs	r3, #16
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fe:	e044      	b.n	800668a <UART_SetConfig+0x7ae>
 8006600:	2320      	movs	r3, #32
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006606:	e040      	b.n	800668a <UART_SetConfig+0x7ae>
 8006608:	2340      	movs	r3, #64	@ 0x40
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660e:	e03c      	b.n	800668a <UART_SetConfig+0x7ae>
 8006610:	2380      	movs	r3, #128	@ 0x80
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e038      	b.n	800668a <UART_SetConfig+0x7ae>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a71      	ldr	r2, [pc, #452]	@ (80067e4 <UART_SetConfig+0x908>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d130      	bne.n	8006684 <UART_SetConfig+0x7a8>
 8006622:	4b6f      	ldr	r3, [pc, #444]	@ (80067e0 <UART_SetConfig+0x904>)
 8006624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b05      	cmp	r3, #5
 800662c:	d826      	bhi.n	800667c <UART_SetConfig+0x7a0>
 800662e:	a201      	add	r2, pc, #4	@ (adr r2, 8006634 <UART_SetConfig+0x758>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	0800664d 	.word	0x0800664d
 8006638:	08006655 	.word	0x08006655
 800663c:	0800665d 	.word	0x0800665d
 8006640:	08006665 	.word	0x08006665
 8006644:	0800666d 	.word	0x0800666d
 8006648:	08006675 	.word	0x08006675
 800664c:	2302      	movs	r3, #2
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006652:	e01a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006654:	2304      	movs	r3, #4
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665a:	e016      	b.n	800668a <UART_SetConfig+0x7ae>
 800665c:	2308      	movs	r3, #8
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e012      	b.n	800668a <UART_SetConfig+0x7ae>
 8006664:	2310      	movs	r3, #16
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e00e      	b.n	800668a <UART_SetConfig+0x7ae>
 800666c:	2320      	movs	r3, #32
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e00a      	b.n	800668a <UART_SetConfig+0x7ae>
 8006674:	2340      	movs	r3, #64	@ 0x40
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e006      	b.n	800668a <UART_SetConfig+0x7ae>
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e002      	b.n	800668a <UART_SetConfig+0x7ae>
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a55      	ldr	r2, [pc, #340]	@ (80067e4 <UART_SetConfig+0x908>)
 8006690:	4293      	cmp	r3, r2
 8006692:	f040 80f8 	bne.w	8006886 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006696:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800669a:	2b20      	cmp	r3, #32
 800669c:	dc46      	bgt.n	800672c <UART_SetConfig+0x850>
 800669e:	2b02      	cmp	r3, #2
 80066a0:	db75      	blt.n	800678e <UART_SetConfig+0x8b2>
 80066a2:	3b02      	subs	r3, #2
 80066a4:	2b1e      	cmp	r3, #30
 80066a6:	d872      	bhi.n	800678e <UART_SetConfig+0x8b2>
 80066a8:	a201      	add	r2, pc, #4	@ (adr r2, 80066b0 <UART_SetConfig+0x7d4>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	08006733 	.word	0x08006733
 80066b4:	0800678f 	.word	0x0800678f
 80066b8:	0800673b 	.word	0x0800673b
 80066bc:	0800678f 	.word	0x0800678f
 80066c0:	0800678f 	.word	0x0800678f
 80066c4:	0800678f 	.word	0x0800678f
 80066c8:	0800674b 	.word	0x0800674b
 80066cc:	0800678f 	.word	0x0800678f
 80066d0:	0800678f 	.word	0x0800678f
 80066d4:	0800678f 	.word	0x0800678f
 80066d8:	0800678f 	.word	0x0800678f
 80066dc:	0800678f 	.word	0x0800678f
 80066e0:	0800678f 	.word	0x0800678f
 80066e4:	0800678f 	.word	0x0800678f
 80066e8:	0800675b 	.word	0x0800675b
 80066ec:	0800678f 	.word	0x0800678f
 80066f0:	0800678f 	.word	0x0800678f
 80066f4:	0800678f 	.word	0x0800678f
 80066f8:	0800678f 	.word	0x0800678f
 80066fc:	0800678f 	.word	0x0800678f
 8006700:	0800678f 	.word	0x0800678f
 8006704:	0800678f 	.word	0x0800678f
 8006708:	0800678f 	.word	0x0800678f
 800670c:	0800678f 	.word	0x0800678f
 8006710:	0800678f 	.word	0x0800678f
 8006714:	0800678f 	.word	0x0800678f
 8006718:	0800678f 	.word	0x0800678f
 800671c:	0800678f 	.word	0x0800678f
 8006720:	0800678f 	.word	0x0800678f
 8006724:	0800678f 	.word	0x0800678f
 8006728:	08006781 	.word	0x08006781
 800672c:	2b40      	cmp	r3, #64	@ 0x40
 800672e:	d02a      	beq.n	8006786 <UART_SetConfig+0x8aa>
 8006730:	e02d      	b.n	800678e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006732:	f7fd ffaf 	bl	8004694 <HAL_RCCEx_GetD3PCLK1Freq>
 8006736:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006738:	e02f      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800673a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800673e:	4618      	mov	r0, r3
 8006740:	f7fd ffbe 	bl	80046c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006748:	e027      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674a:	f107 0318 	add.w	r3, r7, #24
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe f90a 	bl	8004968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006758:	e01f      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800675a:	4b21      	ldr	r3, [pc, #132]	@ (80067e0 <UART_SetConfig+0x904>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d009      	beq.n	800677a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006766:	4b1e      	ldr	r3, [pc, #120]	@ (80067e0 <UART_SetConfig+0x904>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	08db      	lsrs	r3, r3, #3
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	4a1d      	ldr	r2, [pc, #116]	@ (80067e8 <UART_SetConfig+0x90c>)
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006778:	e00f      	b.n	800679a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800677a:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <UART_SetConfig+0x90c>)
 800677c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800677e:	e00c      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006780:	4b1a      	ldr	r3, [pc, #104]	@ (80067ec <UART_SetConfig+0x910>)
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006784:	e009      	b.n	800679a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800678c:	e005      	b.n	800679a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800679a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 81ee 	beq.w	8006b7e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	4a12      	ldr	r2, [pc, #72]	@ (80067f0 <UART_SetConfig+0x914>)
 80067a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ac:	461a      	mov	r2, r3
 80067ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80067b4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d305      	bcc.n	80067d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d910      	bls.n	80067f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067d8:	e1d1      	b.n	8006b7e <UART_SetConfig+0xca2>
 80067da:	bf00      	nop
 80067dc:	40011c00 	.word	0x40011c00
 80067e0:	58024400 	.word	0x58024400
 80067e4:	58000c00 	.word	0x58000c00
 80067e8:	03d09000 	.word	0x03d09000
 80067ec:	003d0900 	.word	0x003d0900
 80067f0:	0800c0b8 	.word	0x0800c0b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f6:	2200      	movs	r2, #0
 80067f8:	60bb      	str	r3, [r7, #8]
 80067fa:	60fa      	str	r2, [r7, #12]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	4ac0      	ldr	r2, [pc, #768]	@ (8006b04 <UART_SetConfig+0xc28>)
 8006802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006806:	b29b      	uxth	r3, r3
 8006808:	2200      	movs	r2, #0
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006816:	f7f9 fdd3 	bl	80003c0 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	020b      	lsls	r3, r1, #8
 800682c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006830:	0202      	lsls	r2, r0, #8
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	6849      	ldr	r1, [r1, #4]
 8006836:	0849      	lsrs	r1, r1, #1
 8006838:	2000      	movs	r0, #0
 800683a:	460c      	mov	r4, r1
 800683c:	4605      	mov	r5, r0
 800683e:	eb12 0804 	adds.w	r8, r2, r4
 8006842:	eb43 0905 	adc.w	r9, r3, r5
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	469a      	mov	sl, r3
 800684e:	4693      	mov	fp, r2
 8006850:	4652      	mov	r2, sl
 8006852:	465b      	mov	r3, fp
 8006854:	4640      	mov	r0, r8
 8006856:	4649      	mov	r1, r9
 8006858:	f7f9 fdb2 	bl	80003c0 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800686a:	d308      	bcc.n	800687e <UART_SetConfig+0x9a2>
 800686c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006872:	d204      	bcs.n	800687e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	e17f      	b.n	8006b7e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006884:	e17b      	b.n	8006b7e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800688e:	f040 80bd 	bne.w	8006a0c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006892:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006896:	2b20      	cmp	r3, #32
 8006898:	dc48      	bgt.n	800692c <UART_SetConfig+0xa50>
 800689a:	2b00      	cmp	r3, #0
 800689c:	db7b      	blt.n	8006996 <UART_SetConfig+0xaba>
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d879      	bhi.n	8006996 <UART_SetConfig+0xaba>
 80068a2:	a201      	add	r2, pc, #4	@ (adr r2, 80068a8 <UART_SetConfig+0x9cc>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	08006933 	.word	0x08006933
 80068ac:	0800693b 	.word	0x0800693b
 80068b0:	08006997 	.word	0x08006997
 80068b4:	08006997 	.word	0x08006997
 80068b8:	08006943 	.word	0x08006943
 80068bc:	08006997 	.word	0x08006997
 80068c0:	08006997 	.word	0x08006997
 80068c4:	08006997 	.word	0x08006997
 80068c8:	08006953 	.word	0x08006953
 80068cc:	08006997 	.word	0x08006997
 80068d0:	08006997 	.word	0x08006997
 80068d4:	08006997 	.word	0x08006997
 80068d8:	08006997 	.word	0x08006997
 80068dc:	08006997 	.word	0x08006997
 80068e0:	08006997 	.word	0x08006997
 80068e4:	08006997 	.word	0x08006997
 80068e8:	08006963 	.word	0x08006963
 80068ec:	08006997 	.word	0x08006997
 80068f0:	08006997 	.word	0x08006997
 80068f4:	08006997 	.word	0x08006997
 80068f8:	08006997 	.word	0x08006997
 80068fc:	08006997 	.word	0x08006997
 8006900:	08006997 	.word	0x08006997
 8006904:	08006997 	.word	0x08006997
 8006908:	08006997 	.word	0x08006997
 800690c:	08006997 	.word	0x08006997
 8006910:	08006997 	.word	0x08006997
 8006914:	08006997 	.word	0x08006997
 8006918:	08006997 	.word	0x08006997
 800691c:	08006997 	.word	0x08006997
 8006920:	08006997 	.word	0x08006997
 8006924:	08006997 	.word	0x08006997
 8006928:	08006989 	.word	0x08006989
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d02e      	beq.n	800698e <UART_SetConfig+0xab2>
 8006930:	e031      	b.n	8006996 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006932:	f7fc fca1 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8006936:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006938:	e033      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800693a:	f7fc fcb3 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 800693e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006940:	e02f      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006946:	4618      	mov	r0, r3
 8006948:	f7fd feba 	bl	80046c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800694c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006950:	e027      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006952:	f107 0318 	add.w	r3, r7, #24
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe f806 	bl	8004968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006960:	e01f      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006962:	4b69      	ldr	r3, [pc, #420]	@ (8006b08 <UART_SetConfig+0xc2c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0320 	and.w	r3, r3, #32
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800696e:	4b66      	ldr	r3, [pc, #408]	@ (8006b08 <UART_SetConfig+0xc2c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	08db      	lsrs	r3, r3, #3
 8006974:	f003 0303 	and.w	r3, r3, #3
 8006978:	4a64      	ldr	r2, [pc, #400]	@ (8006b0c <UART_SetConfig+0xc30>)
 800697a:	fa22 f303 	lsr.w	r3, r2, r3
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006980:	e00f      	b.n	80069a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006982:	4b62      	ldr	r3, [pc, #392]	@ (8006b0c <UART_SetConfig+0xc30>)
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006986:	e00c      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006988:	4b61      	ldr	r3, [pc, #388]	@ (8006b10 <UART_SetConfig+0xc34>)
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698c:	e009      	b.n	80069a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006994:	e005      	b.n	80069a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80ea 	beq.w	8006b7e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	4a55      	ldr	r2, [pc, #340]	@ (8006b04 <UART_SetConfig+0xc28>)
 80069b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069bc:	005a      	lsls	r2, r3, #1
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	441a      	add	r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	d916      	bls.n	8006a04 <UART_SetConfig+0xb28>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069dc:	d212      	bcs.n	8006a04 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f023 030f 	bic.w	r3, r3, #15
 80069e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80069f6:	4313      	orrs	r3, r2
 80069f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	e0bc      	b.n	8006b7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a0a:	e0b8      	b.n	8006b7e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a10:	2b20      	cmp	r3, #32
 8006a12:	dc4b      	bgt.n	8006aac <UART_SetConfig+0xbd0>
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f2c0 8087 	blt.w	8006b28 <UART_SetConfig+0xc4c>
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	f200 8084 	bhi.w	8006b28 <UART_SetConfig+0xc4c>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <UART_SetConfig+0xb4c>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006ab3 	.word	0x08006ab3
 8006a2c:	08006abb 	.word	0x08006abb
 8006a30:	08006b29 	.word	0x08006b29
 8006a34:	08006b29 	.word	0x08006b29
 8006a38:	08006ac3 	.word	0x08006ac3
 8006a3c:	08006b29 	.word	0x08006b29
 8006a40:	08006b29 	.word	0x08006b29
 8006a44:	08006b29 	.word	0x08006b29
 8006a48:	08006ad3 	.word	0x08006ad3
 8006a4c:	08006b29 	.word	0x08006b29
 8006a50:	08006b29 	.word	0x08006b29
 8006a54:	08006b29 	.word	0x08006b29
 8006a58:	08006b29 	.word	0x08006b29
 8006a5c:	08006b29 	.word	0x08006b29
 8006a60:	08006b29 	.word	0x08006b29
 8006a64:	08006b29 	.word	0x08006b29
 8006a68:	08006ae3 	.word	0x08006ae3
 8006a6c:	08006b29 	.word	0x08006b29
 8006a70:	08006b29 	.word	0x08006b29
 8006a74:	08006b29 	.word	0x08006b29
 8006a78:	08006b29 	.word	0x08006b29
 8006a7c:	08006b29 	.word	0x08006b29
 8006a80:	08006b29 	.word	0x08006b29
 8006a84:	08006b29 	.word	0x08006b29
 8006a88:	08006b29 	.word	0x08006b29
 8006a8c:	08006b29 	.word	0x08006b29
 8006a90:	08006b29 	.word	0x08006b29
 8006a94:	08006b29 	.word	0x08006b29
 8006a98:	08006b29 	.word	0x08006b29
 8006a9c:	08006b29 	.word	0x08006b29
 8006aa0:	08006b29 	.word	0x08006b29
 8006aa4:	08006b29 	.word	0x08006b29
 8006aa8:	08006b1b 	.word	0x08006b1b
 8006aac:	2b40      	cmp	r3, #64	@ 0x40
 8006aae:	d037      	beq.n	8006b20 <UART_SetConfig+0xc44>
 8006ab0:	e03a      	b.n	8006b28 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab2:	f7fc fbe1 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8006ab6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ab8:	e03c      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aba:	f7fc fbf3 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8006abe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ac0:	e038      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fd fdfa 	bl	80046c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad0:	e030      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad2:	f107 0318 	add.w	r3, r7, #24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fd ff46 	bl	8004968 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae0:	e028      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ae2:	4b09      	ldr	r3, [pc, #36]	@ (8006b08 <UART_SetConfig+0xc2c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d012      	beq.n	8006b14 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aee:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <UART_SetConfig+0xc2c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	08db      	lsrs	r3, r3, #3
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	4a04      	ldr	r2, [pc, #16]	@ (8006b0c <UART_SetConfig+0xc30>)
 8006afa:	fa22 f303 	lsr.w	r3, r2, r3
 8006afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b00:	e018      	b.n	8006b34 <UART_SetConfig+0xc58>
 8006b02:	bf00      	nop
 8006b04:	0800c0b8 	.word	0x0800c0b8
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	03d09000 	.word	0x03d09000
 8006b10:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006b14:	4b24      	ldr	r3, [pc, #144]	@ (8006ba8 <UART_SetConfig+0xccc>)
 8006b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b18:	e00c      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b1a:	4b24      	ldr	r3, [pc, #144]	@ (8006bac <UART_SetConfig+0xcd0>)
 8006b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b1e:	e009      	b.n	8006b34 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b26:	e005      	b.n	8006b34 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b32:	bf00      	nop
    }

    if (pclk != 0U)
 8006b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d021      	beq.n	8006b7e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bb0 <UART_SetConfig+0xcd4>)
 8006b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b48:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	441a      	add	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b60:	2b0f      	cmp	r3, #15
 8006b62:	d909      	bls.n	8006b78 <UART_SetConfig+0xc9c>
 8006b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b6a:	d205      	bcs.n	8006b78 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60da      	str	r2, [r3, #12]
 8006b76:	e002      	b.n	8006b7e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2200      	movs	r2, #0
 8006b92:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2200      	movs	r2, #0
 8006b98:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b9a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3748      	adds	r7, #72	@ 0x48
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ba8:	03d09000 	.word	0x03d09000
 8006bac:	003d0900 	.word	0x003d0900
 8006bb0:	0800c0b8 	.word	0x0800c0b8

08006bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00a      	beq.n	8006c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01a      	beq.n	8006cca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb2:	d10a      	bne.n	8006cca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	605a      	str	r2, [r3, #4]
  }
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b098      	sub	sp, #96	@ 0x60
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d08:	f7fa fab8 	bl	800127c <HAL_GetTick>
 8006d0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d12f      	bne.n	8006d7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d24:	2200      	movs	r2, #0
 8006d26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f88e 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d022      	beq.n	8006d7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e6      	bne.n	8006d36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e063      	b.n	8006e44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d149      	bne.n	8006e1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d92:	2200      	movs	r2, #0
 8006d94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f857 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d03c      	beq.n	8006e1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	623b      	str	r3, [r7, #32]
   return(result);
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e6      	bne.n	8006da4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006df6:	61fa      	str	r2, [r7, #28]
 8006df8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	69b9      	ldr	r1, [r7, #24]
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	617b      	str	r3, [r7, #20]
   return(result);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e5      	bne.n	8006dd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e012      	b.n	8006e44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3758      	adds	r7, #88	@ 0x58
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5c:	e04f      	b.n	8006efe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e64:	d04b      	beq.n	8006efe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e66:	f7fa fa09 	bl	800127c <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d302      	bcc.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e04e      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d037      	beq.n	8006efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b80      	cmp	r3, #128	@ 0x80
 8006e92:	d034      	beq.n	8006efe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b40      	cmp	r3, #64	@ 0x40
 8006e98:	d031      	beq.n	8006efe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	f003 0308 	and.w	r3, r3, #8
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d110      	bne.n	8006eca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2208      	movs	r2, #8
 8006eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f95b 	bl	800716c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2208      	movs	r2, #8
 8006eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e029      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed8:	d111      	bne.n	8006efe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f941 	bl	800716c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e00f      	b.n	8006f1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4013      	ands	r3, r2
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	bf0c      	ite	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	2300      	movne	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	461a      	mov	r2, r3
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d0a0      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b0a3      	sub	sp, #140	@ 0x8c
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5a:	d10e      	bne.n	8006f7a <UART_Start_Receive_IT+0x52>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <UART_Start_Receive_IT+0x48>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f6e:	e02d      	b.n	8006fcc <UART_Start_Receive_IT+0xa4>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	22ff      	movs	r2, #255	@ 0xff
 8006f74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f78:	e028      	b.n	8006fcc <UART_Start_Receive_IT+0xa4>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <UART_Start_Receive_IT+0x76>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <UART_Start_Receive_IT+0x6c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	22ff      	movs	r2, #255	@ 0xff
 8006f8e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f92:	e01b      	b.n	8006fcc <UART_Start_Receive_IT+0xa4>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	227f      	movs	r2, #127	@ 0x7f
 8006f98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f9c:	e016      	b.n	8006fcc <UART_Start_Receive_IT+0xa4>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fa6:	d10d      	bne.n	8006fc4 <UART_Start_Receive_IT+0x9c>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <UART_Start_Receive_IT+0x92>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	227f      	movs	r2, #127	@ 0x7f
 8006fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006fb8:	e008      	b.n	8006fcc <UART_Start_Receive_IT+0xa4>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	223f      	movs	r2, #63	@ 0x3f
 8006fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006fc2:	e003      	b.n	8006fcc <UART_Start_Receive_IT+0xa4>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2222      	movs	r2, #34	@ 0x22
 8006fd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006fec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007000:	673a      	str	r2, [r7, #112]	@ 0x70
 8007002:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007006:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800700e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e3      	bne.n	8006fdc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800701c:	d14f      	bne.n	80070be <UART_Start_Receive_IT+0x196>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	429a      	cmp	r2, r3
 8007028:	d349      	bcc.n	80070be <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007032:	d107      	bne.n	8007044 <UART_Start_Receive_IT+0x11c>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a47      	ldr	r2, [pc, #284]	@ (800715c <UART_Start_Receive_IT+0x234>)
 8007040:	675a      	str	r2, [r3, #116]	@ 0x74
 8007042:	e002      	b.n	800704a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a46      	ldr	r2, [pc, #280]	@ (8007160 <UART_Start_Receive_IT+0x238>)
 8007048:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d01a      	beq.n	8007088 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007066:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007074:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007076:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800707a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e4      	bne.n	8007052 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3308      	adds	r3, #8
 800708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800709e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3308      	adds	r3, #8
 80070a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80070a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80070aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80070b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e5      	bne.n	8007088 <UART_Start_Receive_IT+0x160>
 80070bc:	e046      	b.n	800714c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c6:	d107      	bne.n	80070d8 <UART_Start_Receive_IT+0x1b0>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d103      	bne.n	80070d8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a24      	ldr	r2, [pc, #144]	@ (8007164 <UART_Start_Receive_IT+0x23c>)
 80070d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80070d6:	e002      	b.n	80070de <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4a23      	ldr	r2, [pc, #140]	@ (8007168 <UART_Start_Receive_IT+0x240>)
 80070dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d019      	beq.n	800711a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80070fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007104:	637b      	str	r3, [r7, #52]	@ 0x34
 8007106:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800710a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_Start_Receive_IT+0x1be>
 8007118:	e018      	b.n	800714c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	613b      	str	r3, [r7, #16]
   return(result);
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f043 0320 	orr.w	r3, r3, #32
 800712e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007138:	623b      	str	r3, [r7, #32]
 800713a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	69f9      	ldr	r1, [r7, #28]
 800713e:	6a3a      	ldr	r2, [r7, #32]
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	61bb      	str	r3, [r7, #24]
   return(result);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e6      	bne.n	800711a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	378c      	adds	r7, #140	@ 0x8c
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	08007989 	.word	0x08007989
 8007160:	08007625 	.word	0x08007625
 8007164:	0800746d 	.word	0x0800746d
 8007168:	080072b5 	.word	0x080072b5

0800716c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b095      	sub	sp, #84	@ 0x54
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007192:	643b      	str	r3, [r7, #64]	@ 0x40
 8007194:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007198:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800719a:	e841 2300 	strex	r3, r2, [r1]
 800719e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1e6      	bne.n	8007174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	3308      	adds	r3, #8
 80071ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007234 <UART_EndRxTransfer+0xc8>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3308      	adds	r3, #8
 80071c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d118      	bne.n	8007214 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f023 0310 	bic.w	r3, r3, #16
 80071f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6979      	ldr	r1, [r7, #20]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	613b      	str	r3, [r7, #16]
   return(result);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e6      	bne.n	80071e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007228:	bf00      	nop
 800722a:	3754      	adds	r7, #84	@ 0x54
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	effffffe 	.word	0xeffffffe

08007238 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7fe fe2e 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	60bb      	str	r3, [r7, #8]
   return(result);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6979      	ldr	r1, [r7, #20]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	613b      	str	r3, [r7, #16]
   return(result);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e6      	bne.n	8007264 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7fe fdf9 	bl	8005e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072aa:	bf00      	nop
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b09c      	sub	sp, #112	@ 0x70
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80072c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072cc:	2b22      	cmp	r3, #34	@ 0x22
 80072ce:	f040 80be 	bne.w	800744e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80072e0:	b2d9      	uxtb	r1, r3
 80072e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ec:	400a      	ands	r2, r1
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	f040 80a1 	bne.w	800745e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800732a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800732c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800733a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800733c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007340:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e6      	bne.n	800731c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3308      	adds	r3, #8
 8007354:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800735e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	667b      	str	r3, [r7, #100]	@ 0x64
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3308      	adds	r3, #8
 800736c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800736e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007370:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007374:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800737c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e5      	bne.n	800734e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a33      	ldr	r2, [pc, #204]	@ (8007468 <UART_RxISR_8BIT+0x1b4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d01f      	beq.n	80073e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d018      	beq.n	80073e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	623b      	str	r3, [r7, #32]
   return(result);
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80073ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e6      	bne.n	80073ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d12e      	bne.n	8007446 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800740c:	61fb      	str	r3, [r7, #28]
 800740e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69b9      	ldr	r1, [r7, #24]
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	617b      	str	r3, [r7, #20]
   return(result);
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e6      	bne.n	80073ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b10      	cmp	r3, #16
 800742c:	d103      	bne.n	8007436 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2210      	movs	r2, #16
 8007434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fe fd40 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007444:	e00b      	b.n	800745e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7f9 fb30 	bl	8000aac <HAL_UART_RxCpltCallback>
}
 800744c:	e007      	b.n	800745e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699a      	ldr	r2, [r3, #24]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0208 	orr.w	r2, r2, #8
 800745c:	619a      	str	r2, [r3, #24]
}
 800745e:	bf00      	nop
 8007460:	3770      	adds	r7, #112	@ 0x70
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	58000c00 	.word	0x58000c00

0800746c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b09c      	sub	sp, #112	@ 0x70
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800747a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007484:	2b22      	cmp	r3, #34	@ 0x22
 8007486:	f040 80be 	bne.w	8007606 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007498:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800749a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800749e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80074a2:	4013      	ands	r3, r2
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ae:	1c9a      	adds	r2, r3, #2
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f040 80a1 	bne.w	8007616 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80074e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80074f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80074f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e6      	bne.n	80074d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	663b      	str	r3, [r7, #96]	@ 0x60
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007526:	643a      	str	r2, [r7, #64]	@ 0x40
 8007528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800752c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e5      	bne.n	8007506 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a33      	ldr	r2, [pc, #204]	@ (8007620 <UART_RxISR_16BIT+0x1b4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d01f      	beq.n	8007598 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d018      	beq.n	8007598 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	61fb      	str	r3, [r7, #28]
   return(result);
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800757a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007586:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800758a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d12e      	bne.n	80075fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f023 0310 	bic.w	r3, r3, #16
 80075ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6979      	ldr	r1, [r7, #20]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	613b      	str	r3, [r7, #16]
   return(result);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e6      	bne.n	80075a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d103      	bne.n	80075ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2210      	movs	r2, #16
 80075ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fe fc64 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075fc:	e00b      	b.n	8007616 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7f9 fa54 	bl	8000aac <HAL_UART_RxCpltCallback>
}
 8007604:	e007      	b.n	8007616 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0208 	orr.w	r2, r2, #8
 8007614:	619a      	str	r2, [r3, #24]
}
 8007616:	bf00      	nop
 8007618:	3770      	adds	r7, #112	@ 0x70
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	58000c00 	.word	0x58000c00

08007624 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b0ac      	sub	sp, #176	@ 0xb0
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007632:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800765a:	2b22      	cmp	r3, #34	@ 0x22
 800765c:	f040 8181 	bne.w	8007962 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007666:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800766a:	e124      	b.n	80078b6 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007672:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007676:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800767a:	b2d9      	uxtb	r1, r3
 800767c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007680:	b2da      	uxtb	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007686:	400a      	ands	r2, r1
 8007688:	b2d2      	uxtb	r2, r2
 800768a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80076b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076b6:	f003 0307 	and.w	r3, r3, #7
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d053      	beq.n	8007766 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d011      	beq.n	80076ee <UART_RxISR_8BIT_FIFOEN+0xca>
 80076ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2201      	movs	r2, #1
 80076dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e4:	f043 0201 	orr.w	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d011      	beq.n	800771e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80076fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2202      	movs	r2, #2
 800770c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007714:	f043 0204 	orr.w	r2, r3, #4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800771e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d011      	beq.n	800774e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800772a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2204      	movs	r2, #4
 800773c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007744:	f043 0202 	orr.w	r2, r3, #2
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fe fba9 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 80a1 	bne.w	80078b6 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007796:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007798:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800779c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80077a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e4      	bne.n	8007774 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80077ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077bc:	4b6f      	ldr	r3, [pc, #444]	@ (800797c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80077be:	4013      	ands	r3, r2
 80077c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 80077d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80077d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80077dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e3      	bne.n	80077aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a61      	ldr	r2, [pc, #388]	@ (8007980 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d021      	beq.n	8007844 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d01a      	beq.n	8007844 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800781c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800781e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007830:	657b      	str	r3, [r7, #84]	@ 0x54
 8007832:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007836:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800783e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e4      	bne.n	800780e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007848:	2b01      	cmp	r3, #1
 800784a:	d130      	bne.n	80078ae <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	f023 0310 	bic.w	r3, r3, #16
 8007866:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007874:	643b      	str	r3, [r7, #64]	@ 0x40
 8007876:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800787a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e4      	bne.n	8007852 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b10      	cmp	r3, #16
 8007894:	d103      	bne.n	800789e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2210      	movs	r2, #16
 800789c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fe fb0c 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80078ac:	e00e      	b.n	80078cc <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7f9 f8fc 	bl	8000aac <HAL_UART_RxCpltCallback>
        break;
 80078b4:	e00a      	b.n	80078cc <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078b6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d006      	beq.n	80078cc <UART_RxISR_8BIT_FIFOEN+0x2a8>
 80078be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f47f aed0 	bne.w	800766c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078d2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80078d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d049      	beq.n	8007972 <UART_RxISR_8BIT_FIFOEN+0x34e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80078e4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d242      	bcs.n	8007972 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3308      	adds	r3, #8
 800790c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007910:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007912:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007918:	e841 2300 	strex	r3, r2, [r1]
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1e3      	bne.n	80078ec <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a17      	ldr	r2, [pc, #92]	@ (8007984 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007928:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	e853 3f00 	ldrex	r3, [r3]
 8007936:	60bb      	str	r3, [r7, #8]
   return(result);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f043 0320 	orr.w	r3, r3, #32
 800793e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6979      	ldr	r1, [r7, #20]
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	613b      	str	r3, [r7, #16]
   return(result);
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e4      	bne.n	800792a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007960:	e007      	b.n	8007972 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0208 	orr.w	r2, r2, #8
 8007970:	619a      	str	r2, [r3, #24]
}
 8007972:	bf00      	nop
 8007974:	37b0      	adds	r7, #176	@ 0xb0
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	effffffe 	.word	0xeffffffe
 8007980:	58000c00 	.word	0x58000c00
 8007984:	080072b5 	.word	0x080072b5

08007988 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b0ae      	sub	sp, #184	@ 0xb8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007996:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079be:	2b22      	cmp	r3, #34	@ 0x22
 80079c0:	f040 8185 	bne.w	8007cce <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079ce:	e128      	b.n	8007c22 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80079e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80079e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80079ea:	4013      	ands	r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f8:	1c9a      	adds	r2, r3, #2
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d053      	beq.n	8007ace <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d011      	beq.n	8007a56 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2201      	movs	r2, #1
 8007a44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a4c:	f043 0201 	orr.w	r2, r3, #1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d011      	beq.n	8007a86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2202      	movs	r2, #2
 8007a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7c:	f043 0204 	orr.w	r2, r3, #4
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d011      	beq.n	8007ab6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007a92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aac:	f043 0202 	orr.w	r2, r3, #2
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d006      	beq.n	8007ace <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7fe f9f5 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 80a3 	bne.w	8007c22 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007aea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007afe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b02:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e2      	bne.n	8007adc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b28:	4b6f      	ldr	r3, [pc, #444]	@ (8007ce8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007b3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e3      	bne.n	8007b16 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a61      	ldr	r2, [pc, #388]	@ (8007cec <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d021      	beq.n	8007bb0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d01a      	beq.n	8007bb0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ba2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e4      	bne.n	8007b7a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d130      	bne.n	8007c1a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bce:	f023 0310 	bic.w	r3, r3, #16
 8007bd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e4      	bne.n	8007bbe <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d103      	bne.n	8007c0a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2210      	movs	r2, #16
 8007c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fe f956 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007c18:	e00e      	b.n	8007c38 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7f8 ff46 	bl	8000aac <HAL_UART_RxCpltCallback>
        break;
 8007c20:	e00a      	b.n	8007c38 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c22:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d006      	beq.n	8007c38 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8007c2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f47f aecc 	bne.w	80079d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c3e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d049      	beq.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x356>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c50:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d242      	bcs.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	623b      	str	r3, [r7, #32]
   return(result);
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3308      	adds	r3, #8
 8007c78:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007c7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e3      	bne.n	8007c58 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a17      	ldr	r2, [pc, #92]	@ (8007cf0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007c94:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f043 0320 	orr.w	r3, r3, #32
 8007caa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	69b9      	ldr	r1, [r7, #24]
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	e841 2300 	strex	r3, r2, [r1]
 8007cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e4      	bne.n	8007c96 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ccc:	e007      	b.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0208 	orr.w	r2, r2, #8
 8007cdc:	619a      	str	r2, [r3, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	37b8      	adds	r7, #184	@ 0xb8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	effffffe 	.word	0xeffffffe
 8007cec:	58000c00 	.word	0x58000c00
 8007cf0:	0800746d 	.word	0x0800746d

08007cf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e027      	b.n	8007d96 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2224      	movs	r2, #36	@ 0x24
 8007d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0201 	bic.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b084      	sub	sp, #16
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
 8007daa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e02d      	b.n	8007e16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2224      	movs	r2, #36	@ 0x24
 8007dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0201 	bic.w	r2, r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f850 	bl	8007e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e02d      	b.n	8007e92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2224      	movs	r2, #36	@ 0x24
 8007e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0201 	bic.w	r2, r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f812 	bl	8007e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2220      	movs	r2, #32
 8007e84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d108      	bne.n	8007ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ebc:	e031      	b.n	8007f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ebe:	2310      	movs	r3, #16
 8007ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ec2:	2310      	movs	r3, #16
 8007ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	0e5b      	lsrs	r3, r3, #25
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	0f5b      	lsrs	r3, r3, #29
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	7b3a      	ldrb	r2, [r7, #12]
 8007eea:	4911      	ldr	r1, [pc, #68]	@ (8007f30 <UARTEx_SetNbDataToProcess+0x94>)
 8007eec:	5c8a      	ldrb	r2, [r1, r2]
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ef2:	7b3a      	ldrb	r2, [r7, #12]
 8007ef4:	490f      	ldr	r1, [pc, #60]	@ (8007f34 <UARTEx_SetNbDataToProcess+0x98>)
 8007ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f04:	7bfb      	ldrb	r3, [r7, #15]
 8007f06:	7b7a      	ldrb	r2, [r7, #13]
 8007f08:	4909      	ldr	r1, [pc, #36]	@ (8007f30 <UARTEx_SetNbDataToProcess+0x94>)
 8007f0a:	5c8a      	ldrb	r2, [r1, r2]
 8007f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f10:	7b7a      	ldrb	r2, [r7, #13]
 8007f12:	4908      	ldr	r1, [pc, #32]	@ (8007f34 <UARTEx_SetNbDataToProcess+0x98>)
 8007f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	0800c0d0 	.word	0x0800c0d0
 8007f34:	0800c0d8 	.word	0x0800c0d8

08007f38 <__NVIC_SetPriority>:
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	db0a      	blt.n	8007f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	490c      	ldr	r1, [pc, #48]	@ (8007f84 <__NVIC_SetPriority+0x4c>)
 8007f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f56:	0112      	lsls	r2, r2, #4
 8007f58:	b2d2      	uxtb	r2, r2
 8007f5a:	440b      	add	r3, r1
 8007f5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007f60:	e00a      	b.n	8007f78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	4908      	ldr	r1, [pc, #32]	@ (8007f88 <__NVIC_SetPriority+0x50>)
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	0112      	lsls	r2, r2, #4
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	440b      	add	r3, r1
 8007f76:	761a      	strb	r2, [r3, #24]
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	e000e100 	.word	0xe000e100
 8007f88:	e000ed00 	.word	0xe000ed00

08007f8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007f90:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <SysTick_Handler+0x1c>)
 8007f92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007f94:	f001 ff34 	bl	8009e00 <xTaskGetSchedulerState>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d001      	beq.n	8007fa2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007f9e:	f002 fd2b 	bl	800a9f8 <xPortSysTickHandler>
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	e000e010 	.word	0xe000e010

08007fac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f06f 0004 	mvn.w	r0, #4
 8007fb6:	f7ff ffbf 	bl	8007f38 <__NVIC_SetPriority>
#endif
}
 8007fba:	bf00      	nop
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc6:	f3ef 8305 	mrs	r3, IPSR
 8007fca:	603b      	str	r3, [r7, #0]
  return(result);
 8007fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007fd2:	f06f 0305 	mvn.w	r3, #5
 8007fd6:	607b      	str	r3, [r7, #4]
 8007fd8:	e00c      	b.n	8007ff4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007fda:	4b0a      	ldr	r3, [pc, #40]	@ (8008004 <osKernelInitialize+0x44>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d105      	bne.n	8007fee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007fe2:	4b08      	ldr	r3, [pc, #32]	@ (8008004 <osKernelInitialize+0x44>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	607b      	str	r3, [r7, #4]
 8007fec:	e002      	b.n	8007ff4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007fee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ff4:	687b      	ldr	r3, [r7, #4]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	24000214 	.word	0x24000214

08008008 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800800e:	f3ef 8305 	mrs	r3, IPSR
 8008012:	603b      	str	r3, [r7, #0]
  return(result);
 8008014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <osKernelStart+0x1a>
    stat = osErrorISR;
 800801a:	f06f 0305 	mvn.w	r3, #5
 800801e:	607b      	str	r3, [r7, #4]
 8008020:	e010      	b.n	8008044 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008022:	4b0b      	ldr	r3, [pc, #44]	@ (8008050 <osKernelStart+0x48>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d109      	bne.n	800803e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800802a:	f7ff ffbf 	bl	8007fac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800802e:	4b08      	ldr	r3, [pc, #32]	@ (8008050 <osKernelStart+0x48>)
 8008030:	2202      	movs	r2, #2
 8008032:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008034:	f001 fa80 	bl	8009538 <vTaskStartScheduler>
      stat = osOK;
 8008038:	2300      	movs	r3, #0
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	e002      	b.n	8008044 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800803e:	f04f 33ff 	mov.w	r3, #4294967295
 8008042:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008044:	687b      	ldr	r3, [r7, #4]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	24000214 	.word	0x24000214

08008054 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008054:	b580      	push	{r7, lr}
 8008056:	b08e      	sub	sp, #56	@ 0x38
 8008058:	af04      	add	r7, sp, #16
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008060:	2300      	movs	r3, #0
 8008062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008064:	f3ef 8305 	mrs	r3, IPSR
 8008068:	617b      	str	r3, [r7, #20]
  return(result);
 800806a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800806c:	2b00      	cmp	r3, #0
 800806e:	d17e      	bne.n	800816e <osThreadNew+0x11a>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d07b      	beq.n	800816e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008076:	2380      	movs	r3, #128	@ 0x80
 8008078:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800807a:	2318      	movs	r3, #24
 800807c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800807e:	2300      	movs	r3, #0
 8008080:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008082:	f04f 33ff 	mov.w	r3, #4294967295
 8008086:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d045      	beq.n	800811a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <osThreadNew+0x48>
        name = attr->name;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <osThreadNew+0x6e>
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b38      	cmp	r3, #56	@ 0x38
 80080b4:	d805      	bhi.n	80080c2 <osThreadNew+0x6e>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <osThreadNew+0x72>
        return (NULL);
 80080c2:	2300      	movs	r3, #0
 80080c4:	e054      	b.n	8008170 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	089b      	lsrs	r3, r3, #2
 80080d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00e      	beq.n	80080fc <osThreadNew+0xa8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80080e4:	d90a      	bls.n	80080fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d006      	beq.n	80080fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <osThreadNew+0xa8>
        mem = 1;
 80080f6:	2301      	movs	r3, #1
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	e010      	b.n	800811e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10c      	bne.n	800811e <osThreadNew+0xca>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d108      	bne.n	800811e <osThreadNew+0xca>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <osThreadNew+0xca>
          mem = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	61bb      	str	r3, [r7, #24]
 8008118:	e001      	b.n	800811e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d110      	bne.n	8008146 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800812c:	9202      	str	r2, [sp, #8]
 800812e:	9301      	str	r3, [sp, #4]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	6a3a      	ldr	r2, [r7, #32]
 8008138:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f001 f808 	bl	8009150 <xTaskCreateStatic>
 8008140:	4603      	mov	r3, r0
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	e013      	b.n	800816e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d110      	bne.n	800816e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	b29a      	uxth	r2, r3
 8008150:	f107 0310 	add.w	r3, r7, #16
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f001 f856 	bl	8009210 <xTaskCreate>
 8008164:	4603      	mov	r3, r0
 8008166:	2b01      	cmp	r3, #1
 8008168:	d001      	beq.n	800816e <osThreadNew+0x11a>
            hTask = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800816e:	693b      	ldr	r3, [r7, #16]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3728      	adds	r7, #40	@ 0x28
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008180:	f3ef 8305 	mrs	r3, IPSR
 8008184:	60bb      	str	r3, [r7, #8]
  return(result);
 8008186:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008188:	2b00      	cmp	r3, #0
 800818a:	d003      	beq.n	8008194 <osDelay+0x1c>
    stat = osErrorISR;
 800818c:	f06f 0305 	mvn.w	r3, #5
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e007      	b.n	80081a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 f994 	bl	80094cc <vTaskDelay>
    }
  }

  return (stat);
 80081a4:	68fb      	ldr	r3, [r7, #12]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b08a      	sub	sp, #40	@ 0x28
 80081b2:	af02      	add	r7, sp, #8
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081be:	f3ef 8305 	mrs	r3, IPSR
 80081c2:	613b      	str	r3, [r7, #16]
  return(result);
 80081c4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d15f      	bne.n	800828a <osMessageQueueNew+0xdc>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d05c      	beq.n	800828a <osMessageQueueNew+0xdc>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d059      	beq.n	800828a <osMessageQueueNew+0xdc>
    mem = -1;
 80081d6:	f04f 33ff 	mov.w	r3, #4294967295
 80081da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d029      	beq.n	8008236 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d012      	beq.n	8008210 <osMessageQueueNew+0x62>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	2b4f      	cmp	r3, #79	@ 0x4f
 80081f0:	d90e      	bls.n	8008210 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695a      	ldr	r2, [r3, #20]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	fb01 f303 	mul.w	r3, r1, r3
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <osMessageQueueNew+0x62>
        mem = 1;
 800820a:	2301      	movs	r3, #1
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	e014      	b.n	800823a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d110      	bne.n	800823a <osMessageQueueNew+0x8c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10c      	bne.n	800823a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008224:	2b00      	cmp	r3, #0
 8008226:	d108      	bne.n	800823a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d104      	bne.n	800823a <osMessageQueueNew+0x8c>
          mem = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	61bb      	str	r3, [r7, #24]
 8008234:	e001      	b.n	800823a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d10b      	bne.n	8008258 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	2100      	movs	r1, #0
 800824a:	9100      	str	r1, [sp, #0]
 800824c:	68b9      	ldr	r1, [r7, #8]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fa30 	bl	80086b4 <xQueueGenericCreateStatic>
 8008254:	61f8      	str	r0, [r7, #28]
 8008256:	e008      	b.n	800826a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d105      	bne.n	800826a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800825e:	2200      	movs	r2, #0
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f000 faa3 	bl	80087ae <xQueueGenericCreate>
 8008268:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00c      	beq.n	800828a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <osMessageQueueNew+0xd0>
        name = attr->name;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	e001      	b.n	8008282 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008282:	6979      	ldr	r1, [r7, #20]
 8008284:	69f8      	ldr	r0, [r7, #28]
 8008286:	f000 ff05 	bl	8009094 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800828a:	69fb      	ldr	r3, [r7, #28]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	4613      	mov	r3, r2
 80082a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082ac:	f3ef 8305 	mrs	r3, IPSR
 80082b0:	617b      	str	r3, [r7, #20]
  return(result);
 80082b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d028      	beq.n	800830a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <osMessageQueuePut+0x36>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <osMessageQueuePut+0x36>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80082ca:	f06f 0303 	mvn.w	r3, #3
 80082ce:	61fb      	str	r3, [r7, #28]
 80082d0:	e038      	b.n	8008344 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80082d2:	2300      	movs	r3, #0
 80082d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80082d6:	f107 0210 	add.w	r2, r7, #16
 80082da:	2300      	movs	r3, #0
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	69b8      	ldr	r0, [r7, #24]
 80082e0:	f000 fbc6 	bl	8008a70 <xQueueGenericSendFromISR>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d003      	beq.n	80082f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80082ea:	f06f 0302 	mvn.w	r3, #2
 80082ee:	61fb      	str	r3, [r7, #28]
 80082f0:	e028      	b.n	8008344 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d025      	beq.n	8008344 <osMessageQueuePut+0xb0>
 80082f8:	4b15      	ldr	r3, [pc, #84]	@ (8008350 <osMessageQueuePut+0xbc>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	e01c      	b.n	8008344 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <osMessageQueuePut+0x82>
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008316:	f06f 0303 	mvn.w	r3, #3
 800831a:	61fb      	str	r3, [r7, #28]
 800831c:	e012      	b.n	8008344 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800831e:	2300      	movs	r3, #0
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	69b8      	ldr	r0, [r7, #24]
 8008326:	f000 faa1 	bl	800886c <xQueueGenericSend>
 800832a:	4603      	mov	r3, r0
 800832c:	2b01      	cmp	r3, #1
 800832e:	d009      	beq.n	8008344 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008336:	f06f 0301 	mvn.w	r3, #1
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	e002      	b.n	8008344 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800833e:	f06f 0302 	mvn.w	r3, #2
 8008342:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008344:	69fb      	ldr	r3, [r7, #28]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008366:	2300      	movs	r3, #0
 8008368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800836a:	f3ef 8305 	mrs	r3, IPSR
 800836e:	617b      	str	r3, [r7, #20]
  return(result);
 8008370:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008372:	2b00      	cmp	r3, #0
 8008374:	d028      	beq.n	80083c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <osMessageQueueGet+0x34>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <osMessageQueueGet+0x34>
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008388:	f06f 0303 	mvn.w	r3, #3
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	e037      	b.n	8008400 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008394:	f107 0310 	add.w	r3, r7, #16
 8008398:	461a      	mov	r2, r3
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	69b8      	ldr	r0, [r7, #24]
 800839e:	f000 fce7 	bl	8008d70 <xQueueReceiveFromISR>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d003      	beq.n	80083b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80083a8:	f06f 0302 	mvn.w	r3, #2
 80083ac:	61fb      	str	r3, [r7, #28]
 80083ae:	e027      	b.n	8008400 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d024      	beq.n	8008400 <osMessageQueueGet+0xac>
 80083b6:	4b15      	ldr	r3, [pc, #84]	@ (800840c <osMessageQueueGet+0xb8>)
 80083b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	e01b      	b.n	8008400 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <osMessageQueueGet+0x80>
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d103      	bne.n	80083dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80083d4:	f06f 0303 	mvn.w	r3, #3
 80083d8:	61fb      	str	r3, [r7, #28]
 80083da:	e011      	b.n	8008400 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	69b8      	ldr	r0, [r7, #24]
 80083e2:	f000 fbe3 	bl	8008bac <xQueueReceive>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d009      	beq.n	8008400 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80083f2:	f06f 0301 	mvn.w	r3, #1
 80083f6:	61fb      	str	r3, [r7, #28]
 80083f8:	e002      	b.n	8008400 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80083fa:	f06f 0302 	mvn.w	r3, #2
 80083fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008400:	69fb      	ldr	r3, [r7, #28]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	e000ed04 	.word	0xe000ed04

08008410 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4a07      	ldr	r2, [pc, #28]	@ (800843c <vApplicationGetIdleTaskMemory+0x2c>)
 8008420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	4a06      	ldr	r2, [pc, #24]	@ (8008440 <vApplicationGetIdleTaskMemory+0x30>)
 8008426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2280      	movs	r2, #128	@ 0x80
 800842c:	601a      	str	r2, [r3, #0]
}
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	24000218 	.word	0x24000218
 8008440:	240002c0 	.word	0x240002c0

08008444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4a07      	ldr	r2, [pc, #28]	@ (8008470 <vApplicationGetTimerTaskMemory+0x2c>)
 8008454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4a06      	ldr	r2, [pc, #24]	@ (8008474 <vApplicationGetTimerTaskMemory+0x30>)
 800845a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008462:	601a      	str	r2, [r3, #0]
}
 8008464:	bf00      	nop
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	240004c0 	.word	0x240004c0
 8008474:	24000568 	.word	0x24000568

08008478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f103 0208 	add.w	r2, r3, #8
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f04f 32ff 	mov.w	r2, #4294967295
 8008490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f103 0208 	add.w	r2, r3, #8
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f103 0208 	add.w	r2, r3, #8
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084d2:	b480      	push	{r7}
 80084d4:	b085      	sub	sp, #20
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	601a      	str	r2, [r3, #0]
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008530:	d103      	bne.n	800853a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	e00c      	b.n	8008554 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	3308      	adds	r3, #8
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	e002      	b.n	8008548 <vListInsert+0x2e>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	d2f6      	bcs.n	8008542 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	601a      	str	r2, [r3, #0]
}
 8008580:	bf00      	nop
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6892      	ldr	r2, [r2, #8]
 80085a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6852      	ldr	r2, [r2, #4]
 80085ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d103      	bne.n	80085c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	1e5a      	subs	r2, r3, #1
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10b      	bne.n	800860c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008606:	bf00      	nop
 8008608:	bf00      	nop
 800860a:	e7fd      	b.n	8008608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800860c:	f002 f964 	bl	800a8d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800861c:	fb01 f303 	mul.w	r3, r1, r3
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863c:	3b01      	subs	r3, #1
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008642:	fb01 f303 	mul.w	r3, r1, r3
 8008646:	441a      	add	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	22ff      	movs	r2, #255	@ 0xff
 8008650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	22ff      	movs	r2, #255	@ 0xff
 8008658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d114      	bne.n	800868c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d01a      	beq.n	80086a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3310      	adds	r3, #16
 800866e:	4618      	mov	r0, r3
 8008670:	f001 fa00 	bl	8009a74 <xTaskRemoveFromEventList>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d012      	beq.n	80086a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800867a:	4b0d      	ldr	r3, [pc, #52]	@ (80086b0 <xQueueGenericReset+0xd0>)
 800867c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	e009      	b.n	80086a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3310      	adds	r3, #16
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fef1 	bl	8008478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3324      	adds	r3, #36	@ 0x24
 800869a:	4618      	mov	r0, r3
 800869c:	f7ff feec 	bl	8008478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086a0:	f002 f94c 	bl	800a93c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086a4:	2301      	movs	r3, #1
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	@ 0x38
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10b      	bne.n	80086e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	e7fd      	b.n	80086dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10b      	bne.n	80086fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <xQueueGenericCreateStatic+0x56>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <xQueueGenericCreateStatic+0x5a>
 800870a:	2301      	movs	r3, #1
 800870c:	e000      	b.n	8008710 <xQueueGenericCreateStatic+0x5c>
 800870e:	2300      	movs	r3, #0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10b      	bne.n	800872c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	623b      	str	r3, [r7, #32]
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	e7fd      	b.n	8008728 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <xQueueGenericCreateStatic+0x84>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <xQueueGenericCreateStatic+0x88>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <xQueueGenericCreateStatic+0x8a>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	61fb      	str	r3, [r7, #28]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800875a:	2350      	movs	r3, #80	@ 0x50
 800875c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b50      	cmp	r3, #80	@ 0x50
 8008762:	d00b      	beq.n	800877c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	61bb      	str	r3, [r7, #24]
}
 8008776:	bf00      	nop
 8008778:	bf00      	nop
 800877a:	e7fd      	b.n	8008778 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800877c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00d      	beq.n	80087a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008790:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	4613      	mov	r3, r2
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f840 	bl	8008824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3730      	adds	r7, #48	@ 0x30
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b08a      	sub	sp, #40	@ 0x28
 80087b2:	af02      	add	r7, sp, #8
 80087b4:	60f8      	str	r0, [r7, #12]
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	4613      	mov	r3, r2
 80087ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10b      	bne.n	80087da <xQueueGenericCreate+0x2c>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	613b      	str	r3, [r7, #16]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
 80087e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	3350      	adds	r3, #80	@ 0x50
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 f997 	bl	800ab1c <pvPortMalloc>
 80087ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d011      	beq.n	800881a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	3350      	adds	r3, #80	@ 0x50
 80087fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008808:	79fa      	ldrb	r2, [r7, #7]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	4613      	mov	r3, r2
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f805 	bl	8008824 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800881a:	69bb      	ldr	r3, [r7, #24]
	}
 800881c:	4618      	mov	r0, r3
 800881e:	3720      	adds	r7, #32
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d103      	bne.n	8008840 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e002      	b.n	8008846 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008852:	2101      	movs	r1, #1
 8008854:	69b8      	ldr	r0, [r7, #24]
 8008856:	f7ff fec3 	bl	80085e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08e      	sub	sp, #56	@ 0x38
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800887a:	2300      	movs	r3, #0
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10b      	bne.n	80088a0 <xQueueGenericSend+0x34>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800889a:	bf00      	nop
 800889c:	bf00      	nop
 800889e:	e7fd      	b.n	800889c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d103      	bne.n	80088ae <xQueueGenericSend+0x42>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <xQueueGenericSend+0x46>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <xQueueGenericSend+0x48>
 80088b2:	2300      	movs	r3, #0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <xQueueGenericSend+0x64>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088bc:	f383 8811 	msr	BASEPRI, r3
 80088c0:	f3bf 8f6f 	isb	sy
 80088c4:	f3bf 8f4f 	dsb	sy
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088ca:	bf00      	nop
 80088cc:	bf00      	nop
 80088ce:	e7fd      	b.n	80088cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d103      	bne.n	80088de <xQueueGenericSend+0x72>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <xQueueGenericSend+0x76>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <xQueueGenericSend+0x78>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10b      	bne.n	8008900 <xQueueGenericSend+0x94>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	623b      	str	r3, [r7, #32]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008900:	f001 fa7e 	bl	8009e00 <xTaskGetSchedulerState>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <xQueueGenericSend+0xa4>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <xQueueGenericSend+0xa8>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <xQueueGenericSend+0xaa>
 8008914:	2300      	movs	r3, #0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <xQueueGenericSend+0xc6>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	61fb      	str	r3, [r7, #28]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008932:	f001 ffd1 	bl	800a8d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800893e:	429a      	cmp	r2, r3
 8008940:	d302      	bcc.n	8008948 <xQueueGenericSend+0xdc>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d129      	bne.n	800899c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800894e:	f000 fa91 	bl	8008e74 <prvCopyDataToQueue>
 8008952:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d010      	beq.n	800897e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	3324      	adds	r3, #36	@ 0x24
 8008960:	4618      	mov	r0, r3
 8008962:	f001 f887 	bl	8009a74 <xTaskRemoveFromEventList>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d013      	beq.n	8008994 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800896c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a6c <xQueueGenericSend+0x200>)
 800896e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	e00a      	b.n	8008994 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800897e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d007      	beq.n	8008994 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008984:	4b39      	ldr	r3, [pc, #228]	@ (8008a6c <xQueueGenericSend+0x200>)
 8008986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008994:	f001 ffd2 	bl	800a93c <vPortExitCritical>
				return pdPASS;
 8008998:	2301      	movs	r3, #1
 800899a:	e063      	b.n	8008a64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089a2:	f001 ffcb 	bl	800a93c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e05c      	b.n	8008a64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f8c1 	bl	8009b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089be:	f001 ffbd 	bl	800a93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089c2:	f000 fe29 	bl	8009618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089c6:	f001 ff87 	bl	800a8d8 <vPortEnterCritical>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d103      	bne.n	80089e0 <xQueueGenericSend+0x174>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089e6:	b25b      	sxtb	r3, r3
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ec:	d103      	bne.n	80089f6 <xQueueGenericSend+0x18a>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089f6:	f001 ffa1 	bl	800a93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089fa:	1d3a      	adds	r2, r7, #4
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 f8b0 	bl	8009b68 <xTaskCheckForTimeOut>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d124      	bne.n	8008a58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a10:	f000 fb28 	bl	8009064 <prvIsQueueFull>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d018      	beq.n	8008a4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	3310      	adds	r3, #16
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 ffd4 	bl	80099d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a2a:	f000 fab3 	bl	8008f94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a2e:	f000 fe01 	bl	8009634 <xTaskResumeAll>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f47f af7c 	bne.w	8008932 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a6c <xQueueGenericSend+0x200>)
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	e772      	b.n	8008932 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a4e:	f000 faa1 	bl	8008f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a52:	f000 fdef 	bl	8009634 <xTaskResumeAll>
 8008a56:	e76c      	b.n	8008932 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a5a:	f000 fa9b 	bl	8008f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a5e:	f000 fde9 	bl	8009634 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3738      	adds	r7, #56	@ 0x38
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	e000ed04 	.word	0xe000ed04

08008a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b090      	sub	sp, #64	@ 0x40
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	e7fd      	b.n	8008a9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d103      	bne.n	8008aae <xQueueGenericSendFromISR+0x3e>
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <xQueueGenericSendFromISR+0x42>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <xQueueGenericSendFromISR+0x44>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10b      	bne.n	8008ad0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	e7fd      	b.n	8008acc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d103      	bne.n	8008ade <xQueueGenericSendFromISR+0x6e>
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <xQueueGenericSendFromISR+0x72>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e000      	b.n	8008ae4 <xQueueGenericSendFromISR+0x74>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10b      	bne.n	8008b00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	623b      	str	r3, [r7, #32]
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	e7fd      	b.n	8008afc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b00:	f001 ffca 	bl	800aa98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b04:	f3ef 8211 	mrs	r2, BASEPRI
 8008b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	61fa      	str	r2, [r7, #28]
 8008b1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d302      	bcc.n	8008b32 <xQueueGenericSendFromISR+0xc2>
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d12f      	bne.n	8008b92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b48:	f000 f994 	bl	8008e74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b54:	d112      	bne.n	8008b7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d016      	beq.n	8008b8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	3324      	adds	r3, #36	@ 0x24
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 ff86 	bl	8009a74 <xTaskRemoveFromEventList>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00e      	beq.n	8008b8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00b      	beq.n	8008b8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	e007      	b.n	8008b8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b80:	3301      	adds	r3, #1
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	b25a      	sxtb	r2, r3
 8008b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b90:	e001      	b.n	8008b96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ba0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3740      	adds	r7, #64	@ 0x40
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08c      	sub	sp, #48	@ 0x30
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10b      	bne.n	8008bde <xQueueReceive+0x32>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	623b      	str	r3, [r7, #32]
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	e7fd      	b.n	8008bda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <xQueueReceive+0x40>
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <xQueueReceive+0x44>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <xQueueReceive+0x46>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10b      	bne.n	8008c0e <xQueueReceive+0x62>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	61fb      	str	r3, [r7, #28]
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c0e:	f001 f8f7 	bl	8009e00 <xTaskGetSchedulerState>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <xQueueReceive+0x72>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <xQueueReceive+0x76>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e000      	b.n	8008c24 <xQueueReceive+0x78>
 8008c22:	2300      	movs	r3, #0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10b      	bne.n	8008c40 <xQueueReceive+0x94>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	61bb      	str	r3, [r7, #24]
}
 8008c3a:	bf00      	nop
 8008c3c:	bf00      	nop
 8008c3e:	e7fd      	b.n	8008c3c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c40:	f001 fe4a 	bl	800a8d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c48:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d01f      	beq.n	8008c90 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c54:	f000 f978 	bl	8008f48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	1e5a      	subs	r2, r3, #1
 8008c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00f      	beq.n	8008c88 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6a:	3310      	adds	r3, #16
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 ff01 	bl	8009a74 <xTaskRemoveFromEventList>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d007      	beq.n	8008c88 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c78:	4b3c      	ldr	r3, [pc, #240]	@ (8008d6c <xQueueReceive+0x1c0>)
 8008c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c88:	f001 fe58 	bl	800a93c <vPortExitCritical>
				return pdPASS;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e069      	b.n	8008d64 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c96:	f001 fe51 	bl	800a93c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	e062      	b.n	8008d64 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d106      	bne.n	8008cb2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ca4:	f107 0310 	add.w	r3, r7, #16
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 ff47 	bl	8009b3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cb2:	f001 fe43 	bl	800a93c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cb6:	f000 fcaf 	bl	8009618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cba:	f001 fe0d 	bl	800a8d8 <vPortEnterCritical>
 8008cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d103      	bne.n	8008cd4 <xQueueReceive+0x128>
 8008ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cda:	b25b      	sxtb	r3, r3
 8008cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce0:	d103      	bne.n	8008cea <xQueueReceive+0x13e>
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cea:	f001 fe27 	bl	800a93c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cee:	1d3a      	adds	r2, r7, #4
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 ff36 	bl	8009b68 <xTaskCheckForTimeOut>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d123      	bne.n	8008d4a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d04:	f000 f998 	bl	8009038 <prvIsQueueEmpty>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d017      	beq.n	8008d3e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d10:	3324      	adds	r3, #36	@ 0x24
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f000 fe5a 	bl	80099d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d1e:	f000 f939 	bl	8008f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d22:	f000 fc87 	bl	8009634 <xTaskResumeAll>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d189      	bne.n	8008c40 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d6c <xQueueReceive+0x1c0>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	e780      	b.n	8008c40 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d40:	f000 f928 	bl	8008f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d44:	f000 fc76 	bl	8009634 <xTaskResumeAll>
 8008d48:	e77a      	b.n	8008c40 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d4c:	f000 f922 	bl	8008f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d50:	f000 fc70 	bl	8009634 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d56:	f000 f96f 	bl	8009038 <prvIsQueueEmpty>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f43f af6f 	beq.w	8008c40 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3730      	adds	r7, #48	@ 0x30
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	e000ed04 	.word	0xe000ed04

08008d70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08e      	sub	sp, #56	@ 0x38
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	623b      	str	r3, [r7, #32]
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d103      	bne.n	8008dac <xQueueReceiveFromISR+0x3c>
 8008da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <xQueueReceiveFromISR+0x40>
 8008dac:	2301      	movs	r3, #1
 8008dae:	e000      	b.n	8008db2 <xQueueReceiveFromISR+0x42>
 8008db0:	2300      	movs	r3, #0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10b      	bne.n	8008dce <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	61fb      	str	r3, [r7, #28]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dce:	f001 fe63 	bl	800aa98 <vPortValidateInterruptPriority>
	__asm volatile
 8008dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8008dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	61ba      	str	r2, [r7, #24]
 8008de8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008dea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d02f      	beq.n	8008e5a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e04:	68b9      	ldr	r1, [r7, #8]
 8008e06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e08:	f000 f89e 	bl	8008f48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d112      	bne.n	8008e44 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d016      	beq.n	8008e54 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	3310      	adds	r3, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 fe22 	bl	8009a74 <xTaskRemoveFromEventList>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00e      	beq.n	8008e54 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e007      	b.n	8008e54 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e48:	3301      	adds	r3, #1
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	b25a      	sxtb	r2, r3
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008e54:	2301      	movs	r3, #1
 8008e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e58:	e001      	b.n	8008e5e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f383 8811 	msr	BASEPRI, r3
}
 8008e68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3738      	adds	r7, #56	@ 0x38
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10d      	bne.n	8008eae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d14d      	bne.n	8008f36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 ffcc 	bl	8009e3c <xTaskPriorityDisinherit>
 8008ea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	609a      	str	r2, [r3, #8]
 8008eac:	e043      	b.n	8008f36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d119      	bne.n	8008ee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6858      	ldr	r0, [r3, #4]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	f002 fb03 	bl	800b4ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	441a      	add	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d32b      	bcc.n	8008f36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	605a      	str	r2, [r3, #4]
 8008ee6:	e026      	b.n	8008f36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68d8      	ldr	r0, [r3, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	f002 fae9 	bl	800b4ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	425b      	negs	r3, r3
 8008f02:	441a      	add	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	68da      	ldr	r2, [r3, #12]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d207      	bcs.n	8008f24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1c:	425b      	negs	r3, r3
 8008f1e:	441a      	add	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d105      	bne.n	8008f36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f3e:	697b      	ldr	r3, [r7, #20]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3718      	adds	r7, #24
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d018      	beq.n	8008f8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f62:	441a      	add	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68da      	ldr	r2, [r3, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d303      	bcc.n	8008f7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68d9      	ldr	r1, [r3, #12]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f84:	461a      	mov	r2, r3
 8008f86:	6838      	ldr	r0, [r7, #0]
 8008f88:	f002 fa9f 	bl	800b4ca <memcpy>
	}
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f9c:	f001 fc9c 	bl	800a8d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fa8:	e011      	b.n	8008fce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d012      	beq.n	8008fd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3324      	adds	r3, #36	@ 0x24
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fd5c 	bl	8009a74 <xTaskRemoveFromEventList>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fc2:	f000 fe35 	bl	8009c30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dce9      	bgt.n	8008faa <prvUnlockQueue+0x16>
 8008fd6:	e000      	b.n	8008fda <prvUnlockQueue+0x46>
					break;
 8008fd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	22ff      	movs	r2, #255	@ 0xff
 8008fde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008fe2:	f001 fcab 	bl	800a93c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fe6:	f001 fc77 	bl	800a8d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ff2:	e011      	b.n	8009018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d012      	beq.n	8009022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3310      	adds	r3, #16
 8009000:	4618      	mov	r0, r3
 8009002:	f000 fd37 	bl	8009a74 <xTaskRemoveFromEventList>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800900c:	f000 fe10 	bl	8009c30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	3b01      	subs	r3, #1
 8009014:	b2db      	uxtb	r3, r3
 8009016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800901c:	2b00      	cmp	r3, #0
 800901e:	dce9      	bgt.n	8008ff4 <prvUnlockQueue+0x60>
 8009020:	e000      	b.n	8009024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	22ff      	movs	r2, #255	@ 0xff
 8009028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800902c:	f001 fc86 	bl	800a93c <vPortExitCritical>
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009040:	f001 fc4a 	bl	800a8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800904c:	2301      	movs	r3, #1
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	e001      	b.n	8009056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009056:	f001 fc71 	bl	800a93c <vPortExitCritical>

	return xReturn;
 800905a:	68fb      	ldr	r3, [r7, #12]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800906c:	f001 fc34 	bl	800a8d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009078:	429a      	cmp	r2, r3
 800907a:	d102      	bne.n	8009082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800907c:	2301      	movs	r3, #1
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e001      	b.n	8009086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009086:	f001 fc59 	bl	800a93c <vPortExitCritical>

	return xReturn;
 800908a:	68fb      	ldr	r3, [r7, #12]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e014      	b.n	80090ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090a4:	4a0f      	ldr	r2, [pc, #60]	@ (80090e4 <vQueueAddToRegistry+0x50>)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090b0:	490c      	ldr	r1, [pc, #48]	@ (80090e4 <vQueueAddToRegistry+0x50>)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090ba:	4a0a      	ldr	r2, [pc, #40]	@ (80090e4 <vQueueAddToRegistry+0x50>)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	4413      	add	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090c6:	e006      	b.n	80090d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3301      	adds	r3, #1
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b07      	cmp	r3, #7
 80090d2:	d9e7      	bls.n	80090a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	24000968 	.word	0x24000968

080090e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090f8:	f001 fbee 	bl	800a8d8 <vPortEnterCritical>
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009102:	b25b      	sxtb	r3, r3
 8009104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009108:	d103      	bne.n	8009112 <vQueueWaitForMessageRestricted+0x2a>
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009118:	b25b      	sxtb	r3, r3
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d103      	bne.n	8009128 <vQueueWaitForMessageRestricted+0x40>
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009128:	f001 fc08 	bl	800a93c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	3324      	adds	r3, #36	@ 0x24
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68b9      	ldr	r1, [r7, #8]
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fc6d 	bl	8009a1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009142:	6978      	ldr	r0, [r7, #20]
 8009144:	f7ff ff26 	bl	8008f94 <prvUnlockQueue>
	}
 8009148:	bf00      	nop
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08e      	sub	sp, #56	@ 0x38
 8009154:	af04      	add	r7, sp, #16
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800915e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10b      	bne.n	800917c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	623b      	str	r3, [r7, #32]
}
 8009176:	bf00      	nop
 8009178:	bf00      	nop
 800917a:	e7fd      	b.n	8009178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10b      	bne.n	800919a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	61fb      	str	r3, [r7, #28]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800919a:	23a8      	movs	r3, #168	@ 0xa8
 800919c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80091a2:	d00b      	beq.n	80091bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	61bb      	str	r3, [r7, #24]
}
 80091b6:	bf00      	nop
 80091b8:	bf00      	nop
 80091ba:	e7fd      	b.n	80091b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01e      	beq.n	8009202 <xTaskCreateStatic+0xb2>
 80091c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01b      	beq.n	8009202 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091dc:	2300      	movs	r3, #0
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e2:	9302      	str	r3, [sp, #8]
 80091e4:	f107 0314 	add.w	r3, r7, #20
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f851 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091fc:	f000 f8f6 	bl	80093ec <prvAddNewTaskToReadyList>
 8009200:	e001      	b.n	8009206 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009206:	697b      	ldr	r3, [r7, #20]
	}
 8009208:	4618      	mov	r0, r3
 800920a:	3728      	adds	r7, #40	@ 0x28
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009210:	b580      	push	{r7, lr}
 8009212:	b08c      	sub	sp, #48	@ 0x30
 8009214:	af04      	add	r7, sp, #16
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	603b      	str	r3, [r7, #0]
 800921c:	4613      	mov	r3, r2
 800921e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fc79 	bl	800ab1c <pvPortMalloc>
 800922a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009232:	20a8      	movs	r0, #168	@ 0xa8
 8009234:	f001 fc72 	bl	800ab1c <pvPortMalloc>
 8009238:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	631a      	str	r2, [r3, #48]	@ 0x30
 8009246:	e005      	b.n	8009254 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009248:	6978      	ldr	r0, [r7, #20]
 800924a:	f001 fd35 	bl	800acb8 <vPortFree>
 800924e:	e001      	b.n	8009254 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d017      	beq.n	800928a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009262:	88fa      	ldrh	r2, [r7, #6]
 8009264:	2300      	movs	r3, #0
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	9302      	str	r3, [sp, #8]
 800926c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68b9      	ldr	r1, [r7, #8]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f80f 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800927e:	69f8      	ldr	r0, [r7, #28]
 8009280:	f000 f8b4 	bl	80093ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009284:	2301      	movs	r3, #1
 8009286:	61bb      	str	r3, [r7, #24]
 8009288:	e002      	b.n	8009290 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800928a:	f04f 33ff 	mov.w	r3, #4294967295
 800928e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009290:	69bb      	ldr	r3, [r7, #24]
	}
 8009292:	4618      	mov	r0, r3
 8009294:	3720      	adds	r7, #32
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	461a      	mov	r2, r3
 80092b4:	21a5      	movs	r1, #165	@ 0xa5
 80092b6:	f002 f837 	bl	800b328 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80092c4:	440b      	add	r3, r1
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01f      	beq.n	800933c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092fc:	2300      	movs	r3, #0
 80092fe:	61fb      	str	r3, [r7, #28]
 8009300:	e012      	b.n	8009328 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009302:	68ba      	ldr	r2, [r7, #8]
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	4413      	add	r3, r2
 8009308:	7819      	ldrb	r1, [r3, #0]
 800930a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	3334      	adds	r3, #52	@ 0x34
 8009312:	460a      	mov	r2, r1
 8009314:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	4413      	add	r3, r2
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d006      	beq.n	8009330 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	3301      	adds	r3, #1
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	2b0f      	cmp	r3, #15
 800932c:	d9e9      	bls.n	8009302 <prvInitialiseNewTask+0x66>
 800932e:	e000      	b.n	8009332 <prvInitialiseNewTask+0x96>
			{
				break;
 8009330:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800933a:	e003      	b.n	8009344 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800933c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009346:	2b37      	cmp	r3, #55	@ 0x37
 8009348:	d901      	bls.n	800934e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800934a:	2337      	movs	r3, #55	@ 0x37
 800934c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800934e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009352:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009358:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff f8a7 	bl	80084b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	3318      	adds	r3, #24
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff f8a2 	bl	80084b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009378:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009382:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009388:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	2200      	movs	r2, #0
 800938e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009394:	2200      	movs	r2, #0
 8009396:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	3354      	adds	r3, #84	@ 0x54
 800939e:	224c      	movs	r2, #76	@ 0x4c
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 ffc0 	bl	800b328 <memset>
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	4a0d      	ldr	r2, [pc, #52]	@ (80093e0 <prvInitialiseNewTask+0x144>)
 80093ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	4a0c      	ldr	r2, [pc, #48]	@ (80093e4 <prvInitialiseNewTask+0x148>)
 80093b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	4a0c      	ldr	r2, [pc, #48]	@ (80093e8 <prvInitialiseNewTask+0x14c>)
 80093b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	68f9      	ldr	r1, [r7, #12]
 80093be:	69b8      	ldr	r0, [r7, #24]
 80093c0:	f001 f95a 	bl	800a678 <pxPortInitialiseStack>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093d6:	bf00      	nop
 80093d8:	3720      	adds	r7, #32
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	24004bfc 	.word	0x24004bfc
 80093e4:	24004c64 	.word	0x24004c64
 80093e8:	24004ccc 	.word	0x24004ccc

080093ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093f4:	f001 fa70 	bl	800a8d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093f8:	4b2d      	ldr	r3, [pc, #180]	@ (80094b0 <prvAddNewTaskToReadyList+0xc4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3301      	adds	r3, #1
 80093fe:	4a2c      	ldr	r2, [pc, #176]	@ (80094b0 <prvAddNewTaskToReadyList+0xc4>)
 8009400:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009402:	4b2c      	ldr	r3, [pc, #176]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d109      	bne.n	800941e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800940a:	4a2a      	ldr	r2, [pc, #168]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009410:	4b27      	ldr	r3, [pc, #156]	@ (80094b0 <prvAddNewTaskToReadyList+0xc4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d110      	bne.n	800943a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009418:	f000 fc2e 	bl	8009c78 <prvInitialiseTaskLists>
 800941c:	e00d      	b.n	800943a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800941e:	4b26      	ldr	r3, [pc, #152]	@ (80094b8 <prvAddNewTaskToReadyList+0xcc>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009426:	4b23      	ldr	r3, [pc, #140]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009430:	429a      	cmp	r2, r3
 8009432:	d802      	bhi.n	800943a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009434:	4a1f      	ldr	r2, [pc, #124]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800943a:	4b20      	ldr	r3, [pc, #128]	@ (80094bc <prvAddNewTaskToReadyList+0xd0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	4a1e      	ldr	r2, [pc, #120]	@ (80094bc <prvAddNewTaskToReadyList+0xd0>)
 8009442:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009444:	4b1d      	ldr	r3, [pc, #116]	@ (80094bc <prvAddNewTaskToReadyList+0xd0>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009450:	4b1b      	ldr	r3, [pc, #108]	@ (80094c0 <prvAddNewTaskToReadyList+0xd4>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d903      	bls.n	8009460 <prvAddNewTaskToReadyList+0x74>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945c:	4a18      	ldr	r2, [pc, #96]	@ (80094c0 <prvAddNewTaskToReadyList+0xd4>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a15      	ldr	r2, [pc, #84]	@ (80094c4 <prvAddNewTaskToReadyList+0xd8>)
 800946e:	441a      	add	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7ff f82b 	bl	80084d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800947c:	f001 fa5e 	bl	800a93c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009480:	4b0d      	ldr	r3, [pc, #52]	@ (80094b8 <prvAddNewTaskToReadyList+0xcc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009488:	4b0a      	ldr	r3, [pc, #40]	@ (80094b4 <prvAddNewTaskToReadyList+0xc8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009492:	429a      	cmp	r2, r3
 8009494:	d207      	bcs.n	80094a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009496:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <prvAddNewTaskToReadyList+0xdc>)
 8009498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	24000e7c 	.word	0x24000e7c
 80094b4:	240009a8 	.word	0x240009a8
 80094b8:	24000e88 	.word	0x24000e88
 80094bc:	24000e98 	.word	0x24000e98
 80094c0:	24000e84 	.word	0x24000e84
 80094c4:	240009ac 	.word	0x240009ac
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d018      	beq.n	8009510 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094de:	4b14      	ldr	r3, [pc, #80]	@ (8009530 <vTaskDelay+0x64>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <vTaskDelay+0x32>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60bb      	str	r3, [r7, #8]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094fe:	f000 f88b 	bl	8009618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009502:	2100      	movs	r1, #0
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fd09 	bl	8009f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800950a:	f000 f893 	bl	8009634 <xTaskResumeAll>
 800950e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d107      	bne.n	8009526 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009516:	4b07      	ldr	r3, [pc, #28]	@ (8009534 <vTaskDelay+0x68>)
 8009518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	24000ea4 	.word	0x24000ea4
 8009534:	e000ed04 	.word	0xe000ed04

08009538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	@ 0x28
 800953c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009546:	463a      	mov	r2, r7
 8009548:	1d39      	adds	r1, r7, #4
 800954a:	f107 0308 	add.w	r3, r7, #8
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe ff5e 	bl	8008410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	9202      	str	r2, [sp, #8]
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	2300      	movs	r3, #0
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	2300      	movs	r3, #0
 8009564:	460a      	mov	r2, r1
 8009566:	4924      	ldr	r1, [pc, #144]	@ (80095f8 <vTaskStartScheduler+0xc0>)
 8009568:	4824      	ldr	r0, [pc, #144]	@ (80095fc <vTaskStartScheduler+0xc4>)
 800956a:	f7ff fdf1 	bl	8009150 <xTaskCreateStatic>
 800956e:	4603      	mov	r3, r0
 8009570:	4a23      	ldr	r2, [pc, #140]	@ (8009600 <vTaskStartScheduler+0xc8>)
 8009572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009574:	4b22      	ldr	r3, [pc, #136]	@ (8009600 <vTaskStartScheduler+0xc8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800957c:	2301      	movs	r3, #1
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e001      	b.n	8009586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009582:	2300      	movs	r3, #0
 8009584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d102      	bne.n	8009592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800958c:	f000 fd1a 	bl	8009fc4 <xTimerCreateTimerTask>
 8009590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d11b      	bne.n	80095d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	613b      	str	r3, [r7, #16]
}
 80095aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80095ac:	4b15      	ldr	r3, [pc, #84]	@ (8009604 <vTaskStartScheduler+0xcc>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3354      	adds	r3, #84	@ 0x54
 80095b2:	4a15      	ldr	r2, [pc, #84]	@ (8009608 <vTaskStartScheduler+0xd0>)
 80095b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095b6:	4b15      	ldr	r3, [pc, #84]	@ (800960c <vTaskStartScheduler+0xd4>)
 80095b8:	f04f 32ff 	mov.w	r2, #4294967295
 80095bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095be:	4b14      	ldr	r3, [pc, #80]	@ (8009610 <vTaskStartScheduler+0xd8>)
 80095c0:	2201      	movs	r2, #1
 80095c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095c4:	4b13      	ldr	r3, [pc, #76]	@ (8009614 <vTaskStartScheduler+0xdc>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095ca:	f001 f8e1 	bl	800a790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095ce:	e00f      	b.n	80095f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d10b      	bne.n	80095f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095dc:	f383 8811 	msr	BASEPRI, r3
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	60fb      	str	r3, [r7, #12]
}
 80095ea:	bf00      	nop
 80095ec:	bf00      	nop
 80095ee:	e7fd      	b.n	80095ec <vTaskStartScheduler+0xb4>
}
 80095f0:	bf00      	nop
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	0800c024 	.word	0x0800c024
 80095fc:	08009c49 	.word	0x08009c49
 8009600:	24000ea0 	.word	0x24000ea0
 8009604:	240009a8 	.word	0x240009a8
 8009608:	24000020 	.word	0x24000020
 800960c:	24000e9c 	.word	0x24000e9c
 8009610:	24000e88 	.word	0x24000e88
 8009614:	24000e80 	.word	0x24000e80

08009618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009618:	b480      	push	{r7}
 800961a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800961c:	4b04      	ldr	r3, [pc, #16]	@ (8009630 <vTaskSuspendAll+0x18>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	4a03      	ldr	r2, [pc, #12]	@ (8009630 <vTaskSuspendAll+0x18>)
 8009624:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009626:	bf00      	nop
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	24000ea4 	.word	0x24000ea4

08009634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800963e:	2300      	movs	r3, #0
 8009640:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009642:	4b42      	ldr	r3, [pc, #264]	@ (800974c <xTaskResumeAll+0x118>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10b      	bne.n	8009662 <xTaskResumeAll+0x2e>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	603b      	str	r3, [r7, #0]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009662:	f001 f939 	bl	800a8d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009666:	4b39      	ldr	r3, [pc, #228]	@ (800974c <xTaskResumeAll+0x118>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3b01      	subs	r3, #1
 800966c:	4a37      	ldr	r2, [pc, #220]	@ (800974c <xTaskResumeAll+0x118>)
 800966e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009670:	4b36      	ldr	r3, [pc, #216]	@ (800974c <xTaskResumeAll+0x118>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d162      	bne.n	800973e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009678:	4b35      	ldr	r3, [pc, #212]	@ (8009750 <xTaskResumeAll+0x11c>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d05e      	beq.n	800973e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009680:	e02f      	b.n	80096e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009682:	4b34      	ldr	r3, [pc, #208]	@ (8009754 <xTaskResumeAll+0x120>)
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3318      	adds	r3, #24
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe ff7c 	bl	800858c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3304      	adds	r3, #4
 8009698:	4618      	mov	r0, r3
 800969a:	f7fe ff77 	bl	800858c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a2:	4b2d      	ldr	r3, [pc, #180]	@ (8009758 <xTaskResumeAll+0x124>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d903      	bls.n	80096b2 <xTaskResumeAll+0x7e>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ae:	4a2a      	ldr	r2, [pc, #168]	@ (8009758 <xTaskResumeAll+0x124>)
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4a27      	ldr	r2, [pc, #156]	@ (800975c <xTaskResumeAll+0x128>)
 80096c0:	441a      	add	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7fe ff02 	bl	80084d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d2:	4b23      	ldr	r3, [pc, #140]	@ (8009760 <xTaskResumeAll+0x12c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d8:	429a      	cmp	r2, r3
 80096da:	d302      	bcc.n	80096e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096dc:	4b21      	ldr	r3, [pc, #132]	@ (8009764 <xTaskResumeAll+0x130>)
 80096de:	2201      	movs	r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009754 <xTaskResumeAll+0x120>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1cb      	bne.n	8009682 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096f0:	f000 fb66 	bl	8009dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096f4:	4b1c      	ldr	r3, [pc, #112]	@ (8009768 <xTaskResumeAll+0x134>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d010      	beq.n	8009722 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009700:	f000 f846 	bl	8009790 <xTaskIncrementTick>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800970a:	4b16      	ldr	r3, [pc, #88]	@ (8009764 <xTaskResumeAll+0x130>)
 800970c:	2201      	movs	r2, #1
 800970e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3b01      	subs	r3, #1
 8009714:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1f1      	bne.n	8009700 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800971c:	4b12      	ldr	r3, [pc, #72]	@ (8009768 <xTaskResumeAll+0x134>)
 800971e:	2200      	movs	r2, #0
 8009720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009722:	4b10      	ldr	r3, [pc, #64]	@ (8009764 <xTaskResumeAll+0x130>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800972a:	2301      	movs	r3, #1
 800972c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800972e:	4b0f      	ldr	r3, [pc, #60]	@ (800976c <xTaskResumeAll+0x138>)
 8009730:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800973e:	f001 f8fd 	bl	800a93c <vPortExitCritical>

	return xAlreadyYielded;
 8009742:	68bb      	ldr	r3, [r7, #8]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	24000ea4 	.word	0x24000ea4
 8009750:	24000e7c 	.word	0x24000e7c
 8009754:	24000e3c 	.word	0x24000e3c
 8009758:	24000e84 	.word	0x24000e84
 800975c:	240009ac 	.word	0x240009ac
 8009760:	240009a8 	.word	0x240009a8
 8009764:	24000e90 	.word	0x24000e90
 8009768:	24000e8c 	.word	0x24000e8c
 800976c:	e000ed04 	.word	0xe000ed04

08009770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009776:	4b05      	ldr	r3, [pc, #20]	@ (800978c <xTaskGetTickCount+0x1c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800977c:	687b      	ldr	r3, [r7, #4]
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	24000e80 	.word	0x24000e80

08009790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800979a:	4b4f      	ldr	r3, [pc, #316]	@ (80098d8 <xTaskIncrementTick+0x148>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f040 8090 	bne.w	80098c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097a4:	4b4d      	ldr	r3, [pc, #308]	@ (80098dc <xTaskIncrementTick+0x14c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097ac:	4a4b      	ldr	r2, [pc, #300]	@ (80098dc <xTaskIncrementTick+0x14c>)
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d121      	bne.n	80097fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097b8:	4b49      	ldr	r3, [pc, #292]	@ (80098e0 <xTaskIncrementTick+0x150>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <xTaskIncrementTick+0x4a>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	603b      	str	r3, [r7, #0]
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	e7fd      	b.n	80097d6 <xTaskIncrementTick+0x46>
 80097da:	4b41      	ldr	r3, [pc, #260]	@ (80098e0 <xTaskIncrementTick+0x150>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	4b40      	ldr	r3, [pc, #256]	@ (80098e4 <xTaskIncrementTick+0x154>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a3e      	ldr	r2, [pc, #248]	@ (80098e0 <xTaskIncrementTick+0x150>)
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	4a3e      	ldr	r2, [pc, #248]	@ (80098e4 <xTaskIncrementTick+0x154>)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	4b3e      	ldr	r3, [pc, #248]	@ (80098e8 <xTaskIncrementTick+0x158>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3301      	adds	r3, #1
 80097f4:	4a3c      	ldr	r2, [pc, #240]	@ (80098e8 <xTaskIncrementTick+0x158>)
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	f000 fae2 	bl	8009dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097fc:	4b3b      	ldr	r3, [pc, #236]	@ (80098ec <xTaskIncrementTick+0x15c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	429a      	cmp	r2, r3
 8009804:	d349      	bcc.n	800989a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009806:	4b36      	ldr	r3, [pc, #216]	@ (80098e0 <xTaskIncrementTick+0x150>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d104      	bne.n	800981a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009810:	4b36      	ldr	r3, [pc, #216]	@ (80098ec <xTaskIncrementTick+0x15c>)
 8009812:	f04f 32ff 	mov.w	r2, #4294967295
 8009816:	601a      	str	r2, [r3, #0]
					break;
 8009818:	e03f      	b.n	800989a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800981a:	4b31      	ldr	r3, [pc, #196]	@ (80098e0 <xTaskIncrementTick+0x150>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	429a      	cmp	r2, r3
 8009830:	d203      	bcs.n	800983a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009832:	4a2e      	ldr	r2, [pc, #184]	@ (80098ec <xTaskIncrementTick+0x15c>)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009838:	e02f      	b.n	800989a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	3304      	adds	r3, #4
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fea4 	bl	800858c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	3318      	adds	r3, #24
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fe9b 	bl	800858c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800985a:	4b25      	ldr	r3, [pc, #148]	@ (80098f0 <xTaskIncrementTick+0x160>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d903      	bls.n	800986a <xTaskIncrementTick+0xda>
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009866:	4a22      	ldr	r2, [pc, #136]	@ (80098f0 <xTaskIncrementTick+0x160>)
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4a1f      	ldr	r2, [pc, #124]	@ (80098f4 <xTaskIncrementTick+0x164>)
 8009878:	441a      	add	r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f7fe fe26 	bl	80084d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988a:	4b1b      	ldr	r3, [pc, #108]	@ (80098f8 <xTaskIncrementTick+0x168>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009890:	429a      	cmp	r2, r3
 8009892:	d3b8      	bcc.n	8009806 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009894:	2301      	movs	r3, #1
 8009896:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009898:	e7b5      	b.n	8009806 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800989a:	4b17      	ldr	r3, [pc, #92]	@ (80098f8 <xTaskIncrementTick+0x168>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a0:	4914      	ldr	r1, [pc, #80]	@ (80098f4 <xTaskIncrementTick+0x164>)
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	440b      	add	r3, r1
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d901      	bls.n	80098b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80098b2:	2301      	movs	r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098b6:	4b11      	ldr	r3, [pc, #68]	@ (80098fc <xTaskIncrementTick+0x16c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80098be:	2301      	movs	r3, #1
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	e004      	b.n	80098ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009900 <xTaskIncrementTick+0x170>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3301      	adds	r3, #1
 80098ca:	4a0d      	ldr	r2, [pc, #52]	@ (8009900 <xTaskIncrementTick+0x170>)
 80098cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098ce:	697b      	ldr	r3, [r7, #20]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	24000ea4 	.word	0x24000ea4
 80098dc:	24000e80 	.word	0x24000e80
 80098e0:	24000e34 	.word	0x24000e34
 80098e4:	24000e38 	.word	0x24000e38
 80098e8:	24000e94 	.word	0x24000e94
 80098ec:	24000e9c 	.word	0x24000e9c
 80098f0:	24000e84 	.word	0x24000e84
 80098f4:	240009ac 	.word	0x240009ac
 80098f8:	240009a8 	.word	0x240009a8
 80098fc:	24000e90 	.word	0x24000e90
 8009900:	24000e8c 	.word	0x24000e8c

08009904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800990a:	4b2b      	ldr	r3, [pc, #172]	@ (80099b8 <vTaskSwitchContext+0xb4>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009912:	4b2a      	ldr	r3, [pc, #168]	@ (80099bc <vTaskSwitchContext+0xb8>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009918:	e047      	b.n	80099aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800991a:	4b28      	ldr	r3, [pc, #160]	@ (80099bc <vTaskSwitchContext+0xb8>)
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009920:	4b27      	ldr	r3, [pc, #156]	@ (80099c0 <vTaskSwitchContext+0xbc>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	e011      	b.n	800994c <vTaskSwitchContext+0x48>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10b      	bne.n	8009946 <vTaskSwitchContext+0x42>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	607b      	str	r3, [r7, #4]
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	e7fd      	b.n	8009942 <vTaskSwitchContext+0x3e>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3b01      	subs	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]
 800994c:	491d      	ldr	r1, [pc, #116]	@ (80099c4 <vTaskSwitchContext+0xc0>)
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	4613      	mov	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	440b      	add	r3, r1
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0e3      	beq.n	8009928 <vTaskSwitchContext+0x24>
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4a16      	ldr	r2, [pc, #88]	@ (80099c4 <vTaskSwitchContext+0xc0>)
 800996c:	4413      	add	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	605a      	str	r2, [r3, #4]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	3308      	adds	r3, #8
 8009982:	429a      	cmp	r2, r3
 8009984:	d104      	bne.n	8009990 <vTaskSwitchContext+0x8c>
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	605a      	str	r2, [r3, #4]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	4a0c      	ldr	r2, [pc, #48]	@ (80099c8 <vTaskSwitchContext+0xc4>)
 8009998:	6013      	str	r3, [r2, #0]
 800999a:	4a09      	ldr	r2, [pc, #36]	@ (80099c0 <vTaskSwitchContext+0xbc>)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099a0:	4b09      	ldr	r3, [pc, #36]	@ (80099c8 <vTaskSwitchContext+0xc4>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3354      	adds	r3, #84	@ 0x54
 80099a6:	4a09      	ldr	r2, [pc, #36]	@ (80099cc <vTaskSwitchContext+0xc8>)
 80099a8:	6013      	str	r3, [r2, #0]
}
 80099aa:	bf00      	nop
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	24000ea4 	.word	0x24000ea4
 80099bc:	24000e90 	.word	0x24000e90
 80099c0:	24000e84 	.word	0x24000e84
 80099c4:	240009ac 	.word	0x240009ac
 80099c8:	240009a8 	.word	0x240009a8
 80099cc:	24000020 	.word	0x24000020

080099d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	bf00      	nop
 80099f6:	e7fd      	b.n	80099f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099f8:	4b07      	ldr	r3, [pc, #28]	@ (8009a18 <vTaskPlaceOnEventList+0x48>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3318      	adds	r3, #24
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7fe fd8a 	bl	800851a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a06:	2101      	movs	r1, #1
 8009a08:	6838      	ldr	r0, [r7, #0]
 8009a0a:	f000 fa87 	bl	8009f1c <prvAddCurrentTaskToDelayedList>
}
 8009a0e:	bf00      	nop
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	240009a8 	.word	0x240009a8

08009a1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10b      	bne.n	8009a46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	617b      	str	r3, [r7, #20]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a46:	4b0a      	ldr	r3, [pc, #40]	@ (8009a70 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3318      	adds	r3, #24
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7fe fd3f 	bl	80084d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a60:	6879      	ldr	r1, [r7, #4]
 8009a62:	68b8      	ldr	r0, [r7, #8]
 8009a64:	f000 fa5a 	bl	8009f1c <prvAddCurrentTaskToDelayedList>
	}
 8009a68:	bf00      	nop
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	240009a8 	.word	0x240009a8

08009a74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10b      	bne.n	8009aa2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	60fb      	str	r3, [r7, #12]
}
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	e7fd      	b.n	8009a9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3318      	adds	r3, #24
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fd70 	bl	800858c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aac:	4b1d      	ldr	r3, [pc, #116]	@ (8009b24 <xTaskRemoveFromEventList+0xb0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d11d      	bne.n	8009af0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe fd67 	bl	800858c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac2:	4b19      	ldr	r3, [pc, #100]	@ (8009b28 <xTaskRemoveFromEventList+0xb4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d903      	bls.n	8009ad2 <xTaskRemoveFromEventList+0x5e>
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ace:	4a16      	ldr	r2, [pc, #88]	@ (8009b28 <xTaskRemoveFromEventList+0xb4>)
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4a13      	ldr	r2, [pc, #76]	@ (8009b2c <xTaskRemoveFromEventList+0xb8>)
 8009ae0:	441a      	add	r2, r3
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7fe fcf2 	bl	80084d2 <vListInsertEnd>
 8009aee:	e005      	b.n	8009afc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	3318      	adds	r3, #24
 8009af4:	4619      	mov	r1, r3
 8009af6:	480e      	ldr	r0, [pc, #56]	@ (8009b30 <xTaskRemoveFromEventList+0xbc>)
 8009af8:	f7fe fceb 	bl	80084d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b00:	4b0c      	ldr	r3, [pc, #48]	@ (8009b34 <xTaskRemoveFromEventList+0xc0>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d905      	bls.n	8009b16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <xTaskRemoveFromEventList+0xc4>)
 8009b10:	2201      	movs	r2, #1
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	e001      	b.n	8009b1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b1a:	697b      	ldr	r3, [r7, #20]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	24000ea4 	.word	0x24000ea4
 8009b28:	24000e84 	.word	0x24000e84
 8009b2c:	240009ac 	.word	0x240009ac
 8009b30:	24000e3c 	.word	0x24000e3c
 8009b34:	240009a8 	.word	0x240009a8
 8009b38:	24000e90 	.word	0x24000e90

08009b3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b44:	4b06      	ldr	r3, [pc, #24]	@ (8009b60 <vTaskInternalSetTimeOutState+0x24>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b4c:	4b05      	ldr	r3, [pc, #20]	@ (8009b64 <vTaskInternalSetTimeOutState+0x28>)
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	605a      	str	r2, [r3, #4]
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	24000e94 	.word	0x24000e94
 8009b64:	24000e80 	.word	0x24000e80

08009b68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10b      	bne.n	8009b90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	613b      	str	r3, [r7, #16]
}
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	e7fd      	b.n	8009b8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9a:	f383 8811 	msr	BASEPRI, r3
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	60fb      	str	r3, [r7, #12]
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	e7fd      	b.n	8009baa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009bae:	f000 fe93 	bl	800a8d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009c28 <xTaskCheckForTimeOut+0xc0>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	69ba      	ldr	r2, [r7, #24]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bca:	d102      	bne.n	8009bd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	e023      	b.n	8009c1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b15      	ldr	r3, [pc, #84]	@ (8009c2c <xTaskCheckForTimeOut+0xc4>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d007      	beq.n	8009bee <xTaskCheckForTimeOut+0x86>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d302      	bcc.n	8009bee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009be8:	2301      	movs	r3, #1
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	e015      	b.n	8009c1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d20b      	bcs.n	8009c10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff ff99 	bl	8009b3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	61fb      	str	r3, [r7, #28]
 8009c0e:	e004      	b.n	8009c1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c16:	2301      	movs	r3, #1
 8009c18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c1a:	f000 fe8f 	bl	800a93c <vPortExitCritical>

	return xReturn;
 8009c1e:	69fb      	ldr	r3, [r7, #28]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3720      	adds	r7, #32
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	24000e80 	.word	0x24000e80
 8009c2c:	24000e94 	.word	0x24000e94

08009c30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c34:	4b03      	ldr	r3, [pc, #12]	@ (8009c44 <vTaskMissedYield+0x14>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
}
 8009c3a:	bf00      	nop
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	24000e90 	.word	0x24000e90

08009c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c50:	f000 f852 	bl	8009cf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c54:	4b06      	ldr	r3, [pc, #24]	@ (8009c70 <prvIdleTask+0x28>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d9f9      	bls.n	8009c50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c5c:	4b05      	ldr	r3, [pc, #20]	@ (8009c74 <prvIdleTask+0x2c>)
 8009c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c6c:	e7f0      	b.n	8009c50 <prvIdleTask+0x8>
 8009c6e:	bf00      	nop
 8009c70:	240009ac 	.word	0x240009ac
 8009c74:	e000ed04 	.word	0xe000ed04

08009c78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c7e:	2300      	movs	r3, #0
 8009c80:	607b      	str	r3, [r7, #4]
 8009c82:	e00c      	b.n	8009c9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4a12      	ldr	r2, [pc, #72]	@ (8009cd8 <prvInitialiseTaskLists+0x60>)
 8009c90:	4413      	add	r3, r2
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fbf0 	bl	8008478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	607b      	str	r3, [r7, #4]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b37      	cmp	r3, #55	@ 0x37
 8009ca2:	d9ef      	bls.n	8009c84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ca4:	480d      	ldr	r0, [pc, #52]	@ (8009cdc <prvInitialiseTaskLists+0x64>)
 8009ca6:	f7fe fbe7 	bl	8008478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009caa:	480d      	ldr	r0, [pc, #52]	@ (8009ce0 <prvInitialiseTaskLists+0x68>)
 8009cac:	f7fe fbe4 	bl	8008478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009cb0:	480c      	ldr	r0, [pc, #48]	@ (8009ce4 <prvInitialiseTaskLists+0x6c>)
 8009cb2:	f7fe fbe1 	bl	8008478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cb6:	480c      	ldr	r0, [pc, #48]	@ (8009ce8 <prvInitialiseTaskLists+0x70>)
 8009cb8:	f7fe fbde 	bl	8008478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cbc:	480b      	ldr	r0, [pc, #44]	@ (8009cec <prvInitialiseTaskLists+0x74>)
 8009cbe:	f7fe fbdb 	bl	8008478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf0 <prvInitialiseTaskLists+0x78>)
 8009cc4:	4a05      	ldr	r2, [pc, #20]	@ (8009cdc <prvInitialiseTaskLists+0x64>)
 8009cc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf4 <prvInitialiseTaskLists+0x7c>)
 8009cca:	4a05      	ldr	r2, [pc, #20]	@ (8009ce0 <prvInitialiseTaskLists+0x68>)
 8009ccc:	601a      	str	r2, [r3, #0]
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	240009ac 	.word	0x240009ac
 8009cdc:	24000e0c 	.word	0x24000e0c
 8009ce0:	24000e20 	.word	0x24000e20
 8009ce4:	24000e3c 	.word	0x24000e3c
 8009ce8:	24000e50 	.word	0x24000e50
 8009cec:	24000e68 	.word	0x24000e68
 8009cf0:	24000e34 	.word	0x24000e34
 8009cf4:	24000e38 	.word	0x24000e38

08009cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cfe:	e019      	b.n	8009d34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d00:	f000 fdea 	bl	800a8d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d04:	4b10      	ldr	r3, [pc, #64]	@ (8009d48 <prvCheckTasksWaitingTermination+0x50>)
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fe fc3b 	bl	800858c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d16:	4b0d      	ldr	r3, [pc, #52]	@ (8009d4c <prvCheckTasksWaitingTermination+0x54>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8009d4c <prvCheckTasksWaitingTermination+0x54>)
 8009d1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d20:	4b0b      	ldr	r3, [pc, #44]	@ (8009d50 <prvCheckTasksWaitingTermination+0x58>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	4a0a      	ldr	r2, [pc, #40]	@ (8009d50 <prvCheckTasksWaitingTermination+0x58>)
 8009d28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d2a:	f000 fe07 	bl	800a93c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f810 	bl	8009d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d34:	4b06      	ldr	r3, [pc, #24]	@ (8009d50 <prvCheckTasksWaitingTermination+0x58>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e1      	bne.n	8009d00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	24000e50 	.word	0x24000e50
 8009d4c:	24000e7c 	.word	0x24000e7c
 8009d50:	24000e64 	.word	0x24000e64

08009d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3354      	adds	r3, #84	@ 0x54
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 faf9 	bl	800b358 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d108      	bne.n	8009d82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 ff9f 	bl	800acb8 <vPortFree>
				vPortFree( pxTCB );
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 ff9c 	bl	800acb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d80:	e019      	b.n	8009db6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d103      	bne.n	8009d94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 ff93 	bl	800acb8 <vPortFree>
	}
 8009d92:	e010      	b.n	8009db6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009d9a:	2b02      	cmp	r3, #2
 8009d9c:	d00b      	beq.n	8009db6 <prvDeleteTCB+0x62>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	60fb      	str	r3, [r7, #12]
}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	e7fd      	b.n	8009db2 <prvDeleteTCB+0x5e>
	}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8009df8 <prvResetNextTaskUnblockTime+0x38>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d104      	bne.n	8009dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dfc <prvResetNextTaskUnblockTime+0x3c>)
 8009dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009dd8:	e008      	b.n	8009dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dda:	4b07      	ldr	r3, [pc, #28]	@ (8009df8 <prvResetNextTaskUnblockTime+0x38>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4a04      	ldr	r2, [pc, #16]	@ (8009dfc <prvResetNextTaskUnblockTime+0x3c>)
 8009dea:	6013      	str	r3, [r2, #0]
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	24000e34 	.word	0x24000e34
 8009dfc:	24000e9c 	.word	0x24000e9c

08009e00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e06:	4b0b      	ldr	r3, [pc, #44]	@ (8009e34 <xTaskGetSchedulerState+0x34>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	e008      	b.n	8009e26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e14:	4b08      	ldr	r3, [pc, #32]	@ (8009e38 <xTaskGetSchedulerState+0x38>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d102      	bne.n	8009e22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	607b      	str	r3, [r7, #4]
 8009e20:	e001      	b.n	8009e26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e22:	2300      	movs	r3, #0
 8009e24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e26:	687b      	ldr	r3, [r7, #4]
	}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	370c      	adds	r7, #12
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	24000e88 	.word	0x24000e88
 8009e38:	24000ea4 	.word	0x24000ea4

08009e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d058      	beq.n	8009f04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e52:	4b2f      	ldr	r3, [pc, #188]	@ (8009f10 <xTaskPriorityDisinherit+0xd4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d00b      	beq.n	8009e74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	60fb      	str	r3, [r7, #12]
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10b      	bne.n	8009e94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	60bb      	str	r3, [r7, #8]
}
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
 8009e92:	e7fd      	b.n	8009e90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e98:	1e5a      	subs	r2, r3, #1
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d02c      	beq.n	8009f04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d128      	bne.n	8009f04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fe fb68 	bl	800858c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8009f14 <xTaskPriorityDisinherit+0xd8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d903      	bls.n	8009ee4 <xTaskPriorityDisinherit+0xa8>
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8009f14 <xTaskPriorityDisinherit+0xd8>)
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4a09      	ldr	r2, [pc, #36]	@ (8009f18 <xTaskPriorityDisinherit+0xdc>)
 8009ef2:	441a      	add	r2, r3
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4610      	mov	r0, r2
 8009efc:	f7fe fae9 	bl	80084d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f00:	2301      	movs	r3, #1
 8009f02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f04:	697b      	ldr	r3, [r7, #20]
	}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3718      	adds	r7, #24
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	240009a8 	.word	0x240009a8
 8009f14:	24000e84 	.word	0x24000e84
 8009f18:	240009ac 	.word	0x240009ac

08009f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f26:	4b21      	ldr	r3, [pc, #132]	@ (8009fac <prvAddCurrentTaskToDelayedList+0x90>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f2c:	4b20      	ldr	r3, [pc, #128]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fb2a 	bl	800858c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d10a      	bne.n	8009f56 <prvAddCurrentTaskToDelayedList+0x3a>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d007      	beq.n	8009f56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f46:	4b1a      	ldr	r3, [pc, #104]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4819      	ldr	r0, [pc, #100]	@ (8009fb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f50:	f7fe fabf 	bl	80084d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f54:	e026      	b.n	8009fa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f5e:	4b14      	ldr	r3, [pc, #80]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d209      	bcs.n	8009f82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f6e:	4b12      	ldr	r3, [pc, #72]	@ (8009fb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3304      	adds	r3, #4
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	f7fe facd 	bl	800851a <vListInsert>
}
 8009f80:	e010      	b.n	8009fa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f82:	4b0e      	ldr	r3, [pc, #56]	@ (8009fbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4610      	mov	r0, r2
 8009f90:	f7fe fac3 	bl	800851a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f94:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d202      	bcs.n	8009fa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f9e:	4a08      	ldr	r2, [pc, #32]	@ (8009fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	6013      	str	r3, [r2, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	24000e80 	.word	0x24000e80
 8009fb0:	240009a8 	.word	0x240009a8
 8009fb4:	24000e68 	.word	0x24000e68
 8009fb8:	24000e38 	.word	0x24000e38
 8009fbc:	24000e34 	.word	0x24000e34
 8009fc0:	24000e9c 	.word	0x24000e9c

08009fc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08a      	sub	sp, #40	@ 0x28
 8009fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fce:	f000 fb13 	bl	800a5f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fd2:	4b1d      	ldr	r3, [pc, #116]	@ (800a048 <xTimerCreateTimerTask+0x84>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d021      	beq.n	800a01e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009fe2:	1d3a      	adds	r2, r7, #4
 8009fe4:	f107 0108 	add.w	r1, r7, #8
 8009fe8:	f107 030c 	add.w	r3, r7, #12
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fe fa29 	bl	8008444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	9202      	str	r2, [sp, #8]
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	460a      	mov	r2, r1
 800a004:	4911      	ldr	r1, [pc, #68]	@ (800a04c <xTimerCreateTimerTask+0x88>)
 800a006:	4812      	ldr	r0, [pc, #72]	@ (800a050 <xTimerCreateTimerTask+0x8c>)
 800a008:	f7ff f8a2 	bl	8009150 <xTaskCreateStatic>
 800a00c:	4603      	mov	r3, r0
 800a00e:	4a11      	ldr	r2, [pc, #68]	@ (800a054 <xTimerCreateTimerTask+0x90>)
 800a010:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a012:	4b10      	ldr	r3, [pc, #64]	@ (800a054 <xTimerCreateTimerTask+0x90>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a01a:	2301      	movs	r3, #1
 800a01c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10b      	bne.n	800a03c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	613b      	str	r3, [r7, #16]
}
 800a036:	bf00      	nop
 800a038:	bf00      	nop
 800a03a:	e7fd      	b.n	800a038 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a03c:	697b      	ldr	r3, [r7, #20]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	24000ed8 	.word	0x24000ed8
 800a04c:	0800c02c 	.word	0x0800c02c
 800a050:	0800a191 	.word	0x0800a191
 800a054:	24000edc 	.word	0x24000edc

0800a058 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	@ 0x28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a066:	2300      	movs	r3, #0
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10b      	bne.n	800a088 <xTimerGenericCommand+0x30>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	623b      	str	r3, [r7, #32]
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	e7fd      	b.n	800a084 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a088:	4b19      	ldr	r3, [pc, #100]	@ (800a0f0 <xTimerGenericCommand+0x98>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d02a      	beq.n	800a0e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	dc18      	bgt.n	800a0d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0a2:	f7ff fead 	bl	8009e00 <xTaskGetSchedulerState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d109      	bne.n	800a0c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0ac:	4b10      	ldr	r3, [pc, #64]	@ (800a0f0 <xTimerGenericCommand+0x98>)
 800a0ae:	6818      	ldr	r0, [r3, #0]
 800a0b0:	f107 0110 	add.w	r1, r7, #16
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b8:	f7fe fbd8 	bl	800886c <xQueueGenericSend>
 800a0bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0be:	e012      	b.n	800a0e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f0 <xTimerGenericCommand+0x98>)
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	f107 0110 	add.w	r1, r7, #16
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f7fe fbce 	bl	800886c <xQueueGenericSend>
 800a0d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0d2:	e008      	b.n	800a0e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0d4:	4b06      	ldr	r3, [pc, #24]	@ (800a0f0 <xTimerGenericCommand+0x98>)
 800a0d6:	6818      	ldr	r0, [r3, #0]
 800a0d8:	f107 0110 	add.w	r1, r7, #16
 800a0dc:	2300      	movs	r3, #0
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	f7fe fcc6 	bl	8008a70 <xQueueGenericSendFromISR>
 800a0e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3728      	adds	r7, #40	@ 0x28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	24000ed8 	.word	0x24000ed8

0800a0f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af02      	add	r7, sp, #8
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fe:	4b23      	ldr	r3, [pc, #140]	@ (800a18c <prvProcessExpiredTimer+0x98>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fe fa3d 	bl	800858c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d023      	beq.n	800a168 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	18d1      	adds	r1, r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	6978      	ldr	r0, [r7, #20]
 800a12e:	f000 f8d5 	bl	800a2dc <prvInsertTimerInActiveList>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d020      	beq.n	800a17a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a138:	2300      	movs	r3, #0
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	2300      	movs	r3, #0
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	2100      	movs	r1, #0
 800a142:	6978      	ldr	r0, [r7, #20]
 800a144:	f7ff ff88 	bl	800a058 <xTimerGenericCommand>
 800a148:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d114      	bne.n	800a17a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a16e:	f023 0301 	bic.w	r3, r3, #1
 800a172:	b2da      	uxtb	r2, r3
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	6978      	ldr	r0, [r7, #20]
 800a180:	4798      	blx	r3
}
 800a182:	bf00      	nop
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	24000ed0 	.word	0x24000ed0

0800a190 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a198:	f107 0308 	add.w	r3, r7, #8
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 f859 	bl	800a254 <prvGetNextExpireTime>
 800a1a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 f805 	bl	800a1b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1ae:	f000 f8d7 	bl	800a360 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1b2:	bf00      	nop
 800a1b4:	e7f0      	b.n	800a198 <prvTimerTask+0x8>
	...

0800a1b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1c2:	f7ff fa29 	bl	8009618 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1c6:	f107 0308 	add.w	r3, r7, #8
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 f866 	bl	800a29c <prvSampleTimeNow>
 800a1d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d130      	bne.n	800a23a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <prvProcessTimerOrBlockTask+0x3c>
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d806      	bhi.n	800a1f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1e6:	f7ff fa25 	bl	8009634 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1ea:	68f9      	ldr	r1, [r7, #12]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff ff81 	bl	800a0f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1f2:	e024      	b.n	800a23e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d008      	beq.n	800a20c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1fa:	4b13      	ldr	r3, [pc, #76]	@ (800a248 <prvProcessTimerOrBlockTask+0x90>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <prvProcessTimerOrBlockTask+0x50>
 800a204:	2301      	movs	r3, #1
 800a206:	e000      	b.n	800a20a <prvProcessTimerOrBlockTask+0x52>
 800a208:	2300      	movs	r3, #0
 800a20a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a20c:	4b0f      	ldr	r3, [pc, #60]	@ (800a24c <prvProcessTimerOrBlockTask+0x94>)
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	4619      	mov	r1, r3
 800a21a:	f7fe ff65 	bl	80090e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a21e:	f7ff fa09 	bl	8009634 <xTaskResumeAll>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a228:	4b09      	ldr	r3, [pc, #36]	@ (800a250 <prvProcessTimerOrBlockTask+0x98>)
 800a22a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a22e:	601a      	str	r2, [r3, #0]
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	f3bf 8f6f 	isb	sy
}
 800a238:	e001      	b.n	800a23e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a23a:	f7ff f9fb 	bl	8009634 <xTaskResumeAll>
}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	24000ed4 	.word	0x24000ed4
 800a24c:	24000ed8 	.word	0x24000ed8
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a25c:	4b0e      	ldr	r3, [pc, #56]	@ (800a298 <prvGetNextExpireTime+0x44>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <prvGetNextExpireTime+0x16>
 800a266:	2201      	movs	r2, #1
 800a268:	e000      	b.n	800a26c <prvGetNextExpireTime+0x18>
 800a26a:	2200      	movs	r2, #0
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d105      	bne.n	800a284 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a278:	4b07      	ldr	r3, [pc, #28]	@ (800a298 <prvGetNextExpireTime+0x44>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	e001      	b.n	800a288 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a288:	68fb      	ldr	r3, [r7, #12]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	24000ed0 	.word	0x24000ed0

0800a29c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2a4:	f7ff fa64 	bl	8009770 <xTaskGetTickCount>
 800a2a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d8 <prvSampleTimeNow+0x3c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d205      	bcs.n	800a2c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2b4:	f000 f93a 	bl	800a52c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	e002      	b.n	800a2c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2c6:	4a04      	ldr	r2, [pc, #16]	@ (800a2d8 <prvSampleTimeNow+0x3c>)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	24000ee0 	.word	0x24000ee0

0800a2dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d812      	bhi.n	800a328 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	1ad2      	subs	r2, r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a310:	2301      	movs	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e01b      	b.n	800a34e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a316:	4b10      	ldr	r3, [pc, #64]	@ (800a358 <prvInsertTimerInActiveList+0x7c>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3304      	adds	r3, #4
 800a31e:	4619      	mov	r1, r3
 800a320:	4610      	mov	r0, r2
 800a322:	f7fe f8fa 	bl	800851a <vListInsert>
 800a326:	e012      	b.n	800a34e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d206      	bcs.n	800a33e <prvInsertTimerInActiveList+0x62>
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d302      	bcc.n	800a33e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a338:	2301      	movs	r3, #1
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	e007      	b.n	800a34e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a33e:	4b07      	ldr	r3, [pc, #28]	@ (800a35c <prvInsertTimerInActiveList+0x80>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3304      	adds	r3, #4
 800a346:	4619      	mov	r1, r3
 800a348:	4610      	mov	r0, r2
 800a34a:	f7fe f8e6 	bl	800851a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a34e:	697b      	ldr	r3, [r7, #20]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	24000ed4 	.word	0x24000ed4
 800a35c:	24000ed0 	.word	0x24000ed0

0800a360 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08e      	sub	sp, #56	@ 0x38
 800a364:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a366:	e0ce      	b.n	800a506 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	da19      	bge.n	800a3a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a36e:	1d3b      	adds	r3, r7, #4
 800a370:	3304      	adds	r3, #4
 800a372:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10b      	bne.n	800a392 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	61fb      	str	r3, [r7, #28]
}
 800a38c:	bf00      	nop
 800a38e:	bf00      	nop
 800a390:	e7fd      	b.n	800a38e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a398:	6850      	ldr	r0, [r2, #4]
 800a39a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a39c:	6892      	ldr	r2, [r2, #8]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f2c0 80ae 	blt.w	800a506 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe f8e6 	bl	800858c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3c0:	463b      	mov	r3, r7
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff ff6a 	bl	800a29c <prvSampleTimeNow>
 800a3c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b09      	cmp	r3, #9
 800a3ce:	f200 8097 	bhi.w	800a500 <prvProcessReceivedCommands+0x1a0>
 800a3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d8 <prvProcessReceivedCommands+0x78>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a401 	.word	0x0800a401
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a477 	.word	0x0800a477
 800a3e8:	0800a48b 	.word	0x0800a48b
 800a3ec:	0800a4d7 	.word	0x0800a4d7
 800a3f0:	0800a401 	.word	0x0800a401
 800a3f4:	0800a401 	.word	0x0800a401
 800a3f8:	0800a477 	.word	0x0800a477
 800a3fc:	0800a48b 	.word	0x0800a48b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a402:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a406:	f043 0301 	orr.w	r3, r3, #1
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	18d1      	adds	r1, r2, r3
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a420:	f7ff ff5c 	bl	800a2dc <prvInsertTimerInActiveList>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d06c      	beq.n	800a504 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a430:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d061      	beq.n	800a504 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	441a      	add	r2, r3
 800a448:	2300      	movs	r3, #0
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	2300      	movs	r3, #0
 800a44e:	2100      	movs	r1, #0
 800a450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a452:	f7ff fe01 	bl	800a058 <xTimerGenericCommand>
 800a456:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d152      	bne.n	800a504 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	61bb      	str	r3, [r7, #24]
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	e7fd      	b.n	800a472 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a47c:	f023 0301 	bic.w	r3, r3, #1
 800a480:	b2da      	uxtb	r2, r3
 800a482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a484:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a488:	e03d      	b.n	800a506 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a490:	f043 0301 	orr.w	r3, r3, #1
 800a494:	b2da      	uxtb	r2, r3
 800a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a498:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10b      	bne.n	800a4c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	617b      	str	r3, [r7, #20]
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	e7fd      	b.n	800a4be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c4:	699a      	ldr	r2, [r3, #24]
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	18d1      	adds	r1, r2, r3
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4d0:	f7ff ff04 	bl	800a2dc <prvInsertTimerInActiveList>
					break;
 800a4d4:	e017      	b.n	800a506 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d103      	bne.n	800a4ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a4e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4e6:	f000 fbe7 	bl	800acb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4ea:	e00c      	b.n	800a506 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4f2:	f023 0301 	bic.w	r3, r3, #1
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4fe:	e002      	b.n	800a506 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a500:	bf00      	nop
 800a502:	e000      	b.n	800a506 <prvProcessReceivedCommands+0x1a6>
					break;
 800a504:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a506:	4b08      	ldr	r3, [pc, #32]	@ (800a528 <prvProcessReceivedCommands+0x1c8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	1d39      	adds	r1, r7, #4
 800a50c:	2200      	movs	r2, #0
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fb4c 	bl	8008bac <xQueueReceive>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	f47f af26 	bne.w	800a368 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	3730      	adds	r7, #48	@ 0x30
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	24000ed8 	.word	0x24000ed8

0800a52c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b088      	sub	sp, #32
 800a530:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a532:	e049      	b.n	800a5c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a534:	4b2e      	ldr	r3, [pc, #184]	@ (800a5f0 <prvSwitchTimerLists+0xc4>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a53e:	4b2c      	ldr	r3, [pc, #176]	@ (800a5f0 <prvSwitchTimerLists+0xc4>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7fe f81d 	bl	800858c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d02f      	beq.n	800a5c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4413      	add	r3, r2
 800a570:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	429a      	cmp	r2, r3
 800a578:	d90e      	bls.n	800a598 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a586:	4b1a      	ldr	r3, [pc, #104]	@ (800a5f0 <prvSwitchTimerLists+0xc4>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	3304      	adds	r3, #4
 800a58e:	4619      	mov	r1, r3
 800a590:	4610      	mov	r0, r2
 800a592:	f7fd ffc2 	bl	800851a <vListInsert>
 800a596:	e017      	b.n	800a5c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a598:	2300      	movs	r3, #0
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	2300      	movs	r3, #0
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f7ff fd58 	bl	800a058 <xTimerGenericCommand>
 800a5a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10b      	bne.n	800a5c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	603b      	str	r3, [r7, #0]
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5c8:	4b09      	ldr	r3, [pc, #36]	@ (800a5f0 <prvSwitchTimerLists+0xc4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1b0      	bne.n	800a534 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5d2:	4b07      	ldr	r3, [pc, #28]	@ (800a5f0 <prvSwitchTimerLists+0xc4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5d8:	4b06      	ldr	r3, [pc, #24]	@ (800a5f4 <prvSwitchTimerLists+0xc8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a04      	ldr	r2, [pc, #16]	@ (800a5f0 <prvSwitchTimerLists+0xc4>)
 800a5de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5e0:	4a04      	ldr	r2, [pc, #16]	@ (800a5f4 <prvSwitchTimerLists+0xc8>)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	6013      	str	r3, [r2, #0]
}
 800a5e6:	bf00      	nop
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	24000ed0 	.word	0x24000ed0
 800a5f4:	24000ed4 	.word	0x24000ed4

0800a5f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5fe:	f000 f96b 	bl	800a8d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a602:	4b15      	ldr	r3, [pc, #84]	@ (800a658 <prvCheckForValidListAndQueue+0x60>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d120      	bne.n	800a64c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a60a:	4814      	ldr	r0, [pc, #80]	@ (800a65c <prvCheckForValidListAndQueue+0x64>)
 800a60c:	f7fd ff34 	bl	8008478 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a610:	4813      	ldr	r0, [pc, #76]	@ (800a660 <prvCheckForValidListAndQueue+0x68>)
 800a612:	f7fd ff31 	bl	8008478 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a616:	4b13      	ldr	r3, [pc, #76]	@ (800a664 <prvCheckForValidListAndQueue+0x6c>)
 800a618:	4a10      	ldr	r2, [pc, #64]	@ (800a65c <prvCheckForValidListAndQueue+0x64>)
 800a61a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a61c:	4b12      	ldr	r3, [pc, #72]	@ (800a668 <prvCheckForValidListAndQueue+0x70>)
 800a61e:	4a10      	ldr	r2, [pc, #64]	@ (800a660 <prvCheckForValidListAndQueue+0x68>)
 800a620:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a622:	2300      	movs	r3, #0
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	4b11      	ldr	r3, [pc, #68]	@ (800a66c <prvCheckForValidListAndQueue+0x74>)
 800a628:	4a11      	ldr	r2, [pc, #68]	@ (800a670 <prvCheckForValidListAndQueue+0x78>)
 800a62a:	2110      	movs	r1, #16
 800a62c:	200a      	movs	r0, #10
 800a62e:	f7fe f841 	bl	80086b4 <xQueueGenericCreateStatic>
 800a632:	4603      	mov	r3, r0
 800a634:	4a08      	ldr	r2, [pc, #32]	@ (800a658 <prvCheckForValidListAndQueue+0x60>)
 800a636:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a638:	4b07      	ldr	r3, [pc, #28]	@ (800a658 <prvCheckForValidListAndQueue+0x60>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d005      	beq.n	800a64c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a640:	4b05      	ldr	r3, [pc, #20]	@ (800a658 <prvCheckForValidListAndQueue+0x60>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	490b      	ldr	r1, [pc, #44]	@ (800a674 <prvCheckForValidListAndQueue+0x7c>)
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe fd24 	bl	8009094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a64c:	f000 f976 	bl	800a93c <vPortExitCritical>
}
 800a650:	bf00      	nop
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	24000ed8 	.word	0x24000ed8
 800a65c:	24000ea8 	.word	0x24000ea8
 800a660:	24000ebc 	.word	0x24000ebc
 800a664:	24000ed0 	.word	0x24000ed0
 800a668:	24000ed4 	.word	0x24000ed4
 800a66c:	24000f84 	.word	0x24000f84
 800a670:	24000ee4 	.word	0x24000ee4
 800a674:	0800c034 	.word	0x0800c034

0800a678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	3b04      	subs	r3, #4
 800a688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3b04      	subs	r3, #4
 800a696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f023 0201 	bic.w	r2, r3, #1
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3b04      	subs	r3, #4
 800a6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6a8:	4a0c      	ldr	r2, [pc, #48]	@ (800a6dc <pxPortInitialiseStack+0x64>)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	3b14      	subs	r3, #20
 800a6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	3b04      	subs	r3, #4
 800a6be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f06f 0202 	mvn.w	r2, #2
 800a6c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3b20      	subs	r3, #32
 800a6cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	0800a6e1 	.word	0x0800a6e1

0800a6e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6ea:	4b13      	ldr	r3, [pc, #76]	@ (800a738 <prvTaskExitError+0x58>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d00b      	beq.n	800a70c <prvTaskExitError+0x2c>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	60fb      	str	r3, [r7, #12]
}
 800a706:	bf00      	nop
 800a708:	bf00      	nop
 800a70a:	e7fd      	b.n	800a708 <prvTaskExitError+0x28>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	60bb      	str	r3, [r7, #8]
}
 800a71e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a720:	bf00      	nop
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0fc      	beq.n	800a722 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a728:	bf00      	nop
 800a72a:	bf00      	nop
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	24000010 	.word	0x24000010
 800a73c:	00000000 	.word	0x00000000

0800a740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a740:	4b07      	ldr	r3, [pc, #28]	@ (800a760 <pxCurrentTCBConst2>)
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	6808      	ldr	r0, [r1, #0]
 800a746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	f380 8809 	msr	PSP, r0
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f04f 0000 	mov.w	r0, #0
 800a756:	f380 8811 	msr	BASEPRI, r0
 800a75a:	4770      	bx	lr
 800a75c:	f3af 8000 	nop.w

0800a760 <pxCurrentTCBConst2>:
 800a760:	240009a8 	.word	0x240009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop

0800a768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a768:	4808      	ldr	r0, [pc, #32]	@ (800a78c <prvPortStartFirstTask+0x24>)
 800a76a:	6800      	ldr	r0, [r0, #0]
 800a76c:	6800      	ldr	r0, [r0, #0]
 800a76e:	f380 8808 	msr	MSP, r0
 800a772:	f04f 0000 	mov.w	r0, #0
 800a776:	f380 8814 	msr	CONTROL, r0
 800a77a:	b662      	cpsie	i
 800a77c:	b661      	cpsie	f
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	df00      	svc	0
 800a788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a78a:	bf00      	nop
 800a78c:	e000ed08 	.word	0xe000ed08

0800a790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a796:	4b47      	ldr	r3, [pc, #284]	@ (800a8b4 <xPortStartScheduler+0x124>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a47      	ldr	r2, [pc, #284]	@ (800a8b8 <xPortStartScheduler+0x128>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d10b      	bne.n	800a7b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	613b      	str	r3, [r7, #16]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8b4 <xPortStartScheduler+0x124>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a8bc <xPortStartScheduler+0x12c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10b      	bne.n	800a7da <xPortStartScheduler+0x4a>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	60fb      	str	r3, [r7, #12]
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7da:	4b39      	ldr	r3, [pc, #228]	@ (800a8c0 <xPortStartScheduler+0x130>)
 800a7dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	22ff      	movs	r2, #255	@ 0xff
 800a7ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	4b31      	ldr	r3, [pc, #196]	@ (800a8c4 <xPortStartScheduler+0x134>)
 800a800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a802:	4b31      	ldr	r3, [pc, #196]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a804:	2207      	movs	r2, #7
 800a806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a808:	e009      	b.n	800a81e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a80a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3b01      	subs	r3, #1
 800a810:	4a2d      	ldr	r2, [pc, #180]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a826:	2b80      	cmp	r3, #128	@ 0x80
 800a828:	d0ef      	beq.n	800a80a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a82a:	4b27      	ldr	r3, [pc, #156]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f1c3 0307 	rsb	r3, r3, #7
 800a832:	2b04      	cmp	r3, #4
 800a834:	d00b      	beq.n	800a84e <xPortStartScheduler+0xbe>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60bb      	str	r3, [r7, #8]
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	e7fd      	b.n	800a84a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a84e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	021b      	lsls	r3, r3, #8
 800a854:	4a1c      	ldr	r2, [pc, #112]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a858:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a860:	4a19      	ldr	r2, [pc, #100]	@ (800a8c8 <xPortStartScheduler+0x138>)
 800a862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	b2da      	uxtb	r2, r3
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a86c:	4b17      	ldr	r3, [pc, #92]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a16      	ldr	r2, [pc, #88]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a878:	4b14      	ldr	r3, [pc, #80]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a13      	ldr	r2, [pc, #76]	@ (800a8cc <xPortStartScheduler+0x13c>)
 800a87e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a884:	f000 f8da 	bl	800aa3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a888:	4b11      	ldr	r3, [pc, #68]	@ (800a8d0 <xPortStartScheduler+0x140>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a88e:	f000 f8f9 	bl	800aa84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a892:	4b10      	ldr	r3, [pc, #64]	@ (800a8d4 <xPortStartScheduler+0x144>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a0f      	ldr	r2, [pc, #60]	@ (800a8d4 <xPortStartScheduler+0x144>)
 800a898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a89c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a89e:	f7ff ff63 	bl	800a768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8a2:	f7ff f82f 	bl	8009904 <vTaskSwitchContext>
	prvTaskExitError();
 800a8a6:	f7ff ff1b 	bl	800a6e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	e000ed00 	.word	0xe000ed00
 800a8b8:	410fc271 	.word	0x410fc271
 800a8bc:	410fc270 	.word	0x410fc270
 800a8c0:	e000e400 	.word	0xe000e400
 800a8c4:	24000fd4 	.word	0x24000fd4
 800a8c8:	24000fd8 	.word	0x24000fd8
 800a8cc:	e000ed20 	.word	0xe000ed20
 800a8d0:	24000010 	.word	0x24000010
 800a8d4:	e000ef34 	.word	0xe000ef34

0800a8d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	607b      	str	r3, [r7, #4]
}
 800a8f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8f2:	4b10      	ldr	r3, [pc, #64]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a934 <vPortEnterCritical+0x5c>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d110      	bne.n	800a926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a904:	4b0c      	ldr	r3, [pc, #48]	@ (800a938 <vPortEnterCritical+0x60>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00b      	beq.n	800a926 <vPortEnterCritical+0x4e>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	603b      	str	r3, [r7, #0]
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	e7fd      	b.n	800a922 <vPortEnterCritical+0x4a>
	}
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	24000010 	.word	0x24000010
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a942:	4b12      	ldr	r3, [pc, #72]	@ (800a98c <vPortExitCritical+0x50>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10b      	bne.n	800a962 <vPortExitCritical+0x26>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	607b      	str	r3, [r7, #4]
}
 800a95c:	bf00      	nop
 800a95e:	bf00      	nop
 800a960:	e7fd      	b.n	800a95e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a962:	4b0a      	ldr	r3, [pc, #40]	@ (800a98c <vPortExitCritical+0x50>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a08      	ldr	r2, [pc, #32]	@ (800a98c <vPortExitCritical+0x50>)
 800a96a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a96c:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <vPortExitCritical+0x50>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d105      	bne.n	800a980 <vPortExitCritical+0x44>
 800a974:	2300      	movs	r3, #0
 800a976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f383 8811 	msr	BASEPRI, r3
}
 800a97e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	24000010 	.word	0x24000010

0800a990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b15      	ldr	r3, [pc, #84]	@ (800a9f0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f01e 0f10 	tst.w	lr, #16
 800a9a0:	bf08      	it	eq
 800a9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a9b4:	f380 8811 	msr	BASEPRI, r0
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f7fe ffa0 	bl	8009904 <vTaskSwitchContext>
 800a9c4:	f04f 0000 	mov.w	r0, #0
 800a9c8:	f380 8811 	msr	BASEPRI, r0
 800a9cc:	bc09      	pop	{r0, r3}
 800a9ce:	6819      	ldr	r1, [r3, #0]
 800a9d0:	6808      	ldr	r0, [r1, #0]
 800a9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d6:	f01e 0f10 	tst.w	lr, #16
 800a9da:	bf08      	it	eq
 800a9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9e0:	f380 8809 	msr	PSP, r0
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	f3af 8000 	nop.w

0800a9f0 <pxCurrentTCBConst>:
 800a9f0:	240009a8 	.word	0x240009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	607b      	str	r3, [r7, #4]
}
 800aa10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa12:	f7fe febd 	bl	8009790 <xTaskIncrementTick>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <xPortSysTickHandler+0x40>)
 800aa1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	2300      	movs	r3, #0
 800aa26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f383 8811 	msr	BASEPRI, r3
}
 800aa2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa40:	4b0b      	ldr	r3, [pc, #44]	@ (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa46:	4b0b      	ldr	r3, [pc, #44]	@ (800aa74 <vPortSetupTimerInterrupt+0x38>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <vPortSetupTimerInterrupt+0x3c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	@ (800aa7c <vPortSetupTimerInterrupt+0x40>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	099b      	lsrs	r3, r3, #6
 800aa58:	4a09      	ldr	r2, [pc, #36]	@ (800aa80 <vPortSetupTimerInterrupt+0x44>)
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa5e:	4b04      	ldr	r3, [pc, #16]	@ (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	e000e010 	.word	0xe000e010
 800aa74:	e000e018 	.word	0xe000e018
 800aa78:	24000000 	.word	0x24000000
 800aa7c:	10624dd3 	.word	0x10624dd3
 800aa80:	e000e014 	.word	0xe000e014

0800aa84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa94 <vPortEnableVFP+0x10>
 800aa88:	6801      	ldr	r1, [r0, #0]
 800aa8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa8e:	6001      	str	r1, [r0, #0]
 800aa90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa92:	bf00      	nop
 800aa94:	e000ed88 	.word	0xe000ed88

0800aa98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa9e:	f3ef 8305 	mrs	r3, IPSR
 800aaa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b0f      	cmp	r3, #15
 800aaa8:	d915      	bls.n	800aad6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaaa:	4a18      	ldr	r2, [pc, #96]	@ (800ab0c <vPortValidateInterruptPriority+0x74>)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aab4:	4b16      	ldr	r3, [pc, #88]	@ (800ab10 <vPortValidateInterruptPriority+0x78>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	7afa      	ldrb	r2, [r7, #11]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d20b      	bcs.n	800aad6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	e7fd      	b.n	800aad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aad6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab14 <vPortValidateInterruptPriority+0x7c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aade:	4b0e      	ldr	r3, [pc, #56]	@ (800ab18 <vPortValidateInterruptPriority+0x80>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d90b      	bls.n	800aafe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	603b      	str	r3, [r7, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <vPortValidateInterruptPriority+0x62>
	}
 800aafe:	bf00      	nop
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	e000e3f0 	.word	0xe000e3f0
 800ab10:	24000fd4 	.word	0x24000fd4
 800ab14:	e000ed0c 	.word	0xe000ed0c
 800ab18:	24000fd8 	.word	0x24000fd8

0800ab1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b08a      	sub	sp, #40	@ 0x28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab28:	f7fe fd76 	bl	8009618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab2c:	4b5c      	ldr	r3, [pc, #368]	@ (800aca0 <pvPortMalloc+0x184>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab34:	f000 f924 	bl	800ad80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab38:	4b5a      	ldr	r3, [pc, #360]	@ (800aca4 <pvPortMalloc+0x188>)
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f040 8095 	bne.w	800ac70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d01e      	beq.n	800ab8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab4c:	2208      	movs	r2, #8
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d015      	beq.n	800ab8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f023 0307 	bic.w	r3, r3, #7
 800ab64:	3308      	adds	r3, #8
 800ab66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00b      	beq.n	800ab8a <pvPortMalloc+0x6e>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	617b      	str	r3, [r7, #20]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d06f      	beq.n	800ac70 <pvPortMalloc+0x154>
 800ab90:	4b45      	ldr	r3, [pc, #276]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d86a      	bhi.n	800ac70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab9a:	4b44      	ldr	r3, [pc, #272]	@ (800acac <pvPortMalloc+0x190>)
 800ab9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ab9e:	4b43      	ldr	r3, [pc, #268]	@ (800acac <pvPortMalloc+0x190>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aba4:	e004      	b.n	800abb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d903      	bls.n	800abc2 <pvPortMalloc+0xa6>
 800abba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1f1      	bne.n	800aba6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abc2:	4b37      	ldr	r3, [pc, #220]	@ (800aca0 <pvPortMalloc+0x184>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abc8:	429a      	cmp	r2, r3
 800abca:	d051      	beq.n	800ac70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2208      	movs	r2, #8
 800abd2:	4413      	add	r3, r2
 800abd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	1ad2      	subs	r2, r2, r3
 800abe6:	2308      	movs	r3, #8
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	429a      	cmp	r2, r3
 800abec:	d920      	bls.n	800ac30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4413      	add	r3, r2
 800abf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <pvPortMalloc+0xfc>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	613b      	str	r3, [r7, #16]
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	685a      	ldr	r2, [r3, #4]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	1ad2      	subs	r2, r2, r3
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac2a:	69b8      	ldr	r0, [r7, #24]
 800ac2c:	f000 f90a 	bl	800ae44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac30:	4b1d      	ldr	r3, [pc, #116]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	4a1b      	ldr	r2, [pc, #108]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac3e:	4b1a      	ldr	r3, [pc, #104]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	4b1b      	ldr	r3, [pc, #108]	@ (800acb0 <pvPortMalloc+0x194>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d203      	bcs.n	800ac52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac4a:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <pvPortMalloc+0x18c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a18      	ldr	r2, [pc, #96]	@ (800acb0 <pvPortMalloc+0x194>)
 800ac50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	4b13      	ldr	r3, [pc, #76]	@ (800aca4 <pvPortMalloc+0x188>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac66:	4b13      	ldr	r3, [pc, #76]	@ (800acb4 <pvPortMalloc+0x198>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	4a11      	ldr	r2, [pc, #68]	@ (800acb4 <pvPortMalloc+0x198>)
 800ac6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac70:	f7fe fce0 	bl	8009634 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00b      	beq.n	800ac96 <pvPortMalloc+0x17a>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60fb      	str	r3, [r7, #12]
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <pvPortMalloc+0x176>
	return pvReturn;
 800ac96:	69fb      	ldr	r3, [r7, #28]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3728      	adds	r7, #40	@ 0x28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	24004be4 	.word	0x24004be4
 800aca4:	24004bf8 	.word	0x24004bf8
 800aca8:	24004be8 	.word	0x24004be8
 800acac:	24004bdc 	.word	0x24004bdc
 800acb0:	24004bec 	.word	0x24004bec
 800acb4:	24004bf0 	.word	0x24004bf0

0800acb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d04f      	beq.n	800ad6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acca:	2308      	movs	r3, #8
 800accc:	425b      	negs	r3, r3
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4413      	add	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	4b25      	ldr	r3, [pc, #148]	@ (800ad74 <vPortFree+0xbc>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4013      	ands	r3, r2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10b      	bne.n	800acfe <vPortFree+0x46>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60fb      	str	r3, [r7, #12]
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	e7fd      	b.n	800acfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <vPortFree+0x66>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60bb      	str	r3, [r7, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	4b14      	ldr	r3, [pc, #80]	@ (800ad74 <vPortFree+0xbc>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4013      	ands	r3, r2
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01e      	beq.n	800ad6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d11a      	bne.n	800ad6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	4b0e      	ldr	r3, [pc, #56]	@ (800ad74 <vPortFree+0xbc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	43db      	mvns	r3, r3
 800ad3e:	401a      	ands	r2, r3
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad44:	f7fe fc68 	bl	8009618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad78 <vPortFree+0xc0>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4413      	add	r3, r2
 800ad52:	4a09      	ldr	r2, [pc, #36]	@ (800ad78 <vPortFree+0xc0>)
 800ad54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad56:	6938      	ldr	r0, [r7, #16]
 800ad58:	f000 f874 	bl	800ae44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad5c:	4b07      	ldr	r3, [pc, #28]	@ (800ad7c <vPortFree+0xc4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3301      	adds	r3, #1
 800ad62:	4a06      	ldr	r2, [pc, #24]	@ (800ad7c <vPortFree+0xc4>)
 800ad64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad66:	f7fe fc65 	bl	8009634 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad6a:	bf00      	nop
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	24004bf8 	.word	0x24004bf8
 800ad78:	24004be8 	.word	0x24004be8
 800ad7c:	24004bf4 	.word	0x24004bf4

0800ad80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ad8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad8c:	4b27      	ldr	r3, [pc, #156]	@ (800ae2c <prvHeapInit+0xac>)
 800ad8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f003 0307 	and.w	r3, r3, #7
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00c      	beq.n	800adb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3307      	adds	r3, #7
 800ad9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f023 0307 	bic.w	r3, r3, #7
 800ada6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	4a1f      	ldr	r2, [pc, #124]	@ (800ae2c <prvHeapInit+0xac>)
 800adb0:	4413      	add	r3, r2
 800adb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae30 <prvHeapInit+0xb0>)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adbe:	4b1c      	ldr	r3, [pc, #112]	@ (800ae30 <prvHeapInit+0xb0>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	4413      	add	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adcc:	2208      	movs	r2, #8
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f023 0307 	bic.w	r3, r3, #7
 800adda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4a15      	ldr	r2, [pc, #84]	@ (800ae34 <prvHeapInit+0xb4>)
 800ade0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ade2:	4b14      	ldr	r3, [pc, #80]	@ (800ae34 <prvHeapInit+0xb4>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2200      	movs	r2, #0
 800ade8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adea:	4b12      	ldr	r3, [pc, #72]	@ (800ae34 <prvHeapInit+0xb4>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2200      	movs	r2, #0
 800adf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	1ad2      	subs	r2, r2, r3
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae00:	4b0c      	ldr	r3, [pc, #48]	@ (800ae34 <prvHeapInit+0xb4>)
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae38 <prvHeapInit+0xb8>)
 800ae0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	4a09      	ldr	r2, [pc, #36]	@ (800ae3c <prvHeapInit+0xbc>)
 800ae16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae18:	4b09      	ldr	r3, [pc, #36]	@ (800ae40 <prvHeapInit+0xc0>)
 800ae1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae1e:	601a      	str	r2, [r3, #0]
}
 800ae20:	bf00      	nop
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	24000fdc 	.word	0x24000fdc
 800ae30:	24004bdc 	.word	0x24004bdc
 800ae34:	24004be4 	.word	0x24004be4
 800ae38:	24004bec 	.word	0x24004bec
 800ae3c:	24004be8 	.word	0x24004be8
 800ae40:	24004bf8 	.word	0x24004bf8

0800ae44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae4c:	4b28      	ldr	r3, [pc, #160]	@ (800aef0 <prvInsertBlockIntoFreeList+0xac>)
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	e002      	b.n	800ae58 <prvInsertBlockIntoFreeList+0x14>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d8f7      	bhi.n	800ae52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d108      	bne.n	800ae86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	441a      	add	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	441a      	add	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d118      	bne.n	800aecc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	4b15      	ldr	r3, [pc, #84]	@ (800aef4 <prvInsertBlockIntoFreeList+0xb0>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d00d      	beq.n	800aec2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	441a      	add	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	601a      	str	r2, [r3, #0]
 800aec0:	e008      	b.n	800aed4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aec2:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <prvInsertBlockIntoFreeList+0xb0>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
 800aeca:	e003      	b.n	800aed4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d002      	beq.n	800aee2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aee2:	bf00      	nop
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	24004bdc 	.word	0x24004bdc
 800aef4:	24004be4 	.word	0x24004be4

0800aef8 <std>:
 800aef8:	2300      	movs	r3, #0
 800aefa:	b510      	push	{r4, lr}
 800aefc:	4604      	mov	r4, r0
 800aefe:	e9c0 3300 	strd	r3, r3, [r0]
 800af02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af06:	6083      	str	r3, [r0, #8]
 800af08:	8181      	strh	r1, [r0, #12]
 800af0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800af0c:	81c2      	strh	r2, [r0, #14]
 800af0e:	6183      	str	r3, [r0, #24]
 800af10:	4619      	mov	r1, r3
 800af12:	2208      	movs	r2, #8
 800af14:	305c      	adds	r0, #92	@ 0x5c
 800af16:	f000 fa07 	bl	800b328 <memset>
 800af1a:	4b0d      	ldr	r3, [pc, #52]	@ (800af50 <std+0x58>)
 800af1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800af1e:	4b0d      	ldr	r3, [pc, #52]	@ (800af54 <std+0x5c>)
 800af20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af22:	4b0d      	ldr	r3, [pc, #52]	@ (800af58 <std+0x60>)
 800af24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af26:	4b0d      	ldr	r3, [pc, #52]	@ (800af5c <std+0x64>)
 800af28:	6323      	str	r3, [r4, #48]	@ 0x30
 800af2a:	4b0d      	ldr	r3, [pc, #52]	@ (800af60 <std+0x68>)
 800af2c:	6224      	str	r4, [r4, #32]
 800af2e:	429c      	cmp	r4, r3
 800af30:	d006      	beq.n	800af40 <std+0x48>
 800af32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af36:	4294      	cmp	r4, r2
 800af38:	d002      	beq.n	800af40 <std+0x48>
 800af3a:	33d0      	adds	r3, #208	@ 0xd0
 800af3c:	429c      	cmp	r4, r3
 800af3e:	d105      	bne.n	800af4c <std+0x54>
 800af40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af48:	f000 babc 	b.w	800b4c4 <__retarget_lock_init_recursive>
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	bf00      	nop
 800af50:	0800b179 	.word	0x0800b179
 800af54:	0800b19b 	.word	0x0800b19b
 800af58:	0800b1d3 	.word	0x0800b1d3
 800af5c:	0800b1f7 	.word	0x0800b1f7
 800af60:	24004bfc 	.word	0x24004bfc

0800af64 <stdio_exit_handler>:
 800af64:	4a02      	ldr	r2, [pc, #8]	@ (800af70 <stdio_exit_handler+0xc>)
 800af66:	4903      	ldr	r1, [pc, #12]	@ (800af74 <stdio_exit_handler+0x10>)
 800af68:	4803      	ldr	r0, [pc, #12]	@ (800af78 <stdio_exit_handler+0x14>)
 800af6a:	f000 b869 	b.w	800b040 <_fwalk_sglue>
 800af6e:	bf00      	nop
 800af70:	24000014 	.word	0x24000014
 800af74:	0800bdad 	.word	0x0800bdad
 800af78:	24000024 	.word	0x24000024

0800af7c <cleanup_stdio>:
 800af7c:	6841      	ldr	r1, [r0, #4]
 800af7e:	4b0c      	ldr	r3, [pc, #48]	@ (800afb0 <cleanup_stdio+0x34>)
 800af80:	4299      	cmp	r1, r3
 800af82:	b510      	push	{r4, lr}
 800af84:	4604      	mov	r4, r0
 800af86:	d001      	beq.n	800af8c <cleanup_stdio+0x10>
 800af88:	f000 ff10 	bl	800bdac <_fflush_r>
 800af8c:	68a1      	ldr	r1, [r4, #8]
 800af8e:	4b09      	ldr	r3, [pc, #36]	@ (800afb4 <cleanup_stdio+0x38>)
 800af90:	4299      	cmp	r1, r3
 800af92:	d002      	beq.n	800af9a <cleanup_stdio+0x1e>
 800af94:	4620      	mov	r0, r4
 800af96:	f000 ff09 	bl	800bdac <_fflush_r>
 800af9a:	68e1      	ldr	r1, [r4, #12]
 800af9c:	4b06      	ldr	r3, [pc, #24]	@ (800afb8 <cleanup_stdio+0x3c>)
 800af9e:	4299      	cmp	r1, r3
 800afa0:	d004      	beq.n	800afac <cleanup_stdio+0x30>
 800afa2:	4620      	mov	r0, r4
 800afa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa8:	f000 bf00 	b.w	800bdac <_fflush_r>
 800afac:	bd10      	pop	{r4, pc}
 800afae:	bf00      	nop
 800afb0:	24004bfc 	.word	0x24004bfc
 800afb4:	24004c64 	.word	0x24004c64
 800afb8:	24004ccc 	.word	0x24004ccc

0800afbc <global_stdio_init.part.0>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	4b0b      	ldr	r3, [pc, #44]	@ (800afec <global_stdio_init.part.0+0x30>)
 800afc0:	4c0b      	ldr	r4, [pc, #44]	@ (800aff0 <global_stdio_init.part.0+0x34>)
 800afc2:	4a0c      	ldr	r2, [pc, #48]	@ (800aff4 <global_stdio_init.part.0+0x38>)
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	4620      	mov	r0, r4
 800afc8:	2200      	movs	r2, #0
 800afca:	2104      	movs	r1, #4
 800afcc:	f7ff ff94 	bl	800aef8 <std>
 800afd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800afd4:	2201      	movs	r2, #1
 800afd6:	2109      	movs	r1, #9
 800afd8:	f7ff ff8e 	bl	800aef8 <std>
 800afdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800afe0:	2202      	movs	r2, #2
 800afe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afe6:	2112      	movs	r1, #18
 800afe8:	f7ff bf86 	b.w	800aef8 <std>
 800afec:	24004d34 	.word	0x24004d34
 800aff0:	24004bfc 	.word	0x24004bfc
 800aff4:	0800af65 	.word	0x0800af65

0800aff8 <__sfp_lock_acquire>:
 800aff8:	4801      	ldr	r0, [pc, #4]	@ (800b000 <__sfp_lock_acquire+0x8>)
 800affa:	f000 ba64 	b.w	800b4c6 <__retarget_lock_acquire_recursive>
 800affe:	bf00      	nop
 800b000:	24004d3d 	.word	0x24004d3d

0800b004 <__sfp_lock_release>:
 800b004:	4801      	ldr	r0, [pc, #4]	@ (800b00c <__sfp_lock_release+0x8>)
 800b006:	f000 ba5f 	b.w	800b4c8 <__retarget_lock_release_recursive>
 800b00a:	bf00      	nop
 800b00c:	24004d3d 	.word	0x24004d3d

0800b010 <__sinit>:
 800b010:	b510      	push	{r4, lr}
 800b012:	4604      	mov	r4, r0
 800b014:	f7ff fff0 	bl	800aff8 <__sfp_lock_acquire>
 800b018:	6a23      	ldr	r3, [r4, #32]
 800b01a:	b11b      	cbz	r3, 800b024 <__sinit+0x14>
 800b01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b020:	f7ff bff0 	b.w	800b004 <__sfp_lock_release>
 800b024:	4b04      	ldr	r3, [pc, #16]	@ (800b038 <__sinit+0x28>)
 800b026:	6223      	str	r3, [r4, #32]
 800b028:	4b04      	ldr	r3, [pc, #16]	@ (800b03c <__sinit+0x2c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1f5      	bne.n	800b01c <__sinit+0xc>
 800b030:	f7ff ffc4 	bl	800afbc <global_stdio_init.part.0>
 800b034:	e7f2      	b.n	800b01c <__sinit+0xc>
 800b036:	bf00      	nop
 800b038:	0800af7d 	.word	0x0800af7d
 800b03c:	24004d34 	.word	0x24004d34

0800b040 <_fwalk_sglue>:
 800b040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b044:	4607      	mov	r7, r0
 800b046:	4688      	mov	r8, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	2600      	movs	r6, #0
 800b04c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b050:	f1b9 0901 	subs.w	r9, r9, #1
 800b054:	d505      	bpl.n	800b062 <_fwalk_sglue+0x22>
 800b056:	6824      	ldr	r4, [r4, #0]
 800b058:	2c00      	cmp	r4, #0
 800b05a:	d1f7      	bne.n	800b04c <_fwalk_sglue+0xc>
 800b05c:	4630      	mov	r0, r6
 800b05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d907      	bls.n	800b078 <_fwalk_sglue+0x38>
 800b068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b06c:	3301      	adds	r3, #1
 800b06e:	d003      	beq.n	800b078 <_fwalk_sglue+0x38>
 800b070:	4629      	mov	r1, r5
 800b072:	4638      	mov	r0, r7
 800b074:	47c0      	blx	r8
 800b076:	4306      	orrs	r6, r0
 800b078:	3568      	adds	r5, #104	@ 0x68
 800b07a:	e7e9      	b.n	800b050 <_fwalk_sglue+0x10>

0800b07c <_puts_r>:
 800b07c:	6a03      	ldr	r3, [r0, #32]
 800b07e:	b570      	push	{r4, r5, r6, lr}
 800b080:	6884      	ldr	r4, [r0, #8]
 800b082:	4605      	mov	r5, r0
 800b084:	460e      	mov	r6, r1
 800b086:	b90b      	cbnz	r3, 800b08c <_puts_r+0x10>
 800b088:	f7ff ffc2 	bl	800b010 <__sinit>
 800b08c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b08e:	07db      	lsls	r3, r3, #31
 800b090:	d405      	bmi.n	800b09e <_puts_r+0x22>
 800b092:	89a3      	ldrh	r3, [r4, #12]
 800b094:	0598      	lsls	r0, r3, #22
 800b096:	d402      	bmi.n	800b09e <_puts_r+0x22>
 800b098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b09a:	f000 fa14 	bl	800b4c6 <__retarget_lock_acquire_recursive>
 800b09e:	89a3      	ldrh	r3, [r4, #12]
 800b0a0:	0719      	lsls	r1, r3, #28
 800b0a2:	d502      	bpl.n	800b0aa <_puts_r+0x2e>
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d135      	bne.n	800b116 <_puts_r+0x9a>
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f000 f8e5 	bl	800b27c <__swsetup_r>
 800b0b2:	b380      	cbz	r0, 800b116 <_puts_r+0x9a>
 800b0b4:	f04f 35ff 	mov.w	r5, #4294967295
 800b0b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ba:	07da      	lsls	r2, r3, #31
 800b0bc:	d405      	bmi.n	800b0ca <_puts_r+0x4e>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	059b      	lsls	r3, r3, #22
 800b0c2:	d402      	bmi.n	800b0ca <_puts_r+0x4e>
 800b0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0c6:	f000 f9ff 	bl	800b4c8 <__retarget_lock_release_recursive>
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	bd70      	pop	{r4, r5, r6, pc}
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	da04      	bge.n	800b0dc <_puts_r+0x60>
 800b0d2:	69a2      	ldr	r2, [r4, #24]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	dc17      	bgt.n	800b108 <_puts_r+0x8c>
 800b0d8:	290a      	cmp	r1, #10
 800b0da:	d015      	beq.n	800b108 <_puts_r+0x8c>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	6022      	str	r2, [r4, #0]
 800b0e2:	7019      	strb	r1, [r3, #0]
 800b0e4:	68a3      	ldr	r3, [r4, #8]
 800b0e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	60a3      	str	r3, [r4, #8]
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	d1ed      	bne.n	800b0ce <_puts_r+0x52>
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	da11      	bge.n	800b11a <_puts_r+0x9e>
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	210a      	movs	r1, #10
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f000 f87f 	bl	800b1fe <__swbuf_r>
 800b100:	3001      	adds	r0, #1
 800b102:	d0d7      	beq.n	800b0b4 <_puts_r+0x38>
 800b104:	250a      	movs	r5, #10
 800b106:	e7d7      	b.n	800b0b8 <_puts_r+0x3c>
 800b108:	4622      	mov	r2, r4
 800b10a:	4628      	mov	r0, r5
 800b10c:	f000 f877 	bl	800b1fe <__swbuf_r>
 800b110:	3001      	adds	r0, #1
 800b112:	d1e7      	bne.n	800b0e4 <_puts_r+0x68>
 800b114:	e7ce      	b.n	800b0b4 <_puts_r+0x38>
 800b116:	3e01      	subs	r6, #1
 800b118:	e7e4      	b.n	800b0e4 <_puts_r+0x68>
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	6022      	str	r2, [r4, #0]
 800b120:	220a      	movs	r2, #10
 800b122:	701a      	strb	r2, [r3, #0]
 800b124:	e7ee      	b.n	800b104 <_puts_r+0x88>
	...

0800b128 <puts>:
 800b128:	4b02      	ldr	r3, [pc, #8]	@ (800b134 <puts+0xc>)
 800b12a:	4601      	mov	r1, r0
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	f7ff bfa5 	b.w	800b07c <_puts_r>
 800b132:	bf00      	nop
 800b134:	24000020 	.word	0x24000020

0800b138 <siprintf>:
 800b138:	b40e      	push	{r1, r2, r3}
 800b13a:	b500      	push	{lr}
 800b13c:	b09c      	sub	sp, #112	@ 0x70
 800b13e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b140:	9002      	str	r0, [sp, #8]
 800b142:	9006      	str	r0, [sp, #24]
 800b144:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b148:	4809      	ldr	r0, [pc, #36]	@ (800b170 <siprintf+0x38>)
 800b14a:	9107      	str	r1, [sp, #28]
 800b14c:	9104      	str	r1, [sp, #16]
 800b14e:	4909      	ldr	r1, [pc, #36]	@ (800b174 <siprintf+0x3c>)
 800b150:	f853 2b04 	ldr.w	r2, [r3], #4
 800b154:	9105      	str	r1, [sp, #20]
 800b156:	6800      	ldr	r0, [r0, #0]
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	a902      	add	r1, sp, #8
 800b15c:	f000 fb18 	bl	800b790 <_svfiprintf_r>
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	2200      	movs	r2, #0
 800b164:	701a      	strb	r2, [r3, #0]
 800b166:	b01c      	add	sp, #112	@ 0x70
 800b168:	f85d eb04 	ldr.w	lr, [sp], #4
 800b16c:	b003      	add	sp, #12
 800b16e:	4770      	bx	lr
 800b170:	24000020 	.word	0x24000020
 800b174:	ffff0208 	.word	0xffff0208

0800b178 <__sread>:
 800b178:	b510      	push	{r4, lr}
 800b17a:	460c      	mov	r4, r1
 800b17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b180:	f000 f952 	bl	800b428 <_read_r>
 800b184:	2800      	cmp	r0, #0
 800b186:	bfab      	itete	ge
 800b188:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b18a:	89a3      	ldrhlt	r3, [r4, #12]
 800b18c:	181b      	addge	r3, r3, r0
 800b18e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b192:	bfac      	ite	ge
 800b194:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b196:	81a3      	strhlt	r3, [r4, #12]
 800b198:	bd10      	pop	{r4, pc}

0800b19a <__swrite>:
 800b19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b19e:	461f      	mov	r7, r3
 800b1a0:	898b      	ldrh	r3, [r1, #12]
 800b1a2:	05db      	lsls	r3, r3, #23
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	4616      	mov	r6, r2
 800b1aa:	d505      	bpl.n	800b1b8 <__swrite+0x1e>
 800b1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f000 f926 	bl	800b404 <_lseek_r>
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ce:	f000 b93d 	b.w	800b44c <_write_r>

0800b1d2 <__sseek>:
 800b1d2:	b510      	push	{r4, lr}
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1da:	f000 f913 	bl	800b404 <_lseek_r>
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	bf15      	itete	ne
 800b1e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b1e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b1ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b1ee:	81a3      	strheq	r3, [r4, #12]
 800b1f0:	bf18      	it	ne
 800b1f2:	81a3      	strhne	r3, [r4, #12]
 800b1f4:	bd10      	pop	{r4, pc}

0800b1f6 <__sclose>:
 800b1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1fa:	f000 b89d 	b.w	800b338 <_close_r>

0800b1fe <__swbuf_r>:
 800b1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b200:	460e      	mov	r6, r1
 800b202:	4614      	mov	r4, r2
 800b204:	4605      	mov	r5, r0
 800b206:	b118      	cbz	r0, 800b210 <__swbuf_r+0x12>
 800b208:	6a03      	ldr	r3, [r0, #32]
 800b20a:	b90b      	cbnz	r3, 800b210 <__swbuf_r+0x12>
 800b20c:	f7ff ff00 	bl	800b010 <__sinit>
 800b210:	69a3      	ldr	r3, [r4, #24]
 800b212:	60a3      	str	r3, [r4, #8]
 800b214:	89a3      	ldrh	r3, [r4, #12]
 800b216:	071a      	lsls	r2, r3, #28
 800b218:	d501      	bpl.n	800b21e <__swbuf_r+0x20>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	b943      	cbnz	r3, 800b230 <__swbuf_r+0x32>
 800b21e:	4621      	mov	r1, r4
 800b220:	4628      	mov	r0, r5
 800b222:	f000 f82b 	bl	800b27c <__swsetup_r>
 800b226:	b118      	cbz	r0, 800b230 <__swbuf_r+0x32>
 800b228:	f04f 37ff 	mov.w	r7, #4294967295
 800b22c:	4638      	mov	r0, r7
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	6922      	ldr	r2, [r4, #16]
 800b234:	1a98      	subs	r0, r3, r2
 800b236:	6963      	ldr	r3, [r4, #20]
 800b238:	b2f6      	uxtb	r6, r6
 800b23a:	4283      	cmp	r3, r0
 800b23c:	4637      	mov	r7, r6
 800b23e:	dc05      	bgt.n	800b24c <__swbuf_r+0x4e>
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	f000 fdb2 	bl	800bdac <_fflush_r>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d1ed      	bne.n	800b228 <__swbuf_r+0x2a>
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	3b01      	subs	r3, #1
 800b250:	60a3      	str	r3, [r4, #8]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	1c5a      	adds	r2, r3, #1
 800b256:	6022      	str	r2, [r4, #0]
 800b258:	701e      	strb	r6, [r3, #0]
 800b25a:	6962      	ldr	r2, [r4, #20]
 800b25c:	1c43      	adds	r3, r0, #1
 800b25e:	429a      	cmp	r2, r3
 800b260:	d004      	beq.n	800b26c <__swbuf_r+0x6e>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	07db      	lsls	r3, r3, #31
 800b266:	d5e1      	bpl.n	800b22c <__swbuf_r+0x2e>
 800b268:	2e0a      	cmp	r6, #10
 800b26a:	d1df      	bne.n	800b22c <__swbuf_r+0x2e>
 800b26c:	4621      	mov	r1, r4
 800b26e:	4628      	mov	r0, r5
 800b270:	f000 fd9c 	bl	800bdac <_fflush_r>
 800b274:	2800      	cmp	r0, #0
 800b276:	d0d9      	beq.n	800b22c <__swbuf_r+0x2e>
 800b278:	e7d6      	b.n	800b228 <__swbuf_r+0x2a>
	...

0800b27c <__swsetup_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4b29      	ldr	r3, [pc, #164]	@ (800b324 <__swsetup_r+0xa8>)
 800b280:	4605      	mov	r5, r0
 800b282:	6818      	ldr	r0, [r3, #0]
 800b284:	460c      	mov	r4, r1
 800b286:	b118      	cbz	r0, 800b290 <__swsetup_r+0x14>
 800b288:	6a03      	ldr	r3, [r0, #32]
 800b28a:	b90b      	cbnz	r3, 800b290 <__swsetup_r+0x14>
 800b28c:	f7ff fec0 	bl	800b010 <__sinit>
 800b290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b294:	0719      	lsls	r1, r3, #28
 800b296:	d422      	bmi.n	800b2de <__swsetup_r+0x62>
 800b298:	06da      	lsls	r2, r3, #27
 800b29a:	d407      	bmi.n	800b2ac <__swsetup_r+0x30>
 800b29c:	2209      	movs	r2, #9
 800b29e:	602a      	str	r2, [r5, #0]
 800b2a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2aa:	e033      	b.n	800b314 <__swsetup_r+0x98>
 800b2ac:	0758      	lsls	r0, r3, #29
 800b2ae:	d512      	bpl.n	800b2d6 <__swsetup_r+0x5a>
 800b2b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2b2:	b141      	cbz	r1, 800b2c6 <__swsetup_r+0x4a>
 800b2b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2b8:	4299      	cmp	r1, r3
 800b2ba:	d002      	beq.n	800b2c2 <__swsetup_r+0x46>
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 f913 	bl	800b4e8 <_free_r>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	6063      	str	r3, [r4, #4]
 800b2d2:	6923      	ldr	r3, [r4, #16]
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	f043 0308 	orr.w	r3, r3, #8
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	b94b      	cbnz	r3, 800b2f6 <__swsetup_r+0x7a>
 800b2e2:	89a3      	ldrh	r3, [r4, #12]
 800b2e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ec:	d003      	beq.n	800b2f6 <__swsetup_r+0x7a>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 fda9 	bl	800be48 <__smakebuf_r>
 800b2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2fa:	f013 0201 	ands.w	r2, r3, #1
 800b2fe:	d00a      	beq.n	800b316 <__swsetup_r+0x9a>
 800b300:	2200      	movs	r2, #0
 800b302:	60a2      	str	r2, [r4, #8]
 800b304:	6962      	ldr	r2, [r4, #20]
 800b306:	4252      	negs	r2, r2
 800b308:	61a2      	str	r2, [r4, #24]
 800b30a:	6922      	ldr	r2, [r4, #16]
 800b30c:	b942      	cbnz	r2, 800b320 <__swsetup_r+0xa4>
 800b30e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b312:	d1c5      	bne.n	800b2a0 <__swsetup_r+0x24>
 800b314:	bd38      	pop	{r3, r4, r5, pc}
 800b316:	0799      	lsls	r1, r3, #30
 800b318:	bf58      	it	pl
 800b31a:	6962      	ldrpl	r2, [r4, #20]
 800b31c:	60a2      	str	r2, [r4, #8]
 800b31e:	e7f4      	b.n	800b30a <__swsetup_r+0x8e>
 800b320:	2000      	movs	r0, #0
 800b322:	e7f7      	b.n	800b314 <__swsetup_r+0x98>
 800b324:	24000020 	.word	0x24000020

0800b328 <memset>:
 800b328:	4402      	add	r2, r0
 800b32a:	4603      	mov	r3, r0
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d100      	bne.n	800b332 <memset+0xa>
 800b330:	4770      	bx	lr
 800b332:	f803 1b01 	strb.w	r1, [r3], #1
 800b336:	e7f9      	b.n	800b32c <memset+0x4>

0800b338 <_close_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4d06      	ldr	r5, [pc, #24]	@ (800b354 <_close_r+0x1c>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	4604      	mov	r4, r0
 800b340:	4608      	mov	r0, r1
 800b342:	602b      	str	r3, [r5, #0]
 800b344:	f7f5 fe0b 	bl	8000f5e <_close>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_close_r+0x1a>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_close_r+0x1a>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	24004d38 	.word	0x24004d38

0800b358 <_reclaim_reent>:
 800b358:	4b29      	ldr	r3, [pc, #164]	@ (800b400 <_reclaim_reent+0xa8>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4283      	cmp	r3, r0
 800b35e:	b570      	push	{r4, r5, r6, lr}
 800b360:	4604      	mov	r4, r0
 800b362:	d04b      	beq.n	800b3fc <_reclaim_reent+0xa4>
 800b364:	69c3      	ldr	r3, [r0, #28]
 800b366:	b1ab      	cbz	r3, 800b394 <_reclaim_reent+0x3c>
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	b16b      	cbz	r3, 800b388 <_reclaim_reent+0x30>
 800b36c:	2500      	movs	r5, #0
 800b36e:	69e3      	ldr	r3, [r4, #28]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	5959      	ldr	r1, [r3, r5]
 800b374:	2900      	cmp	r1, #0
 800b376:	d13b      	bne.n	800b3f0 <_reclaim_reent+0x98>
 800b378:	3504      	adds	r5, #4
 800b37a:	2d80      	cmp	r5, #128	@ 0x80
 800b37c:	d1f7      	bne.n	800b36e <_reclaim_reent+0x16>
 800b37e:	69e3      	ldr	r3, [r4, #28]
 800b380:	4620      	mov	r0, r4
 800b382:	68d9      	ldr	r1, [r3, #12]
 800b384:	f000 f8b0 	bl	800b4e8 <_free_r>
 800b388:	69e3      	ldr	r3, [r4, #28]
 800b38a:	6819      	ldr	r1, [r3, #0]
 800b38c:	b111      	cbz	r1, 800b394 <_reclaim_reent+0x3c>
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 f8aa 	bl	800b4e8 <_free_r>
 800b394:	6961      	ldr	r1, [r4, #20]
 800b396:	b111      	cbz	r1, 800b39e <_reclaim_reent+0x46>
 800b398:	4620      	mov	r0, r4
 800b39a:	f000 f8a5 	bl	800b4e8 <_free_r>
 800b39e:	69e1      	ldr	r1, [r4, #28]
 800b3a0:	b111      	cbz	r1, 800b3a8 <_reclaim_reent+0x50>
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f000 f8a0 	bl	800b4e8 <_free_r>
 800b3a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b3aa:	b111      	cbz	r1, 800b3b2 <_reclaim_reent+0x5a>
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 f89b 	bl	800b4e8 <_free_r>
 800b3b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3b4:	b111      	cbz	r1, 800b3bc <_reclaim_reent+0x64>
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f000 f896 	bl	800b4e8 <_free_r>
 800b3bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b3be:	b111      	cbz	r1, 800b3c6 <_reclaim_reent+0x6e>
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 f891 	bl	800b4e8 <_free_r>
 800b3c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b3c8:	b111      	cbz	r1, 800b3d0 <_reclaim_reent+0x78>
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 f88c 	bl	800b4e8 <_free_r>
 800b3d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b3d2:	b111      	cbz	r1, 800b3da <_reclaim_reent+0x82>
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 f887 	bl	800b4e8 <_free_r>
 800b3da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b3dc:	b111      	cbz	r1, 800b3e4 <_reclaim_reent+0x8c>
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 f882 	bl	800b4e8 <_free_r>
 800b3e4:	6a23      	ldr	r3, [r4, #32]
 800b3e6:	b14b      	cbz	r3, 800b3fc <_reclaim_reent+0xa4>
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3ee:	4718      	bx	r3
 800b3f0:	680e      	ldr	r6, [r1, #0]
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 f878 	bl	800b4e8 <_free_r>
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	e7bb      	b.n	800b374 <_reclaim_reent+0x1c>
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	bf00      	nop
 800b400:	24000020 	.word	0x24000020

0800b404 <_lseek_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4d07      	ldr	r5, [pc, #28]	@ (800b424 <_lseek_r+0x20>)
 800b408:	4604      	mov	r4, r0
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	2200      	movs	r2, #0
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7f5 fdca 	bl	8000fac <_lseek>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_lseek_r+0x1e>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_lseek_r+0x1e>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	24004d38 	.word	0x24004d38

0800b428 <_read_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4d07      	ldr	r5, [pc, #28]	@ (800b448 <_read_r+0x20>)
 800b42c:	4604      	mov	r4, r0
 800b42e:	4608      	mov	r0, r1
 800b430:	4611      	mov	r1, r2
 800b432:	2200      	movs	r2, #0
 800b434:	602a      	str	r2, [r5, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	f7f5 fd74 	bl	8000f24 <_read>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d102      	bne.n	800b446 <_read_r+0x1e>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	b103      	cbz	r3, 800b446 <_read_r+0x1e>
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	24004d38 	.word	0x24004d38

0800b44c <_write_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4d07      	ldr	r5, [pc, #28]	@ (800b46c <_write_r+0x20>)
 800b450:	4604      	mov	r4, r0
 800b452:	4608      	mov	r0, r1
 800b454:	4611      	mov	r1, r2
 800b456:	2200      	movs	r2, #0
 800b458:	602a      	str	r2, [r5, #0]
 800b45a:	461a      	mov	r2, r3
 800b45c:	f7f5 fb10 	bl	8000a80 <_write>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_write_r+0x1e>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_write_r+0x1e>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	24004d38 	.word	0x24004d38

0800b470 <__errno>:
 800b470:	4b01      	ldr	r3, [pc, #4]	@ (800b478 <__errno+0x8>)
 800b472:	6818      	ldr	r0, [r3, #0]
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	24000020 	.word	0x24000020

0800b47c <__libc_init_array>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	4d0d      	ldr	r5, [pc, #52]	@ (800b4b4 <__libc_init_array+0x38>)
 800b480:	4c0d      	ldr	r4, [pc, #52]	@ (800b4b8 <__libc_init_array+0x3c>)
 800b482:	1b64      	subs	r4, r4, r5
 800b484:	10a4      	asrs	r4, r4, #2
 800b486:	2600      	movs	r6, #0
 800b488:	42a6      	cmp	r6, r4
 800b48a:	d109      	bne.n	800b4a0 <__libc_init_array+0x24>
 800b48c:	4d0b      	ldr	r5, [pc, #44]	@ (800b4bc <__libc_init_array+0x40>)
 800b48e:	4c0c      	ldr	r4, [pc, #48]	@ (800b4c0 <__libc_init_array+0x44>)
 800b490:	f000 fd98 	bl	800bfc4 <_init>
 800b494:	1b64      	subs	r4, r4, r5
 800b496:	10a4      	asrs	r4, r4, #2
 800b498:	2600      	movs	r6, #0
 800b49a:	42a6      	cmp	r6, r4
 800b49c:	d105      	bne.n	800b4aa <__libc_init_array+0x2e>
 800b49e:	bd70      	pop	{r4, r5, r6, pc}
 800b4a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a4:	4798      	blx	r3
 800b4a6:	3601      	adds	r6, #1
 800b4a8:	e7ee      	b.n	800b488 <__libc_init_array+0xc>
 800b4aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ae:	4798      	blx	r3
 800b4b0:	3601      	adds	r6, #1
 800b4b2:	e7f2      	b.n	800b49a <__libc_init_array+0x1e>
 800b4b4:	0800c11c 	.word	0x0800c11c
 800b4b8:	0800c11c 	.word	0x0800c11c
 800b4bc:	0800c11c 	.word	0x0800c11c
 800b4c0:	0800c120 	.word	0x0800c120

0800b4c4 <__retarget_lock_init_recursive>:
 800b4c4:	4770      	bx	lr

0800b4c6 <__retarget_lock_acquire_recursive>:
 800b4c6:	4770      	bx	lr

0800b4c8 <__retarget_lock_release_recursive>:
 800b4c8:	4770      	bx	lr

0800b4ca <memcpy>:
 800b4ca:	440a      	add	r2, r1
 800b4cc:	4291      	cmp	r1, r2
 800b4ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4d2:	d100      	bne.n	800b4d6 <memcpy+0xc>
 800b4d4:	4770      	bx	lr
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4e0:	4291      	cmp	r1, r2
 800b4e2:	d1f9      	bne.n	800b4d8 <memcpy+0xe>
 800b4e4:	bd10      	pop	{r4, pc}
	...

0800b4e8 <_free_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4605      	mov	r5, r0
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	d041      	beq.n	800b574 <_free_r+0x8c>
 800b4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f4:	1f0c      	subs	r4, r1, #4
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	bfb8      	it	lt
 800b4fa:	18e4      	addlt	r4, r4, r3
 800b4fc:	f000 f8e0 	bl	800b6c0 <__malloc_lock>
 800b500:	4a1d      	ldr	r2, [pc, #116]	@ (800b578 <_free_r+0x90>)
 800b502:	6813      	ldr	r3, [r2, #0]
 800b504:	b933      	cbnz	r3, 800b514 <_free_r+0x2c>
 800b506:	6063      	str	r3, [r4, #4]
 800b508:	6014      	str	r4, [r2, #0]
 800b50a:	4628      	mov	r0, r5
 800b50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b510:	f000 b8dc 	b.w	800b6cc <__malloc_unlock>
 800b514:	42a3      	cmp	r3, r4
 800b516:	d908      	bls.n	800b52a <_free_r+0x42>
 800b518:	6820      	ldr	r0, [r4, #0]
 800b51a:	1821      	adds	r1, r4, r0
 800b51c:	428b      	cmp	r3, r1
 800b51e:	bf01      	itttt	eq
 800b520:	6819      	ldreq	r1, [r3, #0]
 800b522:	685b      	ldreq	r3, [r3, #4]
 800b524:	1809      	addeq	r1, r1, r0
 800b526:	6021      	streq	r1, [r4, #0]
 800b528:	e7ed      	b.n	800b506 <_free_r+0x1e>
 800b52a:	461a      	mov	r2, r3
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	b10b      	cbz	r3, 800b534 <_free_r+0x4c>
 800b530:	42a3      	cmp	r3, r4
 800b532:	d9fa      	bls.n	800b52a <_free_r+0x42>
 800b534:	6811      	ldr	r1, [r2, #0]
 800b536:	1850      	adds	r0, r2, r1
 800b538:	42a0      	cmp	r0, r4
 800b53a:	d10b      	bne.n	800b554 <_free_r+0x6c>
 800b53c:	6820      	ldr	r0, [r4, #0]
 800b53e:	4401      	add	r1, r0
 800b540:	1850      	adds	r0, r2, r1
 800b542:	4283      	cmp	r3, r0
 800b544:	6011      	str	r1, [r2, #0]
 800b546:	d1e0      	bne.n	800b50a <_free_r+0x22>
 800b548:	6818      	ldr	r0, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	6053      	str	r3, [r2, #4]
 800b54e:	4408      	add	r0, r1
 800b550:	6010      	str	r0, [r2, #0]
 800b552:	e7da      	b.n	800b50a <_free_r+0x22>
 800b554:	d902      	bls.n	800b55c <_free_r+0x74>
 800b556:	230c      	movs	r3, #12
 800b558:	602b      	str	r3, [r5, #0]
 800b55a:	e7d6      	b.n	800b50a <_free_r+0x22>
 800b55c:	6820      	ldr	r0, [r4, #0]
 800b55e:	1821      	adds	r1, r4, r0
 800b560:	428b      	cmp	r3, r1
 800b562:	bf04      	itt	eq
 800b564:	6819      	ldreq	r1, [r3, #0]
 800b566:	685b      	ldreq	r3, [r3, #4]
 800b568:	6063      	str	r3, [r4, #4]
 800b56a:	bf04      	itt	eq
 800b56c:	1809      	addeq	r1, r1, r0
 800b56e:	6021      	streq	r1, [r4, #0]
 800b570:	6054      	str	r4, [r2, #4]
 800b572:	e7ca      	b.n	800b50a <_free_r+0x22>
 800b574:	bd38      	pop	{r3, r4, r5, pc}
 800b576:	bf00      	nop
 800b578:	24004d44 	.word	0x24004d44

0800b57c <sbrk_aligned>:
 800b57c:	b570      	push	{r4, r5, r6, lr}
 800b57e:	4e0f      	ldr	r6, [pc, #60]	@ (800b5bc <sbrk_aligned+0x40>)
 800b580:	460c      	mov	r4, r1
 800b582:	6831      	ldr	r1, [r6, #0]
 800b584:	4605      	mov	r5, r0
 800b586:	b911      	cbnz	r1, 800b58e <sbrk_aligned+0x12>
 800b588:	f000 fcd6 	bl	800bf38 <_sbrk_r>
 800b58c:	6030      	str	r0, [r6, #0]
 800b58e:	4621      	mov	r1, r4
 800b590:	4628      	mov	r0, r5
 800b592:	f000 fcd1 	bl	800bf38 <_sbrk_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	d103      	bne.n	800b5a2 <sbrk_aligned+0x26>
 800b59a:	f04f 34ff 	mov.w	r4, #4294967295
 800b59e:	4620      	mov	r0, r4
 800b5a0:	bd70      	pop	{r4, r5, r6, pc}
 800b5a2:	1cc4      	adds	r4, r0, #3
 800b5a4:	f024 0403 	bic.w	r4, r4, #3
 800b5a8:	42a0      	cmp	r0, r4
 800b5aa:	d0f8      	beq.n	800b59e <sbrk_aligned+0x22>
 800b5ac:	1a21      	subs	r1, r4, r0
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 fcc2 	bl	800bf38 <_sbrk_r>
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d1f2      	bne.n	800b59e <sbrk_aligned+0x22>
 800b5b8:	e7ef      	b.n	800b59a <sbrk_aligned+0x1e>
 800b5ba:	bf00      	nop
 800b5bc:	24004d40 	.word	0x24004d40

0800b5c0 <_malloc_r>:
 800b5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	1ccd      	adds	r5, r1, #3
 800b5c6:	f025 0503 	bic.w	r5, r5, #3
 800b5ca:	3508      	adds	r5, #8
 800b5cc:	2d0c      	cmp	r5, #12
 800b5ce:	bf38      	it	cc
 800b5d0:	250c      	movcc	r5, #12
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	db01      	blt.n	800b5dc <_malloc_r+0x1c>
 800b5d8:	42a9      	cmp	r1, r5
 800b5da:	d904      	bls.n	800b5e6 <_malloc_r+0x26>
 800b5dc:	230c      	movs	r3, #12
 800b5de:	6033      	str	r3, [r6, #0]
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6bc <_malloc_r+0xfc>
 800b5ea:	f000 f869 	bl	800b6c0 <__malloc_lock>
 800b5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f2:	461c      	mov	r4, r3
 800b5f4:	bb44      	cbnz	r4, 800b648 <_malloc_r+0x88>
 800b5f6:	4629      	mov	r1, r5
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f7ff ffbf 	bl	800b57c <sbrk_aligned>
 800b5fe:	1c43      	adds	r3, r0, #1
 800b600:	4604      	mov	r4, r0
 800b602:	d158      	bne.n	800b6b6 <_malloc_r+0xf6>
 800b604:	f8d8 4000 	ldr.w	r4, [r8]
 800b608:	4627      	mov	r7, r4
 800b60a:	2f00      	cmp	r7, #0
 800b60c:	d143      	bne.n	800b696 <_malloc_r+0xd6>
 800b60e:	2c00      	cmp	r4, #0
 800b610:	d04b      	beq.n	800b6aa <_malloc_r+0xea>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	4639      	mov	r1, r7
 800b616:	4630      	mov	r0, r6
 800b618:	eb04 0903 	add.w	r9, r4, r3
 800b61c:	f000 fc8c 	bl	800bf38 <_sbrk_r>
 800b620:	4581      	cmp	r9, r0
 800b622:	d142      	bne.n	800b6aa <_malloc_r+0xea>
 800b624:	6821      	ldr	r1, [r4, #0]
 800b626:	1a6d      	subs	r5, r5, r1
 800b628:	4629      	mov	r1, r5
 800b62a:	4630      	mov	r0, r6
 800b62c:	f7ff ffa6 	bl	800b57c <sbrk_aligned>
 800b630:	3001      	adds	r0, #1
 800b632:	d03a      	beq.n	800b6aa <_malloc_r+0xea>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	442b      	add	r3, r5
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	f8d8 3000 	ldr.w	r3, [r8]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	bb62      	cbnz	r2, 800b69c <_malloc_r+0xdc>
 800b642:	f8c8 7000 	str.w	r7, [r8]
 800b646:	e00f      	b.n	800b668 <_malloc_r+0xa8>
 800b648:	6822      	ldr	r2, [r4, #0]
 800b64a:	1b52      	subs	r2, r2, r5
 800b64c:	d420      	bmi.n	800b690 <_malloc_r+0xd0>
 800b64e:	2a0b      	cmp	r2, #11
 800b650:	d917      	bls.n	800b682 <_malloc_r+0xc2>
 800b652:	1961      	adds	r1, r4, r5
 800b654:	42a3      	cmp	r3, r4
 800b656:	6025      	str	r5, [r4, #0]
 800b658:	bf18      	it	ne
 800b65a:	6059      	strne	r1, [r3, #4]
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	bf08      	it	eq
 800b660:	f8c8 1000 	streq.w	r1, [r8]
 800b664:	5162      	str	r2, [r4, r5]
 800b666:	604b      	str	r3, [r1, #4]
 800b668:	4630      	mov	r0, r6
 800b66a:	f000 f82f 	bl	800b6cc <__malloc_unlock>
 800b66e:	f104 000b 	add.w	r0, r4, #11
 800b672:	1d23      	adds	r3, r4, #4
 800b674:	f020 0007 	bic.w	r0, r0, #7
 800b678:	1ac2      	subs	r2, r0, r3
 800b67a:	bf1c      	itt	ne
 800b67c:	1a1b      	subne	r3, r3, r0
 800b67e:	50a3      	strne	r3, [r4, r2]
 800b680:	e7af      	b.n	800b5e2 <_malloc_r+0x22>
 800b682:	6862      	ldr	r2, [r4, #4]
 800b684:	42a3      	cmp	r3, r4
 800b686:	bf0c      	ite	eq
 800b688:	f8c8 2000 	streq.w	r2, [r8]
 800b68c:	605a      	strne	r2, [r3, #4]
 800b68e:	e7eb      	b.n	800b668 <_malloc_r+0xa8>
 800b690:	4623      	mov	r3, r4
 800b692:	6864      	ldr	r4, [r4, #4]
 800b694:	e7ae      	b.n	800b5f4 <_malloc_r+0x34>
 800b696:	463c      	mov	r4, r7
 800b698:	687f      	ldr	r7, [r7, #4]
 800b69a:	e7b6      	b.n	800b60a <_malloc_r+0x4a>
 800b69c:	461a      	mov	r2, r3
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	d1fb      	bne.n	800b69c <_malloc_r+0xdc>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	6053      	str	r3, [r2, #4]
 800b6a8:	e7de      	b.n	800b668 <_malloc_r+0xa8>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	6033      	str	r3, [r6, #0]
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f000 f80c 	bl	800b6cc <__malloc_unlock>
 800b6b4:	e794      	b.n	800b5e0 <_malloc_r+0x20>
 800b6b6:	6005      	str	r5, [r0, #0]
 800b6b8:	e7d6      	b.n	800b668 <_malloc_r+0xa8>
 800b6ba:	bf00      	nop
 800b6bc:	24004d44 	.word	0x24004d44

0800b6c0 <__malloc_lock>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	@ (800b6c8 <__malloc_lock+0x8>)
 800b6c2:	f7ff bf00 	b.w	800b4c6 <__retarget_lock_acquire_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	24004d3c 	.word	0x24004d3c

0800b6cc <__malloc_unlock>:
 800b6cc:	4801      	ldr	r0, [pc, #4]	@ (800b6d4 <__malloc_unlock+0x8>)
 800b6ce:	f7ff befb 	b.w	800b4c8 <__retarget_lock_release_recursive>
 800b6d2:	bf00      	nop
 800b6d4:	24004d3c 	.word	0x24004d3c

0800b6d8 <__ssputs_r>:
 800b6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6dc:	688e      	ldr	r6, [r1, #8]
 800b6de:	461f      	mov	r7, r3
 800b6e0:	42be      	cmp	r6, r7
 800b6e2:	680b      	ldr	r3, [r1, #0]
 800b6e4:	4682      	mov	sl, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	4690      	mov	r8, r2
 800b6ea:	d82d      	bhi.n	800b748 <__ssputs_r+0x70>
 800b6ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6f4:	d026      	beq.n	800b744 <__ssputs_r+0x6c>
 800b6f6:	6965      	ldr	r5, [r4, #20]
 800b6f8:	6909      	ldr	r1, [r1, #16]
 800b6fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6fe:	eba3 0901 	sub.w	r9, r3, r1
 800b702:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b706:	1c7b      	adds	r3, r7, #1
 800b708:	444b      	add	r3, r9
 800b70a:	106d      	asrs	r5, r5, #1
 800b70c:	429d      	cmp	r5, r3
 800b70e:	bf38      	it	cc
 800b710:	461d      	movcc	r5, r3
 800b712:	0553      	lsls	r3, r2, #21
 800b714:	d527      	bpl.n	800b766 <__ssputs_r+0x8e>
 800b716:	4629      	mov	r1, r5
 800b718:	f7ff ff52 	bl	800b5c0 <_malloc_r>
 800b71c:	4606      	mov	r6, r0
 800b71e:	b360      	cbz	r0, 800b77a <__ssputs_r+0xa2>
 800b720:	6921      	ldr	r1, [r4, #16]
 800b722:	464a      	mov	r2, r9
 800b724:	f7ff fed1 	bl	800b4ca <memcpy>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b72e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b732:	81a3      	strh	r3, [r4, #12]
 800b734:	6126      	str	r6, [r4, #16]
 800b736:	6165      	str	r5, [r4, #20]
 800b738:	444e      	add	r6, r9
 800b73a:	eba5 0509 	sub.w	r5, r5, r9
 800b73e:	6026      	str	r6, [r4, #0]
 800b740:	60a5      	str	r5, [r4, #8]
 800b742:	463e      	mov	r6, r7
 800b744:	42be      	cmp	r6, r7
 800b746:	d900      	bls.n	800b74a <__ssputs_r+0x72>
 800b748:	463e      	mov	r6, r7
 800b74a:	6820      	ldr	r0, [r4, #0]
 800b74c:	4632      	mov	r2, r6
 800b74e:	4641      	mov	r1, r8
 800b750:	f000 fbb6 	bl	800bec0 <memmove>
 800b754:	68a3      	ldr	r3, [r4, #8]
 800b756:	1b9b      	subs	r3, r3, r6
 800b758:	60a3      	str	r3, [r4, #8]
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	4433      	add	r3, r6
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	2000      	movs	r0, #0
 800b762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b766:	462a      	mov	r2, r5
 800b768:	f000 fbf6 	bl	800bf58 <_realloc_r>
 800b76c:	4606      	mov	r6, r0
 800b76e:	2800      	cmp	r0, #0
 800b770:	d1e0      	bne.n	800b734 <__ssputs_r+0x5c>
 800b772:	6921      	ldr	r1, [r4, #16]
 800b774:	4650      	mov	r0, sl
 800b776:	f7ff feb7 	bl	800b4e8 <_free_r>
 800b77a:	230c      	movs	r3, #12
 800b77c:	f8ca 3000 	str.w	r3, [sl]
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b786:	81a3      	strh	r3, [r4, #12]
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	e7e9      	b.n	800b762 <__ssputs_r+0x8a>
	...

0800b790 <_svfiprintf_r>:
 800b790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	4698      	mov	r8, r3
 800b796:	898b      	ldrh	r3, [r1, #12]
 800b798:	061b      	lsls	r3, r3, #24
 800b79a:	b09d      	sub	sp, #116	@ 0x74
 800b79c:	4607      	mov	r7, r0
 800b79e:	460d      	mov	r5, r1
 800b7a0:	4614      	mov	r4, r2
 800b7a2:	d510      	bpl.n	800b7c6 <_svfiprintf_r+0x36>
 800b7a4:	690b      	ldr	r3, [r1, #16]
 800b7a6:	b973      	cbnz	r3, 800b7c6 <_svfiprintf_r+0x36>
 800b7a8:	2140      	movs	r1, #64	@ 0x40
 800b7aa:	f7ff ff09 	bl	800b5c0 <_malloc_r>
 800b7ae:	6028      	str	r0, [r5, #0]
 800b7b0:	6128      	str	r0, [r5, #16]
 800b7b2:	b930      	cbnz	r0, 800b7c2 <_svfiprintf_r+0x32>
 800b7b4:	230c      	movs	r3, #12
 800b7b6:	603b      	str	r3, [r7, #0]
 800b7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7bc:	b01d      	add	sp, #116	@ 0x74
 800b7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c2:	2340      	movs	r3, #64	@ 0x40
 800b7c4:	616b      	str	r3, [r5, #20]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7ca:	2320      	movs	r3, #32
 800b7cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7d4:	2330      	movs	r3, #48	@ 0x30
 800b7d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b974 <_svfiprintf_r+0x1e4>
 800b7da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7de:	f04f 0901 	mov.w	r9, #1
 800b7e2:	4623      	mov	r3, r4
 800b7e4:	469a      	mov	sl, r3
 800b7e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ea:	b10a      	cbz	r2, 800b7f0 <_svfiprintf_r+0x60>
 800b7ec:	2a25      	cmp	r2, #37	@ 0x25
 800b7ee:	d1f9      	bne.n	800b7e4 <_svfiprintf_r+0x54>
 800b7f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b7f4:	d00b      	beq.n	800b80e <_svfiprintf_r+0x7e>
 800b7f6:	465b      	mov	r3, fp
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4629      	mov	r1, r5
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	f7ff ff6b 	bl	800b6d8 <__ssputs_r>
 800b802:	3001      	adds	r0, #1
 800b804:	f000 80a7 	beq.w	800b956 <_svfiprintf_r+0x1c6>
 800b808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b80a:	445a      	add	r2, fp
 800b80c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b80e:	f89a 3000 	ldrb.w	r3, [sl]
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 809f 	beq.w	800b956 <_svfiprintf_r+0x1c6>
 800b818:	2300      	movs	r3, #0
 800b81a:	f04f 32ff 	mov.w	r2, #4294967295
 800b81e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b822:	f10a 0a01 	add.w	sl, sl, #1
 800b826:	9304      	str	r3, [sp, #16]
 800b828:	9307      	str	r3, [sp, #28]
 800b82a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b82e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b830:	4654      	mov	r4, sl
 800b832:	2205      	movs	r2, #5
 800b834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b838:	484e      	ldr	r0, [pc, #312]	@ (800b974 <_svfiprintf_r+0x1e4>)
 800b83a:	f7f4 fd71 	bl	8000320 <memchr>
 800b83e:	9a04      	ldr	r2, [sp, #16]
 800b840:	b9d8      	cbnz	r0, 800b87a <_svfiprintf_r+0xea>
 800b842:	06d0      	lsls	r0, r2, #27
 800b844:	bf44      	itt	mi
 800b846:	2320      	movmi	r3, #32
 800b848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b84c:	0711      	lsls	r1, r2, #28
 800b84e:	bf44      	itt	mi
 800b850:	232b      	movmi	r3, #43	@ 0x2b
 800b852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b856:	f89a 3000 	ldrb.w	r3, [sl]
 800b85a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b85c:	d015      	beq.n	800b88a <_svfiprintf_r+0xfa>
 800b85e:	9a07      	ldr	r2, [sp, #28]
 800b860:	4654      	mov	r4, sl
 800b862:	2000      	movs	r0, #0
 800b864:	f04f 0c0a 	mov.w	ip, #10
 800b868:	4621      	mov	r1, r4
 800b86a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b86e:	3b30      	subs	r3, #48	@ 0x30
 800b870:	2b09      	cmp	r3, #9
 800b872:	d94b      	bls.n	800b90c <_svfiprintf_r+0x17c>
 800b874:	b1b0      	cbz	r0, 800b8a4 <_svfiprintf_r+0x114>
 800b876:	9207      	str	r2, [sp, #28]
 800b878:	e014      	b.n	800b8a4 <_svfiprintf_r+0x114>
 800b87a:	eba0 0308 	sub.w	r3, r0, r8
 800b87e:	fa09 f303 	lsl.w	r3, r9, r3
 800b882:	4313      	orrs	r3, r2
 800b884:	9304      	str	r3, [sp, #16]
 800b886:	46a2      	mov	sl, r4
 800b888:	e7d2      	b.n	800b830 <_svfiprintf_r+0xa0>
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	1d19      	adds	r1, r3, #4
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	9103      	str	r1, [sp, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	bfbb      	ittet	lt
 800b896:	425b      	neglt	r3, r3
 800b898:	f042 0202 	orrlt.w	r2, r2, #2
 800b89c:	9307      	strge	r3, [sp, #28]
 800b89e:	9307      	strlt	r3, [sp, #28]
 800b8a0:	bfb8      	it	lt
 800b8a2:	9204      	strlt	r2, [sp, #16]
 800b8a4:	7823      	ldrb	r3, [r4, #0]
 800b8a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8a8:	d10a      	bne.n	800b8c0 <_svfiprintf_r+0x130>
 800b8aa:	7863      	ldrb	r3, [r4, #1]
 800b8ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ae:	d132      	bne.n	800b916 <_svfiprintf_r+0x186>
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	1d1a      	adds	r2, r3, #4
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	9203      	str	r2, [sp, #12]
 800b8b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8bc:	3402      	adds	r4, #2
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b984 <_svfiprintf_r+0x1f4>
 800b8c4:	7821      	ldrb	r1, [r4, #0]
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	4650      	mov	r0, sl
 800b8ca:	f7f4 fd29 	bl	8000320 <memchr>
 800b8ce:	b138      	cbz	r0, 800b8e0 <_svfiprintf_r+0x150>
 800b8d0:	9b04      	ldr	r3, [sp, #16]
 800b8d2:	eba0 000a 	sub.w	r0, r0, sl
 800b8d6:	2240      	movs	r2, #64	@ 0x40
 800b8d8:	4082      	lsls	r2, r0
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	3401      	adds	r4, #1
 800b8de:	9304      	str	r3, [sp, #16]
 800b8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e4:	4824      	ldr	r0, [pc, #144]	@ (800b978 <_svfiprintf_r+0x1e8>)
 800b8e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8ea:	2206      	movs	r2, #6
 800b8ec:	f7f4 fd18 	bl	8000320 <memchr>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d036      	beq.n	800b962 <_svfiprintf_r+0x1d2>
 800b8f4:	4b21      	ldr	r3, [pc, #132]	@ (800b97c <_svfiprintf_r+0x1ec>)
 800b8f6:	bb1b      	cbnz	r3, 800b940 <_svfiprintf_r+0x1b0>
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	3307      	adds	r3, #7
 800b8fc:	f023 0307 	bic.w	r3, r3, #7
 800b900:	3308      	adds	r3, #8
 800b902:	9303      	str	r3, [sp, #12]
 800b904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b906:	4433      	add	r3, r6
 800b908:	9309      	str	r3, [sp, #36]	@ 0x24
 800b90a:	e76a      	b.n	800b7e2 <_svfiprintf_r+0x52>
 800b90c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b910:	460c      	mov	r4, r1
 800b912:	2001      	movs	r0, #1
 800b914:	e7a8      	b.n	800b868 <_svfiprintf_r+0xd8>
 800b916:	2300      	movs	r3, #0
 800b918:	3401      	adds	r4, #1
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	4619      	mov	r1, r3
 800b91e:	f04f 0c0a 	mov.w	ip, #10
 800b922:	4620      	mov	r0, r4
 800b924:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b928:	3a30      	subs	r2, #48	@ 0x30
 800b92a:	2a09      	cmp	r2, #9
 800b92c:	d903      	bls.n	800b936 <_svfiprintf_r+0x1a6>
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0c6      	beq.n	800b8c0 <_svfiprintf_r+0x130>
 800b932:	9105      	str	r1, [sp, #20]
 800b934:	e7c4      	b.n	800b8c0 <_svfiprintf_r+0x130>
 800b936:	fb0c 2101 	mla	r1, ip, r1, r2
 800b93a:	4604      	mov	r4, r0
 800b93c:	2301      	movs	r3, #1
 800b93e:	e7f0      	b.n	800b922 <_svfiprintf_r+0x192>
 800b940:	ab03      	add	r3, sp, #12
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	462a      	mov	r2, r5
 800b946:	4b0e      	ldr	r3, [pc, #56]	@ (800b980 <_svfiprintf_r+0x1f0>)
 800b948:	a904      	add	r1, sp, #16
 800b94a:	4638      	mov	r0, r7
 800b94c:	f3af 8000 	nop.w
 800b950:	1c42      	adds	r2, r0, #1
 800b952:	4606      	mov	r6, r0
 800b954:	d1d6      	bne.n	800b904 <_svfiprintf_r+0x174>
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	065b      	lsls	r3, r3, #25
 800b95a:	f53f af2d 	bmi.w	800b7b8 <_svfiprintf_r+0x28>
 800b95e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b960:	e72c      	b.n	800b7bc <_svfiprintf_r+0x2c>
 800b962:	ab03      	add	r3, sp, #12
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	462a      	mov	r2, r5
 800b968:	4b05      	ldr	r3, [pc, #20]	@ (800b980 <_svfiprintf_r+0x1f0>)
 800b96a:	a904      	add	r1, sp, #16
 800b96c:	4638      	mov	r0, r7
 800b96e:	f000 f879 	bl	800ba64 <_printf_i>
 800b972:	e7ed      	b.n	800b950 <_svfiprintf_r+0x1c0>
 800b974:	0800c0e0 	.word	0x0800c0e0
 800b978:	0800c0ea 	.word	0x0800c0ea
 800b97c:	00000000 	.word	0x00000000
 800b980:	0800b6d9 	.word	0x0800b6d9
 800b984:	0800c0e6 	.word	0x0800c0e6

0800b988 <_printf_common>:
 800b988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b98c:	4616      	mov	r6, r2
 800b98e:	4698      	mov	r8, r3
 800b990:	688a      	ldr	r2, [r1, #8]
 800b992:	690b      	ldr	r3, [r1, #16]
 800b994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b998:	4293      	cmp	r3, r2
 800b99a:	bfb8      	it	lt
 800b99c:	4613      	movlt	r3, r2
 800b99e:	6033      	str	r3, [r6, #0]
 800b9a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9a4:	4607      	mov	r7, r0
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	b10a      	cbz	r2, 800b9ae <_printf_common+0x26>
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	6033      	str	r3, [r6, #0]
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	0699      	lsls	r1, r3, #26
 800b9b2:	bf42      	ittt	mi
 800b9b4:	6833      	ldrmi	r3, [r6, #0]
 800b9b6:	3302      	addmi	r3, #2
 800b9b8:	6033      	strmi	r3, [r6, #0]
 800b9ba:	6825      	ldr	r5, [r4, #0]
 800b9bc:	f015 0506 	ands.w	r5, r5, #6
 800b9c0:	d106      	bne.n	800b9d0 <_printf_common+0x48>
 800b9c2:	f104 0a19 	add.w	sl, r4, #25
 800b9c6:	68e3      	ldr	r3, [r4, #12]
 800b9c8:	6832      	ldr	r2, [r6, #0]
 800b9ca:	1a9b      	subs	r3, r3, r2
 800b9cc:	42ab      	cmp	r3, r5
 800b9ce:	dc26      	bgt.n	800ba1e <_printf_common+0x96>
 800b9d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9d4:	6822      	ldr	r2, [r4, #0]
 800b9d6:	3b00      	subs	r3, #0
 800b9d8:	bf18      	it	ne
 800b9da:	2301      	movne	r3, #1
 800b9dc:	0692      	lsls	r2, r2, #26
 800b9de:	d42b      	bmi.n	800ba38 <_printf_common+0xb0>
 800b9e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9e4:	4641      	mov	r1, r8
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	47c8      	blx	r9
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	d01e      	beq.n	800ba2c <_printf_common+0xa4>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	6922      	ldr	r2, [r4, #16]
 800b9f2:	f003 0306 	and.w	r3, r3, #6
 800b9f6:	2b04      	cmp	r3, #4
 800b9f8:	bf02      	ittt	eq
 800b9fa:	68e5      	ldreq	r5, [r4, #12]
 800b9fc:	6833      	ldreq	r3, [r6, #0]
 800b9fe:	1aed      	subeq	r5, r5, r3
 800ba00:	68a3      	ldr	r3, [r4, #8]
 800ba02:	bf0c      	ite	eq
 800ba04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba08:	2500      	movne	r5, #0
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	bfc4      	itt	gt
 800ba0e:	1a9b      	subgt	r3, r3, r2
 800ba10:	18ed      	addgt	r5, r5, r3
 800ba12:	2600      	movs	r6, #0
 800ba14:	341a      	adds	r4, #26
 800ba16:	42b5      	cmp	r5, r6
 800ba18:	d11a      	bne.n	800ba50 <_printf_common+0xc8>
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	e008      	b.n	800ba30 <_printf_common+0xa8>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	4652      	mov	r2, sl
 800ba22:	4641      	mov	r1, r8
 800ba24:	4638      	mov	r0, r7
 800ba26:	47c8      	blx	r9
 800ba28:	3001      	adds	r0, #1
 800ba2a:	d103      	bne.n	800ba34 <_printf_common+0xac>
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba34:	3501      	adds	r5, #1
 800ba36:	e7c6      	b.n	800b9c6 <_printf_common+0x3e>
 800ba38:	18e1      	adds	r1, r4, r3
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	2030      	movs	r0, #48	@ 0x30
 800ba3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba42:	4422      	add	r2, r4
 800ba44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba4c:	3302      	adds	r3, #2
 800ba4e:	e7c7      	b.n	800b9e0 <_printf_common+0x58>
 800ba50:	2301      	movs	r3, #1
 800ba52:	4622      	mov	r2, r4
 800ba54:	4641      	mov	r1, r8
 800ba56:	4638      	mov	r0, r7
 800ba58:	47c8      	blx	r9
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	d0e6      	beq.n	800ba2c <_printf_common+0xa4>
 800ba5e:	3601      	adds	r6, #1
 800ba60:	e7d9      	b.n	800ba16 <_printf_common+0x8e>
	...

0800ba64 <_printf_i>:
 800ba64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba68:	7e0f      	ldrb	r7, [r1, #24]
 800ba6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba6c:	2f78      	cmp	r7, #120	@ 0x78
 800ba6e:	4691      	mov	r9, r2
 800ba70:	4680      	mov	r8, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	469a      	mov	sl, r3
 800ba76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba7a:	d807      	bhi.n	800ba8c <_printf_i+0x28>
 800ba7c:	2f62      	cmp	r7, #98	@ 0x62
 800ba7e:	d80a      	bhi.n	800ba96 <_printf_i+0x32>
 800ba80:	2f00      	cmp	r7, #0
 800ba82:	f000 80d2 	beq.w	800bc2a <_printf_i+0x1c6>
 800ba86:	2f58      	cmp	r7, #88	@ 0x58
 800ba88:	f000 80b9 	beq.w	800bbfe <_printf_i+0x19a>
 800ba8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba94:	e03a      	b.n	800bb0c <_printf_i+0xa8>
 800ba96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba9a:	2b15      	cmp	r3, #21
 800ba9c:	d8f6      	bhi.n	800ba8c <_printf_i+0x28>
 800ba9e:	a101      	add	r1, pc, #4	@ (adr r1, 800baa4 <_printf_i+0x40>)
 800baa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baa4:	0800bafd 	.word	0x0800bafd
 800baa8:	0800bb11 	.word	0x0800bb11
 800baac:	0800ba8d 	.word	0x0800ba8d
 800bab0:	0800ba8d 	.word	0x0800ba8d
 800bab4:	0800ba8d 	.word	0x0800ba8d
 800bab8:	0800ba8d 	.word	0x0800ba8d
 800babc:	0800bb11 	.word	0x0800bb11
 800bac0:	0800ba8d 	.word	0x0800ba8d
 800bac4:	0800ba8d 	.word	0x0800ba8d
 800bac8:	0800ba8d 	.word	0x0800ba8d
 800bacc:	0800ba8d 	.word	0x0800ba8d
 800bad0:	0800bc11 	.word	0x0800bc11
 800bad4:	0800bb3b 	.word	0x0800bb3b
 800bad8:	0800bbcb 	.word	0x0800bbcb
 800badc:	0800ba8d 	.word	0x0800ba8d
 800bae0:	0800ba8d 	.word	0x0800ba8d
 800bae4:	0800bc33 	.word	0x0800bc33
 800bae8:	0800ba8d 	.word	0x0800ba8d
 800baec:	0800bb3b 	.word	0x0800bb3b
 800baf0:	0800ba8d 	.word	0x0800ba8d
 800baf4:	0800ba8d 	.word	0x0800ba8d
 800baf8:	0800bbd3 	.word	0x0800bbd3
 800bafc:	6833      	ldr	r3, [r6, #0]
 800bafe:	1d1a      	adds	r2, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6032      	str	r2, [r6, #0]
 800bb04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e09d      	b.n	800bc4c <_printf_i+0x1e8>
 800bb10:	6833      	ldr	r3, [r6, #0]
 800bb12:	6820      	ldr	r0, [r4, #0]
 800bb14:	1d19      	adds	r1, r3, #4
 800bb16:	6031      	str	r1, [r6, #0]
 800bb18:	0606      	lsls	r6, r0, #24
 800bb1a:	d501      	bpl.n	800bb20 <_printf_i+0xbc>
 800bb1c:	681d      	ldr	r5, [r3, #0]
 800bb1e:	e003      	b.n	800bb28 <_printf_i+0xc4>
 800bb20:	0645      	lsls	r5, r0, #25
 800bb22:	d5fb      	bpl.n	800bb1c <_printf_i+0xb8>
 800bb24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb28:	2d00      	cmp	r5, #0
 800bb2a:	da03      	bge.n	800bb34 <_printf_i+0xd0>
 800bb2c:	232d      	movs	r3, #45	@ 0x2d
 800bb2e:	426d      	negs	r5, r5
 800bb30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb34:	4859      	ldr	r0, [pc, #356]	@ (800bc9c <_printf_i+0x238>)
 800bb36:	230a      	movs	r3, #10
 800bb38:	e011      	b.n	800bb5e <_printf_i+0xfa>
 800bb3a:	6821      	ldr	r1, [r4, #0]
 800bb3c:	6833      	ldr	r3, [r6, #0]
 800bb3e:	0608      	lsls	r0, r1, #24
 800bb40:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb44:	d402      	bmi.n	800bb4c <_printf_i+0xe8>
 800bb46:	0649      	lsls	r1, r1, #25
 800bb48:	bf48      	it	mi
 800bb4a:	b2ad      	uxthmi	r5, r5
 800bb4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb4e:	4853      	ldr	r0, [pc, #332]	@ (800bc9c <_printf_i+0x238>)
 800bb50:	6033      	str	r3, [r6, #0]
 800bb52:	bf14      	ite	ne
 800bb54:	230a      	movne	r3, #10
 800bb56:	2308      	moveq	r3, #8
 800bb58:	2100      	movs	r1, #0
 800bb5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb5e:	6866      	ldr	r6, [r4, #4]
 800bb60:	60a6      	str	r6, [r4, #8]
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	bfa2      	ittt	ge
 800bb66:	6821      	ldrge	r1, [r4, #0]
 800bb68:	f021 0104 	bicge.w	r1, r1, #4
 800bb6c:	6021      	strge	r1, [r4, #0]
 800bb6e:	b90d      	cbnz	r5, 800bb74 <_printf_i+0x110>
 800bb70:	2e00      	cmp	r6, #0
 800bb72:	d04b      	beq.n	800bc0c <_printf_i+0x1a8>
 800bb74:	4616      	mov	r6, r2
 800bb76:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb7a:	fb03 5711 	mls	r7, r3, r1, r5
 800bb7e:	5dc7      	ldrb	r7, [r0, r7]
 800bb80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb84:	462f      	mov	r7, r5
 800bb86:	42bb      	cmp	r3, r7
 800bb88:	460d      	mov	r5, r1
 800bb8a:	d9f4      	bls.n	800bb76 <_printf_i+0x112>
 800bb8c:	2b08      	cmp	r3, #8
 800bb8e:	d10b      	bne.n	800bba8 <_printf_i+0x144>
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	07df      	lsls	r7, r3, #31
 800bb94:	d508      	bpl.n	800bba8 <_printf_i+0x144>
 800bb96:	6923      	ldr	r3, [r4, #16]
 800bb98:	6861      	ldr	r1, [r4, #4]
 800bb9a:	4299      	cmp	r1, r3
 800bb9c:	bfde      	ittt	le
 800bb9e:	2330      	movle	r3, #48	@ 0x30
 800bba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bba8:	1b92      	subs	r2, r2, r6
 800bbaa:	6122      	str	r2, [r4, #16]
 800bbac:	f8cd a000 	str.w	sl, [sp]
 800bbb0:	464b      	mov	r3, r9
 800bbb2:	aa03      	add	r2, sp, #12
 800bbb4:	4621      	mov	r1, r4
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	f7ff fee6 	bl	800b988 <_printf_common>
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d14a      	bne.n	800bc56 <_printf_i+0x1f2>
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	b004      	add	sp, #16
 800bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	f043 0320 	orr.w	r3, r3, #32
 800bbd0:	6023      	str	r3, [r4, #0]
 800bbd2:	4833      	ldr	r0, [pc, #204]	@ (800bca0 <_printf_i+0x23c>)
 800bbd4:	2778      	movs	r7, #120	@ 0x78
 800bbd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbda:	6823      	ldr	r3, [r4, #0]
 800bbdc:	6831      	ldr	r1, [r6, #0]
 800bbde:	061f      	lsls	r7, r3, #24
 800bbe0:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbe4:	d402      	bmi.n	800bbec <_printf_i+0x188>
 800bbe6:	065f      	lsls	r7, r3, #25
 800bbe8:	bf48      	it	mi
 800bbea:	b2ad      	uxthmi	r5, r5
 800bbec:	6031      	str	r1, [r6, #0]
 800bbee:	07d9      	lsls	r1, r3, #31
 800bbf0:	bf44      	itt	mi
 800bbf2:	f043 0320 	orrmi.w	r3, r3, #32
 800bbf6:	6023      	strmi	r3, [r4, #0]
 800bbf8:	b11d      	cbz	r5, 800bc02 <_printf_i+0x19e>
 800bbfa:	2310      	movs	r3, #16
 800bbfc:	e7ac      	b.n	800bb58 <_printf_i+0xf4>
 800bbfe:	4827      	ldr	r0, [pc, #156]	@ (800bc9c <_printf_i+0x238>)
 800bc00:	e7e9      	b.n	800bbd6 <_printf_i+0x172>
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	f023 0320 	bic.w	r3, r3, #32
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	e7f6      	b.n	800bbfa <_printf_i+0x196>
 800bc0c:	4616      	mov	r6, r2
 800bc0e:	e7bd      	b.n	800bb8c <_printf_i+0x128>
 800bc10:	6833      	ldr	r3, [r6, #0]
 800bc12:	6825      	ldr	r5, [r4, #0]
 800bc14:	6961      	ldr	r1, [r4, #20]
 800bc16:	1d18      	adds	r0, r3, #4
 800bc18:	6030      	str	r0, [r6, #0]
 800bc1a:	062e      	lsls	r6, r5, #24
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	d501      	bpl.n	800bc24 <_printf_i+0x1c0>
 800bc20:	6019      	str	r1, [r3, #0]
 800bc22:	e002      	b.n	800bc2a <_printf_i+0x1c6>
 800bc24:	0668      	lsls	r0, r5, #25
 800bc26:	d5fb      	bpl.n	800bc20 <_printf_i+0x1bc>
 800bc28:	8019      	strh	r1, [r3, #0]
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	4616      	mov	r6, r2
 800bc30:	e7bc      	b.n	800bbac <_printf_i+0x148>
 800bc32:	6833      	ldr	r3, [r6, #0]
 800bc34:	1d1a      	adds	r2, r3, #4
 800bc36:	6032      	str	r2, [r6, #0]
 800bc38:	681e      	ldr	r6, [r3, #0]
 800bc3a:	6862      	ldr	r2, [r4, #4]
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f7f4 fb6e 	bl	8000320 <memchr>
 800bc44:	b108      	cbz	r0, 800bc4a <_printf_i+0x1e6>
 800bc46:	1b80      	subs	r0, r0, r6
 800bc48:	6060      	str	r0, [r4, #4]
 800bc4a:	6863      	ldr	r3, [r4, #4]
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc54:	e7aa      	b.n	800bbac <_printf_i+0x148>
 800bc56:	6923      	ldr	r3, [r4, #16]
 800bc58:	4632      	mov	r2, r6
 800bc5a:	4649      	mov	r1, r9
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	47d0      	blx	sl
 800bc60:	3001      	adds	r0, #1
 800bc62:	d0ad      	beq.n	800bbc0 <_printf_i+0x15c>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	079b      	lsls	r3, r3, #30
 800bc68:	d413      	bmi.n	800bc92 <_printf_i+0x22e>
 800bc6a:	68e0      	ldr	r0, [r4, #12]
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	4298      	cmp	r0, r3
 800bc70:	bfb8      	it	lt
 800bc72:	4618      	movlt	r0, r3
 800bc74:	e7a6      	b.n	800bbc4 <_printf_i+0x160>
 800bc76:	2301      	movs	r3, #1
 800bc78:	4632      	mov	r2, r6
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	47d0      	blx	sl
 800bc80:	3001      	adds	r0, #1
 800bc82:	d09d      	beq.n	800bbc0 <_printf_i+0x15c>
 800bc84:	3501      	adds	r5, #1
 800bc86:	68e3      	ldr	r3, [r4, #12]
 800bc88:	9903      	ldr	r1, [sp, #12]
 800bc8a:	1a5b      	subs	r3, r3, r1
 800bc8c:	42ab      	cmp	r3, r5
 800bc8e:	dcf2      	bgt.n	800bc76 <_printf_i+0x212>
 800bc90:	e7eb      	b.n	800bc6a <_printf_i+0x206>
 800bc92:	2500      	movs	r5, #0
 800bc94:	f104 0619 	add.w	r6, r4, #25
 800bc98:	e7f5      	b.n	800bc86 <_printf_i+0x222>
 800bc9a:	bf00      	nop
 800bc9c:	0800c0f1 	.word	0x0800c0f1
 800bca0:	0800c102 	.word	0x0800c102

0800bca4 <__sflush_r>:
 800bca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcac:	0716      	lsls	r6, r2, #28
 800bcae:	4605      	mov	r5, r0
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	d454      	bmi.n	800bd5e <__sflush_r+0xba>
 800bcb4:	684b      	ldr	r3, [r1, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	dc02      	bgt.n	800bcc0 <__sflush_r+0x1c>
 800bcba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dd48      	ble.n	800bd52 <__sflush_r+0xae>
 800bcc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcc2:	2e00      	cmp	r6, #0
 800bcc4:	d045      	beq.n	800bd52 <__sflush_r+0xae>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bccc:	682f      	ldr	r7, [r5, #0]
 800bcce:	6a21      	ldr	r1, [r4, #32]
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	d030      	beq.n	800bd36 <__sflush_r+0x92>
 800bcd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	0759      	lsls	r1, r3, #29
 800bcda:	d505      	bpl.n	800bce8 <__sflush_r+0x44>
 800bcdc:	6863      	ldr	r3, [r4, #4]
 800bcde:	1ad2      	subs	r2, r2, r3
 800bce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bce2:	b10b      	cbz	r3, 800bce8 <__sflush_r+0x44>
 800bce4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bce6:	1ad2      	subs	r2, r2, r3
 800bce8:	2300      	movs	r3, #0
 800bcea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcec:	6a21      	ldr	r1, [r4, #32]
 800bcee:	4628      	mov	r0, r5
 800bcf0:	47b0      	blx	r6
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	d106      	bne.n	800bd06 <__sflush_r+0x62>
 800bcf8:	6829      	ldr	r1, [r5, #0]
 800bcfa:	291d      	cmp	r1, #29
 800bcfc:	d82b      	bhi.n	800bd56 <__sflush_r+0xb2>
 800bcfe:	4a2a      	ldr	r2, [pc, #168]	@ (800bda8 <__sflush_r+0x104>)
 800bd00:	410a      	asrs	r2, r1
 800bd02:	07d6      	lsls	r6, r2, #31
 800bd04:	d427      	bmi.n	800bd56 <__sflush_r+0xb2>
 800bd06:	2200      	movs	r2, #0
 800bd08:	6062      	str	r2, [r4, #4]
 800bd0a:	04d9      	lsls	r1, r3, #19
 800bd0c:	6922      	ldr	r2, [r4, #16]
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	d504      	bpl.n	800bd1c <__sflush_r+0x78>
 800bd12:	1c42      	adds	r2, r0, #1
 800bd14:	d101      	bne.n	800bd1a <__sflush_r+0x76>
 800bd16:	682b      	ldr	r3, [r5, #0]
 800bd18:	b903      	cbnz	r3, 800bd1c <__sflush_r+0x78>
 800bd1a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd1e:	602f      	str	r7, [r5, #0]
 800bd20:	b1b9      	cbz	r1, 800bd52 <__sflush_r+0xae>
 800bd22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd26:	4299      	cmp	r1, r3
 800bd28:	d002      	beq.n	800bd30 <__sflush_r+0x8c>
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	f7ff fbdc 	bl	800b4e8 <_free_r>
 800bd30:	2300      	movs	r3, #0
 800bd32:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd34:	e00d      	b.n	800bd52 <__sflush_r+0xae>
 800bd36:	2301      	movs	r3, #1
 800bd38:	4628      	mov	r0, r5
 800bd3a:	47b0      	blx	r6
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	1c50      	adds	r0, r2, #1
 800bd40:	d1c9      	bne.n	800bcd6 <__sflush_r+0x32>
 800bd42:	682b      	ldr	r3, [r5, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d0c6      	beq.n	800bcd6 <__sflush_r+0x32>
 800bd48:	2b1d      	cmp	r3, #29
 800bd4a:	d001      	beq.n	800bd50 <__sflush_r+0xac>
 800bd4c:	2b16      	cmp	r3, #22
 800bd4e:	d11e      	bne.n	800bd8e <__sflush_r+0xea>
 800bd50:	602f      	str	r7, [r5, #0]
 800bd52:	2000      	movs	r0, #0
 800bd54:	e022      	b.n	800bd9c <__sflush_r+0xf8>
 800bd56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd5a:	b21b      	sxth	r3, r3
 800bd5c:	e01b      	b.n	800bd96 <__sflush_r+0xf2>
 800bd5e:	690f      	ldr	r7, [r1, #16]
 800bd60:	2f00      	cmp	r7, #0
 800bd62:	d0f6      	beq.n	800bd52 <__sflush_r+0xae>
 800bd64:	0793      	lsls	r3, r2, #30
 800bd66:	680e      	ldr	r6, [r1, #0]
 800bd68:	bf08      	it	eq
 800bd6a:	694b      	ldreq	r3, [r1, #20]
 800bd6c:	600f      	str	r7, [r1, #0]
 800bd6e:	bf18      	it	ne
 800bd70:	2300      	movne	r3, #0
 800bd72:	eba6 0807 	sub.w	r8, r6, r7
 800bd76:	608b      	str	r3, [r1, #8]
 800bd78:	f1b8 0f00 	cmp.w	r8, #0
 800bd7c:	dde9      	ble.n	800bd52 <__sflush_r+0xae>
 800bd7e:	6a21      	ldr	r1, [r4, #32]
 800bd80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd82:	4643      	mov	r3, r8
 800bd84:	463a      	mov	r2, r7
 800bd86:	4628      	mov	r0, r5
 800bd88:	47b0      	blx	r6
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	dc08      	bgt.n	800bda0 <__sflush_r+0xfc>
 800bd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	f04f 30ff 	mov.w	r0, #4294967295
 800bd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda0:	4407      	add	r7, r0
 800bda2:	eba8 0800 	sub.w	r8, r8, r0
 800bda6:	e7e7      	b.n	800bd78 <__sflush_r+0xd4>
 800bda8:	dfbffffe 	.word	0xdfbffffe

0800bdac <_fflush_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	690b      	ldr	r3, [r1, #16]
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	b913      	cbnz	r3, 800bdbc <_fflush_r+0x10>
 800bdb6:	2500      	movs	r5, #0
 800bdb8:	4628      	mov	r0, r5
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	b118      	cbz	r0, 800bdc6 <_fflush_r+0x1a>
 800bdbe:	6a03      	ldr	r3, [r0, #32]
 800bdc0:	b90b      	cbnz	r3, 800bdc6 <_fflush_r+0x1a>
 800bdc2:	f7ff f925 	bl	800b010 <__sinit>
 800bdc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d0f3      	beq.n	800bdb6 <_fflush_r+0xa>
 800bdce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdd0:	07d0      	lsls	r0, r2, #31
 800bdd2:	d404      	bmi.n	800bdde <_fflush_r+0x32>
 800bdd4:	0599      	lsls	r1, r3, #22
 800bdd6:	d402      	bmi.n	800bdde <_fflush_r+0x32>
 800bdd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdda:	f7ff fb74 	bl	800b4c6 <__retarget_lock_acquire_recursive>
 800bdde:	4628      	mov	r0, r5
 800bde0:	4621      	mov	r1, r4
 800bde2:	f7ff ff5f 	bl	800bca4 <__sflush_r>
 800bde6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bde8:	07da      	lsls	r2, r3, #31
 800bdea:	4605      	mov	r5, r0
 800bdec:	d4e4      	bmi.n	800bdb8 <_fflush_r+0xc>
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	059b      	lsls	r3, r3, #22
 800bdf2:	d4e1      	bmi.n	800bdb8 <_fflush_r+0xc>
 800bdf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdf6:	f7ff fb67 	bl	800b4c8 <__retarget_lock_release_recursive>
 800bdfa:	e7dd      	b.n	800bdb8 <_fflush_r+0xc>

0800bdfc <__swhatbuf_r>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	460c      	mov	r4, r1
 800be00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be04:	2900      	cmp	r1, #0
 800be06:	b096      	sub	sp, #88	@ 0x58
 800be08:	4615      	mov	r5, r2
 800be0a:	461e      	mov	r6, r3
 800be0c:	da0d      	bge.n	800be2a <__swhatbuf_r+0x2e>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be14:	f04f 0100 	mov.w	r1, #0
 800be18:	bf14      	ite	ne
 800be1a:	2340      	movne	r3, #64	@ 0x40
 800be1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be20:	2000      	movs	r0, #0
 800be22:	6031      	str	r1, [r6, #0]
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	b016      	add	sp, #88	@ 0x58
 800be28:	bd70      	pop	{r4, r5, r6, pc}
 800be2a:	466a      	mov	r2, sp
 800be2c:	f000 f862 	bl	800bef4 <_fstat_r>
 800be30:	2800      	cmp	r0, #0
 800be32:	dbec      	blt.n	800be0e <__swhatbuf_r+0x12>
 800be34:	9901      	ldr	r1, [sp, #4]
 800be36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be3e:	4259      	negs	r1, r3
 800be40:	4159      	adcs	r1, r3
 800be42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be46:	e7eb      	b.n	800be20 <__swhatbuf_r+0x24>

0800be48 <__smakebuf_r>:
 800be48:	898b      	ldrh	r3, [r1, #12]
 800be4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be4c:	079d      	lsls	r5, r3, #30
 800be4e:	4606      	mov	r6, r0
 800be50:	460c      	mov	r4, r1
 800be52:	d507      	bpl.n	800be64 <__smakebuf_r+0x1c>
 800be54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	6123      	str	r3, [r4, #16]
 800be5c:	2301      	movs	r3, #1
 800be5e:	6163      	str	r3, [r4, #20]
 800be60:	b003      	add	sp, #12
 800be62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be64:	ab01      	add	r3, sp, #4
 800be66:	466a      	mov	r2, sp
 800be68:	f7ff ffc8 	bl	800bdfc <__swhatbuf_r>
 800be6c:	9f00      	ldr	r7, [sp, #0]
 800be6e:	4605      	mov	r5, r0
 800be70:	4639      	mov	r1, r7
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff fba4 	bl	800b5c0 <_malloc_r>
 800be78:	b948      	cbnz	r0, 800be8e <__smakebuf_r+0x46>
 800be7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7e:	059a      	lsls	r2, r3, #22
 800be80:	d4ee      	bmi.n	800be60 <__smakebuf_r+0x18>
 800be82:	f023 0303 	bic.w	r3, r3, #3
 800be86:	f043 0302 	orr.w	r3, r3, #2
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	e7e2      	b.n	800be54 <__smakebuf_r+0xc>
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	6020      	str	r0, [r4, #0]
 800be92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be96:	81a3      	strh	r3, [r4, #12]
 800be98:	9b01      	ldr	r3, [sp, #4]
 800be9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be9e:	b15b      	cbz	r3, 800beb8 <__smakebuf_r+0x70>
 800bea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea4:	4630      	mov	r0, r6
 800bea6:	f000 f837 	bl	800bf18 <_isatty_r>
 800beaa:	b128      	cbz	r0, 800beb8 <__smakebuf_r+0x70>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	431d      	orrs	r5, r3
 800bebc:	81a5      	strh	r5, [r4, #12]
 800bebe:	e7cf      	b.n	800be60 <__smakebuf_r+0x18>

0800bec0 <memmove>:
 800bec0:	4288      	cmp	r0, r1
 800bec2:	b510      	push	{r4, lr}
 800bec4:	eb01 0402 	add.w	r4, r1, r2
 800bec8:	d902      	bls.n	800bed0 <memmove+0x10>
 800beca:	4284      	cmp	r4, r0
 800becc:	4623      	mov	r3, r4
 800bece:	d807      	bhi.n	800bee0 <memmove+0x20>
 800bed0:	1e43      	subs	r3, r0, #1
 800bed2:	42a1      	cmp	r1, r4
 800bed4:	d008      	beq.n	800bee8 <memmove+0x28>
 800bed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bede:	e7f8      	b.n	800bed2 <memmove+0x12>
 800bee0:	4402      	add	r2, r0
 800bee2:	4601      	mov	r1, r0
 800bee4:	428a      	cmp	r2, r1
 800bee6:	d100      	bne.n	800beea <memmove+0x2a>
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bef2:	e7f7      	b.n	800bee4 <memmove+0x24>

0800bef4 <_fstat_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d07      	ldr	r5, [pc, #28]	@ (800bf14 <_fstat_r+0x20>)
 800bef8:	2300      	movs	r3, #0
 800befa:	4604      	mov	r4, r0
 800befc:	4608      	mov	r0, r1
 800befe:	4611      	mov	r1, r2
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	f7f5 f838 	bl	8000f76 <_fstat>
 800bf06:	1c43      	adds	r3, r0, #1
 800bf08:	d102      	bne.n	800bf10 <_fstat_r+0x1c>
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	b103      	cbz	r3, 800bf10 <_fstat_r+0x1c>
 800bf0e:	6023      	str	r3, [r4, #0]
 800bf10:	bd38      	pop	{r3, r4, r5, pc}
 800bf12:	bf00      	nop
 800bf14:	24004d38 	.word	0x24004d38

0800bf18 <_isatty_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d06      	ldr	r5, [pc, #24]	@ (800bf34 <_isatty_r+0x1c>)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4608      	mov	r0, r1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	f7f5 f837 	bl	8000f96 <_isatty>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_isatty_r+0x1a>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_isatty_r+0x1a>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	24004d38 	.word	0x24004d38

0800bf38 <_sbrk_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d06      	ldr	r5, [pc, #24]	@ (800bf54 <_sbrk_r+0x1c>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	602b      	str	r3, [r5, #0]
 800bf44:	f7f5 f840 	bl	8000fc8 <_sbrk>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_sbrk_r+0x1a>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_sbrk_r+0x1a>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	24004d38 	.word	0x24004d38

0800bf58 <_realloc_r>:
 800bf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5c:	4680      	mov	r8, r0
 800bf5e:	4615      	mov	r5, r2
 800bf60:	460c      	mov	r4, r1
 800bf62:	b921      	cbnz	r1, 800bf6e <_realloc_r+0x16>
 800bf64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf68:	4611      	mov	r1, r2
 800bf6a:	f7ff bb29 	b.w	800b5c0 <_malloc_r>
 800bf6e:	b92a      	cbnz	r2, 800bf7c <_realloc_r+0x24>
 800bf70:	f7ff faba 	bl	800b4e8 <_free_r>
 800bf74:	2400      	movs	r4, #0
 800bf76:	4620      	mov	r0, r4
 800bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf7c:	f000 f81a 	bl	800bfb4 <_malloc_usable_size_r>
 800bf80:	4285      	cmp	r5, r0
 800bf82:	4606      	mov	r6, r0
 800bf84:	d802      	bhi.n	800bf8c <_realloc_r+0x34>
 800bf86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bf8a:	d8f4      	bhi.n	800bf76 <_realloc_r+0x1e>
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	4640      	mov	r0, r8
 800bf90:	f7ff fb16 	bl	800b5c0 <_malloc_r>
 800bf94:	4607      	mov	r7, r0
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d0ec      	beq.n	800bf74 <_realloc_r+0x1c>
 800bf9a:	42b5      	cmp	r5, r6
 800bf9c:	462a      	mov	r2, r5
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	bf28      	it	cs
 800bfa2:	4632      	movcs	r2, r6
 800bfa4:	f7ff fa91 	bl	800b4ca <memcpy>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4640      	mov	r0, r8
 800bfac:	f7ff fa9c 	bl	800b4e8 <_free_r>
 800bfb0:	463c      	mov	r4, r7
 800bfb2:	e7e0      	b.n	800bf76 <_realloc_r+0x1e>

0800bfb4 <_malloc_usable_size_r>:
 800bfb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfb8:	1f18      	subs	r0, r3, #4
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bfbc      	itt	lt
 800bfbe:	580b      	ldrlt	r3, [r1, r0]
 800bfc0:	18c0      	addlt	r0, r0, r3
 800bfc2:	4770      	bx	lr

0800bfc4 <_init>:
 800bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc6:	bf00      	nop
 800bfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfca:	bc08      	pop	{r3}
 800bfcc:	469e      	mov	lr, r3
 800bfce:	4770      	bx	lr

0800bfd0 <_fini>:
 800bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd2:	bf00      	nop
 800bfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd6:	bc08      	pop	{r3}
 800bfd8:	469e      	mov	lr, r3
 800bfda:	4770      	bx	lr
