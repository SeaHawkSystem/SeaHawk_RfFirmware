
HC12_FreeRTOS_Recv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baec  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800bdbc  0800bdbc  0000cdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800beac  0800beac  0000ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800beb4  0800beb4  0000ceb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800beb8  0800beb8  0000ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  0800bebc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cd8  24000070  0800bf2c  0000d070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004d48  0800bf2c  0000dd48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000225fa  00000000  00000000  0000d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041e1  00000000  00000000  0002f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019b8  00000000  00000000  00033880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013f9  00000000  00000000  00035238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005c6f  00000000  00000000  00036631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021389  00000000  00000000  0003c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015a6ad  00000000  00000000  0005d629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b7cd6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074ec  00000000  00000000  001b7d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001bf208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800bda4 	.word	0x0800bda4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800bda4 	.word	0x0800bda4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fa28 	bl	8000b08 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fdc2 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f830 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f936 	bl	8000930 <MX_GPIO_Init>
  MX_UART7_Init();
 80006c4:	f000 f89c 	bl	8000800 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80006c8:	f000 f8e6 	bl	8000898 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uartQueueHandle = osMessageQueueNew(UART_QUEUE_SIZE, sizeof(uint32_t), NULL);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2104      	movs	r1, #4
 80006d0:	200a      	movs	r0, #10
 80006d2:	f007 fd9e 	bl	8008212 <osMessageQueueNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <main+0x58>)
 80006da:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart7, rx_buffer, sizeof(uint32_t));
 80006dc:	2204      	movs	r2, #4
 80006de:	490b      	ldr	r1, [pc, #44]	@ (800070c <main+0x5c>)
 80006e0:	480b      	ldr	r0, [pc, #44]	@ (8000710 <main+0x60>)
 80006e2:	f004 ffeb 	bl	80056bc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e6:	f007 fc9d 	bl	8008024 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <main+0x64>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	480a      	ldr	r0, [pc, #40]	@ (8000718 <main+0x68>)
 80006f0:	f007 fce2 	bl	80080b8 <osThreadNew>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a09      	ldr	r2, [pc, #36]	@ (800071c <main+0x6c>)
 80006f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  systemTaskInit();
 80006fa:	f000 fd07 	bl	800110c <systemTaskInit>
  /* USER CODE BEGIN BSP */

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 80006fe:	f007 fcb5 	bl	800806c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000702:	bf00      	nop
 8000704:	e7fd      	b.n	8000702 <main+0x52>
 8000706:	bf00      	nop
 8000708:	2400020c 	.word	0x2400020c
 800070c:	240001b8 	.word	0x240001b8
 8000710:	2400008c 	.word	0x2400008c
 8000714:	0800be1c 	.word	0x0800be1c
 8000718:	08000af9 	.word	0x08000af9
 800071c:	240001b4 	.word	0x240001b4

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	@ 0x70
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	224c      	movs	r2, #76	@ 0x4c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00a fcea 	bl	800b108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2220      	movs	r2, #32
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00a fce4 	bl	800b108 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000740:	2002      	movs	r0, #2
 8000742:	f001 fe57 	bl	80023f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <SystemClock_Config+0xdc>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000752:	4a2a      	ldr	r2, [pc, #168]	@ (80007fc <SystemClock_Config+0xdc>)
 8000754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b28      	ldr	r3, [pc, #160]	@ (80007fc <SystemClock_Config+0xdc>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000766:	bf00      	nop
 8000768:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <SystemClock_Config+0xdc>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000774:	d1f8      	bne.n	8000768 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800077a:	2301      	movs	r3, #1
 800077c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000786:	2300      	movs	r3, #0
 8000788:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078a:	2304      	movs	r3, #4
 800078c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800078e:	230c      	movs	r3, #12
 8000790:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fe5a 	bl	8002468 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007ba:	f000 f9e3 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	233f      	movs	r3, #63	@ 0x3f
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ca:	2308      	movs	r3, #8
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d2:	2340      	movs	r3, #64	@ 0x40
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007dc:	2340      	movs	r3, #64	@ 0x40
 80007de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2101      	movs	r1, #1
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fa19 	bl	8002c1c <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007f0:	f000 f9c8 	bl	8000b84 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3770      	adds	r7, #112	@ 0x70
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	58024800 	.word	0x58024800

08000800 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_UART7_Init+0x90>)
 8000806:	4a23      	ldr	r2, [pc, #140]	@ (8000894 <MX_UART7_Init+0x94>)
 8000808:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800080a:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_UART7_Init+0x90>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_UART7_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_UART7_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_UART7_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_UART7_Init+0x90>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_UART7_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_UART7_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_UART7_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_UART7_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_UART7_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000848:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_UART7_Init+0x90>)
 800084a:	f004 fe59 	bl	8005500 <HAL_UART_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000854:	f000 f996 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	480d      	ldr	r0, [pc, #52]	@ (8000890 <MX_UART7_Init+0x90>)
 800085c:	f007 fad3 	bl	8007e06 <HAL_UARTEx_SetTxFifoThreshold>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000866:	f000 f98d 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4808      	ldr	r0, [pc, #32]	@ (8000890 <MX_UART7_Init+0x90>)
 800086e:	f007 fb08 	bl	8007e82 <HAL_UARTEx_SetRxFifoThreshold>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000878:	f000 f984 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_UART7_Init+0x90>)
 800087e:	f007 fa89 	bl	8007d94 <HAL_UARTEx_DisableFifoMode>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 f97c 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2400008c 	.word	0x2400008c
 8000894:	40007800 	.word	0x40007800

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <MX_USART3_UART_Init+0x94>)
 80008a0:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  husart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  husart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  husart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  husart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&husart3) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008e2:	f004 fe0d 	bl	8005500 <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f94a 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&husart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008f4:	f007 fa87 	bl	8007e06 <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008fe:	f000 f941 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&husart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 8000906:	f007 fabc 	bl	8007e82 <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f938 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&husart3) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 8000916:	f007 fa3d 	bl	8007d94 <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f930 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000120 	.word	0x24000120
 800092c:	40004800 	.word	0x40004800

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b42      	ldr	r3, [pc, #264]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	4a40      	ldr	r2, [pc, #256]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	f003 0304 	and.w	r3, r3, #4
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000964:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	4a39      	ldr	r2, [pc, #228]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000974:	4b36      	ldr	r3, [pc, #216]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b33      	ldr	r3, [pc, #204]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	4a31      	ldr	r2, [pc, #196]	@ (8000a50 <MX_GPIO_Init+0x120>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000992:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <MX_GPIO_Init+0x120>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <MX_GPIO_Init+0x120>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a50 <MX_GPIO_Init+0x120>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <MX_GPIO_Init+0x120>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009be:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <MX_GPIO_Init+0x120>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	4a22      	ldr	r2, [pc, #136]	@ (8000a50 <MX_GPIO_Init+0x120>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ce:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <MX_GPIO_Init+0x120>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009e2:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <MX_GPIO_Init+0x124>)
 80009e4:	f001 fcec 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2102      	movs	r1, #2
 80009ec:	481a      	ldr	r0, [pc, #104]	@ (8000a58 <MX_GPIO_Init+0x128>)
 80009ee:	f001 fce7 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4815      	ldr	r0, [pc, #84]	@ (8000a5c <MX_GPIO_Init+0x12c>)
 8000a08:	f001 fb32 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a0c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <MX_GPIO_Init+0x124>)
 8000a26:	f001 fb23 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_GPIO_Init+0x128>)
 8000a42:	f001 fb15 	bl	8002070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	58024400 	.word	0x58024400
 8000a54:	58020400 	.word	0x58020400
 8000a58:	58021000 	.word	0x58021000
 8000a5c:	58020800 	.word	0x58020800

08000a60 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char*ptr, int len)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&husart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	b29a      	uxth	r2, r3
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <_write+0x28>)
 8000a78:	f004 fd92 	bl	80055a0 <HAL_UART_Transmit>
	return len;
 8000a7c:	687b      	ldr	r3, [r7, #4]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	24000120 	.word	0x24000120

08000a8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART7)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x58>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d11d      	bne.n	8000ada <HAL_UART_RxCpltCallback+0x4e>
    {
        uint32_t received_value;
        memcpy(&received_value, rx_buffer, sizeof(received_value));
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x5c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	60fb      	str	r3, [r7, #12]

        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]

        // ISR에서 안전하게 큐에 메시지를 보내는 FreeRTOS 함수
        xQueueSendFromISR(uartQueueHandle, &received_value, &xHigherPriorityTaskWoken);
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_UART_RxCpltCallback+0x60>)
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	f107 0208 	add.w	r2, r7, #8
 8000ab0:	f107 010c 	add.w	r1, r7, #12
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f007 ff4f 	bl	8008958 <xQueueGenericSendFromISR>

        // ISR에서 큐 전송 후 컨텍스트 전환이 필요한지 확인
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d007      	beq.n	8000ad0 <HAL_UART_RxCpltCallback+0x44>
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <HAL_UART_RxCpltCallback+0x64>)
 8000ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	f3bf 8f4f 	dsb	sy
 8000acc:	f3bf 8f6f 	isb	sy

        HAL_UART_Receive_IT(&huart7, rx_buffer, sizeof(received_value));
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	4905      	ldr	r1, [pc, #20]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x5c>)
 8000ad4:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <HAL_UART_RxCpltCallback+0x68>)
 8000ad6:	f004 fdf1 	bl	80056bc <HAL_UART_Receive_IT>
    }
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40007800 	.word	0x40007800
 8000ae8:	240001b8 	.word	0x240001b8
 8000aec:	2400020c 	.word	0x2400020c
 8000af0:	e000ed04 	.word	0xe000ed04
 8000af4:	2400008c 	.word	0x2400008c

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f007 fb6b 	bl	80081dc <osDelay>
 8000b06:	e7fb      	b.n	8000b00 <StartDefaultTask+0x8>

08000b08 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b1a:	f000 fccd 	bl	80014b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b2a:	231f      	movs	r3, #31
 8000b2c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b2e:	2387      	movs	r3, #135	@ 0x87
 8000b30:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b36:	2300      	movs	r3, #0
 8000b38:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fceb 	bl	8001528 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b52:	2004      	movs	r0, #4
 8000b54:	f000 fcc8 	bl	80014e8 <HAL_MPU_Enable>

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 fba1 	bl	80012b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40000800 	.word	0x40000800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_MspInit+0x38>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_MspInit+0x38>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_MspInit+0x38>)
 8000ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f06f 0001 	mvn.w	r0, #1
 8000bbc:	f000 fc54 	bl	8001468 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	58024400 	.word	0x58024400

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b0ba      	sub	sp, #232	@ 0xe8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	22b8      	movs	r2, #184	@ 0xb8
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00a fa8b 	bl	800b108 <memset>
  if(huart->Instance==UART7)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a55      	ldr	r2, [pc, #340]	@ (8000d4c <HAL_UART_MspInit+0x180>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d14e      	bne.n	8000c9a <HAL_UART_MspInit+0xce>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000bfc:	f04f 0202 	mov.w	r2, #2
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 fbd0 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c1e:	f7ff ffb1 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000c22:	4b4b      	ldr	r3, [pc, #300]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000c24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c28:	4a49      	ldr	r2, [pc, #292]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000c2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c32:	4b47      	ldr	r3, [pc, #284]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b43      	ldr	r3, [pc, #268]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c46:	4a42      	ldr	r2, [pc, #264]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c50:	4b3f      	ldr	r3, [pc, #252]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    PB4(NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c5e:	2318      	movs	r3, #24
 8000c60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000c76:	230b      	movs	r3, #11
 8000c78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4834      	ldr	r0, [pc, #208]	@ (8000d54 <HAL_UART_MspInit+0x188>)
 8000c84:	f001 f9f4 	bl	8002070 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	2052      	movs	r0, #82	@ 0x52
 8000c8e:	f000 fbeb 	bl	8001468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000c92:	2052      	movs	r0, #82	@ 0x52
 8000c94:	f000 fc02 	bl	800149c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c98:	e053      	b.n	8000d42 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8000d58 <HAL_UART_MspInit+0x18c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d14e      	bne.n	8000d42 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca4:	f04f 0202 	mov.w	r2, #2
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fb7c 	bl	80033b8 <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000cc6:	f7ff ff5d 	bl	8000b84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cca:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000cd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cda:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cee:	4a18      	ldr	r2, [pc, #96]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <HAL_UART_MspInit+0x184>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfe:	f003 0308 	and.w	r3, r3, #8
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d20:	2307      	movs	r3, #7
 8000d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <HAL_UART_MspInit+0x190>)
 8000d2e:	f001 f99f 	bl	8002070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2105      	movs	r1, #5
 8000d36:	2027      	movs	r0, #39	@ 0x27
 8000d38:	f000 fb96 	bl	8001468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d3c:	2027      	movs	r0, #39	@ 0x27
 8000d3e:	f000 fbad 	bl	800149c <HAL_NVIC_EnableIRQ>
}
 8000d42:	bf00      	nop
 8000d44:	37e8      	adds	r7, #232	@ 0xe8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40007800 	.word	0x40007800
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58020400 	.word	0x58020400
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	58020c00 	.word	0x58020c00

08000d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b090      	sub	sp, #64	@ 0x40
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	d827      	bhi.n	8000dbe <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	201e      	movs	r0, #30
 8000d74:	f000 fb78 	bl	8001468 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d78:	201e      	movs	r0, #30
 8000d7a:	f000 fb8f 	bl	800149c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <HAL_InitTick+0xc4>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <HAL_InitTick+0xc8>)
 8000d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d8a:	4a27      	ldr	r2, [pc, #156]	@ (8000e28 <HAL_InitTick+0xc8>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <HAL_InitTick+0xc8>)
 8000d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d9a:	f003 0304 	and.w	r3, r3, #4
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da2:	f107 0210 	add.w	r2, r7, #16
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 fac1 	bl	8003334 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <HAL_InitTick+0x6a>
 8000dbc:	e001      	b.n	8000dc2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e02b      	b.n	8000e1a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dc2:	f002 fa8b 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8000dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000dc8:	e004      	b.n	8000dd4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dca:	f002 fa87 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dd6:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <HAL_InitTick+0xcc>)
 8000dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ddc:	0c9b      	lsrs	r3, r3, #18
 8000dde:	3b01      	subs	r3, #1
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000de2:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000de4:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <HAL_InitTick+0xd4>)
 8000de6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000dea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dee:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000df0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000df4:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000e02:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000e04:	f004 f89a 	bl	8004f3c <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d104      	bne.n	8000e18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000e0e:	4808      	ldr	r0, [pc, #32]	@ (8000e30 <HAL_InitTick+0xd0>)
 8000e10:	f004 f8f6 	bl	8005000 <HAL_TIM_Base_Start_IT>
 8000e14:	4603      	mov	r3, r0
 8000e16:	e000      	b.n	8000e1a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3740      	adds	r7, #64	@ 0x40
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000008 	.word	0x24000008
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	240001bc 	.word	0x240001bc
 8000e34:	40000800 	.word	0x40000800

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <TIM4_IRQHandler+0x10>)
 8000e76:	f004 f949 	bl	800510c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	240001bc 	.word	0x240001bc

08000e84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&husart3);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <USART3_IRQHandler+0x10>)
 8000e8a:	f004 fc63 	bl	8005754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	24000120 	.word	0x24000120

08000e98 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <UART7_IRQHandler+0x10>)
 8000e9e:	f004 fc59 	bl	8005754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2400008c 	.word	0x2400008c

08000eac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
  }

  return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_isatty>:

int _isatty(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	@ (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	@ (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f00a f966 	bl	800b250 <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	@ (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	24050000 	.word	0x24050000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	24000208 	.word	0x24000208
 8000fb8:	24004d48 	.word	0x24004d48

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80010bc <SystemInit+0x100>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a3d      	ldr	r2, [pc, #244]	@ (80010bc <SystemInit+0x100>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <SystemInit+0x104>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d807      	bhi.n	8000fec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fdc:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <SystemInit+0x104>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 030f 	bic.w	r3, r3, #15
 8000fe4:	4a36      	ldr	r2, [pc, #216]	@ (80010c0 <SystemInit+0x104>)
 8000fe6:	f043 0307 	orr.w	r3, r3, #7
 8000fea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fec:	4b35      	ldr	r3, [pc, #212]	@ (80010c4 <SystemInit+0x108>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a34      	ldr	r2, [pc, #208]	@ (80010c4 <SystemInit+0x108>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ff8:	4b32      	ldr	r3, [pc, #200]	@ (80010c4 <SystemInit+0x108>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ffe:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <SystemInit+0x108>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4930      	ldr	r1, [pc, #192]	@ (80010c4 <SystemInit+0x108>)
 8001004:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <SystemInit+0x10c>)
 8001006:	4013      	ands	r3, r2
 8001008:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <SystemInit+0x104>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001016:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <SystemInit+0x104>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 030f 	bic.w	r3, r3, #15
 800101e:	4a28      	ldr	r2, [pc, #160]	@ (80010c0 <SystemInit+0x104>)
 8001020:	f043 0307 	orr.w	r3, r3, #7
 8001024:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001026:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <SystemInit+0x108>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800102c:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <SystemInit+0x108>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001032:	4b24      	ldr	r3, [pc, #144]	@ (80010c4 <SystemInit+0x108>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001038:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <SystemInit+0x108>)
 800103a:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <SystemInit+0x110>)
 800103c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <SystemInit+0x108>)
 8001040:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <SystemInit+0x114>)
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001044:	4b1f      	ldr	r3, [pc, #124]	@ (80010c4 <SystemInit+0x108>)
 8001046:	4a23      	ldr	r2, [pc, #140]	@ (80010d4 <SystemInit+0x118>)
 8001048:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <SystemInit+0x108>)
 800104c:	2200      	movs	r2, #0
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001050:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <SystemInit+0x108>)
 8001052:	4a20      	ldr	r2, [pc, #128]	@ (80010d4 <SystemInit+0x118>)
 8001054:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <SystemInit+0x108>)
 8001058:	2200      	movs	r2, #0
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <SystemInit+0x108>)
 800105e:	4a1d      	ldr	r2, [pc, #116]	@ (80010d4 <SystemInit+0x118>)
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <SystemInit+0x108>)
 8001064:	2200      	movs	r2, #0
 8001066:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <SystemInit+0x108>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <SystemInit+0x108>)
 800106e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001072:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <SystemInit+0x108>)
 8001076:	2200      	movs	r2, #0
 8001078:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <SystemInit+0x108>)
 800107c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d113      	bne.n	80010b0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <SystemInit+0x108>)
 800108a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800108e:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <SystemInit+0x108>)
 8001090:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001094:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <SystemInit+0x11c>)
 800109a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800109e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <SystemInit+0x108>)
 80010a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <SystemInit+0x108>)
 80010a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	52002000 	.word	0x52002000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010cc:	02020200 	.word	0x02020200
 80010d0:	01ff0000 	.word	0x01ff0000
 80010d4:	01010280 	.word	0x01010280
 80010d8:	52004000 	.word	0x52004000

080010dc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <ExitRun0Mode+0x2c>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4a08      	ldr	r2, [pc, #32]	@ (8001108 <ExitRun0Mode+0x2c>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80010ec:	bf00      	nop
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <ExitRun0Mode+0x2c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f9      	beq.n	80010ee <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	58024800 	.word	0x58024800

0800110c <systemTaskInit>:
// 태스크 함수 선언
void UARTTask(void *argument);
void HC12ComSERIALTask(void *argument);

void systemTaskInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af02      	add	r7, sp, #8
  // 큐 생성 (필요한 메시지 크기와 길이에 맞게 조정)
  uartQueueHandle = xQueueCreate(10, sizeof(uint32_t));
 8001112:	2200      	movs	r2, #0
 8001114:	2104      	movs	r1, #4
 8001116:	200a      	movs	r0, #10
 8001118:	f007 fabd 	bl	8008696 <xQueueGenericCreate>
 800111c:	4603      	mov	r3, r0
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <systemTaskInit+0x50>)
 8001120:	6013      	str	r3, [r2, #0]
  if (uartQueueHandle == NULL)
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <systemTaskInit+0x50>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <systemTaskInit+0x22>
  {
    // 큐 생성 실패 처리
    Error_Handler();
 800112a:	f7ff fd2b 	bl	8000b84 <Error_Handler>
  }

  // UARTTask 생성
  xTaskCreate(UARTTask,
 800112e:	2300      	movs	r3, #0
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2301      	movs	r3, #1
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	4909      	ldr	r1, [pc, #36]	@ (8001160 <systemTaskInit+0x54>)
 800113c:	4809      	ldr	r0, [pc, #36]	@ (8001164 <systemTaskInit+0x58>)
 800113e:	f007 ff59 	bl	8008ff4 <xTaskCreate>
              NULL,
              tskIDLE_PRIORITY + 1,
              NULL);

  // HC12ComSERIALTask 생성
  xTaskCreate(HC12ComSERIALTask,
 8001142:	2300      	movs	r3, #0
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	2301      	movs	r3, #1
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	4906      	ldr	r1, [pc, #24]	@ (8001168 <systemTaskInit+0x5c>)
 8001150:	4806      	ldr	r0, [pc, #24]	@ (800116c <systemTaskInit+0x60>)
 8001152:	f007 ff4f 	bl	8008ff4 <xTaskCreate>
              "HC12ComSERIALTask",
              128,
              NULL,
              tskIDLE_PRIORITY + 1,
              NULL);
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2400020c 	.word	0x2400020c
 8001160:	0800bdc8 	.word	0x0800bdc8
 8001164:	08001171 	.word	0x08001171
 8001168:	0800bdd4 	.word	0x0800bdd4
 800116c:	080011c9 	.word	0x080011c9

08001170 <UARTTask>:

void UARTTask(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	@ 0x30
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    uint32_t msg;
    char txBuffer[32];

    for (;;)
    {
        if (xQueueReceive(uartQueueHandle, &msg, portMAX_DELAY) == pdTRUE)
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <UARTTask+0x4c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	4618      	mov	r0, r3
 8001186:	f007 fc85 	bl	8008a94 <xQueueReceive>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d1f3      	bne.n	8001178 <UARTTask+0x8>
        {
            sprintf(txBuffer, "Received: %lu\r\n", msg);
 8001190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	490a      	ldr	r1, [pc, #40]	@ (80011c0 <UARTTask+0x50>)
 8001198:	4618      	mov	r0, r3
 800119a:	f009 febd 	bl	800af18 <siprintf>
            HAL_UART_Transmit(&husart3, (uint8_t *)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f8b4 	bl	8000310 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f107 010c 	add.w	r1, r7, #12
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <UARTTask+0x54>)
 80011b6:	f004 f9f3 	bl	80055a0 <HAL_UART_Transmit>
        if (xQueueReceive(uartQueueHandle, &msg, portMAX_DELAY) == pdTRUE)
 80011ba:	e7dd      	b.n	8001178 <UARTTask+0x8>
 80011bc:	2400020c 	.word	0x2400020c
 80011c0:	0800bde8 	.word	0x0800bde8
 80011c4:	24000120 	.word	0x24000120

080011c8 <HC12ComSERIALTask>:
        }
    }
}

void HC12ComSERIALTask(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        printf("HC-12 TASK\r\n");
 80011d0:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <HC12ComSERIALTask+0x1c>)
 80011d2:	f009 fe99 	bl	800af08 <puts>
        vTaskDelay(pdMS_TO_TICKS(1000)); // FreeRTOS 딜레이 함수
 80011d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011da:	f008 f869 	bl	80092b0 <vTaskDelay>
        printf("HC-12 TASK\r\n");
 80011de:	bf00      	nop
 80011e0:	e7f6      	b.n	80011d0 <HC12ComSERIALTask+0x8>
 80011e2:	bf00      	nop
 80011e4:	0800bdf8 	.word	0x0800bdf8

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001224 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80011ec:	f7ff ff76 	bl	80010dc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f0:	f7ff fee4 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f00a f81f 	bl	800b25c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fa47 	bl	80006b0 <main>
  bx  lr
 8001222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001228:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800122c:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001230:	0800bebc 	.word	0x0800bebc
  ldr r2, =_sbss
 8001234:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001238:	24004d48 	.word	0x24004d48

0800123c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC3_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001246:	2003      	movs	r0, #3
 8001248:	f000 f903 	bl	8001452 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800124c:	f001 fe9c 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8001250:	4602      	mov	r2, r0
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_Init+0x68>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	4913      	ldr	r1, [pc, #76]	@ (80012ac <HAL_Init+0x6c>)
 800125e:	5ccb      	ldrb	r3, [r1, r3]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_Init+0x68>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	4a0e      	ldr	r2, [pc, #56]	@ (80012ac <HAL_Init+0x6c>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_Init+0x70>)
 8001282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <HAL_Init+0x74>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128a:	200f      	movs	r0, #15
 800128c:	f7ff fd68 	bl	8000d60 <HAL_InitTick>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e002      	b.n	80012a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800129a:	f7ff fc79 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58024400 	.word	0x58024400
 80012ac:	0800be40 	.word	0x0800be40
 80012b0:	24000004 	.word	0x24000004
 80012b4:	24000000 	.word	0x24000000

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	@ (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	2400000c 	.word	0x2400000c
 80012dc:	24000210 	.word	0x24000210

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	24000210 	.word	0x24000210

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	4313      	orrs	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	05fa0000 	.word	0x05fa0000

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	@ (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff4c 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001476:	f7ff ff63 	bl	8001340 <__NVIC_GetPriorityGrouping>
 800147a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	6978      	ldr	r0, [r7, #20]
 8001482:	f7ff ffb3 	bl	80013ec <NVIC_EncodePriority>
 8001486:	4602      	mov	r2, r0
 8001488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff82 	bl	8001398 <__NVIC_SetPriority>
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff56 	bl	800135c <__NVIC_EnableIRQ>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014bc:	f3bf 8f5f 	dmb	sy
}
 80014c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014c2:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <HAL_MPU_Disable+0x28>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <HAL_MPU_Disable+0x28>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <HAL_MPU_Disable+0x2c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	e000ed90 	.word	0xe000ed90

080014e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_MPU_Enable+0x38>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_MPU_Enable+0x3c>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_MPU_Enable+0x3c>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001504:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001506:	f3bf 8f4f 	dsb	sy
}
 800150a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800150c:	f3bf 8f6f 	isb	sy
}
 8001510:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed90 	.word	0xe000ed90
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	785a      	ldrb	r2, [r3, #1]
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001536:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 800153e:	f023 0301 	bic.w	r3, r3, #1
 8001542:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001544:	4a17      	ldr	r2, [pc, #92]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7b1b      	ldrb	r3, [r3, #12]
 8001550:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7adb      	ldrb	r3, [r3, #11]
 8001556:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7a9b      	ldrb	r3, [r3, #10]
 800155e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b5b      	ldrb	r3, [r3, #13]
 8001566:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001568:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7b9b      	ldrb	r3, [r3, #14]
 800156e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001570:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7bdb      	ldrb	r3, [r3, #15]
 8001576:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001578:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7a5b      	ldrb	r3, [r3, #9]
 800157e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001580:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7a1b      	ldrb	r3, [r3, #8]
 8001586:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001588:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001590:	4a04      	ldr	r2, [pc, #16]	@ (80015a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001592:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001594:	6113      	str	r3, [r2, #16]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed90 	.word	0xe000ed90

080015a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff fe96 	bl	80012e0 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e2dc      	b.n	8001b7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d008      	beq.n	80015de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2cd      	b.n	8001b7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a76      	ldr	r2, [pc, #472]	@ (80017bc <HAL_DMA_Abort+0x214>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d04a      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a74      	ldr	r2, [pc, #464]	@ (80017c0 <HAL_DMA_Abort+0x218>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d045      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a73      	ldr	r2, [pc, #460]	@ (80017c4 <HAL_DMA_Abort+0x21c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d040      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a71      	ldr	r2, [pc, #452]	@ (80017c8 <HAL_DMA_Abort+0x220>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d03b      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a70      	ldr	r2, [pc, #448]	@ (80017cc <HAL_DMA_Abort+0x224>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d036      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6e      	ldr	r2, [pc, #440]	@ (80017d0 <HAL_DMA_Abort+0x228>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d031      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a6d      	ldr	r2, [pc, #436]	@ (80017d4 <HAL_DMA_Abort+0x22c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d02c      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a6b      	ldr	r2, [pc, #428]	@ (80017d8 <HAL_DMA_Abort+0x230>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d027      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6a      	ldr	r2, [pc, #424]	@ (80017dc <HAL_DMA_Abort+0x234>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d022      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a68      	ldr	r2, [pc, #416]	@ (80017e0 <HAL_DMA_Abort+0x238>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d01d      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a67      	ldr	r2, [pc, #412]	@ (80017e4 <HAL_DMA_Abort+0x23c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d018      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a65      	ldr	r2, [pc, #404]	@ (80017e8 <HAL_DMA_Abort+0x240>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d013      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a64      	ldr	r2, [pc, #400]	@ (80017ec <HAL_DMA_Abort+0x244>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d00e      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a62      	ldr	r2, [pc, #392]	@ (80017f0 <HAL_DMA_Abort+0x248>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d009      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a61      	ldr	r2, [pc, #388]	@ (80017f4 <HAL_DMA_Abort+0x24c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d004      	beq.n	800167e <HAL_DMA_Abort+0xd6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a5f      	ldr	r2, [pc, #380]	@ (80017f8 <HAL_DMA_Abort+0x250>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_DMA_Abort+0xda>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_DMA_Abort+0xdc>
 8001682:	2300      	movs	r3, #0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 021e 	bic.w	r2, r2, #30
 8001696:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 020e 	bic.w	r2, r2, #14
 80016be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a3c      	ldr	r2, [pc, #240]	@ (80017bc <HAL_DMA_Abort+0x214>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d072      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a3a      	ldr	r2, [pc, #232]	@ (80017c0 <HAL_DMA_Abort+0x218>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d06d      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a39      	ldr	r2, [pc, #228]	@ (80017c4 <HAL_DMA_Abort+0x21c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d068      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a37      	ldr	r2, [pc, #220]	@ (80017c8 <HAL_DMA_Abort+0x220>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d063      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a36      	ldr	r2, [pc, #216]	@ (80017cc <HAL_DMA_Abort+0x224>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d05e      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a34      	ldr	r2, [pc, #208]	@ (80017d0 <HAL_DMA_Abort+0x228>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d059      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a33      	ldr	r2, [pc, #204]	@ (80017d4 <HAL_DMA_Abort+0x22c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d054      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a31      	ldr	r2, [pc, #196]	@ (80017d8 <HAL_DMA_Abort+0x230>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d04f      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a30      	ldr	r2, [pc, #192]	@ (80017dc <HAL_DMA_Abort+0x234>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04a      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2e      	ldr	r2, [pc, #184]	@ (80017e0 <HAL_DMA_Abort+0x238>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d045      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2d      	ldr	r2, [pc, #180]	@ (80017e4 <HAL_DMA_Abort+0x23c>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d040      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2b      	ldr	r2, [pc, #172]	@ (80017e8 <HAL_DMA_Abort+0x240>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d03b      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2a      	ldr	r2, [pc, #168]	@ (80017ec <HAL_DMA_Abort+0x244>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d036      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a28      	ldr	r2, [pc, #160]	@ (80017f0 <HAL_DMA_Abort+0x248>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d031      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a27      	ldr	r2, [pc, #156]	@ (80017f4 <HAL_DMA_Abort+0x24c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d02c      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a25      	ldr	r2, [pc, #148]	@ (80017f8 <HAL_DMA_Abort+0x250>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d027      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <HAL_DMA_Abort+0x254>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <HAL_DMA_Abort+0x258>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01d      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <HAL_DMA_Abort+0x25c>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d018      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1f      	ldr	r2, [pc, #124]	@ (8001808 <HAL_DMA_Abort+0x260>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1e      	ldr	r2, [pc, #120]	@ (800180c <HAL_DMA_Abort+0x264>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00e      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1c      	ldr	r2, [pc, #112]	@ (8001810 <HAL_DMA_Abort+0x268>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d009      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <HAL_DMA_Abort+0x26c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d004      	beq.n	80017b6 <HAL_DMA_Abort+0x20e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_DMA_Abort+0x270>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d132      	bne.n	800181c <HAL_DMA_Abort+0x274>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e031      	b.n	800181e <HAL_DMA_Abort+0x276>
 80017ba:	bf00      	nop
 80017bc:	40020010 	.word	0x40020010
 80017c0:	40020028 	.word	0x40020028
 80017c4:	40020040 	.word	0x40020040
 80017c8:	40020058 	.word	0x40020058
 80017cc:	40020070 	.word	0x40020070
 80017d0:	40020088 	.word	0x40020088
 80017d4:	400200a0 	.word	0x400200a0
 80017d8:	400200b8 	.word	0x400200b8
 80017dc:	40020410 	.word	0x40020410
 80017e0:	40020428 	.word	0x40020428
 80017e4:	40020440 	.word	0x40020440
 80017e8:	40020458 	.word	0x40020458
 80017ec:	40020470 	.word	0x40020470
 80017f0:	40020488 	.word	0x40020488
 80017f4:	400204a0 	.word	0x400204a0
 80017f8:	400204b8 	.word	0x400204b8
 80017fc:	58025408 	.word	0x58025408
 8001800:	5802541c 	.word	0x5802541c
 8001804:	58025430 	.word	0x58025430
 8001808:	58025444 	.word	0x58025444
 800180c:	58025458 	.word	0x58025458
 8001810:	5802546c 	.word	0x5802546c
 8001814:	58025480 	.word	0x58025480
 8001818:	58025494 	.word	0x58025494
 800181c:	2300      	movs	r3, #0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001830:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6d      	ldr	r2, [pc, #436]	@ (80019ec <HAL_DMA_Abort+0x444>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04a      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6b      	ldr	r2, [pc, #428]	@ (80019f0 <HAL_DMA_Abort+0x448>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d045      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6a      	ldr	r2, [pc, #424]	@ (80019f4 <HAL_DMA_Abort+0x44c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d040      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a68      	ldr	r2, [pc, #416]	@ (80019f8 <HAL_DMA_Abort+0x450>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d03b      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a67      	ldr	r2, [pc, #412]	@ (80019fc <HAL_DMA_Abort+0x454>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d036      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <HAL_DMA_Abort+0x458>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d031      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a64      	ldr	r2, [pc, #400]	@ (8001a04 <HAL_DMA_Abort+0x45c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d02c      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a62      	ldr	r2, [pc, #392]	@ (8001a08 <HAL_DMA_Abort+0x460>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d027      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a61      	ldr	r2, [pc, #388]	@ (8001a0c <HAL_DMA_Abort+0x464>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d022      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5f      	ldr	r2, [pc, #380]	@ (8001a10 <HAL_DMA_Abort+0x468>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01d      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5e      	ldr	r2, [pc, #376]	@ (8001a14 <HAL_DMA_Abort+0x46c>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d018      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001a18 <HAL_DMA_Abort+0x470>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5b      	ldr	r2, [pc, #364]	@ (8001a1c <HAL_DMA_Abort+0x474>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d00e      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a59      	ldr	r2, [pc, #356]	@ (8001a20 <HAL_DMA_Abort+0x478>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d009      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <HAL_DMA_Abort+0x47c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d004      	beq.n	80018d2 <HAL_DMA_Abort+0x32a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a56      	ldr	r2, [pc, #344]	@ (8001a28 <HAL_DMA_Abort+0x480>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d108      	bne.n	80018e4 <HAL_DMA_Abort+0x33c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	e007      	b.n	80018f4 <HAL_DMA_Abort+0x34c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018f4:	e013      	b.n	800191e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f6:	f7ff fcf3 	bl	80012e0 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b05      	cmp	r3, #5
 8001902:	d90c      	bls.n	800191e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e12d      	b.n	8001b7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1e5      	bne.n	80018f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2f      	ldr	r2, [pc, #188]	@ (80019ec <HAL_DMA_Abort+0x444>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d04a      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <HAL_DMA_Abort+0x448>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d045      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2c      	ldr	r2, [pc, #176]	@ (80019f4 <HAL_DMA_Abort+0x44c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d040      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2a      	ldr	r2, [pc, #168]	@ (80019f8 <HAL_DMA_Abort+0x450>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d03b      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a29      	ldr	r2, [pc, #164]	@ (80019fc <HAL_DMA_Abort+0x454>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d036      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a27      	ldr	r2, [pc, #156]	@ (8001a00 <HAL_DMA_Abort+0x458>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a26      	ldr	r2, [pc, #152]	@ (8001a04 <HAL_DMA_Abort+0x45c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d02c      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a24      	ldr	r2, [pc, #144]	@ (8001a08 <HAL_DMA_Abort+0x460>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d027      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a23      	ldr	r2, [pc, #140]	@ (8001a0c <HAL_DMA_Abort+0x464>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a21      	ldr	r2, [pc, #132]	@ (8001a10 <HAL_DMA_Abort+0x468>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01d      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a20      	ldr	r2, [pc, #128]	@ (8001a14 <HAL_DMA_Abort+0x46c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d018      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a18 <HAL_DMA_Abort+0x470>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a1c <HAL_DMA_Abort+0x474>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00e      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <HAL_DMA_Abort+0x478>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001a24 <HAL_DMA_Abort+0x47c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d004      	beq.n	80019ca <HAL_DMA_Abort+0x422>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <HAL_DMA_Abort+0x480>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_DMA_Abort+0x426>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_DMA_Abort+0x428>
 80019ce:	2300      	movs	r3, #0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d02b      	beq.n	8001a2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	223f      	movs	r2, #63	@ 0x3f
 80019e4:	409a      	lsls	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	e02a      	b.n	8001a42 <HAL_DMA_Abort+0x49a>
 80019ec:	40020010 	.word	0x40020010
 80019f0:	40020028 	.word	0x40020028
 80019f4:	40020040 	.word	0x40020040
 80019f8:	40020058 	.word	0x40020058
 80019fc:	40020070 	.word	0x40020070
 8001a00:	40020088 	.word	0x40020088
 8001a04:	400200a0 	.word	0x400200a0
 8001a08:	400200b8 	.word	0x400200b8
 8001a0c:	40020410 	.word	0x40020410
 8001a10:	40020428 	.word	0x40020428
 8001a14:	40020440 	.word	0x40020440
 8001a18:	40020458 	.word	0x40020458
 8001a1c:	40020470 	.word	0x40020470
 8001a20:	40020488 	.word	0x40020488
 8001a24:	400204a0 	.word	0x400204a0
 8001a28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a4f      	ldr	r2, [pc, #316]	@ (8001b84 <HAL_DMA_Abort+0x5dc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d072      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a4d      	ldr	r2, [pc, #308]	@ (8001b88 <HAL_DMA_Abort+0x5e0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d06d      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b8c <HAL_DMA_Abort+0x5e4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d068      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4a      	ldr	r2, [pc, #296]	@ (8001b90 <HAL_DMA_Abort+0x5e8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d063      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a49      	ldr	r2, [pc, #292]	@ (8001b94 <HAL_DMA_Abort+0x5ec>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d05e      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a47      	ldr	r2, [pc, #284]	@ (8001b98 <HAL_DMA_Abort+0x5f0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d059      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a46      	ldr	r2, [pc, #280]	@ (8001b9c <HAL_DMA_Abort+0x5f4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d054      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a44      	ldr	r2, [pc, #272]	@ (8001ba0 <HAL_DMA_Abort+0x5f8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d04f      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a43      	ldr	r2, [pc, #268]	@ (8001ba4 <HAL_DMA_Abort+0x5fc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d04a      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a41      	ldr	r2, [pc, #260]	@ (8001ba8 <HAL_DMA_Abort+0x600>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d045      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a40      	ldr	r2, [pc, #256]	@ (8001bac <HAL_DMA_Abort+0x604>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d040      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8001bb0 <HAL_DMA_Abort+0x608>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d03b      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb4 <HAL_DMA_Abort+0x60c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d036      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb8 <HAL_DMA_Abort+0x610>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d031      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a3a      	ldr	r2, [pc, #232]	@ (8001bbc <HAL_DMA_Abort+0x614>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d02c      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a38      	ldr	r2, [pc, #224]	@ (8001bc0 <HAL_DMA_Abort+0x618>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d027      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a37      	ldr	r2, [pc, #220]	@ (8001bc4 <HAL_DMA_Abort+0x61c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d022      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a35      	ldr	r2, [pc, #212]	@ (8001bc8 <HAL_DMA_Abort+0x620>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d01d      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a34      	ldr	r2, [pc, #208]	@ (8001bcc <HAL_DMA_Abort+0x624>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d018      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a32      	ldr	r2, [pc, #200]	@ (8001bd0 <HAL_DMA_Abort+0x628>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a31      	ldr	r2, [pc, #196]	@ (8001bd4 <HAL_DMA_Abort+0x62c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd8 <HAL_DMA_Abort+0x630>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d009      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2e      	ldr	r2, [pc, #184]	@ (8001bdc <HAL_DMA_Abort+0x634>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d004      	beq.n	8001b32 <HAL_DMA_Abort+0x58a>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001be0 <HAL_DMA_Abort+0x638>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Abort+0x58e>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_DMA_Abort+0x590>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d015      	beq.n	8001b68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001b44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00c      	beq.n	8001b68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001b66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40020010 	.word	0x40020010
 8001b88:	40020028 	.word	0x40020028
 8001b8c:	40020040 	.word	0x40020040
 8001b90:	40020058 	.word	0x40020058
 8001b94:	40020070 	.word	0x40020070
 8001b98:	40020088 	.word	0x40020088
 8001b9c:	400200a0 	.word	0x400200a0
 8001ba0:	400200b8 	.word	0x400200b8
 8001ba4:	40020410 	.word	0x40020410
 8001ba8:	40020428 	.word	0x40020428
 8001bac:	40020440 	.word	0x40020440
 8001bb0:	40020458 	.word	0x40020458
 8001bb4:	40020470 	.word	0x40020470
 8001bb8:	40020488 	.word	0x40020488
 8001bbc:	400204a0 	.word	0x400204a0
 8001bc0:	400204b8 	.word	0x400204b8
 8001bc4:	58025408 	.word	0x58025408
 8001bc8:	5802541c 	.word	0x5802541c
 8001bcc:	58025430 	.word	0x58025430
 8001bd0:	58025444 	.word	0x58025444
 8001bd4:	58025458 	.word	0x58025458
 8001bd8:	5802546c 	.word	0x5802546c
 8001bdc:	58025480 	.word	0x58025480
 8001be0:	58025494 	.word	0x58025494

08001be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e237      	b.n	8002066 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d004      	beq.n	8001c0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e22c      	b.n	8002066 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5c      	ldr	r2, [pc, #368]	@ (8001d84 <HAL_DMA_Abort_IT+0x1a0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d04a      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d88 <HAL_DMA_Abort_IT+0x1a4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d045      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a59      	ldr	r2, [pc, #356]	@ (8001d8c <HAL_DMA_Abort_IT+0x1a8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d040      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a58      	ldr	r2, [pc, #352]	@ (8001d90 <HAL_DMA_Abort_IT+0x1ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d03b      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a56      	ldr	r2, [pc, #344]	@ (8001d94 <HAL_DMA_Abort_IT+0x1b0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d036      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a55      	ldr	r2, [pc, #340]	@ (8001d98 <HAL_DMA_Abort_IT+0x1b4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d031      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a53      	ldr	r2, [pc, #332]	@ (8001d9c <HAL_DMA_Abort_IT+0x1b8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d02c      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_DMA_Abort_IT+0x1bc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d027      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a50      	ldr	r2, [pc, #320]	@ (8001da4 <HAL_DMA_Abort_IT+0x1c0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d022      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001da8 <HAL_DMA_Abort_IT+0x1c4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d01d      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a4d      	ldr	r2, [pc, #308]	@ (8001dac <HAL_DMA_Abort_IT+0x1c8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d018      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8001db0 <HAL_DMA_Abort_IT+0x1cc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a4a      	ldr	r2, [pc, #296]	@ (8001db4 <HAL_DMA_Abort_IT+0x1d0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a49      	ldr	r2, [pc, #292]	@ (8001db8 <HAL_DMA_Abort_IT+0x1d4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a47      	ldr	r2, [pc, #284]	@ (8001dbc <HAL_DMA_Abort_IT+0x1d8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_DMA_Abort_IT+0xc8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a46      	ldr	r2, [pc, #280]	@ (8001dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_DMA_Abort_IT+0xcc>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_DMA_Abort_IT+0xce>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8086 	beq.w	8001dc4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8001d84 <HAL_DMA_Abort_IT+0x1a0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d04a      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2e      	ldr	r2, [pc, #184]	@ (8001d88 <HAL_DMA_Abort_IT+0x1a4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d045      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d8c <HAL_DMA_Abort_IT+0x1a8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d040      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_DMA_Abort_IT+0x1ac>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d03b      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a29      	ldr	r2, [pc, #164]	@ (8001d94 <HAL_DMA_Abort_IT+0x1b0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d036      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a28      	ldr	r2, [pc, #160]	@ (8001d98 <HAL_DMA_Abort_IT+0x1b4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d031      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a26      	ldr	r2, [pc, #152]	@ (8001d9c <HAL_DMA_Abort_IT+0x1b8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02c      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a25      	ldr	r2, [pc, #148]	@ (8001da0 <HAL_DMA_Abort_IT+0x1bc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d027      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <HAL_DMA_Abort_IT+0x1c0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d022      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <HAL_DMA_Abort_IT+0x1c4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d01d      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a20      	ldr	r2, [pc, #128]	@ (8001dac <HAL_DMA_Abort_IT+0x1c8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d018      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_DMA_Abort_IT+0x1cc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <HAL_DMA_Abort_IT+0x1d0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00e      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1c      	ldr	r2, [pc, #112]	@ (8001db8 <HAL_DMA_Abort_IT+0x1d4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	@ (8001dbc <HAL_DMA_Abort_IT+0x1d8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x17c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a19      	ldr	r2, [pc, #100]	@ (8001dc0 <HAL_DMA_Abort_IT+0x1dc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d108      	bne.n	8001d72 <HAL_DMA_Abort_IT+0x18e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e178      	b.n	8002064 <HAL_DMA_Abort_IT+0x480>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e16f      	b.n	8002064 <HAL_DMA_Abort_IT+0x480>
 8001d84:	40020010 	.word	0x40020010
 8001d88:	40020028 	.word	0x40020028
 8001d8c:	40020040 	.word	0x40020040
 8001d90:	40020058 	.word	0x40020058
 8001d94:	40020070 	.word	0x40020070
 8001d98:	40020088 	.word	0x40020088
 8001d9c:	400200a0 	.word	0x400200a0
 8001da0:	400200b8 	.word	0x400200b8
 8001da4:	40020410 	.word	0x40020410
 8001da8:	40020428 	.word	0x40020428
 8001dac:	40020440 	.word	0x40020440
 8001db0:	40020458 	.word	0x40020458
 8001db4:	40020470 	.word	0x40020470
 8001db8:	40020488 	.word	0x40020488
 8001dbc:	400204a0 	.word	0x400204a0
 8001dc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 020e 	bic.w	r2, r2, #14
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6c      	ldr	r2, [pc, #432]	@ (8001f8c <HAL_DMA_Abort_IT+0x3a8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d04a      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a6b      	ldr	r2, [pc, #428]	@ (8001f90 <HAL_DMA_Abort_IT+0x3ac>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d045      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a69      	ldr	r2, [pc, #420]	@ (8001f94 <HAL_DMA_Abort_IT+0x3b0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d040      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a68      	ldr	r2, [pc, #416]	@ (8001f98 <HAL_DMA_Abort_IT+0x3b4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d03b      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a66      	ldr	r2, [pc, #408]	@ (8001f9c <HAL_DMA_Abort_IT+0x3b8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d036      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a65      	ldr	r2, [pc, #404]	@ (8001fa0 <HAL_DMA_Abort_IT+0x3bc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d031      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a63      	ldr	r2, [pc, #396]	@ (8001fa4 <HAL_DMA_Abort_IT+0x3c0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d02c      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a62      	ldr	r2, [pc, #392]	@ (8001fa8 <HAL_DMA_Abort_IT+0x3c4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d027      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a60      	ldr	r2, [pc, #384]	@ (8001fac <HAL_DMA_Abort_IT+0x3c8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d022      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a5f      	ldr	r2, [pc, #380]	@ (8001fb0 <HAL_DMA_Abort_IT+0x3cc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d01d      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb4 <HAL_DMA_Abort_IT+0x3d0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d018      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb8 <HAL_DMA_Abort_IT+0x3d4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a5a      	ldr	r2, [pc, #360]	@ (8001fbc <HAL_DMA_Abort_IT+0x3d8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a59      	ldr	r2, [pc, #356]	@ (8001fc0 <HAL_DMA_Abort_IT+0x3dc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a57      	ldr	r2, [pc, #348]	@ (8001fc4 <HAL_DMA_Abort_IT+0x3e0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x290>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a56      	ldr	r2, [pc, #344]	@ (8001fc8 <HAL_DMA_Abort_IT+0x3e4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d108      	bne.n	8001e86 <HAL_DMA_Abort_IT+0x2a2>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e007      	b.n	8001e96 <HAL_DMA_Abort_IT+0x2b2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f8c <HAL_DMA_Abort_IT+0x3a8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d072      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8001f90 <HAL_DMA_Abort_IT+0x3ac>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d06d      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a39      	ldr	r2, [pc, #228]	@ (8001f94 <HAL_DMA_Abort_IT+0x3b0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d068      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <HAL_DMA_Abort_IT+0x3b4>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d063      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a36      	ldr	r2, [pc, #216]	@ (8001f9c <HAL_DMA_Abort_IT+0x3b8>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d05e      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a34      	ldr	r2, [pc, #208]	@ (8001fa0 <HAL_DMA_Abort_IT+0x3bc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d059      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a33      	ldr	r2, [pc, #204]	@ (8001fa4 <HAL_DMA_Abort_IT+0x3c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d054      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a31      	ldr	r2, [pc, #196]	@ (8001fa8 <HAL_DMA_Abort_IT+0x3c4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d04f      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a30      	ldr	r2, [pc, #192]	@ (8001fac <HAL_DMA_Abort_IT+0x3c8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d04a      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb0 <HAL_DMA_Abort_IT+0x3cc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d045      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <HAL_DMA_Abort_IT+0x3d0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d040      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_DMA_Abort_IT+0x3d4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d03b      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2a      	ldr	r2, [pc, #168]	@ (8001fbc <HAL_DMA_Abort_IT+0x3d8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d036      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_DMA_Abort_IT+0x3dc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d031      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a27      	ldr	r2, [pc, #156]	@ (8001fc4 <HAL_DMA_Abort_IT+0x3e0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d02c      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a25      	ldr	r2, [pc, #148]	@ (8001fc8 <HAL_DMA_Abort_IT+0x3e4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d027      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	@ (8001fcc <HAL_DMA_Abort_IT+0x3e8>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d022      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a22      	ldr	r2, [pc, #136]	@ (8001fd0 <HAL_DMA_Abort_IT+0x3ec>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01d      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	@ (8001fd4 <HAL_DMA_Abort_IT+0x3f0>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d018      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <HAL_DMA_Abort_IT+0x3f4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <HAL_DMA_Abort_IT+0x3f8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00e      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <HAL_DMA_Abort_IT+0x3fc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <HAL_DMA_Abort_IT+0x400>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x3a2>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a19      	ldr	r2, [pc, #100]	@ (8001fe8 <HAL_DMA_Abort_IT+0x404>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d132      	bne.n	8001fec <HAL_DMA_Abort_IT+0x408>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e031      	b.n	8001fee <HAL_DMA_Abort_IT+0x40a>
 8001f8a:	bf00      	nop
 8001f8c:	40020010 	.word	0x40020010
 8001f90:	40020028 	.word	0x40020028
 8001f94:	40020040 	.word	0x40020040
 8001f98:	40020058 	.word	0x40020058
 8001f9c:	40020070 	.word	0x40020070
 8001fa0:	40020088 	.word	0x40020088
 8001fa4:	400200a0 	.word	0x400200a0
 8001fa8:	400200b8 	.word	0x400200b8
 8001fac:	40020410 	.word	0x40020410
 8001fb0:	40020428 	.word	0x40020428
 8001fb4:	40020440 	.word	0x40020440
 8001fb8:	40020458 	.word	0x40020458
 8001fbc:	40020470 	.word	0x40020470
 8001fc0:	40020488 	.word	0x40020488
 8001fc4:	400204a0 	.word	0x400204a0
 8001fc8:	400204b8 	.word	0x400204b8
 8001fcc:	58025408 	.word	0x58025408
 8001fd0:	5802541c 	.word	0x5802541c
 8001fd4:	58025430 	.word	0x58025430
 8001fd8:	58025444 	.word	0x58025444
 8001fdc:	58025458 	.word	0x58025458
 8001fe0:	5802546c 	.word	0x5802546c
 8001fe4:	58025480 	.word	0x58025480
 8001fe8:	58025494 	.word	0x58025494
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d028      	beq.n	8002044 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002000:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002006:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2201      	movs	r2, #1
 8002012:	409a      	lsls	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002020:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002034:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002038:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002042:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800207e:	4b86      	ldr	r3, [pc, #536]	@ (8002298 <HAL_GPIO_Init+0x228>)
 8002080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002082:	e18c      	b.n	800239e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2101      	movs	r1, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 817e 	beq.w	8002398 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d005      	beq.n	80020b4 <HAL_GPIO_Init+0x44>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d130      	bne.n	8002116 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ea:	2201      	movs	r2, #1
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 0201 	and.w	r2, r3, #1
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b03      	cmp	r3, #3
 8002120:	d017      	beq.n	8002152 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d123      	bne.n	80021a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	69b9      	ldr	r1, [r7, #24]
 80021a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0203 	and.w	r2, r3, #3
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80d8 	beq.w	8002398 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e8:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <HAL_GPIO_Init+0x22c>)
 80021ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ee:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <HAL_GPIO_Init+0x22c>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021f8:	4b28      	ldr	r3, [pc, #160]	@ (800229c <HAL_GPIO_Init+0x22c>)
 80021fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <HAL_GPIO_Init+0x230>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1d      	ldr	r2, [pc, #116]	@ (80022a4 <HAL_GPIO_Init+0x234>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d04a      	beq.n	80022c8 <HAL_GPIO_Init+0x258>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <HAL_GPIO_Init+0x238>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d02b      	beq.n	8002292 <HAL_GPIO_Init+0x222>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1b      	ldr	r2, [pc, #108]	@ (80022ac <HAL_GPIO_Init+0x23c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d025      	beq.n	800228e <HAL_GPIO_Init+0x21e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a1a      	ldr	r2, [pc, #104]	@ (80022b0 <HAL_GPIO_Init+0x240>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <HAL_GPIO_Init+0x21a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a19      	ldr	r2, [pc, #100]	@ (80022b4 <HAL_GPIO_Init+0x244>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x216>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <HAL_GPIO_Init+0x248>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x212>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a17      	ldr	r2, [pc, #92]	@ (80022bc <HAL_GPIO_Init+0x24c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x20e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a16      	ldr	r2, [pc, #88]	@ (80022c0 <HAL_GPIO_Init+0x250>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x20a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <HAL_GPIO_Init+0x254>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x206>
 8002272:	2309      	movs	r3, #9
 8002274:	e029      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 8002276:	230a      	movs	r3, #10
 8002278:	e027      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 800227a:	2307      	movs	r3, #7
 800227c:	e025      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 800227e:	2306      	movs	r3, #6
 8002280:	e023      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 8002282:	2305      	movs	r3, #5
 8002284:	e021      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 8002286:	2304      	movs	r3, #4
 8002288:	e01f      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 800228a:	2303      	movs	r3, #3
 800228c:	e01d      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 800228e:	2302      	movs	r3, #2
 8002290:	e01b      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 8002292:	2301      	movs	r3, #1
 8002294:	e019      	b.n	80022ca <HAL_GPIO_Init+0x25a>
 8002296:	bf00      	nop
 8002298:	58000080 	.word	0x58000080
 800229c:	58024400 	.word	0x58024400
 80022a0:	58000400 	.word	0x58000400
 80022a4:	58020000 	.word	0x58020000
 80022a8:	58020400 	.word	0x58020400
 80022ac:	58020800 	.word	0x58020800
 80022b0:	58020c00 	.word	0x58020c00
 80022b4:	58021000 	.word	0x58021000
 80022b8:	58021400 	.word	0x58021400
 80022bc:	58021800 	.word	0x58021800
 80022c0:	58021c00 	.word	0x58021c00
 80022c4:	58022400 	.word	0x58022400
 80022c8:	2300      	movs	r3, #0
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	f002 0203 	and.w	r2, r2, #3
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	4093      	lsls	r3, r2
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022da:	4938      	ldr	r1, [pc, #224]	@ (80023bc <HAL_GPIO_Init+0x34c>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800230e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800233c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f47f ae6b 	bne.w	8002084 <HAL_GPIO_Init+0x14>
  }
}
 80023ae:	bf00      	nop
 80023b0:	bf00      	nop
 80023b2:	3724      	adds	r7, #36	@ 0x24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	58000400 	.word	0x58000400

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_PWREx_ConfigSupply+0x70>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b04      	cmp	r3, #4
 8002406:	d00a      	beq.n	800241e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002408:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <HAL_PWREx_ConfigSupply+0x70>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e01f      	b.n	800245a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e01d      	b.n	800245a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <HAL_PWREx_ConfigSupply+0x70>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 0207 	bic.w	r2, r3, #7
 8002426:	490f      	ldr	r1, [pc, #60]	@ (8002464 <HAL_PWREx_ConfigSupply+0x70>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4313      	orrs	r3, r2
 800242c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800242e:	f7fe ff57 	bl	80012e0 <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002434:	e009      	b.n	800244a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002436:	f7fe ff53 	bl	80012e0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002444:	d901      	bls.n	800244a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e007      	b.n	800245a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_PWREx_ConfigSupply+0x70>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002456:	d1ee      	bne.n	8002436 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	58024800 	.word	0x58024800

08002468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	@ 0x30
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e3c8      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002488:	4b88      	ldr	r3, [pc, #544]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002492:	4b86      	ldr	r3, [pc, #536]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249a:	2b10      	cmp	r3, #16
 800249c:	d007      	beq.n	80024ae <HAL_RCC_OscConfig+0x46>
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	d110      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ae:	4b7f      	ldr	r3, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06c      	beq.n	8002594 <HAL_RCC_OscConfig+0x12c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d168      	bne.n	8002594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e3a2      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x76>
 80024d0:	4b76      	ldr	r3, [pc, #472]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a75      	ldr	r2, [pc, #468]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e02e      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b71      	ldr	r3, [pc, #452]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a70      	ldr	r2, [pc, #448]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b6e      	ldr	r3, [pc, #440]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6d      	ldr	r2, [pc, #436]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e01d      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0xbc>
 800250a:	4b68      	ldr	r3, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a67      	ldr	r2, [pc, #412]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b65      	ldr	r3, [pc, #404]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a64      	ldr	r2, [pc, #400]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 8002524:	4b61      	ldr	r3, [pc, #388]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a60      	ldr	r2, [pc, #384]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b5e      	ldr	r3, [pc, #376]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a5d      	ldr	r2, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800253a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fecc 	bl	80012e0 <HAL_GetTick>
 8002548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7fe fec8 	bl	80012e0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e356      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0xe4>
 800256a:	e014      	b.n	8002596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe feb8 	bl	80012e0 <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe feb4 	bl	80012e0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e342      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002586:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x10c>
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 808c 	beq.w	80026bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a4:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ae:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_RCC_OscConfig+0x162>
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2b18      	cmp	r3, #24
 80025be:	d137      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c8>
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d132      	bne.n	8002630 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ca:	4b38      	ldr	r3, [pc, #224]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e314      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025e2:	4b32      	ldr	r3, [pc, #200]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0219 	bic.w	r2, r3, #25
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	492f      	ldr	r1, [pc, #188]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fe74 	bl	80012e0 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fc:	f7fe fe70 	bl	80012e0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e2fe      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260e:	4b27      	ldr	r3, [pc, #156]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	061b      	lsls	r3, r3, #24
 8002628:	4920      	ldr	r1, [pc, #128]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800262e:	e045      	b.n	80026bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d026      	beq.n	8002686 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002638:	4b1c      	ldr	r3, [pc, #112]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 0219 	bic.w	r2, r3, #25
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4919      	ldr	r1, [pc, #100]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264a:	f7fe fe49 	bl	80012e0 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002652:	f7fe fe45 	bl	80012e0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e2d3      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002670:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	490b      	ldr	r1, [pc, #44]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
 8002684:	e01a      	b.n	80026bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a08      	ldr	r2, [pc, #32]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fe25 	bl	80012e0 <HAL_GetTick>
 8002696:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe fe21 	bl	80012e0 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d903      	bls.n	80026b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e2af      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
 80026ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b0:	4b96      	ldr	r3, [pc, #600]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ee      	bne.n	800269a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d06a      	beq.n	800279e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c8:	4b90      	ldr	r3, [pc, #576]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d2:	4b8e      	ldr	r3, [pc, #568]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d007      	beq.n	80026ee <HAL_RCC_OscConfig+0x286>
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b18      	cmp	r3, #24
 80026e2:	d11b      	bne.n	800271c <HAL_RCC_OscConfig+0x2b4>
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d116      	bne.n	800271c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ee:	4b87      	ldr	r3, [pc, #540]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x29e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	2b80      	cmp	r3, #128	@ 0x80
 8002700:	d001      	beq.n	8002706 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e282      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002706:	4b81      	ldr	r3, [pc, #516]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	497d      	ldr	r1, [pc, #500]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800271a:	e040      	b.n	800279e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d023      	beq.n	800276c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002724:	4b79      	ldr	r3, [pc, #484]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a78      	ldr	r2, [pc, #480]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 800272a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fdd6 	bl	80012e0 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002738:	f7fe fdd2 	bl	80012e0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e260      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800274a:	4b70      	ldr	r3, [pc, #448]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002756:	4b6d      	ldr	r3, [pc, #436]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	061b      	lsls	r3, r3, #24
 8002764:	4969      	ldr	r1, [pc, #420]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	60cb      	str	r3, [r1, #12]
 800276a:	e018      	b.n	800279e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800276c:	4b67      	ldr	r3, [pc, #412]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a66      	ldr	r2, [pc, #408]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fdb2 	bl	80012e0 <HAL_GetTick>
 800277c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002780:	f7fe fdae 	bl	80012e0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e23c      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002792:	4b5e      	ldr	r3, [pc, #376]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d036      	beq.n	8002818 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b56      	ldr	r3, [pc, #344]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b6:	4a55      	ldr	r2, [pc, #340]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fd8f 	bl	80012e0 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe fd8b 	bl	80012e0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e219      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027d8:	4b4c      	ldr	r3, [pc, #304]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x35e>
 80027e4:	e018      	b.n	8002818 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b49      	ldr	r3, [pc, #292]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ea:	4a48      	ldr	r2, [pc, #288]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe fd75 	bl	80012e0 <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fa:	f7fe fd71 	bl	80012e0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1ff      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800280c:	4b3f      	ldr	r3, [pc, #252]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 800280e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f0      	bne.n	80027fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d036      	beq.n	8002892 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d019      	beq.n	8002860 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800282c:	4b37      	ldr	r3, [pc, #220]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a36      	ldr	r2, [pc, #216]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002832:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002836:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002838:	f7fe fd52 	bl	80012e0 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002840:	f7fe fd4e 	bl	80012e0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1dc      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002852:	4b2e      	ldr	r3, [pc, #184]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x3d8>
 800285e:	e018      	b.n	8002892 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002860:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a29      	ldr	r2, [pc, #164]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002866:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800286a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800286c:	f7fe fd38 	bl	80012e0 <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002874:	f7fe fd34 	bl	80012e0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1c2      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002886:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8086 	beq.w	80029ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_RCC_OscConfig+0x4a8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <HAL_RCC_OscConfig+0x4a8>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fd18 	bl	80012e0 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b4:	f7fe fd14 	bl	80012e0 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	@ 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1a2      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028c6:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_RCC_OscConfig+0x4a8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d106      	bne.n	80028e8 <HAL_RCC_OscConfig+0x480>
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e6:	e032      	b.n	800294e <HAL_RCC_OscConfig+0x4e6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d111      	bne.n	8002914 <HAL_RCC_OscConfig+0x4ac>
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f4:	4a05      	ldr	r2, [pc, #20]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80028f6:	f023 0301 	bic.w	r3, r3, #1
 80028fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80028fc:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	4a02      	ldr	r2, [pc, #8]	@ (800290c <HAL_RCC_OscConfig+0x4a4>)
 8002902:	f023 0304 	bic.w	r3, r3, #4
 8002906:	6713      	str	r3, [r2, #112]	@ 0x70
 8002908:	e021      	b.n	800294e <HAL_RCC_OscConfig+0x4e6>
 800290a:	bf00      	nop
 800290c:	58024400 	.word	0x58024400
 8002910:	58024800 	.word	0x58024800
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x4ce>
 800291c:	4b83      	ldr	r3, [pc, #524]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	4a82      	ldr	r2, [pc, #520]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	@ 0x70
 8002928:	4b80      	ldr	r3, [pc, #512]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	@ 0x70
 8002934:	e00b      	b.n	800294e <HAL_RCC_OscConfig+0x4e6>
 8002936:	4b7d      	ldr	r3, [pc, #500]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	@ 0x70
 8002942:	4b7a      	ldr	r3, [pc, #488]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	4a79      	ldr	r2, [pc, #484]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe fcc3 	bl	80012e0 <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fcbf 	bl	80012e0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e14b      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002974:	4b6d      	ldr	r3, [pc, #436]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCC_OscConfig+0x4f6>
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002982:	f7fe fcad 	bl	80012e0 <HAL_GetTick>
 8002986:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fca9 	bl	80012e0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e135      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029a0:	4b62      	ldr	r3, [pc, #392]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 812a 	beq.w	8002c0a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029b6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029be:	2b18      	cmp	r3, #24
 80029c0:	f000 80ba 	beq.w	8002b38 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	f040 8095 	bne.w	8002af8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b57      	ldr	r3, [pc, #348]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a56      	ldr	r2, [pc, #344]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fc81 	bl	80012e0 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe fc7d 	bl	80012e0 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e10b      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029f4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a00:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a04:	4b4a      	ldr	r3, [pc, #296]	@ (8002b30 <HAL_RCC_OscConfig+0x6c8>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	430a      	orrs	r2, r1
 8002a14:	4945      	ldr	r1, [pc, #276]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	025b      	lsls	r3, r3, #9
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
 8002a38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a42:	3b01      	subs	r3, #1
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a4a:	4938      	ldr	r1, [pc, #224]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a50:	4b36      	ldr	r3, [pc, #216]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	4a35      	ldr	r2, [pc, #212]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a5c:	4b33      	ldr	r3, [pc, #204]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a60:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_OscConfig+0x6cc>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a68:	00d2      	lsls	r2, r2, #3
 8002a6a:	4930      	ldr	r1, [pc, #192]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a70:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	f023 020c 	bic.w	r2, r3, #12
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	492b      	ldr	r1, [pc, #172]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a82:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	f023 0202 	bic.w	r2, r3, #2
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	4927      	ldr	r1, [pc, #156]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a94:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a98:	4a24      	ldr	r2, [pc, #144]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa0:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	4a21      	ldr	r2, [pc, #132]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aac:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002ab2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	4a1b      	ldr	r2, [pc, #108]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fc06 	bl	80012e0 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe fc02 	bl	80012e0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e090      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x670>
 8002af6:	e088      	b.n	8002c0a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0b      	ldr	r2, [pc, #44]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002afe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fbec 	bl	80012e0 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fbe8 	bl	80012e0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e076      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1e:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_RCC_OscConfig+0x6c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x6a4>
 8002b2a:	e06e      	b.n	8002c0a <HAL_RCC_OscConfig+0x7a2>
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	fffffc0c 	.word	0xfffffc0c
 8002b34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b38:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b3e:	4b35      	ldr	r3, [pc, #212]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d031      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0203 	and.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d12a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d122      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0a5b      	lsrs	r3, r3, #9
 8002b7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0e1b      	lsrs	r3, r3, #24
 8002ba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e02b      	b.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bb4:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d01f      	beq.n	8002c0a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	4a11      	ldr	r2, [pc, #68]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bd6:	f7fe fb83 	bl	80012e0 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bdc:	bf00      	nop
 8002bde:	f7fe fb7f 	bl	80012e0 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d0f9      	beq.n	8002bde <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCC_OscConfig+0x7b0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bf6:	00d2      	lsls	r2, r2, #3
 8002bf8:	4906      	ldr	r1, [pc, #24]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_RCC_OscConfig+0x7ac>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3730      	adds	r7, #48	@ 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	58024400 	.word	0x58024400
 8002c18:	ffff0007 	.word	0xffff0007

08002c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e19c      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b8a      	ldr	r3, [pc, #552]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b87      	ldr	r3, [pc, #540]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	4985      	ldr	r1, [pc, #532]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b83      	ldr	r3, [pc, #524]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e184      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	4b7b      	ldr	r3, [pc, #492]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d908      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c7c:	4b78      	ldr	r3, [pc, #480]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4975      	ldr	r1, [pc, #468]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	4b70      	ldr	r3, [pc, #448]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002caa:	4b6d      	ldr	r3, [pc, #436]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	496a      	ldr	r1, [pc, #424]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	4b64      	ldr	r3, [pc, #400]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d908      	bls.n	8002cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd8:	4b61      	ldr	r3, [pc, #388]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	495e      	ldr	r1, [pc, #376]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d010      	beq.n	8002d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d908      	bls.n	8002d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d06:	4b56      	ldr	r3, [pc, #344]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4953      	ldr	r1, [pc, #332]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d908      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b4a      	ldr	r3, [pc, #296]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f023 020f 	bic.w	r2, r3, #15
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4947      	ldr	r1, [pc, #284]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d055      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d52:	4b43      	ldr	r3, [pc, #268]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4940      	ldr	r1, [pc, #256]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d121      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0f6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d84:	4b36      	ldr	r3, [pc, #216]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d115      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0ea      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d9c:	4b30      	ldr	r3, [pc, #192]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0de      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dac:	4b2c      	ldr	r3, [pc, #176]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0d6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f023 0207 	bic.w	r2, r3, #7
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4925      	ldr	r1, [pc, #148]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dce:	f7fe fa87 	bl	80012e0 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd6:	f7fe fa83 	bl	80012e0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0be      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dec:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d1eb      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d208      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f023 020f 	bic.w	r2, r3, #15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	490e      	ldr	r1, [pc, #56]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d214      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4906      	ldr	r1, [pc, #24]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e086      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
 8002e5c:	52002000 	.word	0x52002000
 8002e60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d208      	bcs.n	8002e92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e80:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4939      	ldr	r1, [pc, #228]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	4b34      	ldr	r3, [pc, #208]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d208      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eae:	4b31      	ldr	r3, [pc, #196]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	492e      	ldr	r1, [pc, #184]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d208      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002edc:	4b25      	ldr	r3, [pc, #148]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4922      	ldr	r1, [pc, #136]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d208      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4917      	ldr	r1, [pc, #92]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f1c:	f000 f834 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	4912      	ldr	r1, [pc, #72]	@ (8002f78 <HAL_RCC_ClockConfig+0x35c>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	4a0d      	ldr	r2, [pc, #52]	@ (8002f78 <HAL_RCC_ClockConfig+0x35c>)
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <HAL_RCC_ClockConfig+0x360>)
 8002f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f54:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <HAL_RCC_ClockConfig+0x364>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_RCC_ClockConfig+0x368>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fefe 	bl	8000d60 <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400
 8002f78:	0800be40 	.word	0x0800be40
 8002f7c:	24000004 	.word	0x24000004
 8002f80:	24000000 	.word	0x24000000
 8002f84:	24000008 	.word	0x24000008

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8e:	4bb3      	ldr	r3, [pc, #716]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f96:	2b18      	cmp	r3, #24
 8002f98:	f200 8155 	bhi.w	8003246 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08003009 	.word	0x08003009
 8002fa8:	08003247 	.word	0x08003247
 8002fac:	08003247 	.word	0x08003247
 8002fb0:	08003247 	.word	0x08003247
 8002fb4:	08003247 	.word	0x08003247
 8002fb8:	08003247 	.word	0x08003247
 8002fbc:	08003247 	.word	0x08003247
 8002fc0:	08003247 	.word	0x08003247
 8002fc4:	0800302f 	.word	0x0800302f
 8002fc8:	08003247 	.word	0x08003247
 8002fcc:	08003247 	.word	0x08003247
 8002fd0:	08003247 	.word	0x08003247
 8002fd4:	08003247 	.word	0x08003247
 8002fd8:	08003247 	.word	0x08003247
 8002fdc:	08003247 	.word	0x08003247
 8002fe0:	08003247 	.word	0x08003247
 8002fe4:	08003035 	.word	0x08003035
 8002fe8:	08003247 	.word	0x08003247
 8002fec:	08003247 	.word	0x08003247
 8002ff0:	08003247 	.word	0x08003247
 8002ff4:	08003247 	.word	0x08003247
 8002ff8:	08003247 	.word	0x08003247
 8002ffc:	08003247 	.word	0x08003247
 8003000:	08003247 	.word	0x08003247
 8003004:	0800303b 	.word	0x0800303b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003008:	4b94      	ldr	r3, [pc, #592]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003014:	4b91      	ldr	r3, [pc, #580]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	08db      	lsrs	r3, r3, #3
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	4a90      	ldr	r2, [pc, #576]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
 8003024:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003026:	e111      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003028:	4b8d      	ldr	r3, [pc, #564]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800302a:	61bb      	str	r3, [r7, #24]
      break;
 800302c:	e10e      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800302e:	4b8d      	ldr	r3, [pc, #564]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003030:	61bb      	str	r3, [r7, #24]
      break;
 8003032:	e10b      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003034:	4b8c      	ldr	r3, [pc, #560]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003036:	61bb      	str	r3, [r7, #24]
      break;
 8003038:	e108      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800303a:	4b88      	ldr	r3, [pc, #544]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003044:	4b85      	ldr	r3, [pc, #532]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800304e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003050:	4b82      	ldr	r3, [pc, #520]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800305a:	4b80      	ldr	r3, [pc, #512]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80e1 	beq.w	8003240 <HAL_RCC_GetSysClockFreq+0x2b8>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b02      	cmp	r3, #2
 8003082:	f000 8083 	beq.w	800318c <HAL_RCC_GetSysClockFreq+0x204>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b02      	cmp	r3, #2
 800308a:	f200 80a1 	bhi.w	80031d0 <HAL_RCC_GetSysClockFreq+0x248>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x114>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d056      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x1c0>
 800309a:	e099      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800309c:	4b6f      	ldr	r3, [pc, #444]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02d      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030a8:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	4a6b      	ldr	r2, [pc, #428]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	4b62      	ldr	r3, [pc, #392]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003102:	e087      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003270 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003116:	4b51      	ldr	r3, [pc, #324]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003126:	ed97 6a02 	vldr	s12, [r7, #8]
 800312a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 800312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003146:	e065      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003274 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315a:	4b40      	ldr	r3, [pc, #256]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	ed97 6a02 	vldr	s12, [r7, #8]
 800316e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800318a:	e043      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003278 <HAL_RCC_GetSysClockFreq+0x2f0>
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b2f      	ldr	r3, [pc, #188]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ce:	e021      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003274 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e2:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003212:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	0a5b      	lsrs	r3, r3, #9
 800321a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800321e:	3301      	adds	r3, #1
 8003220:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800322c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003238:	ee17 3a90 	vmov	r3, s15
 800323c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800323e:	e005      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]
      break;
 8003244:	e002      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003248:	61bb      	str	r3, [r7, #24]
      break;
 800324a:	bf00      	nop
  }

  return sysclockfreq;
 800324c:	69bb      	ldr	r3, [r7, #24]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	58024400 	.word	0x58024400
 8003260:	03d09000 	.word	0x03d09000
 8003264:	003d0900 	.word	0x003d0900
 8003268:	007a1200 	.word	0x007a1200
 800326c:	46000000 	.word	0x46000000
 8003270:	4c742400 	.word	0x4c742400
 8003274:	4a742400 	.word	0x4a742400
 8003278:	4af42400 	.word	0x4af42400

0800327c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003282:	f7ff fe81 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <HAL_RCC_GetHCLKFreq+0x50>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490f      	ldr	r1, [pc, #60]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032a0:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_RCC_GetHCLKFreq+0x50>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ba:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024400 	.word	0x58024400
 80032d0:	0800be40 	.word	0x0800be40
 80032d4:	24000004 	.word	0x24000004
 80032d8:	24000000 	.word	0x24000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032e0:	f7ff ffcc 	bl	800327c <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4904      	ldr	r1, [pc, #16]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58024400 	.word	0x58024400
 8003304:	0800be40 	.word	0x0800be40

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800330c:	f7ff ffb6 	bl	800327c <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4904      	ldr	r1, [pc, #16]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58024400 	.word	0x58024400
 8003330:	0800be40 	.word	0x0800be40

08003334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	223f      	movs	r2, #63	@ 0x3f
 8003342:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0207 	and.w	r2, r3, #7
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003350:	4b17      	ldr	r3, [pc, #92]	@ (80033b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800335c:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <HAL_RCC_GetClockConfig+0x7c>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003368:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <HAL_RCC_GetClockConfig+0x7c>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003374:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_RCC_GetClockConfig+0x7c>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800338c:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <HAL_RCC_GetClockConfig+0x7c>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003398:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_RCC_GetClockConfig+0x80>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 020f 	and.w	r2, r3, #15
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	601a      	str	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	58024400 	.word	0x58024400
 80033b4:	52002000 	.word	0x52002000

080033b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b0c6      	sub	sp, #280	@ 0x118
 80033be:	af00      	add	r7, sp, #0
 80033c0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c4:	2300      	movs	r3, #0
 80033c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033dc:	2500      	movs	r5, #0
 80033de:	ea54 0305 	orrs.w	r3, r4, r5
 80033e2:	d049      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ee:	d02f      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033f4:	d828      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fa:	d01a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003400:	d822      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340a:	d007      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800340c:	e01c      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340e:	4bab      	ldr	r3, [pc, #684]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	4aaa      	ldr	r2, [pc, #680]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003418:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800341a:	e01a      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800341c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003420:	3308      	adds	r3, #8
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fc25 	bl	8004c74 <RCCEx_PLL2_Config>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003430:	e00f      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003436:	3328      	adds	r3, #40	@ 0x28
 8003438:	2102      	movs	r1, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fccc 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003446:	e004      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003452:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10a      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800345a:	4b98      	ldr	r3, [pc, #608]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800345c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003468:	4a94      	ldr	r2, [pc, #592]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800346a:	430b      	orrs	r3, r1
 800346c:	6513      	str	r3, [r2, #80]	@ 0x50
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003474:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003484:	f04f 0900 	mov.w	r9, #0
 8003488:	ea58 0309 	orrs.w	r3, r8, r9
 800348c:	d047      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800348e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003494:	2b04      	cmp	r3, #4
 8003496:	d82a      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003498:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800349a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349e:	bf00      	nop
 80034a0:	080034b5 	.word	0x080034b5
 80034a4:	080034c3 	.word	0x080034c3
 80034a8:	080034d9 	.word	0x080034d9
 80034ac:	080034f7 	.word	0x080034f7
 80034b0:	080034f7 	.word	0x080034f7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b4:	4b81      	ldr	r3, [pc, #516]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	4a80      	ldr	r2, [pc, #512]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c0:	e01a      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c6:	3308      	adds	r3, #8
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fbd2 	bl	8004c74 <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d6:	e00f      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034dc:	3328      	adds	r3, #40	@ 0x28
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fc79 	bl	8004dd8 <RCCEx_PLL3_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ec:	e004      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003500:	4b6e      	ldr	r3, [pc, #440]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003504:	f023 0107 	bic.w	r1, r3, #7
 8003508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350e:	4a6b      	ldr	r2, [pc, #428]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6513      	str	r3, [r2, #80]	@ 0x50
 8003514:	e003      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800351a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800351e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800352a:	f04f 0b00 	mov.w	fp, #0
 800352e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003532:	d05b      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800353c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003540:	d03b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003542:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003546:	d834      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003548:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800354c:	d037      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x206>
 800354e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003552:	d82e      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003554:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003558:	d033      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800355a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800355e:	d828      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003560:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003564:	d01a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356a:	d822      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003570:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003574:	d007      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003576:	e01c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4b50      	ldr	r3, [pc, #320]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	4a4f      	ldr	r2, [pc, #316]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003584:	e01e      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358a:	3308      	adds	r3, #8
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fb70 	bl	8004c74 <RCCEx_PLL2_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800359a:	e013      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	3328      	adds	r3, #40	@ 0x28
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fc17 	bl	8004dd8 <RCCEx_PLL3_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035b0:	e008      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035b8:	e004      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035cc:	4b3b      	ldr	r3, [pc, #236]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035dc:	4a37      	ldr	r2, [pc, #220]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035de:	430b      	orrs	r3, r1
 80035e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035e2:	e003      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003602:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d05d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800360c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003610:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003614:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003618:	d03b      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800361a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800361e:	d834      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003624:	d037      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003626:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800362a:	d82e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800362c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003630:	d033      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003632:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003636:	d828      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800363c:	d01a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800363e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003642:	d822      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800364c:	d007      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800364e:	e01c      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003650:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	4a19      	ldr	r2, [pc, #100]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365c:	e01e      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800365e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003662:	3308      	adds	r3, #8
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fb04 	bl	8004c74 <RCCEx_PLL2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003672:	e013      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003678:	3328      	adds	r3, #40	@ 0x28
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f001 fbab 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003688:	e008      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003690:	e004      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800369a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10d      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036a4:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036b4:	4a01      	ldr	r2, [pc, #4]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ba:	e005      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036de:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	d03a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ee:	2b30      	cmp	r3, #48	@ 0x30
 80036f0:	d01f      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80036f2:	2b30      	cmp	r3, #48	@ 0x30
 80036f4:	d819      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d00c      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d815      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d019      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003702:	2b10      	cmp	r3, #16
 8003704:	d111      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003706:	4baa      	ldr	r3, [pc, #680]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	4aa9      	ldr	r2, [pc, #676]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800370c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003710:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003712:	e011      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003718:	3308      	adds	r3, #8
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 faa9 	bl	8004c74 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003740:	4b9b      	ldr	r3, [pc, #620]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003744:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4a98      	ldr	r2, [pc, #608]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003750:	430b      	orrs	r3, r1
 8003752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800375a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800375e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800376a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003774:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003778:	460b      	mov	r3, r1
 800377a:	4313      	orrs	r3, r2
 800377c:	d051      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800377e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003788:	d035      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800378a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378e:	d82e      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003790:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003794:	d031      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003796:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800379a:	d828      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 800379c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a0:	d01a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a6:	d822      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x436>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b0:	d007      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80037b2:	e01c      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b4:	4b7e      	ldr	r3, [pc, #504]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b8:	4a7d      	ldr	r2, [pc, #500]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c0:	e01c      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c6:	3308      	adds	r3, #8
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fa52 	bl	8004c74 <RCCEx_PLL2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037d6:	e011      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037dc:	3328      	adds	r3, #40	@ 0x28
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 faf9 	bl	8004dd8 <RCCEx_PLL3_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003804:	4b6a      	ldr	r3, [pc, #424]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003808:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800380c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003812:	4a67      	ldr	r2, [pc, #412]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003814:	430b      	orrs	r3, r1
 8003816:	6513      	str	r3, [r2, #80]	@ 0x50
 8003818:	e003      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800381e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800382e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003838:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800383c:	460b      	mov	r3, r1
 800383e:	4313      	orrs	r3, r2
 8003840:	d053      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800384c:	d033      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800384e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003852:	d82c      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003854:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003858:	d02f      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x502>
 800385a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800385e:	d826      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003860:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003864:	d02b      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003866:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800386a:	d820      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800386c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003870:	d012      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003876:	d81a      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d022      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d115      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003886:	3308      	adds	r3, #8
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f9f2 	bl	8004c74 <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003896:	e015      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800389c:	3328      	adds	r3, #40	@ 0x28
 800389e:	2101      	movs	r1, #1
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 fa99 	bl	8004dd8 <RCCEx_PLL3_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038ac:	e00a      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038b4:	e006      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038b6:	bf00      	nop
 80038b8:	e004      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038ba:	bf00      	nop
 80038bc:	e002      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038cc:	4b38      	ldr	r3, [pc, #224]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	4a35      	ldr	r2, [pc, #212]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	6513      	str	r3, [r2, #80]	@ 0x50
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003900:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003904:	460b      	mov	r3, r1
 8003906:	4313      	orrs	r3, r2
 8003908:	d058      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800390a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800390e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003916:	d033      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800391c:	d82c      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003922:	d02f      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003928:	d826      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800392a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800392e:	d02b      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003934:	d820      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800393a:	d012      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800393c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003940:	d81a      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d022      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800394a:	d115      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003950:	3308      	adds	r3, #8
 8003952:	2101      	movs	r1, #1
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f98d 	bl	8004c74 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003960:	e015      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003966:	3328      	adds	r3, #40	@ 0x28
 8003968:	2101      	movs	r1, #1
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fa34 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003976:	e00a      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800397e:	e006      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003980:	bf00      	nop
 8003982:	e004      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003984:	bf00      	nop
 8003986:	e002      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003988:	bf00      	nop
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800398c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10e      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800399e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039a6:	4a02      	ldr	r2, [pc, #8]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ac:	e006      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039ae:	bf00      	nop
 80039b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4313      	orrs	r3, r2
 80039da:	d037      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e6:	d00e      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ec:	d816      	bhi.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d018      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039f6:	d111      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4bc4      	ldr	r3, [pc, #784]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	4ac3      	ldr	r2, [pc, #780]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a04:	e00f      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 f930 	bl	8004c74 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a1a:	e004      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a22:	e000      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a2e:	4bb7      	ldr	r3, [pc, #732]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a3c:	4ab3      	ldr	r2, [pc, #716]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a42:	e003      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d039      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d81c      	bhi.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a76:	a201      	add	r2, pc, #4	@ (adr r2, 8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003ab9 	.word	0x08003ab9
 8003a80:	08003a8d 	.word	0x08003a8d
 8003a84:	08003a9b 	.word	0x08003a9b
 8003a88:	08003ab9 	.word	0x08003ab9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8c:	4b9f      	ldr	r3, [pc, #636]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	4a9e      	ldr	r2, [pc, #632]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a98:	e00f      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 f8e6 	bl	8004c74 <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ac2:	4b92      	ldr	r3, [pc, #584]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	f023 0103 	bic.w	r1, r3, #3
 8003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad0:	4a8e      	ldr	r2, [pc, #568]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ad6:	e003      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003aec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003af6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f000 8099 	beq.w	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b02:	4b83      	ldr	r3, [pc, #524]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a82      	ldr	r2, [pc, #520]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b0e:	f7fd fbe7 	bl	80012e0 <HAL_GetTick>
 8003b12:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b16:	e00b      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fd fbe2 	bl	80012e0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b64      	cmp	r3, #100	@ 0x64
 8003b26:	d903      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b2e:	e005      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b30:	4b77      	ldr	r3, [pc, #476]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ed      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d173      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b44:	4b71      	ldr	r3, [pc, #452]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b50:	4053      	eors	r3, r2
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b66:	4b69      	ldr	r3, [pc, #420]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	4a68      	ldr	r2, [pc, #416]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b72:	4b66      	ldr	r3, [pc, #408]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	4a65      	ldr	r2, [pc, #404]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b7e:	4a63      	ldr	r2, [pc, #396]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b92:	d118      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b94:	f7fd fba4 	bl	80012e0 <HAL_GetTick>
 8003b98:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b9c:	e00d      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b9e:	f7fd fb9f 	bl	80012e0 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ba8:	1ad2      	subs	r2, r2, r3
 8003baa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d903      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003bb8:	e005      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bba:	4b54      	ldr	r3, [pc, #336]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0eb      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d129      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bde:	d10e      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003be0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bf0:	091a      	lsrs	r2, r3, #4
 8003bf2:	4b48      	ldr	r3, [pc, #288]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	4a45      	ldr	r2, [pc, #276]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6113      	str	r3, [r2, #16]
 8003bfc:	e005      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003bfe:	4b43      	ldr	r3, [pc, #268]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	4a42      	ldr	r2, [pc, #264]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c08:	6113      	str	r3, [r2, #16]
 8003c0a:	4b40      	ldr	r3, [pc, #256]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c0c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1a:	4a3c      	ldr	r2, [pc, #240]	@ (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c20:	e008      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003c2a:	e003      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f002 0301 	and.w	r3, r2, #1
 8003c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f000 808f 	beq.w	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c5c:	2b28      	cmp	r3, #40	@ 0x28
 8003c5e:	d871      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c60:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003d4d 	.word	0x08003d4d
 8003c6c:	08003d45 	.word	0x08003d45
 8003c70:	08003d45 	.word	0x08003d45
 8003c74:	08003d45 	.word	0x08003d45
 8003c78:	08003d45 	.word	0x08003d45
 8003c7c:	08003d45 	.word	0x08003d45
 8003c80:	08003d45 	.word	0x08003d45
 8003c84:	08003d45 	.word	0x08003d45
 8003c88:	08003d19 	.word	0x08003d19
 8003c8c:	08003d45 	.word	0x08003d45
 8003c90:	08003d45 	.word	0x08003d45
 8003c94:	08003d45 	.word	0x08003d45
 8003c98:	08003d45 	.word	0x08003d45
 8003c9c:	08003d45 	.word	0x08003d45
 8003ca0:	08003d45 	.word	0x08003d45
 8003ca4:	08003d45 	.word	0x08003d45
 8003ca8:	08003d2f 	.word	0x08003d2f
 8003cac:	08003d45 	.word	0x08003d45
 8003cb0:	08003d45 	.word	0x08003d45
 8003cb4:	08003d45 	.word	0x08003d45
 8003cb8:	08003d45 	.word	0x08003d45
 8003cbc:	08003d45 	.word	0x08003d45
 8003cc0:	08003d45 	.word	0x08003d45
 8003cc4:	08003d45 	.word	0x08003d45
 8003cc8:	08003d4d 	.word	0x08003d4d
 8003ccc:	08003d45 	.word	0x08003d45
 8003cd0:	08003d45 	.word	0x08003d45
 8003cd4:	08003d45 	.word	0x08003d45
 8003cd8:	08003d45 	.word	0x08003d45
 8003cdc:	08003d45 	.word	0x08003d45
 8003ce0:	08003d45 	.word	0x08003d45
 8003ce4:	08003d45 	.word	0x08003d45
 8003ce8:	08003d4d 	.word	0x08003d4d
 8003cec:	08003d45 	.word	0x08003d45
 8003cf0:	08003d45 	.word	0x08003d45
 8003cf4:	08003d45 	.word	0x08003d45
 8003cf8:	08003d45 	.word	0x08003d45
 8003cfc:	08003d45 	.word	0x08003d45
 8003d00:	08003d45 	.word	0x08003d45
 8003d04:	08003d45 	.word	0x08003d45
 8003d08:	08003d4d 	.word	0x08003d4d
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	58024800 	.word	0x58024800
 8003d14:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ffa7 	bl	8004c74 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d32:	3328      	adds	r3, #40	@ 0x28
 8003d34:	2101      	movs	r1, #1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f84e 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d56:	4bbf      	ldr	r3, [pc, #764]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d64:	4abb      	ldr	r2, [pc, #748]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 0302 	and.w	r3, r2, #2
 8003d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d041      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d824      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003df1 	.word	0x08003df1
 8003da8:	08003dbd 	.word	0x08003dbd
 8003dac:	08003dd3 	.word	0x08003dd3
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003df1 	.word	0x08003df1
 8003db8:	08003df1 	.word	0x08003df1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 ff55 	bl	8004c74 <RCCEx_PLL2_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e00f      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd6:	3328      	adds	r3, #40	@ 0x28
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fffc 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003de6:	e004      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dee:	e000      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dfa:	4b96      	ldr	r3, [pc, #600]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfe:	f023 0107 	bic.w	r1, r3, #7
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e08:	4a92      	ldr	r2, [pc, #584]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e0a:	430b      	orrs	r3, r1
 8003e0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e0e:	e003      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f002 0304 	and.w	r3, r2, #4
 8003e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	d044      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e40:	2b05      	cmp	r3, #5
 8003e42:	d825      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003e44:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e99 	.word	0x08003e99
 8003e50:	08003e65 	.word	0x08003e65
 8003e54:	08003e7b 	.word	0x08003e7b
 8003e58:	08003e99 	.word	0x08003e99
 8003e5c:	08003e99 	.word	0x08003e99
 8003e60:	08003e99 	.word	0x08003e99
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e68:	3308      	adds	r3, #8
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 ff01 	bl	8004c74 <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e78:	e00f      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7e:	3328      	adds	r3, #40	@ 0x28
 8003e80:	2101      	movs	r1, #1
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 ffa8 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e8e:	e004      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea6:	f023 0107 	bic.w	r1, r3, #7
 8003eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb2:	4a68      	ldr	r2, [pc, #416]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ebe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f002 0320 	and.w	r3, r2, #32
 8003ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ed8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	d055      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eee:	d033      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ef4:	d82c      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efa:	d02f      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f00:	d826      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f06:	d02b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f0c:	d820      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f12:	d012      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f18:	d81a      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d022      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f22:	d115      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f28:	3308      	adds	r3, #8
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fea1 	bl	8004c74 <RCCEx_PLL2_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f38:	e015      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3e:	3328      	adds	r3, #40	@ 0x28
 8003f40:	2102      	movs	r1, #2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 ff48 	bl	8004dd8 <RCCEx_PLL3_Config>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f56:	e006      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e002      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f6e:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f7e:	4a35      	ldr	r2, [pc, #212]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f84:	e003      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fa4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d058      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fb6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fba:	d033      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fbc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fc0:	d82c      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc6:	d02f      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fcc:	d826      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fd2:	d02b      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fd8:	d820      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fde:	d012      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fe4:	d81a      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d022      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fee:	d115      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fe3b 	bl	8004c74 <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004004:	e015      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400a:	3328      	adds	r3, #40	@ 0x28
 800400c:	2102      	movs	r1, #2
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fee2 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800401a:	e00a      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004022:	e006      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004024:	bf00      	nop
 8004026:	e004      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004028:	bf00      	nop
 800402a:	e002      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800402c:	bf00      	nop
 800402e:	e000      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004032:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10e      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004046:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800404a:	4a02      	ldr	r2, [pc, #8]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800404c:	430b      	orrs	r3, r1
 800404e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004052:	bf00      	nop
 8004054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800405c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800406c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004076:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	d055      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004088:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800408c:	d033      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800408e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004092:	d82c      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004098:	d02f      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800409a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800409e:	d826      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040a4:	d02b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040aa:	d820      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b0:	d012      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80040b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b6:	d81a      	bhi.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d022      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c0:	d115      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c6:	3308      	adds	r3, #8
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fdd2 	bl	8004c74 <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040d6:	e015      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040dc:	3328      	adds	r3, #40	@ 0x28
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fe79 	bl	8004dd8 <RCCEx_PLL3_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040ec:	e00a      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004102:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800410c:	4ba0      	ldr	r3, [pc, #640]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004110:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004118:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800411c:	4a9c      	ldr	r2, [pc, #624]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800411e:	430b      	orrs	r3, r1
 8004120:	6593      	str	r3, [r2, #88]	@ 0x58
 8004122:	e003      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004128:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f002 0308 	and.w	r3, r2, #8
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800413c:	2300      	movs	r3, #0
 800413e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004142:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004146:	460b      	mov	r3, r1
 8004148:	4313      	orrs	r3, r2
 800414a:	d01e      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800414c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004158:	d10c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800415a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415e:	3328      	adds	r3, #40	@ 0x28
 8004160:	2102      	movs	r1, #2
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fe38 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004174:	4b86      	ldr	r3, [pc, #536]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800417c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004180:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004184:	4a82      	ldr	r2, [pc, #520]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004186:	430b      	orrs	r3, r1
 8004188:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800418a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f002 0310 	and.w	r3, r2, #16
 8004196:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041a4:	460b      	mov	r3, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	d01e      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b6:	d10c      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041bc:	3328      	adds	r3, #40	@ 0x28
 80041be:	2102      	movs	r1, #2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fe09 	bl	8004dd8 <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d2:	4b6f      	ldr	r3, [pc, #444]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041f6:	2300      	movs	r3, #0
 80041f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041fa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d03e      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004208:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800420c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004210:	d022      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004216:	d81b      	bhi.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004220:	d00b      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004222:	e015      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004228:	3308      	adds	r3, #8
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fd21 	bl	8004c74 <RCCEx_PLL2_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004238:	e00f      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800423a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423e:	3328      	adds	r3, #40	@ 0x28
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fdc8 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800424e:	e004      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004262:	4b4b      	ldr	r3, [pc, #300]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004266:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800426a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800426e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004272:	4a47      	ldr	r2, [pc, #284]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004274:	430b      	orrs	r3, r1
 8004276:	6593      	str	r3, [r2, #88]	@ 0x58
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800428e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004290:	2300      	movs	r3, #0
 8004292:	677b      	str	r3, [r7, #116]	@ 0x74
 8004294:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004298:	460b      	mov	r3, r1
 800429a:	4313      	orrs	r3, r2
 800429c:	d03b      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800429e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042aa:	d01f      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042b0:	d818      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80042b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b6:	d003      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80042b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042bc:	d007      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80042be:	e011      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c0:	4b33      	ldr	r3, [pc, #204]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	4a32      	ldr	r2, [pc, #200]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042cc:	e00f      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d2:	3328      	adds	r3, #40	@ 0x28
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fd7e 	bl	8004dd8 <RCCEx_PLL3_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80042e2:	e004      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042ea:	e000      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80042ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f6:	4b26      	ldr	r3, [pc, #152]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004306:	4a22      	ldr	r2, [pc, #136]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004308:	430b      	orrs	r3, r1
 800430a:	6553      	str	r3, [r2, #84]	@ 0x54
 800430c:	e003      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004312:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004322:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004324:	2300      	movs	r3, #0
 8004326:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004328:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800432c:	460b      	mov	r3, r1
 800432e:	4313      	orrs	r3, r2
 8004330:	d034      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004340:	d007      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004342:	e011      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004344:	4b12      	ldr	r3, [pc, #72]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	4a11      	ldr	r2, [pc, #68]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004350:	e00e      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004356:	3308      	adds	r3, #8
 8004358:	2102      	movs	r1, #2
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fc8a 	bl	8004c74 <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004366:	e003      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800436e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004378:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800437a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800437c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004386:	4a02      	ldr	r2, [pc, #8]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004388:	430b      	orrs	r3, r1
 800438a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800438c:	e006      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043aa:	2300      	movs	r3, #0
 80043ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80043ae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d00c      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043bc:	3328      	adds	r3, #40	@ 0x28
 80043be:	2102      	movs	r1, #2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fd09 	bl	8004dd8 <RCCEx_PLL3_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043e0:	2300      	movs	r3, #0
 80043e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043e4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043e8:	460b      	mov	r3, r1
 80043ea:	4313      	orrs	r3, r2
 80043ec:	d036      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f8:	d018      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80043fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043fe:	d811      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004404:	d014      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440a:	d80b      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d011      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004414:	d106      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004416:	4bb7      	ldr	r3, [pc, #732]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441a:	4ab6      	ldr	r2, [pc, #728]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800441c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004422:	e008      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800442a:	e004      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800442c:	bf00      	nop
 800442e:	e002      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004430:	bf00      	nop
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800443e:	4bad      	ldr	r3, [pc, #692]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004442:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800444c:	4aa9      	ldr	r2, [pc, #676]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800444e:	430b      	orrs	r3, r1
 8004450:	6553      	str	r3, [r2, #84]	@ 0x54
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004468:	653b      	str	r3, [r7, #80]	@ 0x50
 800446a:	2300      	movs	r3, #0
 800446c:	657b      	str	r3, [r7, #84]	@ 0x54
 800446e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004478:	4b9e      	ldr	r3, [pc, #632]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800447a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	4a9b      	ldr	r2, [pc, #620]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800449a:	2300      	movs	r3, #0
 800449c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a8:	4b92      	ldr	r3, [pc, #584]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044b6:	4a8f      	ldr	r2, [pc, #572]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ca:	2300      	movs	r3, #0
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044d8:	4b86      	ldr	r3, [pc, #536]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	4a85      	ldr	r2, [pc, #532]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044e2:	6113      	str	r3, [r2, #16]
 80044e4:	4b83      	ldr	r3, [pc, #524]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044e6:	6919      	ldr	r1, [r3, #16]
 80044e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044f0:	4a80      	ldr	r2, [pc, #512]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044f2:	430b      	orrs	r3, r1
 80044f4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004504:	2300      	movs	r3, #0
 8004506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004508:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004512:	4b78      	ldr	r3, [pc, #480]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004516:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800451a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004520:	4a74      	ldr	r2, [pc, #464]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004522:	430b      	orrs	r3, r1
 8004524:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004532:	633b      	str	r3, [r7, #48]	@ 0x30
 8004534:	2300      	movs	r3, #0
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
 8004538:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800453c:	460b      	mov	r3, r1
 800453e:	4313      	orrs	r3, r2
 8004540:	d00a      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004542:	4b6c      	ldr	r3, [pc, #432]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004546:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800454a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	4a68      	ldr	r2, [pc, #416]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004554:	430b      	orrs	r3, r1
 8004556:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	2100      	movs	r1, #0
 8004562:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d011      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	3308      	adds	r3, #8
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fb79 	bl	8004c74 <RCCEx_PLL2_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004594:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	2100      	movs	r1, #0
 80045a2:	6239      	str	r1, [r7, #32]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	d011      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b8:	3308      	adds	r3, #8
 80045ba:	2101      	movs	r1, #1
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb59 	bl	8004c74 <RCCEx_PLL2_Config>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	2100      	movs	r1, #0
 80045e2:	61b9      	str	r1, [r7, #24]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045ee:	460b      	mov	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	d011      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f8:	3308      	adds	r3, #8
 80045fa:	2102      	movs	r1, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fb39 	bl	8004c74 <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004608:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004614:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	2100      	movs	r1, #0
 8004622:	6139      	str	r1, [r7, #16]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	d011      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004638:	3328      	adds	r3, #40	@ 0x28
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fbcb 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004654:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	2100      	movs	r1, #0
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d011      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004678:	3328      	adds	r3, #40	@ 0x28
 800467a:	2101      	movs	r1, #1
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fbab 	bl	8004dd8 <RCCEx_PLL3_Config>
 8004682:	4603      	mov	r3, r0
 8004684:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004694:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	2100      	movs	r1, #0
 80046a2:	6039      	str	r1, [r7, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d011      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b8:	3328      	adds	r3, #40	@ 0x28
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fb8b 	bl	8004dd8 <RCCEx_PLL3_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80046d8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80046ec:	46bd      	mov	sp, r7
 80046ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f2:	bf00      	nop
 80046f4:	58024400 	.word	0x58024400

080046f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046fc:	f7fe fdbe 	bl	800327c <HAL_RCC_GetHCLKFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4904      	ldr	r1, [pc, #16]	@ (8004720 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004718:	4618      	mov	r0, r3
 800471a:	bd80      	pop	{r7, pc}
 800471c:	58024400 	.word	0x58024400
 8004720:	0800be40 	.word	0x0800be40

08004724 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	@ 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800472c:	4ba1      	ldr	r3, [pc, #644]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004736:	4b9f      	ldr	r3, [pc, #636]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	0b1b      	lsrs	r3, r3, #12
 800473c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004740:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004742:	4b9c      	ldr	r3, [pc, #624]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800474e:	4b99      	ldr	r3, [pc, #612]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004752:	08db      	lsrs	r3, r3, #3
 8004754:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8111 	beq.w	8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b02      	cmp	r3, #2
 8004776:	f000 8083 	beq.w	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f200 80a1 	bhi.w	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d056      	beq.n	800483c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800478e:	e099      	b.n	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004790:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02d      	beq.n	80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800479c:	4b85      	ldr	r3, [pc, #532]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	4a84      	ldr	r2, [pc, #528]	@ (80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c6:	4b7b      	ldr	r3, [pc, #492]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047f6:	e087      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004802:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480a:	4b6a      	ldr	r3, [pc, #424]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004812:	ee07 3a90 	vmov	s15, r3
 8004816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481a:	ed97 6a03 	vldr	s12, [r7, #12]
 800481e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800482e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800483a:	e065      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	ee07 3a90 	vmov	s15, r3
 8004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004846:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800484a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484e:	4b59      	ldr	r3, [pc, #356]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004856:	ee07 3a90 	vmov	s15, r3
 800485a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004862:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800487e:	e043      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800488e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004892:	4b48      	ldr	r3, [pc, #288]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c2:	e021      	b.n	8004908 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004906:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004908:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	0a5b      	lsrs	r3, r3, #9
 800490e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800491e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004922:	edd7 6a07 	vldr	s13, [r7, #28]
 8004926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800492a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492e:	ee17 2a90 	vmov	r2, s15
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004936:	4b1f      	ldr	r3, [pc, #124]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	0c1b      	lsrs	r3, r3, #16
 800493c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800494c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004950:	edd7 6a07 	vldr	s13, [r7, #28]
 8004954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495c:	ee17 2a90 	vmov	r2, s15
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004964:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800497a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800497e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498a:	ee17 2a90 	vmov	r2, s15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004992:	e008      	b.n	80049a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]
}
 80049a6:	bf00      	nop
 80049a8:	3724      	adds	r7, #36	@ 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	58024400 	.word	0x58024400
 80049b8:	03d09000 	.word	0x03d09000
 80049bc:	46000000 	.word	0x46000000
 80049c0:	4c742400 	.word	0x4c742400
 80049c4:	4a742400 	.word	0x4a742400
 80049c8:	4af42400 	.word	0x4af42400

080049cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b089      	sub	sp, #36	@ 0x24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049d4:	4ba1      	ldr	r3, [pc, #644]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049de:	4b9f      	ldr	r3, [pc, #636]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e2:	0d1b      	lsrs	r3, r3, #20
 80049e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049ea:	4b9c      	ldr	r3, [pc, #624]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049f6:	4b99      	ldr	r3, [pc, #612]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	08db      	lsrs	r3, r3, #3
 80049fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8111 	beq.w	8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	f000 8083 	beq.w	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	f200 80a1 	bhi.w	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d056      	beq.n	8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a36:	e099      	b.n	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a38:	4b88      	ldr	r3, [pc, #544]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d02d      	beq.n	8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a44:	4b85      	ldr	r3, [pc, #532]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	4a84      	ldr	r2, [pc, #528]	@ (8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a50:	fa22 f303 	lsr.w	r3, r2, r3
 8004a54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a9e:	e087      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	e065      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004af6:	4b59      	ldr	r3, [pc, #356]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b26:	e043      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3a:	4b48      	ldr	r3, [pc, #288]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6a:	e021      	b.n	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7e:	4b37      	ldr	r3, [pc, #220]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	0a5b      	lsrs	r3, r3, #9
 8004bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd6:	ee17 2a90 	vmov	r2, s15
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bde:	4b1f      	ldr	r3, [pc, #124]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	0c1b      	lsrs	r3, r3, #16
 8004be4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c04:	ee17 2a90 	vmov	r2, s15
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c0c:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c32:	ee17 2a90 	vmov	r2, s15
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	3724      	adds	r7, #36	@ 0x24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	58024400 	.word	0x58024400
 8004c60:	03d09000 	.word	0x03d09000
 8004c64:	46000000 	.word	0x46000000
 8004c68:	4c742400 	.word	0x4c742400
 8004c6c:	4a742400 	.word	0x4a742400
 8004c70:	4af42400 	.word	0x4af42400

08004c74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c82:	4b53      	ldr	r3, [pc, #332]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d101      	bne.n	8004c92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e099      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c92:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fb1f 	bl	80012e0 <HAL_GetTick>
 8004ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ca4:	e008      	b.n	8004cb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ca6:	f7fc fb1b 	bl	80012e0 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e086      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cb8:	4b45      	ldr	r3, [pc, #276]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f0      	bne.n	8004ca6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cc4:	4b42      	ldr	r3, [pc, #264]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	031b      	lsls	r3, r3, #12
 8004cd2:	493f      	ldr	r1, [pc, #252]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	025b      	lsls	r3, r3, #9
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d08:	4931      	ldr	r1, [pc, #196]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d0e:	4b30      	ldr	r3, [pc, #192]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	492d      	ldr	r1, [pc, #180]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d20:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	f023 0220 	bic.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4928      	ldr	r1, [pc, #160]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d32:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d38:	f023 0310 	bic.w	r3, r3, #16
 8004d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d3e:	4b24      	ldr	r3, [pc, #144]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <RCCEx_PLL2_Config+0x160>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	69d2      	ldr	r2, [r2, #28]
 8004d4a:	00d2      	lsls	r2, r2, #3
 8004d4c:	4920      	ldr	r1, [pc, #128]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d52:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	f043 0310 	orr.w	r3, r3, #16
 8004d5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d64:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d70:	e00f      	b.n	8004d92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d78:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	4a14      	ldr	r2, [pc, #80]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d84:	e005      	b.n	8004d92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d86:	4b12      	ldr	r3, [pc, #72]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d92:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fc fa9f 	bl	80012e0 <HAL_GetTick>
 8004da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da4:	e008      	b.n	8004db8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004da6:	f7fc fa9b 	bl	80012e0 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e006      	b.n	8004dc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	ffff0007 	.word	0xffff0007

08004dd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004de6:	4b53      	ldr	r3, [pc, #332]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d101      	bne.n	8004df6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e099      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004df6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a4e      	ldr	r2, [pc, #312]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e02:	f7fc fa6d 	bl	80012e0 <HAL_GetTick>
 8004e06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e0a:	f7fc fa69 	bl	80012e0 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e086      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e1c:	4b45      	ldr	r3, [pc, #276]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e28:	4b42      	ldr	r3, [pc, #264]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	051b      	lsls	r3, r3, #20
 8004e36:	493f      	ldr	r1, [pc, #252]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	025b      	lsls	r3, r3, #9
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	061b      	lsls	r3, r3, #24
 8004e68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e6c:	4931      	ldr	r1, [pc, #196]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e72:	4b30      	ldr	r3, [pc, #192]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	492d      	ldr	r1, [pc, #180]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e84:	4b2b      	ldr	r3, [pc, #172]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4928      	ldr	r1, [pc, #160]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e96:	4b27      	ldr	r3, [pc, #156]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ea2:	4b24      	ldr	r3, [pc, #144]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <RCCEx_PLL3_Config+0x160>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	69d2      	ldr	r2, [r2, #28]
 8004eae:	00d2      	lsls	r2, r2, #3
 8004eb0:	4920      	ldr	r1, [pc, #128]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	4a1e      	ldr	r2, [pc, #120]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	4a19      	ldr	r2, [pc, #100]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ed4:	e00f      	b.n	8004ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d106      	bne.n	8004eea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004edc:	4b15      	ldr	r3, [pc, #84]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	4a14      	ldr	r2, [pc, #80]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ee8:	e005      	b.n	8004ef6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eea:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4a11      	ldr	r2, [pc, #68]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a0e      	ldr	r2, [pc, #56]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f02:	f7fc f9ed 	bl	80012e0 <HAL_GetTick>
 8004f06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f08:	e008      	b.n	8004f1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f0a:	f7fc f9e9 	bl	80012e0 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e006      	b.n	8004f2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f0      	beq.n	8004f0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	58024400 	.word	0x58024400
 8004f38:	ffff0007 	.word	0xffff0007

08004f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e049      	b.n	8004fe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f841 	bl	8004fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3304      	adds	r3, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f000 f9f6 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e05e      	b.n	80050d6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a2b      	ldr	r2, [pc, #172]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d02c      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005042:	d027      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a27      	ldr	r2, [pc, #156]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d022      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a26      	ldr	r2, [pc, #152]	@ (80050ec <HAL_TIM_Base_Start_IT+0xec>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d01d      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a24      	ldr	r2, [pc, #144]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xf0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d018      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a23      	ldr	r2, [pc, #140]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xf4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a21      	ldr	r2, [pc, #132]	@ (80050f8 <HAL_TIM_Base_Start_IT+0xf8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00e      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a20      	ldr	r2, [pc, #128]	@ (80050fc <HAL_TIM_Base_Start_IT+0xfc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <HAL_TIM_Base_Start_IT+0x100>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_TIM_Base_Start_IT+0x94>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <HAL_TIM_Base_Start_IT+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d115      	bne.n	80050c0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <HAL_TIM_Base_Start_IT+0x108>)
 800509c:	4013      	ands	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d015      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0xd2>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ac:	d011      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e008      	b.n	80050d2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	e000      	b.n	80050d4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40010000 	.word	0x40010000
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800
 80050f0:	40000c00 	.word	0x40000c00
 80050f4:	40010400 	.word	0x40010400
 80050f8:	40001800 	.word	0x40001800
 80050fc:	40014000 	.word	0x40014000
 8005100:	4000e000 	.word	0x4000e000
 8005104:	4000e400 	.word	0x4000e400
 8005108:	00010007 	.word	0x00010007

0800510c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d020      	beq.n	8005170 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01b      	beq.n	8005170 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0202 	mvn.w	r2, #2
 8005140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8e9 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8db 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8ec 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d020      	beq.n	80051bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01b      	beq.n	80051bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0204 	mvn.w	r2, #4
 800518c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2202      	movs	r2, #2
 8005192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f8c3 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8b5 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f8c6 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d020      	beq.n	8005208 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01b      	beq.n	8005208 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0208 	mvn.w	r2, #8
 80051d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2204      	movs	r2, #4
 80051de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f89d 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 80051f4:	e005      	b.n	8005202 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f88f 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8a0 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b00      	cmp	r3, #0
 8005210:	d020      	beq.n	8005254 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01b      	beq.n	8005254 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0210 	mvn.w	r2, #16
 8005224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2208      	movs	r2, #8
 800522a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f877 	bl	800532e <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f869 	bl	800531a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f87a 	bl	8005342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0201 	mvn.w	r2, #1
 8005270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fb fc74 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f919 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00c      	beq.n	80052ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f911 	bl	80054ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00c      	beq.n	80052ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f834 	bl	8005356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f003 0320 	and.w	r3, r3, #32
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0220 	mvn.w	r2, #32
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f8d9 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a47      	ldr	r2, [pc, #284]	@ (800549c <TIM_Base_SetConfig+0x130>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a44      	ldr	r2, [pc, #272]	@ (80054a0 <TIM_Base_SetConfig+0x134>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a43      	ldr	r2, [pc, #268]	@ (80054a4 <TIM_Base_SetConfig+0x138>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a42      	ldr	r2, [pc, #264]	@ (80054a8 <TIM_Base_SetConfig+0x13c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a41      	ldr	r2, [pc, #260]	@ (80054ac <TIM_Base_SetConfig+0x140>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d108      	bne.n	80053be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a36      	ldr	r2, [pc, #216]	@ (800549c <TIM_Base_SetConfig+0x130>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d027      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053cc:	d023      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a33      	ldr	r2, [pc, #204]	@ (80054a0 <TIM_Base_SetConfig+0x134>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01f      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a32      	ldr	r2, [pc, #200]	@ (80054a4 <TIM_Base_SetConfig+0x138>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01b      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a31      	ldr	r2, [pc, #196]	@ (80054a8 <TIM_Base_SetConfig+0x13c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d017      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a30      	ldr	r2, [pc, #192]	@ (80054ac <TIM_Base_SetConfig+0x140>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2f      	ldr	r2, [pc, #188]	@ (80054b0 <TIM_Base_SetConfig+0x144>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2e      	ldr	r2, [pc, #184]	@ (80054b4 <TIM_Base_SetConfig+0x148>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2d      	ldr	r2, [pc, #180]	@ (80054b8 <TIM_Base_SetConfig+0x14c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2c      	ldr	r2, [pc, #176]	@ (80054bc <TIM_Base_SetConfig+0x150>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_Base_SetConfig+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2b      	ldr	r2, [pc, #172]	@ (80054c0 <TIM_Base_SetConfig+0x154>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d108      	bne.n	8005428 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800541c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a14      	ldr	r2, [pc, #80]	@ (800549c <TIM_Base_SetConfig+0x130>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0x102>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <TIM_Base_SetConfig+0x140>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0x102>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <TIM_Base_SetConfig+0x144>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x102>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a14      	ldr	r2, [pc, #80]	@ (80054b4 <TIM_Base_SetConfig+0x148>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x102>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a13      	ldr	r2, [pc, #76]	@ (80054b8 <TIM_Base_SetConfig+0x14c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d103      	bne.n	8005476 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f043 0204 	orr.w	r2, r3, #4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40010000 	.word	0x40010000
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40010400 	.word	0x40010400
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40014400 	.word	0x40014400
 80054b8:	40014800 	.word	0x40014800
 80054bc:	4000e000 	.word	0x4000e000
 80054c0:	4000e400 	.word	0x4000e400

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7fb fb51 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2224      	movs	r2, #36	@ 0x24
 800552e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 fb64 	bl	8006c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fcf5 	bl	8005f40 <UART_SetConfig>
 8005556:	4603      	mov	r3, r0
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e01b      	b.n	8005598 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800556e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800557e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fbe3 	bl	8006d5c <UART_CheckIdleState>
 8005596:	4603      	mov	r3, r0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	@ 0x28
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d17b      	bne.n	80056b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <HAL_UART_Transmit+0x26>
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e074      	b.n	80056b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2221      	movs	r2, #33	@ 0x21
 80055d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055da:	f7fb fe81 	bl	80012e0 <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	88fa      	ldrh	r2, [r7, #6]
 80055e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	88fa      	ldrh	r2, [r7, #6]
 80055ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f8:	d108      	bne.n	800560c <HAL_UART_Transmit+0x6c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e003      	b.n	8005614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005614:	e030      	b.n	8005678 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	2180      	movs	r1, #128	@ 0x80
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f001 fc45 	bl	8006eb0 <UART_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e03d      	b.n	80056b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800564c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	3302      	adds	r3, #2
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e007      	b.n	8005666 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	781a      	ldrb	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	3301      	adds	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800566c:	b29b      	uxth	r3, r3
 800566e:	3b01      	subs	r3, #1
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1c8      	bne.n	8005616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	2140      	movs	r1, #64	@ 0x40
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f001 fc0e 	bl	8006eb0 <UART_WaitOnFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e006      	b.n	80056b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
  }
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	@ 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	4613      	mov	r3, r2
 80056c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d137      	bne.n	8005744 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_UART_Receive_IT+0x24>
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e030      	b.n	8005746 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	@ (8005750 <HAL_UART_Receive_IT+0x94>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01f      	beq.n	8005734 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d018      	beq.n	8005734 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	613b      	str	r3, [r7, #16]
   return(result);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	69f9      	ldr	r1, [r7, #28]
 8005726:	6a3a      	ldr	r2, [r7, #32]
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	61bb      	str	r3, [r7, #24]
   return(result);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e6      	bne.n	8005702 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	461a      	mov	r2, r3
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f001 fc26 	bl	8006f8c <UART_Start_Receive_IT>
 8005740:	4603      	mov	r3, r0
 8005742:	e000      	b.n	8005746 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005744:	2302      	movs	r3, #2
  }
}
 8005746:	4618      	mov	r0, r3
 8005748:	3728      	adds	r7, #40	@ 0x28
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	58000c00 	.word	0x58000c00

08005754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b0ba      	sub	sp, #232	@ 0xe8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800577a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800577e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005782:	4013      	ands	r3, r2
 8005784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11b      	bne.n	80057c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d015      	beq.n	80057c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8393 	beq.w	8005ee4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	4798      	blx	r3
      }
      return;
 80057c6:	e38d      	b.n	8005ee4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8123 	beq.w	8005a18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80057d6:	4b8d      	ldr	r3, [pc, #564]	@ (8005a0c <HAL_UART_IRQHandler+0x2b8>)
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80057e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005a10 <HAL_UART_IRQHandler+0x2bc>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 8116 	beq.w	8005a18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d011      	beq.n	800581c <HAL_UART_IRQHandler+0xc8>
 80057f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	f043 0201 	orr.w	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800581c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d011      	beq.n	800584c <HAL_UART_IRQHandler+0xf8>
 8005828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2202      	movs	r2, #2
 800583a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005842:	f043 0204 	orr.w	r2, r3, #4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d011      	beq.n	800587c <HAL_UART_IRQHandler+0x128>
 8005858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2204      	movs	r2, #4
 800586a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005872:	f043 0202 	orr.w	r2, r3, #2
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d017      	beq.n	80058b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005894:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005898:	4b5c      	ldr	r3, [pc, #368]	@ (8005a0c <HAL_UART_IRQHandler+0x2b8>)
 800589a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00b      	beq.n	80058b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2208      	movs	r2, #8
 80058a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ae:	f043 0208 	orr.w	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <HAL_UART_IRQHandler+0x196>
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 82f9 	beq.w	8005ee8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d013      	beq.n	800592a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d105      	bne.n	800591a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800590e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005930:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593e:	2b40      	cmp	r3, #64	@ 0x40
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005946:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800594a:	2b00      	cmp	r3, #0
 800594c:	d054      	beq.n	80059f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fc3e 	bl	80071d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595e:	2b40      	cmp	r3, #64	@ 0x40
 8005960:	d146      	bne.n	80059f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005978:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800597c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3308      	adds	r3, #8
 800598a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800598e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800599a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1d9      	bne.n	8005962 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d017      	beq.n	80059e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059be:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <HAL_UART_IRQHandler+0x2c0>)
 80059c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fc f90b 	bl	8001be4 <HAL_DMA_Abort_IT>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d019      	beq.n	8005a08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80059e2:	4610      	mov	r0, r2
 80059e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e6:	e00f      	b.n	8005a08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa93 	bl	8005f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ee:	e00b      	b.n	8005a08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fa8f 	bl	8005f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f6:	e007      	b.n	8005a08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa8b 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a06:	e26f      	b.n	8005ee8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	bf00      	nop
    return;
 8005a0a:	e26d      	b.n	8005ee8 <HAL_UART_IRQHandler+0x794>
 8005a0c:	10000001 	.word	0x10000001
 8005a10:	04000120 	.word	0x04000120
 8005a14:	0800729d 	.word	0x0800729d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	f040 8203 	bne.w	8005e28 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 81fc 	beq.w	8005e28 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 81f5 	beq.w	8005e28 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2210      	movs	r2, #16
 8005a44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a50:	2b40      	cmp	r3, #64	@ 0x40
 8005a52:	f040 816d 	bne.w	8005d30 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4aa4      	ldr	r2, [pc, #656]	@ (8005cf0 <HAL_UART_IRQHandler+0x59c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d068      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4aa1      	ldr	r2, [pc, #644]	@ (8005cf4 <HAL_UART_IRQHandler+0x5a0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d061      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a9f      	ldr	r2, [pc, #636]	@ (8005cf8 <HAL_UART_IRQHandler+0x5a4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d05a      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a9c      	ldr	r2, [pc, #624]	@ (8005cfc <HAL_UART_IRQHandler+0x5a8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d053      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a9a      	ldr	r2, [pc, #616]	@ (8005d00 <HAL_UART_IRQHandler+0x5ac>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d04c      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a97      	ldr	r2, [pc, #604]	@ (8005d04 <HAL_UART_IRQHandler+0x5b0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d045      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a95      	ldr	r2, [pc, #596]	@ (8005d08 <HAL_UART_IRQHandler+0x5b4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d03e      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a92      	ldr	r2, [pc, #584]	@ (8005d0c <HAL_UART_IRQHandler+0x5b8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d037      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a90      	ldr	r2, [pc, #576]	@ (8005d10 <HAL_UART_IRQHandler+0x5bc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d030      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a8d      	ldr	r2, [pc, #564]	@ (8005d14 <HAL_UART_IRQHandler+0x5c0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d029      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a8b      	ldr	r2, [pc, #556]	@ (8005d18 <HAL_UART_IRQHandler+0x5c4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a88      	ldr	r2, [pc, #544]	@ (8005d1c <HAL_UART_IRQHandler+0x5c8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d01b      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a86      	ldr	r2, [pc, #536]	@ (8005d20 <HAL_UART_IRQHandler+0x5cc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d014      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a83      	ldr	r2, [pc, #524]	@ (8005d24 <HAL_UART_IRQHandler+0x5d0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00d      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a81      	ldr	r2, [pc, #516]	@ (8005d28 <HAL_UART_IRQHandler+0x5d4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d006      	beq.n	8005b36 <HAL_UART_IRQHandler+0x3e2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a7e      	ldr	r2, [pc, #504]	@ (8005d2c <HAL_UART_IRQHandler+0x5d8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d106      	bne.n	8005b44 <HAL_UART_IRQHandler+0x3f0>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	e005      	b.n	8005b50 <HAL_UART_IRQHandler+0x3fc>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80ad 	beq.w	8005cb8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	f080 80a5 	bcs.w	8005cb8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b84:	f000 8087 	beq.w	8005c96 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1da      	bne.n	8005b88 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bf6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e1      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c18:	e853 3f00 	ldrex	r3, [r3]
 8005c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e3      	bne.n	8005c0e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c64:	f023 0310 	bic.w	r3, r3, #16
 8005c68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e4      	bne.n	8005c54 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fb fc89 	bl	80015a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f939 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005cb6:	e119      	b.n	8005eec <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	f040 8112 	bne.w	8005eec <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cd4:	f040 810a 	bne.w	8005eec <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f91e 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
      return;
 8005cec:	e0fe      	b.n	8005eec <HAL_UART_IRQHandler+0x798>
 8005cee:	bf00      	nop
 8005cf0:	40020010 	.word	0x40020010
 8005cf4:	40020028 	.word	0x40020028
 8005cf8:	40020040 	.word	0x40020040
 8005cfc:	40020058 	.word	0x40020058
 8005d00:	40020070 	.word	0x40020070
 8005d04:	40020088 	.word	0x40020088
 8005d08:	400200a0 	.word	0x400200a0
 8005d0c:	400200b8 	.word	0x400200b8
 8005d10:	40020410 	.word	0x40020410
 8005d14:	40020428 	.word	0x40020428
 8005d18:	40020440 	.word	0x40020440
 8005d1c:	40020458 	.word	0x40020458
 8005d20:	40020470 	.word	0x40020470
 8005d24:	40020488 	.word	0x40020488
 8005d28:	400204a0 	.word	0x400204a0
 8005d2c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80cf 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005d52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 80ca 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d80:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e4      	bne.n	8005d5c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	623b      	str	r3, [r7, #32]
   return(result);
 8005da2:	6a3a      	ldr	r2, [r7, #32]
 8005da4:	4b55      	ldr	r3, [pc, #340]	@ (8005efc <HAL_UART_IRQHandler+0x7a8>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005db6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e3      	bne.n	8005d92 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0310 	bic.w	r3, r3, #16
 8005df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69b9      	ldr	r1, [r7, #24]
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e4      	bne.n	8005dde <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f881 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e26:	e063      	b.n	8005ef0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00e      	beq.n	8005e52 <HAL_UART_IRQHandler+0x6fe>
 8005e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 ff84 	bl	8007d58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e50:	e051      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d014      	beq.n	8005e88 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d03a      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
    }
    return;
 8005e86:	e035      	b.n	8005ef4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d009      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x754>
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fa0d 	bl	80072c0 <UART_EndTransmit_IT>
    return;
 8005ea6:	e026      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x774>
 8005eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 ff5d 	bl	8007d80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ec6:	e016      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d010      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
 8005ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da0c      	bge.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 ff45 	bl	8007d6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ee2:	e008      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005ee4:	bf00      	nop
 8005ee6:	e006      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005ee8:	bf00      	nop
 8005eea:	e004      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005eec:	bf00      	nop
 8005eee:	e002      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005ef0:	bf00      	nop
 8005ef2:	e000      	b.n	8005ef6 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005ef4:	bf00      	nop
  }
}
 8005ef6:	37e8      	adds	r7, #232	@ 0xe8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	effffffe 	.word	0xeffffffe

08005f00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f44:	b092      	sub	sp, #72	@ 0x48
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4bbe      	ldr	r3, [pc, #760]	@ (8006268 <UART_SetConfig+0x328>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4ab3      	ldr	r2, [pc, #716]	@ (800626c <UART_SetConfig+0x32c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d004      	beq.n	8005fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	4baf      	ldr	r3, [pc, #700]	@ (8006270 <UART_SetConfig+0x330>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc6:	f023 010f 	bic.w	r1, r3, #15
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4aa6      	ldr	r2, [pc, #664]	@ (8006274 <UART_SetConfig+0x334>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d177      	bne.n	80060d0 <UART_SetConfig+0x190>
 8005fe0:	4ba5      	ldr	r3, [pc, #660]	@ (8006278 <UART_SetConfig+0x338>)
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fe8:	2b28      	cmp	r3, #40	@ 0x28
 8005fea:	d86d      	bhi.n	80060c8 <UART_SetConfig+0x188>
 8005fec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <UART_SetConfig+0xb4>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006099 	.word	0x08006099
 8005ff8:	080060c9 	.word	0x080060c9
 8005ffc:	080060c9 	.word	0x080060c9
 8006000:	080060c9 	.word	0x080060c9
 8006004:	080060c9 	.word	0x080060c9
 8006008:	080060c9 	.word	0x080060c9
 800600c:	080060c9 	.word	0x080060c9
 8006010:	080060c9 	.word	0x080060c9
 8006014:	080060a1 	.word	0x080060a1
 8006018:	080060c9 	.word	0x080060c9
 800601c:	080060c9 	.word	0x080060c9
 8006020:	080060c9 	.word	0x080060c9
 8006024:	080060c9 	.word	0x080060c9
 8006028:	080060c9 	.word	0x080060c9
 800602c:	080060c9 	.word	0x080060c9
 8006030:	080060c9 	.word	0x080060c9
 8006034:	080060a9 	.word	0x080060a9
 8006038:	080060c9 	.word	0x080060c9
 800603c:	080060c9 	.word	0x080060c9
 8006040:	080060c9 	.word	0x080060c9
 8006044:	080060c9 	.word	0x080060c9
 8006048:	080060c9 	.word	0x080060c9
 800604c:	080060c9 	.word	0x080060c9
 8006050:	080060c9 	.word	0x080060c9
 8006054:	080060b1 	.word	0x080060b1
 8006058:	080060c9 	.word	0x080060c9
 800605c:	080060c9 	.word	0x080060c9
 8006060:	080060c9 	.word	0x080060c9
 8006064:	080060c9 	.word	0x080060c9
 8006068:	080060c9 	.word	0x080060c9
 800606c:	080060c9 	.word	0x080060c9
 8006070:	080060c9 	.word	0x080060c9
 8006074:	080060b9 	.word	0x080060b9
 8006078:	080060c9 	.word	0x080060c9
 800607c:	080060c9 	.word	0x080060c9
 8006080:	080060c9 	.word	0x080060c9
 8006084:	080060c9 	.word	0x080060c9
 8006088:	080060c9 	.word	0x080060c9
 800608c:	080060c9 	.word	0x080060c9
 8006090:	080060c9 	.word	0x080060c9
 8006094:	080060c1 	.word	0x080060c1
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800609e:	e326      	b.n	80066ee <UART_SetConfig+0x7ae>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060a6:	e322      	b.n	80066ee <UART_SetConfig+0x7ae>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e31e      	b.n	80066ee <UART_SetConfig+0x7ae>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e31a      	b.n	80066ee <UART_SetConfig+0x7ae>
 80060b8:	2320      	movs	r3, #32
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e316      	b.n	80066ee <UART_SetConfig+0x7ae>
 80060c0:	2340      	movs	r3, #64	@ 0x40
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e312      	b.n	80066ee <UART_SetConfig+0x7ae>
 80060c8:	2380      	movs	r3, #128	@ 0x80
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e30e      	b.n	80066ee <UART_SetConfig+0x7ae>
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a69      	ldr	r2, [pc, #420]	@ (800627c <UART_SetConfig+0x33c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d130      	bne.n	800613c <UART_SetConfig+0x1fc>
 80060da:	4b67      	ldr	r3, [pc, #412]	@ (8006278 <UART_SetConfig+0x338>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d826      	bhi.n	8006134 <UART_SetConfig+0x1f4>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <UART_SetConfig+0x1ac>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006105 	.word	0x08006105
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	08006115 	.word	0x08006115
 80060f8:	0800611d 	.word	0x0800611d
 80060fc:	08006125 	.word	0x08006125
 8006100:	0800612d 	.word	0x0800612d
 8006104:	2300      	movs	r3, #0
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e2f0      	b.n	80066ee <UART_SetConfig+0x7ae>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e2ec      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e2e8      	b.n	80066ee <UART_SetConfig+0x7ae>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e2e4      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006124:	2320      	movs	r3, #32
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612a:	e2e0      	b.n	80066ee <UART_SetConfig+0x7ae>
 800612c:	2340      	movs	r3, #64	@ 0x40
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e2dc      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006134:	2380      	movs	r3, #128	@ 0x80
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613a:	e2d8      	b.n	80066ee <UART_SetConfig+0x7ae>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4f      	ldr	r2, [pc, #316]	@ (8006280 <UART_SetConfig+0x340>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d130      	bne.n	80061a8 <UART_SetConfig+0x268>
 8006146:	4b4c      	ldr	r3, [pc, #304]	@ (8006278 <UART_SetConfig+0x338>)
 8006148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	2b05      	cmp	r3, #5
 8006150:	d826      	bhi.n	80061a0 <UART_SetConfig+0x260>
 8006152:	a201      	add	r2, pc, #4	@ (adr r2, 8006158 <UART_SetConfig+0x218>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	08006171 	.word	0x08006171
 800615c:	08006179 	.word	0x08006179
 8006160:	08006181 	.word	0x08006181
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e2ba      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006178:	2304      	movs	r3, #4
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e2b6      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006180:	2308      	movs	r3, #8
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e2b2      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e2ae      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006190:	2320      	movs	r3, #32
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006196:	e2aa      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006198:	2340      	movs	r3, #64	@ 0x40
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e2a6      	b.n	80066ee <UART_SetConfig+0x7ae>
 80061a0:	2380      	movs	r3, #128	@ 0x80
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a6:	e2a2      	b.n	80066ee <UART_SetConfig+0x7ae>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a35      	ldr	r2, [pc, #212]	@ (8006284 <UART_SetConfig+0x344>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d130      	bne.n	8006214 <UART_SetConfig+0x2d4>
 80061b2:	4b31      	ldr	r3, [pc, #196]	@ (8006278 <UART_SetConfig+0x338>)
 80061b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d826      	bhi.n	800620c <UART_SetConfig+0x2cc>
 80061be:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <UART_SetConfig+0x284>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061dd 	.word	0x080061dd
 80061c8:	080061e5 	.word	0x080061e5
 80061cc:	080061ed 	.word	0x080061ed
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e284      	b.n	80066ee <UART_SetConfig+0x7ae>
 80061e4:	2304      	movs	r3, #4
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e280      	b.n	80066ee <UART_SetConfig+0x7ae>
 80061ec:	2308      	movs	r3, #8
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e27c      	b.n	80066ee <UART_SetConfig+0x7ae>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e278      	b.n	80066ee <UART_SetConfig+0x7ae>
 80061fc:	2320      	movs	r3, #32
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006202:	e274      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006204:	2340      	movs	r3, #64	@ 0x40
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620a:	e270      	b.n	80066ee <UART_SetConfig+0x7ae>
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006212:	e26c      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1b      	ldr	r2, [pc, #108]	@ (8006288 <UART_SetConfig+0x348>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d142      	bne.n	80062a4 <UART_SetConfig+0x364>
 800621e:	4b16      	ldr	r3, [pc, #88]	@ (8006278 <UART_SetConfig+0x338>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b05      	cmp	r3, #5
 8006228:	d838      	bhi.n	800629c <UART_SetConfig+0x35c>
 800622a:	a201      	add	r2, pc, #4	@ (adr r2, 8006230 <UART_SetConfig+0x2f0>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006249 	.word	0x08006249
 8006234:	08006251 	.word	0x08006251
 8006238:	08006259 	.word	0x08006259
 800623c:	08006261 	.word	0x08006261
 8006240:	0800628d 	.word	0x0800628d
 8006244:	08006295 	.word	0x08006295
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e24e      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e24a      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e246      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e242      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006268:	cfff69f3 	.word	0xcfff69f3
 800626c:	58000c00 	.word	0x58000c00
 8006270:	11fff4ff 	.word	0x11fff4ff
 8006274:	40011000 	.word	0x40011000
 8006278:	58024400 	.word	0x58024400
 800627c:	40004400 	.word	0x40004400
 8006280:	40004800 	.word	0x40004800
 8006284:	40004c00 	.word	0x40004c00
 8006288:	40005000 	.word	0x40005000
 800628c:	2320      	movs	r3, #32
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e22c      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006294:	2340      	movs	r3, #64	@ 0x40
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e228      	b.n	80066ee <UART_SetConfig+0x7ae>
 800629c:	2380      	movs	r3, #128	@ 0x80
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e224      	b.n	80066ee <UART_SetConfig+0x7ae>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4ab1      	ldr	r2, [pc, #708]	@ (8006570 <UART_SetConfig+0x630>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d176      	bne.n	800639c <UART_SetConfig+0x45c>
 80062ae:	4bb1      	ldr	r3, [pc, #708]	@ (8006574 <UART_SetConfig+0x634>)
 80062b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062b6:	2b28      	cmp	r3, #40	@ 0x28
 80062b8:	d86c      	bhi.n	8006394 <UART_SetConfig+0x454>
 80062ba:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <UART_SetConfig+0x380>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	08006365 	.word	0x08006365
 80062c4:	08006395 	.word	0x08006395
 80062c8:	08006395 	.word	0x08006395
 80062cc:	08006395 	.word	0x08006395
 80062d0:	08006395 	.word	0x08006395
 80062d4:	08006395 	.word	0x08006395
 80062d8:	08006395 	.word	0x08006395
 80062dc:	08006395 	.word	0x08006395
 80062e0:	0800636d 	.word	0x0800636d
 80062e4:	08006395 	.word	0x08006395
 80062e8:	08006395 	.word	0x08006395
 80062ec:	08006395 	.word	0x08006395
 80062f0:	08006395 	.word	0x08006395
 80062f4:	08006395 	.word	0x08006395
 80062f8:	08006395 	.word	0x08006395
 80062fc:	08006395 	.word	0x08006395
 8006300:	08006375 	.word	0x08006375
 8006304:	08006395 	.word	0x08006395
 8006308:	08006395 	.word	0x08006395
 800630c:	08006395 	.word	0x08006395
 8006310:	08006395 	.word	0x08006395
 8006314:	08006395 	.word	0x08006395
 8006318:	08006395 	.word	0x08006395
 800631c:	08006395 	.word	0x08006395
 8006320:	0800637d 	.word	0x0800637d
 8006324:	08006395 	.word	0x08006395
 8006328:	08006395 	.word	0x08006395
 800632c:	08006395 	.word	0x08006395
 8006330:	08006395 	.word	0x08006395
 8006334:	08006395 	.word	0x08006395
 8006338:	08006395 	.word	0x08006395
 800633c:	08006395 	.word	0x08006395
 8006340:	08006385 	.word	0x08006385
 8006344:	08006395 	.word	0x08006395
 8006348:	08006395 	.word	0x08006395
 800634c:	08006395 	.word	0x08006395
 8006350:	08006395 	.word	0x08006395
 8006354:	08006395 	.word	0x08006395
 8006358:	08006395 	.word	0x08006395
 800635c:	08006395 	.word	0x08006395
 8006360:	0800638d 	.word	0x0800638d
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800636a:	e1c0      	b.n	80066ee <UART_SetConfig+0x7ae>
 800636c:	2304      	movs	r3, #4
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006372:	e1bc      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006374:	2308      	movs	r3, #8
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800637a:	e1b8      	b.n	80066ee <UART_SetConfig+0x7ae>
 800637c:	2310      	movs	r3, #16
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006382:	e1b4      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006384:	2320      	movs	r3, #32
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638a:	e1b0      	b.n	80066ee <UART_SetConfig+0x7ae>
 800638c:	2340      	movs	r3, #64	@ 0x40
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006392:	e1ac      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006394:	2380      	movs	r3, #128	@ 0x80
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e1a8      	b.n	80066ee <UART_SetConfig+0x7ae>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a75      	ldr	r2, [pc, #468]	@ (8006578 <UART_SetConfig+0x638>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d130      	bne.n	8006408 <UART_SetConfig+0x4c8>
 80063a6:	4b73      	ldr	r3, [pc, #460]	@ (8006574 <UART_SetConfig+0x634>)
 80063a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	d826      	bhi.n	8006400 <UART_SetConfig+0x4c0>
 80063b2:	a201      	add	r2, pc, #4	@ (adr r2, 80063b8 <UART_SetConfig+0x478>)
 80063b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b8:	080063d1 	.word	0x080063d1
 80063bc:	080063d9 	.word	0x080063d9
 80063c0:	080063e1 	.word	0x080063e1
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d6:	e18a      	b.n	80066ee <UART_SetConfig+0x7ae>
 80063d8:	2304      	movs	r3, #4
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063de:	e186      	b.n	80066ee <UART_SetConfig+0x7ae>
 80063e0:	2308      	movs	r3, #8
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e6:	e182      	b.n	80066ee <UART_SetConfig+0x7ae>
 80063e8:	2310      	movs	r3, #16
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ee:	e17e      	b.n	80066ee <UART_SetConfig+0x7ae>
 80063f0:	2320      	movs	r3, #32
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e17a      	b.n	80066ee <UART_SetConfig+0x7ae>
 80063f8:	2340      	movs	r3, #64	@ 0x40
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e176      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006400:	2380      	movs	r3, #128	@ 0x80
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e172      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a5b      	ldr	r2, [pc, #364]	@ (800657c <UART_SetConfig+0x63c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d130      	bne.n	8006474 <UART_SetConfig+0x534>
 8006412:	4b58      	ldr	r3, [pc, #352]	@ (8006574 <UART_SetConfig+0x634>)
 8006414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	2b05      	cmp	r3, #5
 800641c:	d826      	bhi.n	800646c <UART_SetConfig+0x52c>
 800641e:	a201      	add	r2, pc, #4	@ (adr r2, 8006424 <UART_SetConfig+0x4e4>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	0800643d 	.word	0x0800643d
 8006428:	08006445 	.word	0x08006445
 800642c:	0800644d 	.word	0x0800644d
 8006430:	08006455 	.word	0x08006455
 8006434:	0800645d 	.word	0x0800645d
 8006438:	08006465 	.word	0x08006465
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006442:	e154      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644a:	e150      	b.n	80066ee <UART_SetConfig+0x7ae>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006452:	e14c      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800645a:	e148      	b.n	80066ee <UART_SetConfig+0x7ae>
 800645c:	2320      	movs	r3, #32
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006462:	e144      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006464:	2340      	movs	r3, #64	@ 0x40
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646a:	e140      	b.n	80066ee <UART_SetConfig+0x7ae>
 800646c:	2380      	movs	r3, #128	@ 0x80
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006472:	e13c      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a41      	ldr	r2, [pc, #260]	@ (8006580 <UART_SetConfig+0x640>)
 800647a:	4293      	cmp	r3, r2
 800647c:	f040 8082 	bne.w	8006584 <UART_SetConfig+0x644>
 8006480:	4b3c      	ldr	r3, [pc, #240]	@ (8006574 <UART_SetConfig+0x634>)
 8006482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006488:	2b28      	cmp	r3, #40	@ 0x28
 800648a:	d86d      	bhi.n	8006568 <UART_SetConfig+0x628>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <UART_SetConfig+0x554>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	08006539 	.word	0x08006539
 8006498:	08006569 	.word	0x08006569
 800649c:	08006569 	.word	0x08006569
 80064a0:	08006569 	.word	0x08006569
 80064a4:	08006569 	.word	0x08006569
 80064a8:	08006569 	.word	0x08006569
 80064ac:	08006569 	.word	0x08006569
 80064b0:	08006569 	.word	0x08006569
 80064b4:	08006541 	.word	0x08006541
 80064b8:	08006569 	.word	0x08006569
 80064bc:	08006569 	.word	0x08006569
 80064c0:	08006569 	.word	0x08006569
 80064c4:	08006569 	.word	0x08006569
 80064c8:	08006569 	.word	0x08006569
 80064cc:	08006569 	.word	0x08006569
 80064d0:	08006569 	.word	0x08006569
 80064d4:	08006549 	.word	0x08006549
 80064d8:	08006569 	.word	0x08006569
 80064dc:	08006569 	.word	0x08006569
 80064e0:	08006569 	.word	0x08006569
 80064e4:	08006569 	.word	0x08006569
 80064e8:	08006569 	.word	0x08006569
 80064ec:	08006569 	.word	0x08006569
 80064f0:	08006569 	.word	0x08006569
 80064f4:	08006551 	.word	0x08006551
 80064f8:	08006569 	.word	0x08006569
 80064fc:	08006569 	.word	0x08006569
 8006500:	08006569 	.word	0x08006569
 8006504:	08006569 	.word	0x08006569
 8006508:	08006569 	.word	0x08006569
 800650c:	08006569 	.word	0x08006569
 8006510:	08006569 	.word	0x08006569
 8006514:	08006559 	.word	0x08006559
 8006518:	08006569 	.word	0x08006569
 800651c:	08006569 	.word	0x08006569
 8006520:	08006569 	.word	0x08006569
 8006524:	08006569 	.word	0x08006569
 8006528:	08006569 	.word	0x08006569
 800652c:	08006569 	.word	0x08006569
 8006530:	08006569 	.word	0x08006569
 8006534:	08006561 	.word	0x08006561
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800653e:	e0d6      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006540:	2304      	movs	r3, #4
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006546:	e0d2      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006548:	2308      	movs	r3, #8
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800654e:	e0ce      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006550:	2310      	movs	r3, #16
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006556:	e0ca      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006558:	2320      	movs	r3, #32
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e0c6      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006560:	2340      	movs	r3, #64	@ 0x40
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e0c2      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006568:	2380      	movs	r3, #128	@ 0x80
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e0be      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006570:	40011400 	.word	0x40011400
 8006574:	58024400 	.word	0x58024400
 8006578:	40007800 	.word	0x40007800
 800657c:	40007c00 	.word	0x40007c00
 8006580:	40011800 	.word	0x40011800
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4aad      	ldr	r2, [pc, #692]	@ (8006840 <UART_SetConfig+0x900>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d176      	bne.n	800667c <UART_SetConfig+0x73c>
 800658e:	4bad      	ldr	r3, [pc, #692]	@ (8006844 <UART_SetConfig+0x904>)
 8006590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006596:	2b28      	cmp	r3, #40	@ 0x28
 8006598:	d86c      	bhi.n	8006674 <UART_SetConfig+0x734>
 800659a:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0x660>)
 800659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a0:	08006645 	.word	0x08006645
 80065a4:	08006675 	.word	0x08006675
 80065a8:	08006675 	.word	0x08006675
 80065ac:	08006675 	.word	0x08006675
 80065b0:	08006675 	.word	0x08006675
 80065b4:	08006675 	.word	0x08006675
 80065b8:	08006675 	.word	0x08006675
 80065bc:	08006675 	.word	0x08006675
 80065c0:	0800664d 	.word	0x0800664d
 80065c4:	08006675 	.word	0x08006675
 80065c8:	08006675 	.word	0x08006675
 80065cc:	08006675 	.word	0x08006675
 80065d0:	08006675 	.word	0x08006675
 80065d4:	08006675 	.word	0x08006675
 80065d8:	08006675 	.word	0x08006675
 80065dc:	08006675 	.word	0x08006675
 80065e0:	08006655 	.word	0x08006655
 80065e4:	08006675 	.word	0x08006675
 80065e8:	08006675 	.word	0x08006675
 80065ec:	08006675 	.word	0x08006675
 80065f0:	08006675 	.word	0x08006675
 80065f4:	08006675 	.word	0x08006675
 80065f8:	08006675 	.word	0x08006675
 80065fc:	08006675 	.word	0x08006675
 8006600:	0800665d 	.word	0x0800665d
 8006604:	08006675 	.word	0x08006675
 8006608:	08006675 	.word	0x08006675
 800660c:	08006675 	.word	0x08006675
 8006610:	08006675 	.word	0x08006675
 8006614:	08006675 	.word	0x08006675
 8006618:	08006675 	.word	0x08006675
 800661c:	08006675 	.word	0x08006675
 8006620:	08006665 	.word	0x08006665
 8006624:	08006675 	.word	0x08006675
 8006628:	08006675 	.word	0x08006675
 800662c:	08006675 	.word	0x08006675
 8006630:	08006675 	.word	0x08006675
 8006634:	08006675 	.word	0x08006675
 8006638:	08006675 	.word	0x08006675
 800663c:	08006675 	.word	0x08006675
 8006640:	0800666d 	.word	0x0800666d
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664a:	e050      	b.n	80066ee <UART_SetConfig+0x7ae>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006652:	e04c      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665a:	e048      	b.n	80066ee <UART_SetConfig+0x7ae>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006662:	e044      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006664:	2320      	movs	r3, #32
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666a:	e040      	b.n	80066ee <UART_SetConfig+0x7ae>
 800666c:	2340      	movs	r3, #64	@ 0x40
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006672:	e03c      	b.n	80066ee <UART_SetConfig+0x7ae>
 8006674:	2380      	movs	r3, #128	@ 0x80
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e038      	b.n	80066ee <UART_SetConfig+0x7ae>
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a71      	ldr	r2, [pc, #452]	@ (8006848 <UART_SetConfig+0x908>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d130      	bne.n	80066e8 <UART_SetConfig+0x7a8>
 8006686:	4b6f      	ldr	r3, [pc, #444]	@ (8006844 <UART_SetConfig+0x904>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b05      	cmp	r3, #5
 8006690:	d826      	bhi.n	80066e0 <UART_SetConfig+0x7a0>
 8006692:	a201      	add	r2, pc, #4	@ (adr r2, 8006698 <UART_SetConfig+0x758>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066b1 	.word	0x080066b1
 800669c:	080066b9 	.word	0x080066b9
 80066a0:	080066c1 	.word	0x080066c1
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	2302      	movs	r3, #2
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066b6:	e01a      	b.n	80066ee <UART_SetConfig+0x7ae>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066be:	e016      	b.n	80066ee <UART_SetConfig+0x7ae>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066c6:	e012      	b.n	80066ee <UART_SetConfig+0x7ae>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ce:	e00e      	b.n	80066ee <UART_SetConfig+0x7ae>
 80066d0:	2320      	movs	r3, #32
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d6:	e00a      	b.n	80066ee <UART_SetConfig+0x7ae>
 80066d8:	2340      	movs	r3, #64	@ 0x40
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066de:	e006      	b.n	80066ee <UART_SetConfig+0x7ae>
 80066e0:	2380      	movs	r3, #128	@ 0x80
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e6:	e002      	b.n	80066ee <UART_SetConfig+0x7ae>
 80066e8:	2380      	movs	r3, #128	@ 0x80
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a55      	ldr	r2, [pc, #340]	@ (8006848 <UART_SetConfig+0x908>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	f040 80f8 	bne.w	80068ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066fe:	2b20      	cmp	r3, #32
 8006700:	dc46      	bgt.n	8006790 <UART_SetConfig+0x850>
 8006702:	2b02      	cmp	r3, #2
 8006704:	db75      	blt.n	80067f2 <UART_SetConfig+0x8b2>
 8006706:	3b02      	subs	r3, #2
 8006708:	2b1e      	cmp	r3, #30
 800670a:	d872      	bhi.n	80067f2 <UART_SetConfig+0x8b2>
 800670c:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <UART_SetConfig+0x7d4>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006797 	.word	0x08006797
 8006718:	080067f3 	.word	0x080067f3
 800671c:	0800679f 	.word	0x0800679f
 8006720:	080067f3 	.word	0x080067f3
 8006724:	080067f3 	.word	0x080067f3
 8006728:	080067f3 	.word	0x080067f3
 800672c:	080067af 	.word	0x080067af
 8006730:	080067f3 	.word	0x080067f3
 8006734:	080067f3 	.word	0x080067f3
 8006738:	080067f3 	.word	0x080067f3
 800673c:	080067f3 	.word	0x080067f3
 8006740:	080067f3 	.word	0x080067f3
 8006744:	080067f3 	.word	0x080067f3
 8006748:	080067f3 	.word	0x080067f3
 800674c:	080067bf 	.word	0x080067bf
 8006750:	080067f3 	.word	0x080067f3
 8006754:	080067f3 	.word	0x080067f3
 8006758:	080067f3 	.word	0x080067f3
 800675c:	080067f3 	.word	0x080067f3
 8006760:	080067f3 	.word	0x080067f3
 8006764:	080067f3 	.word	0x080067f3
 8006768:	080067f3 	.word	0x080067f3
 800676c:	080067f3 	.word	0x080067f3
 8006770:	080067f3 	.word	0x080067f3
 8006774:	080067f3 	.word	0x080067f3
 8006778:	080067f3 	.word	0x080067f3
 800677c:	080067f3 	.word	0x080067f3
 8006780:	080067f3 	.word	0x080067f3
 8006784:	080067f3 	.word	0x080067f3
 8006788:	080067f3 	.word	0x080067f3
 800678c:	080067e5 	.word	0x080067e5
 8006790:	2b40      	cmp	r3, #64	@ 0x40
 8006792:	d02a      	beq.n	80067ea <UART_SetConfig+0x8aa>
 8006794:	e02d      	b.n	80067f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006796:	f7fd ffaf 	bl	80046f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800679a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800679c:	e02f      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800679e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067a2:	4618      	mov	r0, r3
 80067a4:	f7fd ffbe 	bl	8004724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ac:	e027      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ae:	f107 0318 	add.w	r3, r7, #24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe f90a 	bl	80049cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067bc:	e01f      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067be:	4b21      	ldr	r3, [pc, #132]	@ (8006844 <UART_SetConfig+0x904>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006844 <UART_SetConfig+0x904>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	08db      	lsrs	r3, r3, #3
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	4a1d      	ldr	r2, [pc, #116]	@ (800684c <UART_SetConfig+0x90c>)
 80067d6:	fa22 f303 	lsr.w	r3, r2, r3
 80067da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067dc:	e00f      	b.n	80067fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80067de:	4b1b      	ldr	r3, [pc, #108]	@ (800684c <UART_SetConfig+0x90c>)
 80067e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e2:	e00c      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006850 <UART_SetConfig+0x910>)
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067e8:	e009      	b.n	80067fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067f0:	e005      	b.n	80067fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 81ee 	beq.w	8006be2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	4a12      	ldr	r2, [pc, #72]	@ (8006854 <UART_SetConfig+0x914>)
 800680c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006810:	461a      	mov	r2, r3
 8006812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006814:	fbb3 f3f2 	udiv	r3, r3, r2
 8006818:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	4413      	add	r3, r2
 8006824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006826:	429a      	cmp	r2, r3
 8006828:	d305      	bcc.n	8006836 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006832:	429a      	cmp	r2, r3
 8006834:	d910      	bls.n	8006858 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800683c:	e1d1      	b.n	8006be2 <UART_SetConfig+0xca2>
 800683e:	bf00      	nop
 8006840:	40011c00 	.word	0x40011c00
 8006844:	58024400 	.word	0x58024400
 8006848:	58000c00 	.word	0x58000c00
 800684c:	03d09000 	.word	0x03d09000
 8006850:	003d0900 	.word	0x003d0900
 8006854:	0800be50 	.word	0x0800be50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685a:	2200      	movs	r2, #0
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	60fa      	str	r2, [r7, #12]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006864:	4ac0      	ldr	r2, [pc, #768]	@ (8006b68 <UART_SetConfig+0xc28>)
 8006866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800686a:	b29b      	uxth	r3, r3
 800686c:	2200      	movs	r2, #0
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006876:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800687a:	f7f9 fda1 	bl	80003c0 <__aeabi_uldivmod>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	020b      	lsls	r3, r1, #8
 8006890:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006894:	0202      	lsls	r2, r0, #8
 8006896:	6979      	ldr	r1, [r7, #20]
 8006898:	6849      	ldr	r1, [r1, #4]
 800689a:	0849      	lsrs	r1, r1, #1
 800689c:	2000      	movs	r0, #0
 800689e:	460c      	mov	r4, r1
 80068a0:	4605      	mov	r5, r0
 80068a2:	eb12 0804 	adds.w	r8, r2, r4
 80068a6:	eb43 0905 	adc.w	r9, r3, r5
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	469a      	mov	sl, r3
 80068b2:	4693      	mov	fp, r2
 80068b4:	4652      	mov	r2, sl
 80068b6:	465b      	mov	r3, fp
 80068b8:	4640      	mov	r0, r8
 80068ba:	4649      	mov	r1, r9
 80068bc:	f7f9 fd80 	bl	80003c0 <__aeabi_uldivmod>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4613      	mov	r3, r2
 80068c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ce:	d308      	bcc.n	80068e2 <UART_SetConfig+0x9a2>
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068d6:	d204      	bcs.n	80068e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	e17f      	b.n	8006be2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068e8:	e17b      	b.n	8006be2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068f2:	f040 80bd 	bne.w	8006a70 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80068f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	dc48      	bgt.n	8006990 <UART_SetConfig+0xa50>
 80068fe:	2b00      	cmp	r3, #0
 8006900:	db7b      	blt.n	80069fa <UART_SetConfig+0xaba>
 8006902:	2b20      	cmp	r3, #32
 8006904:	d879      	bhi.n	80069fa <UART_SetConfig+0xaba>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x9cc>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006997 	.word	0x08006997
 8006910:	0800699f 	.word	0x0800699f
 8006914:	080069fb 	.word	0x080069fb
 8006918:	080069fb 	.word	0x080069fb
 800691c:	080069a7 	.word	0x080069a7
 8006920:	080069fb 	.word	0x080069fb
 8006924:	080069fb 	.word	0x080069fb
 8006928:	080069fb 	.word	0x080069fb
 800692c:	080069b7 	.word	0x080069b7
 8006930:	080069fb 	.word	0x080069fb
 8006934:	080069fb 	.word	0x080069fb
 8006938:	080069fb 	.word	0x080069fb
 800693c:	080069fb 	.word	0x080069fb
 8006940:	080069fb 	.word	0x080069fb
 8006944:	080069fb 	.word	0x080069fb
 8006948:	080069fb 	.word	0x080069fb
 800694c:	080069c7 	.word	0x080069c7
 8006950:	080069fb 	.word	0x080069fb
 8006954:	080069fb 	.word	0x080069fb
 8006958:	080069fb 	.word	0x080069fb
 800695c:	080069fb 	.word	0x080069fb
 8006960:	080069fb 	.word	0x080069fb
 8006964:	080069fb 	.word	0x080069fb
 8006968:	080069fb 	.word	0x080069fb
 800696c:	080069fb 	.word	0x080069fb
 8006970:	080069fb 	.word	0x080069fb
 8006974:	080069fb 	.word	0x080069fb
 8006978:	080069fb 	.word	0x080069fb
 800697c:	080069fb 	.word	0x080069fb
 8006980:	080069fb 	.word	0x080069fb
 8006984:	080069fb 	.word	0x080069fb
 8006988:	080069fb 	.word	0x080069fb
 800698c:	080069ed 	.word	0x080069ed
 8006990:	2b40      	cmp	r3, #64	@ 0x40
 8006992:	d02e      	beq.n	80069f2 <UART_SetConfig+0xab2>
 8006994:	e031      	b.n	80069fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006996:	f7fc fca1 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 800699a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800699c:	e033      	b.n	8006a06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800699e:	f7fc fcb3 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 80069a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069a4:	e02f      	b.n	8006a06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fd feba 	bl	8004724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069b4:	e027      	b.n	8006a06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069b6:	f107 0318 	add.w	r3, r7, #24
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe f806 	bl	80049cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069c4:	e01f      	b.n	8006a06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c6:	4b69      	ldr	r3, [pc, #420]	@ (8006b6c <UART_SetConfig+0xc2c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069d2:	4b66      	ldr	r3, [pc, #408]	@ (8006b6c <UART_SetConfig+0xc2c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	08db      	lsrs	r3, r3, #3
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	4a64      	ldr	r2, [pc, #400]	@ (8006b70 <UART_SetConfig+0xc30>)
 80069de:	fa22 f303 	lsr.w	r3, r2, r3
 80069e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069e4:	e00f      	b.n	8006a06 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80069e6:	4b62      	ldr	r3, [pc, #392]	@ (8006b70 <UART_SetConfig+0xc30>)
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ea:	e00c      	b.n	8006a06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069ec:	4b61      	ldr	r3, [pc, #388]	@ (8006b74 <UART_SetConfig+0xc34>)
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f0:	e009      	b.n	8006a06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f8:	e005      	b.n	8006a06 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 80ea 	beq.w	8006be2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	4a55      	ldr	r2, [pc, #340]	@ (8006b68 <UART_SetConfig+0xc28>)
 8006a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a20:	005a      	lsls	r2, r3, #1
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	441a      	add	r2, r3
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	2b0f      	cmp	r3, #15
 8006a38:	d916      	bls.n	8006a68 <UART_SetConfig+0xb28>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a40:	d212      	bcs.n	8006a68 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f023 030f 	bic.w	r3, r3, #15
 8006a4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	e0bc      	b.n	8006be2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a6e:	e0b8      	b.n	8006be2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a70:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	dc4b      	bgt.n	8006b10 <UART_SetConfig+0xbd0>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f2c0 8087 	blt.w	8006b8c <UART_SetConfig+0xc4c>
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	f200 8084 	bhi.w	8006b8c <UART_SetConfig+0xc4c>
 8006a84:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <UART_SetConfig+0xb4c>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006b17 	.word	0x08006b17
 8006a90:	08006b1f 	.word	0x08006b1f
 8006a94:	08006b8d 	.word	0x08006b8d
 8006a98:	08006b8d 	.word	0x08006b8d
 8006a9c:	08006b27 	.word	0x08006b27
 8006aa0:	08006b8d 	.word	0x08006b8d
 8006aa4:	08006b8d 	.word	0x08006b8d
 8006aa8:	08006b8d 	.word	0x08006b8d
 8006aac:	08006b37 	.word	0x08006b37
 8006ab0:	08006b8d 	.word	0x08006b8d
 8006ab4:	08006b8d 	.word	0x08006b8d
 8006ab8:	08006b8d 	.word	0x08006b8d
 8006abc:	08006b8d 	.word	0x08006b8d
 8006ac0:	08006b8d 	.word	0x08006b8d
 8006ac4:	08006b8d 	.word	0x08006b8d
 8006ac8:	08006b8d 	.word	0x08006b8d
 8006acc:	08006b47 	.word	0x08006b47
 8006ad0:	08006b8d 	.word	0x08006b8d
 8006ad4:	08006b8d 	.word	0x08006b8d
 8006ad8:	08006b8d 	.word	0x08006b8d
 8006adc:	08006b8d 	.word	0x08006b8d
 8006ae0:	08006b8d 	.word	0x08006b8d
 8006ae4:	08006b8d 	.word	0x08006b8d
 8006ae8:	08006b8d 	.word	0x08006b8d
 8006aec:	08006b8d 	.word	0x08006b8d
 8006af0:	08006b8d 	.word	0x08006b8d
 8006af4:	08006b8d 	.word	0x08006b8d
 8006af8:	08006b8d 	.word	0x08006b8d
 8006afc:	08006b8d 	.word	0x08006b8d
 8006b00:	08006b8d 	.word	0x08006b8d
 8006b04:	08006b8d 	.word	0x08006b8d
 8006b08:	08006b8d 	.word	0x08006b8d
 8006b0c:	08006b7f 	.word	0x08006b7f
 8006b10:	2b40      	cmp	r3, #64	@ 0x40
 8006b12:	d037      	beq.n	8006b84 <UART_SetConfig+0xc44>
 8006b14:	e03a      	b.n	8006b8c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b16:	f7fc fbe1 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8006b1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b1c:	e03c      	b.n	8006b98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1e:	f7fc fbf3 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8006b22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b24:	e038      	b.n	8006b98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fd fdfa 	bl	8004724 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b34:	e030      	b.n	8006b98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b36:	f107 0318 	add.w	r3, r7, #24
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fd ff46 	bl	80049cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b44:	e028      	b.n	8006b98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b46:	4b09      	ldr	r3, [pc, #36]	@ (8006b6c <UART_SetConfig+0xc2c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d012      	beq.n	8006b78 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b52:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <UART_SetConfig+0xc2c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	08db      	lsrs	r3, r3, #3
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	4a04      	ldr	r2, [pc, #16]	@ (8006b70 <UART_SetConfig+0xc30>)
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b64:	e018      	b.n	8006b98 <UART_SetConfig+0xc58>
 8006b66:	bf00      	nop
 8006b68:	0800be50 	.word	0x0800be50
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	03d09000 	.word	0x03d09000
 8006b74:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006b78:	4b24      	ldr	r3, [pc, #144]	@ (8006c0c <UART_SetConfig+0xccc>)
 8006b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b7c:	e00c      	b.n	8006b98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b7e:	4b24      	ldr	r3, [pc, #144]	@ (8006c10 <UART_SetConfig+0xcd0>)
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b82:	e009      	b.n	8006b98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b8a:	e005      	b.n	8006b98 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b96:	bf00      	nop
    }

    if (pclk != 0U)
 8006b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d021      	beq.n	8006be2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <UART_SetConfig+0xcd4>)
 8006ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bac:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	441a      	add	r2, r3
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	2b0f      	cmp	r3, #15
 8006bc6:	d909      	bls.n	8006bdc <UART_SetConfig+0xc9c>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bce:	d205      	bcs.n	8006bdc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60da      	str	r2, [r3, #12]
 8006bda:	e002      	b.n	8006be2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006bfe:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3748      	adds	r7, #72	@ 0x48
 8006c06:	46bd      	mov	sp, r7
 8006c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c0c:	03d09000 	.word	0x03d09000
 8006c10:	003d0900 	.word	0x003d0900
 8006c14:	0800be50 	.word	0x0800be50

08006c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01a      	beq.n	8006d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d16:	d10a      	bne.n	8006d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	605a      	str	r2, [r3, #4]
  }
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b098      	sub	sp, #96	@ 0x60
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d6c:	f7fa fab8 	bl	80012e0 <HAL_GetTick>
 8006d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d12f      	bne.n	8006de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f88e 	bl	8006eb0 <UART_WaitOnFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d022      	beq.n	8006de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dc0:	e841 2300 	strex	r3, r2, [r1]
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e6      	bne.n	8006d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e063      	b.n	8006ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0304 	and.w	r3, r3, #4
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d149      	bne.n	8006e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df6:	2200      	movs	r2, #0
 8006df8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f857 	bl	8006eb0 <UART_WaitOnFlagUntilTimeout>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d03c      	beq.n	8006e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	623b      	str	r3, [r7, #32]
   return(result);
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e6      	bne.n	8006e08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e5a:	61fa      	str	r2, [r7, #28]
 8006e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	69b9      	ldr	r1, [r7, #24]
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	617b      	str	r3, [r7, #20]
   return(result);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e012      	b.n	8006ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3758      	adds	r7, #88	@ 0x58
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec0:	e04f      	b.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d04b      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fa fa09 	bl	80012e0 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e04e      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d037      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b80      	cmp	r3, #128	@ 0x80
 8006ef6:	d034      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b40      	cmp	r3, #64	@ 0x40
 8006efc:	d031      	beq.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d110      	bne.n	8006f2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2208      	movs	r2, #8
 8006f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f95b 	bl	80071d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e029      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f3c:	d111      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 f941 	bl	80071d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e00f      	b.n	8006f82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69da      	ldr	r2, [r3, #28]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	bf0c      	ite	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	2300      	movne	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d0a0      	beq.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b0a3      	sub	sp, #140	@ 0x8c
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fbe:	d10e      	bne.n	8006fde <UART_Start_Receive_IT+0x52>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <UART_Start_Receive_IT+0x48>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006fce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006fd2:	e02d      	b.n	8007030 <UART_Start_Receive_IT+0xa4>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	22ff      	movs	r2, #255	@ 0xff
 8006fd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006fdc:	e028      	b.n	8007030 <UART_Start_Receive_IT+0xa4>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <UART_Start_Receive_IT+0x76>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d104      	bne.n	8006ff8 <UART_Start_Receive_IT+0x6c>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	22ff      	movs	r2, #255	@ 0xff
 8006ff2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ff6:	e01b      	b.n	8007030 <UART_Start_Receive_IT+0xa4>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	227f      	movs	r2, #127	@ 0x7f
 8006ffc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007000:	e016      	b.n	8007030 <UART_Start_Receive_IT+0xa4>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800700a:	d10d      	bne.n	8007028 <UART_Start_Receive_IT+0x9c>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <UART_Start_Receive_IT+0x92>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	227f      	movs	r2, #127	@ 0x7f
 8007018:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800701c:	e008      	b.n	8007030 <UART_Start_Receive_IT+0xa4>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	223f      	movs	r2, #63	@ 0x3f
 8007022:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007026:	e003      	b.n	8007030 <UART_Start_Receive_IT+0xa4>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2222      	movs	r2, #34	@ 0x22
 800703c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007050:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3308      	adds	r3, #8
 8007060:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007064:	673a      	str	r2, [r7, #112]	@ 0x70
 8007066:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800706a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e3      	bne.n	8007040 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007080:	d14f      	bne.n	8007122 <UART_Start_Receive_IT+0x196>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007088:	88fa      	ldrh	r2, [r7, #6]
 800708a:	429a      	cmp	r2, r3
 800708c:	d349      	bcc.n	8007122 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d107      	bne.n	80070a8 <UART_Start_Receive_IT+0x11c>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a47      	ldr	r2, [pc, #284]	@ (80071c0 <UART_Start_Receive_IT+0x234>)
 80070a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80070a6:	e002      	b.n	80070ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a46      	ldr	r2, [pc, #280]	@ (80071c4 <UART_Start_Receive_IT+0x238>)
 80070ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01a      	beq.n	80070ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070be:	e853 3f00 	ldrex	r3, [r3]
 80070c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80070de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80070e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e4      	bne.n	80070b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3308      	adds	r3, #8
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007102:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800710c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800710e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007112:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800711a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e5      	bne.n	80070ec <UART_Start_Receive_IT+0x160>
 8007120:	e046      	b.n	80071b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712a:	d107      	bne.n	800713c <UART_Start_Receive_IT+0x1b0>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4a24      	ldr	r2, [pc, #144]	@ (80071c8 <UART_Start_Receive_IT+0x23c>)
 8007138:	675a      	str	r2, [r3, #116]	@ 0x74
 800713a:	e002      	b.n	8007142 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4a23      	ldr	r2, [pc, #140]	@ (80071cc <UART_Start_Receive_IT+0x240>)
 8007140:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d019      	beq.n	800717e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800715e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007168:	637b      	str	r3, [r7, #52]	@ 0x34
 800716a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800716e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e6      	bne.n	800714a <UART_Start_Receive_IT+0x1be>
 800717c:	e018      	b.n	80071b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	613b      	str	r3, [r7, #16]
   return(result);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f043 0320 	orr.w	r3, r3, #32
 8007192:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	69f9      	ldr	r1, [r7, #28]
 80071a2:	6a3a      	ldr	r2, [r7, #32]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	378c      	adds	r7, #140	@ 0x8c
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	080079ed 	.word	0x080079ed
 80071c4:	08007689 	.word	0x08007689
 80071c8:	080074d1 	.word	0x080074d1
 80071cc:	08007319 	.word	0x08007319

080071d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b095      	sub	sp, #84	@ 0x54
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80071f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e6      	bne.n	80071d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	61fb      	str	r3, [r7, #28]
   return(result);
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	4b1e      	ldr	r3, [pc, #120]	@ (8007298 <UART_EndRxTransfer+0xc8>)
 800721e:	4013      	ands	r3, r2
 8007220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800722c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e5      	bne.n	800720a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d118      	bne.n	8007278 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60bb      	str	r3, [r7, #8]
   return(result);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f023 0310 	bic.w	r3, r3, #16
 800725a:	647b      	str	r3, [r7, #68]	@ 0x44
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6979      	ldr	r1, [r7, #20]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	613b      	str	r3, [r7, #16]
   return(result);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e6      	bne.n	8007246 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800728c:	bf00      	nop
 800728e:	3754      	adds	r7, #84	@ 0x54
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	effffffe 	.word	0xeffffffe

0800729c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7fe fe2e 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072dc:	61fb      	str	r3, [r7, #28]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ea:	6979      	ldr	r1, [r7, #20]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	e841 2300 	strex	r3, r2, [r1]
 80072f2:	613b      	str	r3, [r7, #16]
   return(result);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e6      	bne.n	80072c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fe fdf9 	bl	8005f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800730e:	bf00      	nop
 8007310:	3720      	adds	r7, #32
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b09c      	sub	sp, #112	@ 0x70
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007326:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007330:	2b22      	cmp	r3, #34	@ 0x22
 8007332:	f040 80be 	bne.w	80074b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007344:	b2d9      	uxtb	r1, r3
 8007346:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800734a:	b2da      	uxtb	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007350:	400a      	ands	r2, r1
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007366:	b29b      	uxth	r3, r3
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 80a1 	bne.w	80074c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800738e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800739e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80073d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80073d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a33      	ldr	r2, [pc, #204]	@ (80074cc <UART_RxISR_8BIT+0x1b4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d01f      	beq.n	8007444 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d018      	beq.n	8007444 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	623b      	str	r3, [r7, #32]
   return(result);
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007426:	663b      	str	r3, [r7, #96]	@ 0x60
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	461a      	mov	r2, r3
 800742e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30
 8007432:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e6      	bne.n	8007412 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d12e      	bne.n	80074aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0310 	bic.w	r3, r3, #16
 8007466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	69b9      	ldr	r1, [r7, #24]
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	617b      	str	r3, [r7, #20]
   return(result);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	2b10      	cmp	r3, #16
 8007490:	d103      	bne.n	800749a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2210      	movs	r2, #16
 8007498:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fe fd40 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074a8:	e00b      	b.n	80074c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7f9 faee 	bl	8000a8c <HAL_UART_RxCpltCallback>
}
 80074b0:	e007      	b.n	80074c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699a      	ldr	r2, [r3, #24]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0208 	orr.w	r2, r2, #8
 80074c0:	619a      	str	r2, [r3, #24]
}
 80074c2:	bf00      	nop
 80074c4:	3770      	adds	r7, #112	@ 0x70
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	58000c00 	.word	0x58000c00

080074d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b09c      	sub	sp, #112	@ 0x70
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80074de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074e8:	2b22      	cmp	r3, #34	@ 0x22
 80074ea:	f040 80be 	bne.w	800766a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80074fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007502:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007506:	4013      	ands	r3, r2
 8007508:	b29a      	uxth	r2, r3
 800750a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800750c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007512:	1c9a      	adds	r2, r3, #2
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800751e:	b29b      	uxth	r3, r3
 8007520:	3b01      	subs	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 80a1 	bne.w	800767a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800754c:	667b      	str	r3, [r7, #100]	@ 0x64
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007556:	657b      	str	r3, [r7, #84]	@ 0x54
 8007558:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800755c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e6      	bne.n	8007538 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3308      	adds	r3, #8
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f023 0301 	bic.w	r3, r3, #1
 8007580:	663b      	str	r3, [r7, #96]	@ 0x60
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3308      	adds	r3, #8
 8007588:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800758a:	643a      	str	r2, [r7, #64]	@ 0x40
 800758c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e5      	bne.n	800756a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a33      	ldr	r2, [pc, #204]	@ (8007684 <UART_RxISR_16BIT+0x1b4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01f      	beq.n	80075fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d018      	beq.n	80075fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	6a3b      	ldr	r3, [r7, #32]
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80075e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e6      	bne.n	80075ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007600:	2b01      	cmp	r3, #1
 8007602:	d12e      	bne.n	8007662 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	60bb      	str	r3, [r7, #8]
   return(result);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f023 0310 	bic.w	r3, r3, #16
 800761e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6979      	ldr	r1, [r7, #20]
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	613b      	str	r3, [r7, #16]
   return(result);
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e6      	bne.n	800760a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	2b10      	cmp	r3, #16
 8007648:	d103      	bne.n	8007652 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2210      	movs	r2, #16
 8007650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fe fc64 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007660:	e00b      	b.n	800767a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7f9 fa12 	bl	8000a8c <HAL_UART_RxCpltCallback>
}
 8007668:	e007      	b.n	800767a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	699a      	ldr	r2, [r3, #24]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0208 	orr.w	r2, r2, #8
 8007678:	619a      	str	r2, [r3, #24]
}
 800767a:	bf00      	nop
 800767c:	3770      	adds	r7, #112	@ 0x70
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	58000c00 	.word	0x58000c00

08007688 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b0ac      	sub	sp, #176	@ 0xb0
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007696:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076be:	2b22      	cmp	r3, #34	@ 0x22
 80076c0:	f040 8181 	bne.w	80079c6 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076ce:	e124      	b.n	800791a <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80076de:	b2d9      	uxtb	r1, r3
 80076e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ea:	400a      	ands	r2, r1
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	2b00      	cmp	r3, #0
 8007720:	d053      	beq.n	80077ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d011      	beq.n	8007752 <UART_RxISR_8BIT_FIFOEN+0xca>
 800772e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2201      	movs	r2, #1
 8007740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007748:	f043 0201 	orr.w	r2, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d011      	beq.n	8007782 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800775e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00b      	beq.n	8007782 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2202      	movs	r2, #2
 8007770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007778:	f043 0204 	orr.w	r2, r3, #4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d011      	beq.n	80077b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800778e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00b      	beq.n	80077b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2204      	movs	r2, #4
 80077a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077a8:	f043 0202 	orr.w	r2, r3, #2
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d006      	beq.n	80077ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7fe fba9 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f040 80a1 	bne.w	800791a <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80077e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077fc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007800:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e4      	bne.n	80077d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800781e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007820:	4b6f      	ldr	r3, [pc, #444]	@ (80079e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007822:	4013      	ands	r3, r2
 8007824:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3308      	adds	r3, #8
 800782e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007832:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007834:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007838:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e3      	bne.n	800780e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a61      	ldr	r2, [pc, #388]	@ (80079e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d021      	beq.n	80078a8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01a      	beq.n	80078a8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007882:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007894:	657b      	str	r3, [r7, #84]	@ 0x54
 8007896:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800789a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80078a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e4      	bne.n	8007872 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d130      	bne.n	8007912 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	e853 3f00 	ldrex	r3, [r3]
 80078c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f023 0310 	bic.w	r3, r3, #16
 80078ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e4      	bne.n	80078b6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d103      	bne.n	8007902 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2210      	movs	r2, #16
 8007900:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fe fb0c 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007910:	e00e      	b.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7f9 f8ba 	bl	8000a8c <HAL_UART_RxCpltCallback>
        break;
 8007918:	e00a      	b.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800791a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800791e:	2b00      	cmp	r3, #0
 8007920:	d006      	beq.n	8007930 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8007922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	f47f aed0 	bne.w	80076d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007936:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800793a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800793e:	2b00      	cmp	r3, #0
 8007940:	d049      	beq.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0x34e>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007948:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800794c:	429a      	cmp	r2, r3
 800794e:	d242      	bcs.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007966:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007976:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800797a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800797c:	e841 2300 	strex	r3, r2, [r1]
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e3      	bne.n	8007950 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a17      	ldr	r2, [pc, #92]	@ (80079e8 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800798c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	60bb      	str	r3, [r7, #8]
   return(result);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f043 0320 	orr.w	r3, r3, #32
 80079a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	613b      	str	r3, [r7, #16]
   return(result);
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e4      	bne.n	800798e <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079c4:	e007      	b.n	80079d6 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699a      	ldr	r2, [r3, #24]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0208 	orr.w	r2, r2, #8
 80079d4:	619a      	str	r2, [r3, #24]
}
 80079d6:	bf00      	nop
 80079d8:	37b0      	adds	r7, #176	@ 0xb0
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	effffffe 	.word	0xeffffffe
 80079e4:	58000c00 	.word	0x58000c00
 80079e8:	08007319 	.word	0x08007319

080079ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b0ae      	sub	sp, #184	@ 0xb8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80079fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a22:	2b22      	cmp	r3, #34	@ 0x22
 8007a24:	f040 8185 	bne.w	8007d32 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a2e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a32:	e128      	b.n	8007c86 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a46:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007a4a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007a4e:	4013      	ands	r3, r2
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a5c:	1c9a      	adds	r2, r3, #2
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d053      	beq.n	8007b32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d011      	beq.n	8007aba <UART_RxISR_16BIT_FIFOEN+0xce>
 8007a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab0:	f043 0201 	orr.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d011      	beq.n	8007aea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae0:	f043 0204 	orr.w	r2, r3, #4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2204      	movs	r2, #4
 8007b08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b10:	f043 0202 	orr.w	r2, r3, #2
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7fe f9f5 	bl	8005f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 80a3 	bne.w	8007c86 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b66:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e2      	bne.n	8007b40 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8007d4c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007b8e:	4013      	ands	r3, r2
 8007b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007b9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ba4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e3      	bne.n	8007b7a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a61      	ldr	r2, [pc, #388]	@ (8007d50 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d021      	beq.n	8007c14 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d01a      	beq.n	8007c14 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e4      	bne.n	8007bde <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d130      	bne.n	8007c7e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2a:	e853 3f00 	ldrex	r3, [r3]
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c32:	f023 0310 	bic.w	r3, r3, #16
 8007c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e4      	bne.n	8007c22 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d103      	bne.n	8007c6e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fe f956 	bl	8005f28 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007c7c:	e00e      	b.n	8007c9c <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7f8 ff04 	bl	8000a8c <HAL_UART_RxCpltCallback>
        break;
 8007c84:	e00a      	b.n	8007c9c <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c86:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8007c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f47f aecc 	bne.w	8007a34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ca2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ca6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d049      	beq.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0x356>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007cb4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d242      	bcs.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	623b      	str	r3, [r7, #32]
   return(result);
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ce0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e3      	bne.n	8007cbc <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a17      	ldr	r2, [pc, #92]	@ (8007d54 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007cf8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f043 0320 	orr.w	r3, r3, #32
 8007d0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	69b9      	ldr	r1, [r7, #24]
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	617b      	str	r3, [r7, #20]
   return(result);
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e4      	bne.n	8007cfa <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d30:	e007      	b.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699a      	ldr	r2, [r3, #24]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f042 0208 	orr.w	r2, r2, #8
 8007d40:	619a      	str	r2, [r3, #24]
}
 8007d42:	bf00      	nop
 8007d44:	37b8      	adds	r7, #184	@ 0xb8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	effffffe 	.word	0xeffffffe
 8007d50:	58000c00 	.word	0x58000c00
 8007d54:	080074d1 	.word	0x080074d1

08007d58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_UARTEx_DisableFifoMode+0x16>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e027      	b.n	8007dfa <HAL_UARTEx_DisableFifoMode+0x66>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2224      	movs	r2, #36	@ 0x24
 8007db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0201 	bic.w	r2, r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007dd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e02d      	b.n	8007e7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2224      	movs	r2, #36	@ 0x24
 8007e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0201 	bic.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f850 	bl	8007f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d101      	bne.n	8007e9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e96:	2302      	movs	r3, #2
 8007e98:	e02d      	b.n	8007ef6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2224      	movs	r2, #36	@ 0x24
 8007ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0201 	bic.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f812 	bl	8007f00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d108      	bne.n	8007f22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f20:	e031      	b.n	8007f86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f22:	2310      	movs	r3, #16
 8007f24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f26:	2310      	movs	r3, #16
 8007f28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	0e5b      	lsrs	r3, r3, #25
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	0f5b      	lsrs	r3, r3, #29
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 0307 	and.w	r3, r3, #7
 8007f48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	7b3a      	ldrb	r2, [r7, #12]
 8007f4e:	4911      	ldr	r1, [pc, #68]	@ (8007f94 <UARTEx_SetNbDataToProcess+0x94>)
 8007f50:	5c8a      	ldrb	r2, [r1, r2]
 8007f52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f56:	7b3a      	ldrb	r2, [r7, #12]
 8007f58:	490f      	ldr	r1, [pc, #60]	@ (8007f98 <UARTEx_SetNbDataToProcess+0x98>)
 8007f5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	7b7a      	ldrb	r2, [r7, #13]
 8007f6c:	4909      	ldr	r1, [pc, #36]	@ (8007f94 <UARTEx_SetNbDataToProcess+0x94>)
 8007f6e:	5c8a      	ldrb	r2, [r1, r2]
 8007f70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f74:	7b7a      	ldrb	r2, [r7, #13]
 8007f76:	4908      	ldr	r1, [pc, #32]	@ (8007f98 <UARTEx_SetNbDataToProcess+0x98>)
 8007f78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007f86:	bf00      	nop
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	0800be68 	.word	0x0800be68
 8007f98:	0800be70 	.word	0x0800be70

08007f9c <__NVIC_SetPriority>:
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	db0a      	blt.n	8007fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	b2da      	uxtb	r2, r3
 8007fb4:	490c      	ldr	r1, [pc, #48]	@ (8007fe8 <__NVIC_SetPriority+0x4c>)
 8007fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fba:	0112      	lsls	r2, r2, #4
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007fc4:	e00a      	b.n	8007fdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	4908      	ldr	r1, [pc, #32]	@ (8007fec <__NVIC_SetPriority+0x50>)
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	3b04      	subs	r3, #4
 8007fd4:	0112      	lsls	r2, r2, #4
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	440b      	add	r3, r1
 8007fda:	761a      	strb	r2, [r3, #24]
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	e000e100 	.word	0xe000e100
 8007fec:	e000ed00 	.word	0xe000ed00

08007ff0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ff4:	4b05      	ldr	r3, [pc, #20]	@ (800800c <SysTick_Handler+0x1c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ff8:	f001 fdf4 	bl	8009be4 <xTaskGetSchedulerState>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d001      	beq.n	8008006 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008002:	f002 fbe9 	bl	800a7d8 <xPortSysTickHandler>
  }
}
 8008006:	bf00      	nop
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	e000e010 	.word	0xe000e010

08008010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008014:	2100      	movs	r1, #0
 8008016:	f06f 0004 	mvn.w	r0, #4
 800801a:	f7ff ffbf 	bl	8007f9c <__NVIC_SetPriority>
#endif
}
 800801e:	bf00      	nop
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800802a:	f3ef 8305 	mrs	r3, IPSR
 800802e:	603b      	str	r3, [r7, #0]
  return(result);
 8008030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008036:	f06f 0305 	mvn.w	r3, #5
 800803a:	607b      	str	r3, [r7, #4]
 800803c:	e00c      	b.n	8008058 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800803e:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <osKernelInitialize+0x44>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008046:	4b08      	ldr	r3, [pc, #32]	@ (8008068 <osKernelInitialize+0x44>)
 8008048:	2201      	movs	r2, #1
 800804a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800804c:	2300      	movs	r3, #0
 800804e:	607b      	str	r3, [r7, #4]
 8008050:	e002      	b.n	8008058 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008052:	f04f 33ff 	mov.w	r3, #4294967295
 8008056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008058:	687b      	ldr	r3, [r7, #4]
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	24000214 	.word	0x24000214

0800806c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008072:	f3ef 8305 	mrs	r3, IPSR
 8008076:	603b      	str	r3, [r7, #0]
  return(result);
 8008078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <osKernelStart+0x1a>
    stat = osErrorISR;
 800807e:	f06f 0305 	mvn.w	r3, #5
 8008082:	607b      	str	r3, [r7, #4]
 8008084:	e010      	b.n	80080a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008086:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <osKernelStart+0x48>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d109      	bne.n	80080a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800808e:	f7ff ffbf 	bl	8008010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008092:	4b08      	ldr	r3, [pc, #32]	@ (80080b4 <osKernelStart+0x48>)
 8008094:	2202      	movs	r2, #2
 8008096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008098:	f001 f940 	bl	800931c <vTaskStartScheduler>
      stat = osOK;
 800809c:	2300      	movs	r3, #0
 800809e:	607b      	str	r3, [r7, #4]
 80080a0:	e002      	b.n	80080a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295
 80080a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080a8:	687b      	ldr	r3, [r7, #4]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	24000214 	.word	0x24000214

080080b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08e      	sub	sp, #56	@ 0x38
 80080bc:	af04      	add	r7, sp, #16
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c8:	f3ef 8305 	mrs	r3, IPSR
 80080cc:	617b      	str	r3, [r7, #20]
  return(result);
 80080ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d17e      	bne.n	80081d2 <osThreadNew+0x11a>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d07b      	beq.n	80081d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080da:	2380      	movs	r3, #128	@ 0x80
 80080dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080de:	2318      	movs	r3, #24
 80080e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80080e6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d045      	beq.n	800817e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <osThreadNew+0x48>
        name = attr->name;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d008      	beq.n	8008126 <osThreadNew+0x6e>
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2b38      	cmp	r3, #56	@ 0x38
 8008118:	d805      	bhi.n	8008126 <osThreadNew+0x6e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <osThreadNew+0x72>
        return (NULL);
 8008126:	2300      	movs	r3, #0
 8008128:	e054      	b.n	80081d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	089b      	lsrs	r3, r3, #2
 8008138:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <osThreadNew+0xa8>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2ba7      	cmp	r3, #167	@ 0xa7
 8008148:	d90a      	bls.n	8008160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800814e:	2b00      	cmp	r3, #0
 8008150:	d006      	beq.n	8008160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <osThreadNew+0xa8>
        mem = 1;
 800815a:	2301      	movs	r3, #1
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	e010      	b.n	8008182 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10c      	bne.n	8008182 <osThreadNew+0xca>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d108      	bne.n	8008182 <osThreadNew+0xca>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d104      	bne.n	8008182 <osThreadNew+0xca>
          mem = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	e001      	b.n	8008182 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d110      	bne.n	80081aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008190:	9202      	str	r2, [sp, #8]
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6a3a      	ldr	r2, [r7, #32]
 800819c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fec8 	bl	8008f34 <xTaskCreateStatic>
 80081a4:	4603      	mov	r3, r0
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	e013      	b.n	80081d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d110      	bne.n	80081d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f107 0310 	add.w	r3, r7, #16
 80081b8:	9301      	str	r3, [sp, #4]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 ff16 	bl	8008ff4 <xTaskCreate>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d001      	beq.n	80081d2 <osThreadNew+0x11a>
            hTask = NULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081d2:	693b      	ldr	r3, [r7, #16]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3728      	adds	r7, #40	@ 0x28
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e4:	f3ef 8305 	mrs	r3, IPSR
 80081e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80081ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <osDelay+0x1c>
    stat = osErrorISR;
 80081f0:	f06f 0305 	mvn.w	r3, #5
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	e007      	b.n	8008208 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f854 	bl	80092b0 <vTaskDelay>
    }
  }

  return (stat);
 8008208:	68fb      	ldr	r3, [r7, #12]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008212:	b580      	push	{r7, lr}
 8008214:	b08a      	sub	sp, #40	@ 0x28
 8008216:	af02      	add	r7, sp, #8
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	613b      	str	r3, [r7, #16]
  return(result);
 8008228:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800822a:	2b00      	cmp	r3, #0
 800822c:	d15f      	bne.n	80082ee <osMessageQueueNew+0xdc>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d05c      	beq.n	80082ee <osMessageQueueNew+0xdc>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d059      	beq.n	80082ee <osMessageQueueNew+0xdc>
    mem = -1;
 800823a:	f04f 33ff 	mov.w	r3, #4294967295
 800823e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d029      	beq.n	800829a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d012      	beq.n	8008274 <osMessageQueueNew+0x62>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	2b4f      	cmp	r3, #79	@ 0x4f
 8008254:	d90e      	bls.n	8008274 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	695a      	ldr	r2, [r3, #20]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68b9      	ldr	r1, [r7, #8]
 8008266:	fb01 f303 	mul.w	r3, r1, r3
 800826a:	429a      	cmp	r2, r3
 800826c:	d302      	bcc.n	8008274 <osMessageQueueNew+0x62>
        mem = 1;
 800826e:	2301      	movs	r3, #1
 8008270:	61bb      	str	r3, [r7, #24]
 8008272:	e014      	b.n	800829e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d110      	bne.n	800829e <osMessageQueueNew+0x8c>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10c      	bne.n	800829e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008288:	2b00      	cmp	r3, #0
 800828a:	d108      	bne.n	800829e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <osMessageQueueNew+0x8c>
          mem = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	61bb      	str	r3, [r7, #24]
 8008298:	e001      	b.n	800829e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d10b      	bne.n	80082bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	2100      	movs	r1, #0
 80082ae:	9100      	str	r1, [sp, #0]
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 f972 	bl	800859c <xQueueGenericCreateStatic>
 80082b8:	61f8      	str	r0, [r7, #28]
 80082ba:	e008      	b.n	80082ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d105      	bne.n	80082ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80082c2:	2200      	movs	r2, #0
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f000 f9e5 	bl	8008696 <xQueueGenericCreate>
 80082cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00c      	beq.n	80082ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	e001      	b.n	80082e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80082e6:	6979      	ldr	r1, [r7, #20]
 80082e8:	69f8      	ldr	r0, [r7, #28]
 80082ea:	f000 fdc5 	bl	8008e78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80082ee:	69fb      	ldr	r3, [r7, #28]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3720      	adds	r7, #32
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	4a07      	ldr	r2, [pc, #28]	@ (8008324 <vApplicationGetIdleTaskMemory+0x2c>)
 8008308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	4a06      	ldr	r2, [pc, #24]	@ (8008328 <vApplicationGetIdleTaskMemory+0x30>)
 800830e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2280      	movs	r2, #128	@ 0x80
 8008314:	601a      	str	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	24000218 	.word	0x24000218
 8008328:	240002c0 	.word	0x240002c0

0800832c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4a07      	ldr	r2, [pc, #28]	@ (8008358 <vApplicationGetTimerTaskMemory+0x2c>)
 800833c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4a06      	ldr	r2, [pc, #24]	@ (800835c <vApplicationGetTimerTaskMemory+0x30>)
 8008342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800834a:	601a      	str	r2, [r3, #0]
}
 800834c:	bf00      	nop
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	240004c0 	.word	0x240004c0
 800835c:	24000568 	.word	0x24000568

08008360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f103 0208 	add.w	r2, r3, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f103 0208 	add.w	r2, r3, #8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f103 0208 	add.w	r2, r3, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	601a      	str	r2, [r3, #0]
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008402:	b480      	push	{r7}
 8008404:	b085      	sub	sp, #20
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d103      	bne.n	8008422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	e00c      	b.n	800843c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3308      	adds	r3, #8
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	e002      	b.n	8008430 <vListInsert+0x2e>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	d2f6      	bcs.n	800842a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6892      	ldr	r2, [r2, #8]
 800848a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6852      	ldr	r2, [r2, #4]
 8008494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d103      	bne.n	80084a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	1e5a      	subs	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084f4:	f002 f8e0 	bl	800a6b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008500:	68f9      	ldr	r1, [r7, #12]
 8008502:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	441a      	add	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008524:	3b01      	subs	r3, #1
 8008526:	68f9      	ldr	r1, [r7, #12]
 8008528:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800852a:	fb01 f303 	mul.w	r3, r1, r3
 800852e:	441a      	add	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	22ff      	movs	r2, #255	@ 0xff
 8008538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	22ff      	movs	r2, #255	@ 0xff
 8008540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d114      	bne.n	8008574 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01a      	beq.n	8008588 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3310      	adds	r3, #16
 8008556:	4618      	mov	r0, r3
 8008558:	f001 f97e 	bl	8009858 <xTaskRemoveFromEventList>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d012      	beq.n	8008588 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008562:	4b0d      	ldr	r3, [pc, #52]	@ (8008598 <xQueueGenericReset+0xd0>)
 8008564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	e009      	b.n	8008588 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3310      	adds	r3, #16
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff fef1 	bl	8008360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3324      	adds	r3, #36	@ 0x24
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff feec 	bl	8008360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008588:	f002 f8c8 	bl	800a71c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800858c:	2301      	movs	r3, #1
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08e      	sub	sp, #56	@ 0x38
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10b      	bne.n	80085e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085e0:	bf00      	nop
 80085e2:	bf00      	nop
 80085e4:	e7fd      	b.n	80085e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <xQueueGenericCreateStatic+0x56>
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <xQueueGenericCreateStatic+0x5a>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <xQueueGenericCreateStatic+0x5c>
 80085f6:	2300      	movs	r3, #0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10b      	bne.n	8008614 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	623b      	str	r3, [r7, #32]
}
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	e7fd      	b.n	8008610 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <xQueueGenericCreateStatic+0x84>
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <xQueueGenericCreateStatic+0x88>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <xQueueGenericCreateStatic+0x8a>
 8008624:	2300      	movs	r3, #0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10b      	bne.n	8008642 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800862a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	61fb      	str	r3, [r7, #28]
}
 800863c:	bf00      	nop
 800863e:	bf00      	nop
 8008640:	e7fd      	b.n	800863e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008642:	2350      	movs	r3, #80	@ 0x50
 8008644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b50      	cmp	r3, #80	@ 0x50
 800864a:	d00b      	beq.n	8008664 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	61bb      	str	r3, [r7, #24]
}
 800865e:	bf00      	nop
 8008660:	bf00      	nop
 8008662:	e7fd      	b.n	8008660 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008664:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800866a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00d      	beq.n	800868c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008678:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800867c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	4613      	mov	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f840 	bl	800870c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800868e:	4618      	mov	r0, r3
 8008690:	3730      	adds	r7, #48	@ 0x30
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008696:	b580      	push	{r7, lr}
 8008698:	b08a      	sub	sp, #40	@ 0x28
 800869a:	af02      	add	r7, sp, #8
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	4613      	mov	r3, r2
 80086a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10b      	bne.n	80086c2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	613b      	str	r3, [r7, #16]
}
 80086bc:	bf00      	nop
 80086be:	bf00      	nop
 80086c0:	e7fd      	b.n	80086be <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	3350      	adds	r3, #80	@ 0x50
 80086d0:	4618      	mov	r0, r3
 80086d2:	f002 f913 	bl	800a8fc <pvPortMalloc>
 80086d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	3350      	adds	r3, #80	@ 0x50
 80086e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086f0:	79fa      	ldrb	r2, [r7, #7]
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4613      	mov	r3, r2
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f805 	bl	800870c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008702:	69bb      	ldr	r3, [r7, #24]
	}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e002      	b.n	800872e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800873a:	2101      	movs	r1, #1
 800873c:	69b8      	ldr	r0, [r7, #24]
 800873e:	f7ff fec3 	bl	80084c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08e      	sub	sp, #56	@ 0x38
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008762:	2300      	movs	r3, #0
 8008764:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800876a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10b      	bne.n	8008788 <xQueueGenericSend+0x34>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008782:	bf00      	nop
 8008784:	bf00      	nop
 8008786:	e7fd      	b.n	8008784 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <xQueueGenericSend+0x42>
 800878e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <xQueueGenericSend+0x46>
 8008796:	2301      	movs	r3, #1
 8008798:	e000      	b.n	800879c <xQueueGenericSend+0x48>
 800879a:	2300      	movs	r3, #0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10b      	bne.n	80087b8 <xQueueGenericSend+0x64>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d103      	bne.n	80087c6 <xQueueGenericSend+0x72>
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <xQueueGenericSend+0x76>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e000      	b.n	80087cc <xQueueGenericSend+0x78>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10b      	bne.n	80087e8 <xQueueGenericSend+0x94>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	623b      	str	r3, [r7, #32]
}
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	e7fd      	b.n	80087e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e8:	f001 f9fc 	bl	8009be4 <xTaskGetSchedulerState>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d102      	bne.n	80087f8 <xQueueGenericSend+0xa4>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <xQueueGenericSend+0xa8>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <xQueueGenericSend+0xaa>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10b      	bne.n	800881a <xQueueGenericSend+0xc6>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	61fb      	str	r3, [r7, #28]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800881a:	f001 ff4d 	bl	800a6b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008826:	429a      	cmp	r2, r3
 8008828:	d302      	bcc.n	8008830 <xQueueGenericSend+0xdc>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d129      	bne.n	8008884 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008836:	f000 fa0f 	bl	8008c58 <prvCopyDataToQueue>
 800883a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d010      	beq.n	8008866 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	3324      	adds	r3, #36	@ 0x24
 8008848:	4618      	mov	r0, r3
 800884a:	f001 f805 	bl	8009858 <xTaskRemoveFromEventList>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d013      	beq.n	800887c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008854:	4b3f      	ldr	r3, [pc, #252]	@ (8008954 <xQueueGenericSend+0x200>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
 8008864:	e00a      	b.n	800887c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d007      	beq.n	800887c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800886c:	4b39      	ldr	r3, [pc, #228]	@ (8008954 <xQueueGenericSend+0x200>)
 800886e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800887c:	f001 ff4e 	bl	800a71c <vPortExitCritical>
				return pdPASS;
 8008880:	2301      	movs	r3, #1
 8008882:	e063      	b.n	800894c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d103      	bne.n	8008892 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800888a:	f001 ff47 	bl	800a71c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800888e:	2300      	movs	r3, #0
 8008890:	e05c      	b.n	800894c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008894:	2b00      	cmp	r3, #0
 8008896:	d106      	bne.n	80088a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008898:	f107 0314 	add.w	r3, r7, #20
 800889c:	4618      	mov	r0, r3
 800889e:	f001 f83f 	bl	8009920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088a2:	2301      	movs	r3, #1
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a6:	f001 ff39 	bl	800a71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088aa:	f000 fda7 	bl	80093fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ae:	f001 ff03 	bl	800a6b8 <vPortEnterCritical>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d103      	bne.n	80088c8 <xQueueGenericSend+0x174>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d4:	d103      	bne.n	80088de <xQueueGenericSend+0x18a>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088de:	f001 ff1d 	bl	800a71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088e2:	1d3a      	adds	r2, r7, #4
 80088e4:	f107 0314 	add.w	r3, r7, #20
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 f82e 	bl	800994c <xTaskCheckForTimeOut>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d124      	bne.n	8008940 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088f8:	f000 faa6 	bl	8008e48 <prvIsQueueFull>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d018      	beq.n	8008934 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	3310      	adds	r3, #16
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f000 ff52 	bl	80097b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008912:	f000 fa31 	bl	8008d78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008916:	f000 fd7f 	bl	8009418 <xTaskResumeAll>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	f47f af7c 	bne.w	800881a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008922:	4b0c      	ldr	r3, [pc, #48]	@ (8008954 <xQueueGenericSend+0x200>)
 8008924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	e772      	b.n	800881a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008936:	f000 fa1f 	bl	8008d78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800893a:	f000 fd6d 	bl	8009418 <xTaskResumeAll>
 800893e:	e76c      	b.n	800881a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008942:	f000 fa19 	bl	8008d78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008946:	f000 fd67 	bl	8009418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800894a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800894c:	4618      	mov	r0, r3
 800894e:	3738      	adds	r7, #56	@ 0x38
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b090      	sub	sp, #64	@ 0x40
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800896a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d103      	bne.n	8008996 <xQueueGenericSendFromISR+0x3e>
 800898e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <xQueueGenericSendFromISR+0x42>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <xQueueGenericSendFromISR+0x44>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10b      	bne.n	80089b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d103      	bne.n	80089c6 <xQueueGenericSendFromISR+0x6e>
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <xQueueGenericSendFromISR+0x72>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <xQueueGenericSendFromISR+0x74>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	623b      	str	r3, [r7, #32]
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e8:	f001 ff46 	bl	800a878 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089ec:	f3ef 8211 	mrs	r2, BASEPRI
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	61fa      	str	r2, [r7, #28]
 8008a02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d302      	bcc.n	8008a1a <xQueueGenericSendFromISR+0xc2>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d12f      	bne.n	8008a7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a30:	f000 f912 	bl	8008c58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d112      	bne.n	8008a64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d016      	beq.n	8008a74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	3324      	adds	r3, #36	@ 0x24
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 ff04 	bl	8009858 <xTaskRemoveFromEventList>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00e      	beq.n	8008a74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	e007      	b.n	8008a74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a68:	3301      	adds	r3, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	b25a      	sxtb	r2, r3
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a74:	2301      	movs	r3, #1
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a78:	e001      	b.n	8008a7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3740      	adds	r7, #64	@ 0x40
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08c      	sub	sp, #48	@ 0x30
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <xQueueReceive+0x32>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	623b      	str	r3, [r7, #32]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d103      	bne.n	8008ad4 <xQueueReceive+0x40>
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <xQueueReceive+0x44>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <xQueueReceive+0x46>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10b      	bne.n	8008af6 <xQueueReceive+0x62>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	61fb      	str	r3, [r7, #28]
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	e7fd      	b.n	8008af2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008af6:	f001 f875 	bl	8009be4 <xTaskGetSchedulerState>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <xQueueReceive+0x72>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <xQueueReceive+0x76>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <xQueueReceive+0x78>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10b      	bne.n	8008b28 <xQueueReceive+0x94>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	61bb      	str	r3, [r7, #24]
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	e7fd      	b.n	8008b24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b28:	f001 fdc6 	bl	800a6b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01f      	beq.n	8008b78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b3c:	f000 f8f6 	bl	8008d2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b42:	1e5a      	subs	r2, r3, #1
 8008b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00f      	beq.n	8008b70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	3310      	adds	r3, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fe7f 	bl	8009858 <xTaskRemoveFromEventList>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b60:	4b3c      	ldr	r3, [pc, #240]	@ (8008c54 <xQueueReceive+0x1c0>)
 8008b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b70:	f001 fdd4 	bl	800a71c <vPortExitCritical>
				return pdPASS;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e069      	b.n	8008c4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b7e:	f001 fdcd 	bl	800a71c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e062      	b.n	8008c4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b8c:	f107 0310 	add.w	r3, r7, #16
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fec5 	bl	8009920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b96:	2301      	movs	r3, #1
 8008b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b9a:	f001 fdbf 	bl	800a71c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b9e:	f000 fc2d 	bl	80093fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba2:	f001 fd89 	bl	800a6b8 <vPortEnterCritical>
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d103      	bne.n	8008bbc <xQueueReceive+0x128>
 8008bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bc2:	b25b      	sxtb	r3, r3
 8008bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc8:	d103      	bne.n	8008bd2 <xQueueReceive+0x13e>
 8008bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bd2:	f001 fda3 	bl	800a71c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bd6:	1d3a      	adds	r2, r7, #4
 8008bd8:	f107 0310 	add.w	r3, r7, #16
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 feb4 	bl	800994c <xTaskCheckForTimeOut>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d123      	bne.n	8008c32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bec:	f000 f916 	bl	8008e1c <prvIsQueueEmpty>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d017      	beq.n	8008c26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	3324      	adds	r3, #36	@ 0x24
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fdd8 	bl	80097b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c06:	f000 f8b7 	bl	8008d78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c0a:	f000 fc05 	bl	8009418 <xTaskResumeAll>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d189      	bne.n	8008b28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c14:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <xQueueReceive+0x1c0>)
 8008c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	e780      	b.n	8008b28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c28:	f000 f8a6 	bl	8008d78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c2c:	f000 fbf4 	bl	8009418 <xTaskResumeAll>
 8008c30:	e77a      	b.n	8008b28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c34:	f000 f8a0 	bl	8008d78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c38:	f000 fbee 	bl	8009418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c3e:	f000 f8ed 	bl	8008e1c <prvIsQueueEmpty>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f43f af6f 	beq.w	8008b28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3730      	adds	r7, #48	@ 0x30
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	e000ed04 	.word	0xe000ed04

08008c58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10d      	bne.n	8008c92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d14d      	bne.n	8008d1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 ffcc 	bl	8009c20 <xTaskPriorityDisinherit>
 8008c88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	609a      	str	r2, [r3, #8]
 8008c90:	e043      	b.n	8008d1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d119      	bne.n	8008ccc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6858      	ldr	r0, [r3, #4]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	68b9      	ldr	r1, [r7, #8]
 8008ca4:	f002 fb01 	bl	800b2aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d32b      	bcc.n	8008d1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]
 8008cca:	e026      	b.n	8008d1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68d8      	ldr	r0, [r3, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	f002 fae7 	bl	800b2aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	425b      	negs	r3, r3
 8008ce6:	441a      	add	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d207      	bcs.n	8008d08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d00:	425b      	negs	r3, r3
 8008d02:	441a      	add	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d105      	bne.n	8008d1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d22:	697b      	ldr	r3, [r7, #20]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d018      	beq.n	8008d70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d46:	441a      	add	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d303      	bcc.n	8008d60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68d9      	ldr	r1, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6838      	ldr	r0, [r7, #0]
 8008d6c:	f002 fa9d 	bl	800b2aa <memcpy>
	}
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d80:	f001 fc9a 	bl	800a6b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d8c:	e011      	b.n	8008db2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d012      	beq.n	8008dbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	3324      	adds	r3, #36	@ 0x24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fd5c 	bl	8009858 <xTaskRemoveFromEventList>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008da6:	f000 fe35 	bl	8009a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	dce9      	bgt.n	8008d8e <prvUnlockQueue+0x16>
 8008dba:	e000      	b.n	8008dbe <prvUnlockQueue+0x46>
					break;
 8008dbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	22ff      	movs	r2, #255	@ 0xff
 8008dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008dc6:	f001 fca9 	bl	800a71c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008dca:	f001 fc75 	bl	800a6b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dd6:	e011      	b.n	8008dfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d012      	beq.n	8008e06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3310      	adds	r3, #16
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 fd37 	bl	8009858 <xTaskRemoveFromEventList>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008df0:	f000 fe10 	bl	8009a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dce9      	bgt.n	8008dd8 <prvUnlockQueue+0x60>
 8008e04:	e000      	b.n	8008e08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	22ff      	movs	r2, #255	@ 0xff
 8008e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e10:	f001 fc84 	bl	800a71c <vPortExitCritical>
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e24:	f001 fc48 	bl	800a6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e30:	2301      	movs	r3, #1
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e001      	b.n	8008e3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e3a:	f001 fc6f 	bl	800a71c <vPortExitCritical>

	return xReturn;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e50:	f001 fc32 	bl	800a6b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d102      	bne.n	8008e66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e60:	2301      	movs	r3, #1
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	e001      	b.n	8008e6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e6a:	f001 fc57 	bl	800a71c <vPortExitCritical>

	return xReturn;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
 8008e86:	e014      	b.n	8008eb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e88:	4a0f      	ldr	r2, [pc, #60]	@ (8008ec8 <vQueueAddToRegistry+0x50>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10b      	bne.n	8008eac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e94:	490c      	ldr	r1, [pc, #48]	@ (8008ec8 <vQueueAddToRegistry+0x50>)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ec8 <vQueueAddToRegistry+0x50>)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	4413      	add	r3, r2
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008eaa:	e006      	b.n	8008eba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b07      	cmp	r3, #7
 8008eb6:	d9e7      	bls.n	8008e88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	3714      	adds	r7, #20
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	24000968 	.word	0x24000968

08008ecc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008edc:	f001 fbec 	bl	800a6b8 <vPortEnterCritical>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ee6:	b25b      	sxtb	r3, r3
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eec:	d103      	bne.n	8008ef6 <vQueueWaitForMessageRestricted+0x2a>
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008efc:	b25b      	sxtb	r3, r3
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f02:	d103      	bne.n	8008f0c <vQueueWaitForMessageRestricted+0x40>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f0c:	f001 fc06 	bl	800a71c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	3324      	adds	r3, #36	@ 0x24
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 fc6d 	bl	8009800 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f26:	6978      	ldr	r0, [r7, #20]
 8008f28:	f7ff ff26 	bl	8008d78 <prvUnlockQueue>
	}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08e      	sub	sp, #56	@ 0x38
 8008f38:	af04      	add	r7, sp, #16
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10b      	bne.n	8008f60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	623b      	str	r3, [r7, #32]
}
 8008f5a:	bf00      	nop
 8008f5c:	bf00      	nop
 8008f5e:	e7fd      	b.n	8008f5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10b      	bne.n	8008f7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	61fb      	str	r3, [r7, #28]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f7e:	23a8      	movs	r3, #168	@ 0xa8
 8008f80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2ba8      	cmp	r3, #168	@ 0xa8
 8008f86:	d00b      	beq.n	8008fa0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	61bb      	str	r3, [r7, #24]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fa0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01e      	beq.n	8008fe6 <xTaskCreateStatic+0xb2>
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01b      	beq.n	8008fe6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	9303      	str	r3, [sp, #12]
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc6:	9302      	str	r3, [sp, #8]
 8008fc8:	f107 0314 	add.w	r3, r7, #20
 8008fcc:	9301      	str	r3, [sp, #4]
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f851 	bl	8009080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008fe0:	f000 f8f6 	bl	80091d0 <prvAddNewTaskToReadyList>
 8008fe4:	e001      	b.n	8008fea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fea:	697b      	ldr	r3, [r7, #20]
	}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3728      	adds	r7, #40	@ 0x28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08c      	sub	sp, #48	@ 0x30
 8008ff8:	af04      	add	r7, sp, #16
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	603b      	str	r3, [r7, #0]
 8009000:	4613      	mov	r3, r2
 8009002:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009004:	88fb      	ldrh	r3, [r7, #6]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4618      	mov	r0, r3
 800900a:	f001 fc77 	bl	800a8fc <pvPortMalloc>
 800900e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00e      	beq.n	8009034 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009016:	20a8      	movs	r0, #168	@ 0xa8
 8009018:	f001 fc70 	bl	800a8fc <pvPortMalloc>
 800901c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d003      	beq.n	800902c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	631a      	str	r2, [r3, #48]	@ 0x30
 800902a:	e005      	b.n	8009038 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800902c:	6978      	ldr	r0, [r7, #20]
 800902e:	f001 fd33 	bl	800aa98 <vPortFree>
 8009032:	e001      	b.n	8009038 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d017      	beq.n	800906e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009046:	88fa      	ldrh	r2, [r7, #6]
 8009048:	2300      	movs	r3, #0
 800904a:	9303      	str	r3, [sp, #12]
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f000 f80f 	bl	8009080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009062:	69f8      	ldr	r0, [r7, #28]
 8009064:	f000 f8b4 	bl	80091d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009068:	2301      	movs	r3, #1
 800906a:	61bb      	str	r3, [r7, #24]
 800906c:	e002      	b.n	8009074 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800906e:	f04f 33ff 	mov.w	r3, #4294967295
 8009072:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009074:	69bb      	ldr	r3, [r7, #24]
	}
 8009076:	4618      	mov	r0, r3
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	461a      	mov	r2, r3
 8009098:	21a5      	movs	r1, #165	@ 0xa5
 800909a:	f002 f835 	bl	800b108 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800909e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80090a8:	440b      	add	r3, r1
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f023 0307 	bic.w	r3, r3, #7
 80090b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <prvInitialiseNewTask+0x5a>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	617b      	str	r3, [r7, #20]
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop
 80090d8:	e7fd      	b.n	80090d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01f      	beq.n	8009120 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090e0:	2300      	movs	r3, #0
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	e012      	b.n	800910c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	7819      	ldrb	r1, [r3, #0]
 80090ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	4413      	add	r3, r2
 80090f4:	3334      	adds	r3, #52	@ 0x34
 80090f6:	460a      	mov	r2, r1
 80090f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d006      	beq.n	8009114 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	3301      	adds	r3, #1
 800910a:	61fb      	str	r3, [r7, #28]
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	2b0f      	cmp	r3, #15
 8009110:	d9e9      	bls.n	80090e6 <prvInitialiseNewTask+0x66>
 8009112:	e000      	b.n	8009116 <prvInitialiseNewTask+0x96>
			{
				break;
 8009114:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800911e:	e003      	b.n	8009128 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912a:	2b37      	cmp	r3, #55	@ 0x37
 800912c:	d901      	bls.n	8009132 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800912e:	2337      	movs	r3, #55	@ 0x37
 8009130:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009136:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800913c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	2200      	movs	r2, #0
 8009142:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	3304      	adds	r3, #4
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff f929 	bl	80083a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	3318      	adds	r3, #24
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff f924 	bl	80083a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800915c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009170:	2200      	movs	r2, #0
 8009172:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009178:	2200      	movs	r2, #0
 800917a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	3354      	adds	r3, #84	@ 0x54
 8009182:	224c      	movs	r2, #76	@ 0x4c
 8009184:	2100      	movs	r1, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f001 ffbe 	bl	800b108 <memset>
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	4a0d      	ldr	r2, [pc, #52]	@ (80091c4 <prvInitialiseNewTask+0x144>)
 8009190:	659a      	str	r2, [r3, #88]	@ 0x58
 8009192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009194:	4a0c      	ldr	r2, [pc, #48]	@ (80091c8 <prvInitialiseNewTask+0x148>)
 8009196:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	4a0c      	ldr	r2, [pc, #48]	@ (80091cc <prvInitialiseNewTask+0x14c>)
 800919c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	68f9      	ldr	r1, [r7, #12]
 80091a2:	69b8      	ldr	r0, [r7, #24]
 80091a4:	f001 f95a 	bl	800a45c <pxPortInitialiseStack>
 80091a8:	4602      	mov	r2, r0
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ba:	bf00      	nop
 80091bc:	3720      	adds	r7, #32
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	24004bfc 	.word	0x24004bfc
 80091c8:	24004c64 	.word	0x24004c64
 80091cc:	24004ccc 	.word	0x24004ccc

080091d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091d8:	f001 fa6e 	bl	800a6b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091dc:	4b2d      	ldr	r3, [pc, #180]	@ (8009294 <prvAddNewTaskToReadyList+0xc4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009294 <prvAddNewTaskToReadyList+0xc4>)
 80091e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009298 <prvAddNewTaskToReadyList+0xc8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009298 <prvAddNewTaskToReadyList+0xc8>)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091f4:	4b27      	ldr	r3, [pc, #156]	@ (8009294 <prvAddNewTaskToReadyList+0xc4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d110      	bne.n	800921e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091fc:	f000 fc2e 	bl	8009a5c <prvInitialiseTaskLists>
 8009200:	e00d      	b.n	800921e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009202:	4b26      	ldr	r3, [pc, #152]	@ (800929c <prvAddNewTaskToReadyList+0xcc>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d109      	bne.n	800921e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800920a:	4b23      	ldr	r3, [pc, #140]	@ (8009298 <prvAddNewTaskToReadyList+0xc8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009214:	429a      	cmp	r2, r3
 8009216:	d802      	bhi.n	800921e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009218:	4a1f      	ldr	r2, [pc, #124]	@ (8009298 <prvAddNewTaskToReadyList+0xc8>)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800921e:	4b20      	ldr	r3, [pc, #128]	@ (80092a0 <prvAddNewTaskToReadyList+0xd0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	4a1e      	ldr	r2, [pc, #120]	@ (80092a0 <prvAddNewTaskToReadyList+0xd0>)
 8009226:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009228:	4b1d      	ldr	r3, [pc, #116]	@ (80092a0 <prvAddNewTaskToReadyList+0xd0>)
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009234:	4b1b      	ldr	r3, [pc, #108]	@ (80092a4 <prvAddNewTaskToReadyList+0xd4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d903      	bls.n	8009244 <prvAddNewTaskToReadyList+0x74>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009240:	4a18      	ldr	r2, [pc, #96]	@ (80092a4 <prvAddNewTaskToReadyList+0xd4>)
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4a15      	ldr	r2, [pc, #84]	@ (80092a8 <prvAddNewTaskToReadyList+0xd8>)
 8009252:	441a      	add	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3304      	adds	r3, #4
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f7ff f8ad 	bl	80083ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009260:	f001 fa5c 	bl	800a71c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009264:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <prvAddNewTaskToReadyList+0xcc>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00e      	beq.n	800928a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800926c:	4b0a      	ldr	r3, [pc, #40]	@ (8009298 <prvAddNewTaskToReadyList+0xc8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009276:	429a      	cmp	r2, r3
 8009278:	d207      	bcs.n	800928a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800927a:	4b0c      	ldr	r3, [pc, #48]	@ (80092ac <prvAddNewTaskToReadyList+0xdc>)
 800927c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	24000e7c 	.word	0x24000e7c
 8009298:	240009a8 	.word	0x240009a8
 800929c:	24000e88 	.word	0x24000e88
 80092a0:	24000e98 	.word	0x24000e98
 80092a4:	24000e84 	.word	0x24000e84
 80092a8:	240009ac 	.word	0x240009ac
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d018      	beq.n	80092f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092c2:	4b14      	ldr	r3, [pc, #80]	@ (8009314 <vTaskDelay+0x64>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00b      	beq.n	80092e2 <vTaskDelay+0x32>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60bb      	str	r3, [r7, #8]
}
 80092dc:	bf00      	nop
 80092de:	bf00      	nop
 80092e0:	e7fd      	b.n	80092de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092e2:	f000 f88b 	bl	80093fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092e6:	2100      	movs	r1, #0
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 fd09 	bl	8009d00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092ee:	f000 f893 	bl	8009418 <xTaskResumeAll>
 80092f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d107      	bne.n	800930a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80092fa:	4b07      	ldr	r3, [pc, #28]	@ (8009318 <vTaskDelay+0x68>)
 80092fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800930a:	bf00      	nop
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	24000ea4 	.word	0x24000ea4
 8009318:	e000ed04 	.word	0xe000ed04

0800931c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08a      	sub	sp, #40	@ 0x28
 8009320:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009322:	2300      	movs	r3, #0
 8009324:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800932a:	463a      	mov	r2, r7
 800932c:	1d39      	adds	r1, r7, #4
 800932e:	f107 0308 	add.w	r3, r7, #8
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe ffe0 	bl	80082f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009338:	6839      	ldr	r1, [r7, #0]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	9202      	str	r2, [sp, #8]
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	2300      	movs	r3, #0
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	2300      	movs	r3, #0
 8009348:	460a      	mov	r2, r1
 800934a:	4924      	ldr	r1, [pc, #144]	@ (80093dc <vTaskStartScheduler+0xc0>)
 800934c:	4824      	ldr	r0, [pc, #144]	@ (80093e0 <vTaskStartScheduler+0xc4>)
 800934e:	f7ff fdf1 	bl	8008f34 <xTaskCreateStatic>
 8009352:	4603      	mov	r3, r0
 8009354:	4a23      	ldr	r2, [pc, #140]	@ (80093e4 <vTaskStartScheduler+0xc8>)
 8009356:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009358:	4b22      	ldr	r3, [pc, #136]	@ (80093e4 <vTaskStartScheduler+0xc8>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009360:	2301      	movs	r3, #1
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	e001      	b.n	800936a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d102      	bne.n	8009376 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009370:	f000 fd1a 	bl	8009da8 <xTimerCreateTimerTask>
 8009374:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d11b      	bne.n	80093b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	613b      	str	r3, [r7, #16]
}
 800938e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009390:	4b15      	ldr	r3, [pc, #84]	@ (80093e8 <vTaskStartScheduler+0xcc>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3354      	adds	r3, #84	@ 0x54
 8009396:	4a15      	ldr	r2, [pc, #84]	@ (80093ec <vTaskStartScheduler+0xd0>)
 8009398:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800939a:	4b15      	ldr	r3, [pc, #84]	@ (80093f0 <vTaskStartScheduler+0xd4>)
 800939c:	f04f 32ff 	mov.w	r2, #4294967295
 80093a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093a2:	4b14      	ldr	r3, [pc, #80]	@ (80093f4 <vTaskStartScheduler+0xd8>)
 80093a4:	2201      	movs	r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093a8:	4b13      	ldr	r3, [pc, #76]	@ (80093f8 <vTaskStartScheduler+0xdc>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093ae:	f001 f8df 	bl	800a570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093b2:	e00f      	b.n	80093d4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d10b      	bne.n	80093d4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	60fb      	str	r3, [r7, #12]
}
 80093ce:	bf00      	nop
 80093d0:	bf00      	nop
 80093d2:	e7fd      	b.n	80093d0 <vTaskStartScheduler+0xb4>
}
 80093d4:	bf00      	nop
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	0800be04 	.word	0x0800be04
 80093e0:	08009a2d 	.word	0x08009a2d
 80093e4:	24000ea0 	.word	0x24000ea0
 80093e8:	240009a8 	.word	0x240009a8
 80093ec:	24000020 	.word	0x24000020
 80093f0:	24000e9c 	.word	0x24000e9c
 80093f4:	24000e88 	.word	0x24000e88
 80093f8:	24000e80 	.word	0x24000e80

080093fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009400:	4b04      	ldr	r3, [pc, #16]	@ (8009414 <vTaskSuspendAll+0x18>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	4a03      	ldr	r2, [pc, #12]	@ (8009414 <vTaskSuspendAll+0x18>)
 8009408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800940a:	bf00      	nop
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	24000ea4 	.word	0x24000ea4

08009418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009422:	2300      	movs	r3, #0
 8009424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009426:	4b42      	ldr	r3, [pc, #264]	@ (8009530 <xTaskResumeAll+0x118>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10b      	bne.n	8009446 <xTaskResumeAll+0x2e>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	603b      	str	r3, [r7, #0]
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009446:	f001 f937 	bl	800a6b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800944a:	4b39      	ldr	r3, [pc, #228]	@ (8009530 <xTaskResumeAll+0x118>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	3b01      	subs	r3, #1
 8009450:	4a37      	ldr	r2, [pc, #220]	@ (8009530 <xTaskResumeAll+0x118>)
 8009452:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009454:	4b36      	ldr	r3, [pc, #216]	@ (8009530 <xTaskResumeAll+0x118>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d162      	bne.n	8009522 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800945c:	4b35      	ldr	r3, [pc, #212]	@ (8009534 <xTaskResumeAll+0x11c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d05e      	beq.n	8009522 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009464:	e02f      	b.n	80094c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009466:	4b34      	ldr	r3, [pc, #208]	@ (8009538 <xTaskResumeAll+0x120>)
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3318      	adds	r3, #24
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fffe 	bl	8008474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe fff9 	bl	8008474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009486:	4b2d      	ldr	r3, [pc, #180]	@ (800953c <xTaskResumeAll+0x124>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	429a      	cmp	r2, r3
 800948c:	d903      	bls.n	8009496 <xTaskResumeAll+0x7e>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009492:	4a2a      	ldr	r2, [pc, #168]	@ (800953c <xTaskResumeAll+0x124>)
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800949a:	4613      	mov	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4a27      	ldr	r2, [pc, #156]	@ (8009540 <xTaskResumeAll+0x128>)
 80094a4:	441a      	add	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f7fe ff84 	bl	80083ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b6:	4b23      	ldr	r3, [pc, #140]	@ (8009544 <xTaskResumeAll+0x12c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094bc:	429a      	cmp	r2, r3
 80094be:	d302      	bcc.n	80094c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80094c0:	4b21      	ldr	r3, [pc, #132]	@ (8009548 <xTaskResumeAll+0x130>)
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009538 <xTaskResumeAll+0x120>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1cb      	bne.n	8009466 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094d4:	f000 fb66 	bl	8009ba4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094d8:	4b1c      	ldr	r3, [pc, #112]	@ (800954c <xTaskResumeAll+0x134>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d010      	beq.n	8009506 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094e4:	f000 f846 	bl	8009574 <xTaskIncrementTick>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d002      	beq.n	80094f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80094ee:	4b16      	ldr	r3, [pc, #88]	@ (8009548 <xTaskResumeAll+0x130>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f1      	bne.n	80094e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009500:	4b12      	ldr	r3, [pc, #72]	@ (800954c <xTaskResumeAll+0x134>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009506:	4b10      	ldr	r3, [pc, #64]	@ (8009548 <xTaskResumeAll+0x130>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800950e:	2301      	movs	r3, #1
 8009510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009512:	4b0f      	ldr	r3, [pc, #60]	@ (8009550 <xTaskResumeAll+0x138>)
 8009514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009522:	f001 f8fb 	bl	800a71c <vPortExitCritical>

	return xAlreadyYielded;
 8009526:	68bb      	ldr	r3, [r7, #8]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	24000ea4 	.word	0x24000ea4
 8009534:	24000e7c 	.word	0x24000e7c
 8009538:	24000e3c 	.word	0x24000e3c
 800953c:	24000e84 	.word	0x24000e84
 8009540:	240009ac 	.word	0x240009ac
 8009544:	240009a8 	.word	0x240009a8
 8009548:	24000e90 	.word	0x24000e90
 800954c:	24000e8c 	.word	0x24000e8c
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800955a:	4b05      	ldr	r3, [pc, #20]	@ (8009570 <xTaskGetTickCount+0x1c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009560:	687b      	ldr	r3, [r7, #4]
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	24000e80 	.word	0x24000e80

08009574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800957e:	4b4f      	ldr	r3, [pc, #316]	@ (80096bc <xTaskIncrementTick+0x148>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f040 8090 	bne.w	80096a8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009588:	4b4d      	ldr	r3, [pc, #308]	@ (80096c0 <xTaskIncrementTick+0x14c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009590:	4a4b      	ldr	r2, [pc, #300]	@ (80096c0 <xTaskIncrementTick+0x14c>)
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d121      	bne.n	80095e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800959c:	4b49      	ldr	r3, [pc, #292]	@ (80096c4 <xTaskIncrementTick+0x150>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00b      	beq.n	80095be <xTaskIncrementTick+0x4a>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	603b      	str	r3, [r7, #0]
}
 80095b8:	bf00      	nop
 80095ba:	bf00      	nop
 80095bc:	e7fd      	b.n	80095ba <xTaskIncrementTick+0x46>
 80095be:	4b41      	ldr	r3, [pc, #260]	@ (80096c4 <xTaskIncrementTick+0x150>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	4b40      	ldr	r3, [pc, #256]	@ (80096c8 <xTaskIncrementTick+0x154>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a3e      	ldr	r2, [pc, #248]	@ (80096c4 <xTaskIncrementTick+0x150>)
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	4a3e      	ldr	r2, [pc, #248]	@ (80096c8 <xTaskIncrementTick+0x154>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	4b3e      	ldr	r3, [pc, #248]	@ (80096cc <xTaskIncrementTick+0x158>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	4a3c      	ldr	r2, [pc, #240]	@ (80096cc <xTaskIncrementTick+0x158>)
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	f000 fae2 	bl	8009ba4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095e0:	4b3b      	ldr	r3, [pc, #236]	@ (80096d0 <xTaskIncrementTick+0x15c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d349      	bcc.n	800967e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095ea:	4b36      	ldr	r3, [pc, #216]	@ (80096c4 <xTaskIncrementTick+0x150>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d104      	bne.n	80095fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f4:	4b36      	ldr	r3, [pc, #216]	@ (80096d0 <xTaskIncrementTick+0x15c>)
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295
 80095fa:	601a      	str	r2, [r3, #0]
					break;
 80095fc:	e03f      	b.n	800967e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fe:	4b31      	ldr	r3, [pc, #196]	@ (80096c4 <xTaskIncrementTick+0x150>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800960e:	693a      	ldr	r2, [r7, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009616:	4a2e      	ldr	r2, [pc, #184]	@ (80096d0 <xTaskIncrementTick+0x15c>)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800961c:	e02f      	b.n	800967e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3304      	adds	r3, #4
 8009622:	4618      	mov	r0, r3
 8009624:	f7fe ff26 	bl	8008474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3318      	adds	r3, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f7fe ff1d 	bl	8008474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963e:	4b25      	ldr	r3, [pc, #148]	@ (80096d4 <xTaskIncrementTick+0x160>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d903      	bls.n	800964e <xTaskIncrementTick+0xda>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964a:	4a22      	ldr	r2, [pc, #136]	@ (80096d4 <xTaskIncrementTick+0x160>)
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4a1f      	ldr	r2, [pc, #124]	@ (80096d8 <xTaskIncrementTick+0x164>)
 800965c:	441a      	add	r2, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	3304      	adds	r3, #4
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	f7fe fea8 	bl	80083ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966e:	4b1b      	ldr	r3, [pc, #108]	@ (80096dc <xTaskIncrementTick+0x168>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	429a      	cmp	r2, r3
 8009676:	d3b8      	bcc.n	80095ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967c:	e7b5      	b.n	80095ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800967e:	4b17      	ldr	r3, [pc, #92]	@ (80096dc <xTaskIncrementTick+0x168>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009684:	4914      	ldr	r1, [pc, #80]	@ (80096d8 <xTaskIncrementTick+0x164>)
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	440b      	add	r3, r1
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d901      	bls.n	800969a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009696:	2301      	movs	r3, #1
 8009698:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800969a:	4b11      	ldr	r3, [pc, #68]	@ (80096e0 <xTaskIncrementTick+0x16c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d007      	beq.n	80096b2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	e004      	b.n	80096b2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096a8:	4b0e      	ldr	r3, [pc, #56]	@ (80096e4 <xTaskIncrementTick+0x170>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	4a0d      	ldr	r2, [pc, #52]	@ (80096e4 <xTaskIncrementTick+0x170>)
 80096b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096b2:	697b      	ldr	r3, [r7, #20]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	24000ea4 	.word	0x24000ea4
 80096c0:	24000e80 	.word	0x24000e80
 80096c4:	24000e34 	.word	0x24000e34
 80096c8:	24000e38 	.word	0x24000e38
 80096cc:	24000e94 	.word	0x24000e94
 80096d0:	24000e9c 	.word	0x24000e9c
 80096d4:	24000e84 	.word	0x24000e84
 80096d8:	240009ac 	.word	0x240009ac
 80096dc:	240009a8 	.word	0x240009a8
 80096e0:	24000e90 	.word	0x24000e90
 80096e4:	24000e8c 	.word	0x24000e8c

080096e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ee:	4b2b      	ldr	r3, [pc, #172]	@ (800979c <vTaskSwitchContext+0xb4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096f6:	4b2a      	ldr	r3, [pc, #168]	@ (80097a0 <vTaskSwitchContext+0xb8>)
 80096f8:	2201      	movs	r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096fc:	e047      	b.n	800978e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80096fe:	4b28      	ldr	r3, [pc, #160]	@ (80097a0 <vTaskSwitchContext+0xb8>)
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009704:	4b27      	ldr	r3, [pc, #156]	@ (80097a4 <vTaskSwitchContext+0xbc>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	e011      	b.n	8009730 <vTaskSwitchContext+0x48>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <vTaskSwitchContext+0x42>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	607b      	str	r3, [r7, #4]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <vTaskSwitchContext+0x3e>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3b01      	subs	r3, #1
 800972e:	60fb      	str	r3, [r7, #12]
 8009730:	491d      	ldr	r1, [pc, #116]	@ (80097a8 <vTaskSwitchContext+0xc0>)
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	4613      	mov	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	440b      	add	r3, r1
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0e3      	beq.n	800970c <vTaskSwitchContext+0x24>
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4a16      	ldr	r2, [pc, #88]	@ (80097a8 <vTaskSwitchContext+0xc0>)
 8009750:	4413      	add	r3, r2
 8009752:	60bb      	str	r3, [r7, #8]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	685a      	ldr	r2, [r3, #4]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	605a      	str	r2, [r3, #4]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	3308      	adds	r3, #8
 8009766:	429a      	cmp	r2, r3
 8009768:	d104      	bne.n	8009774 <vTaskSwitchContext+0x8c>
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	605a      	str	r2, [r3, #4]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	4a0c      	ldr	r2, [pc, #48]	@ (80097ac <vTaskSwitchContext+0xc4>)
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	4a09      	ldr	r2, [pc, #36]	@ (80097a4 <vTaskSwitchContext+0xbc>)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009784:	4b09      	ldr	r3, [pc, #36]	@ (80097ac <vTaskSwitchContext+0xc4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3354      	adds	r3, #84	@ 0x54
 800978a:	4a09      	ldr	r2, [pc, #36]	@ (80097b0 <vTaskSwitchContext+0xc8>)
 800978c:	6013      	str	r3, [r2, #0]
}
 800978e:	bf00      	nop
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	24000ea4 	.word	0x24000ea4
 80097a0:	24000e90 	.word	0x24000e90
 80097a4:	24000e84 	.word	0x24000e84
 80097a8:	240009ac 	.word	0x240009ac
 80097ac:	240009a8 	.word	0x240009a8
 80097b0:	24000020 	.word	0x24000020

080097b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	60fb      	str	r3, [r7, #12]
}
 80097d6:	bf00      	nop
 80097d8:	bf00      	nop
 80097da:	e7fd      	b.n	80097d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097dc:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <vTaskPlaceOnEventList+0x48>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3318      	adds	r3, #24
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7fe fe0c 	bl	8008402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097ea:	2101      	movs	r1, #1
 80097ec:	6838      	ldr	r0, [r7, #0]
 80097ee:	f000 fa87 	bl	8009d00 <prvAddCurrentTaskToDelayedList>
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	240009a8 	.word	0x240009a8

08009800 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	617b      	str	r3, [r7, #20]
}
 8009824:	bf00      	nop
 8009826:	bf00      	nop
 8009828:	e7fd      	b.n	8009826 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800982a:	4b0a      	ldr	r3, [pc, #40]	@ (8009854 <vTaskPlaceOnEventListRestricted+0x54>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3318      	adds	r3, #24
 8009830:	4619      	mov	r1, r3
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7fe fdc1 	bl	80083ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800983e:	f04f 33ff 	mov.w	r3, #4294967295
 8009842:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f000 fa5a 	bl	8009d00 <prvAddCurrentTaskToDelayedList>
	}
 800984c:	bf00      	nop
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	240009a8 	.word	0x240009a8

08009858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	60fb      	str	r3, [r7, #12]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	3318      	adds	r3, #24
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fdf2 	bl	8008474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009890:	4b1d      	ldr	r3, [pc, #116]	@ (8009908 <xTaskRemoveFromEventList+0xb0>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d11d      	bne.n	80098d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	3304      	adds	r3, #4
 800989c:	4618      	mov	r0, r3
 800989e:	f7fe fde9 	bl	8008474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a6:	4b19      	ldr	r3, [pc, #100]	@ (800990c <xTaskRemoveFromEventList+0xb4>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d903      	bls.n	80098b6 <xTaskRemoveFromEventList+0x5e>
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	4a16      	ldr	r2, [pc, #88]	@ (800990c <xTaskRemoveFromEventList+0xb4>)
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4a13      	ldr	r2, [pc, #76]	@ (8009910 <xTaskRemoveFromEventList+0xb8>)
 80098c4:	441a      	add	r2, r3
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	3304      	adds	r3, #4
 80098ca:	4619      	mov	r1, r3
 80098cc:	4610      	mov	r0, r2
 80098ce:	f7fe fd74 	bl	80083ba <vListInsertEnd>
 80098d2:	e005      	b.n	80098e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	3318      	adds	r3, #24
 80098d8:	4619      	mov	r1, r3
 80098da:	480e      	ldr	r0, [pc, #56]	@ (8009914 <xTaskRemoveFromEventList+0xbc>)
 80098dc:	f7fe fd6d 	bl	80083ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009918 <xTaskRemoveFromEventList+0xc0>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d905      	bls.n	80098fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098f2:	4b0a      	ldr	r3, [pc, #40]	@ (800991c <xTaskRemoveFromEventList+0xc4>)
 80098f4:	2201      	movs	r2, #1
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	e001      	b.n	80098fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098fe:	697b      	ldr	r3, [r7, #20]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	24000ea4 	.word	0x24000ea4
 800990c:	24000e84 	.word	0x24000e84
 8009910:	240009ac 	.word	0x240009ac
 8009914:	24000e3c 	.word	0x24000e3c
 8009918:	240009a8 	.word	0x240009a8
 800991c:	24000e90 	.word	0x24000e90

08009920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009928:	4b06      	ldr	r3, [pc, #24]	@ (8009944 <vTaskInternalSetTimeOutState+0x24>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009930:	4b05      	ldr	r3, [pc, #20]	@ (8009948 <vTaskInternalSetTimeOutState+0x28>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	605a      	str	r2, [r3, #4]
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	24000e94 	.word	0x24000e94
 8009948:	24000e80 	.word	0x24000e80

0800994c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10b      	bne.n	8009974 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800995c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	613b      	str	r3, [r7, #16]
}
 800996e:	bf00      	nop
 8009970:	bf00      	nop
 8009972:	e7fd      	b.n	8009970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	60fb      	str	r3, [r7, #12]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009992:	f000 fe91 	bl	800a6b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009996:	4b1d      	ldr	r3, [pc, #116]	@ (8009a0c <xTaskCheckForTimeOut+0xc0>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	69ba      	ldr	r2, [r7, #24]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d102      	bne.n	80099b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099b0:	2300      	movs	r3, #0
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	e023      	b.n	80099fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	4b15      	ldr	r3, [pc, #84]	@ (8009a10 <xTaskCheckForTimeOut+0xc4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d007      	beq.n	80099d2 <xTaskCheckForTimeOut+0x86>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d302      	bcc.n	80099d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099cc:	2301      	movs	r3, #1
 80099ce:	61fb      	str	r3, [r7, #28]
 80099d0:	e015      	b.n	80099fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d20b      	bcs.n	80099f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	1ad2      	subs	r2, r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff ff99 	bl	8009920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	e004      	b.n	80099fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099fa:	2301      	movs	r3, #1
 80099fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099fe:	f000 fe8d 	bl	800a71c <vPortExitCritical>

	return xReturn;
 8009a02:	69fb      	ldr	r3, [r7, #28]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	24000e80 	.word	0x24000e80
 8009a10:	24000e94 	.word	0x24000e94

08009a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a18:	4b03      	ldr	r3, [pc, #12]	@ (8009a28 <vTaskMissedYield+0x14>)
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	601a      	str	r2, [r3, #0]
}
 8009a1e:	bf00      	nop
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	24000e90 	.word	0x24000e90

08009a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a34:	f000 f852 	bl	8009adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a38:	4b06      	ldr	r3, [pc, #24]	@ (8009a54 <prvIdleTask+0x28>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d9f9      	bls.n	8009a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a40:	4b05      	ldr	r3, [pc, #20]	@ (8009a58 <prvIdleTask+0x2c>)
 8009a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a50:	e7f0      	b.n	8009a34 <prvIdleTask+0x8>
 8009a52:	bf00      	nop
 8009a54:	240009ac 	.word	0x240009ac
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a62:	2300      	movs	r3, #0
 8009a64:	607b      	str	r3, [r7, #4]
 8009a66:	e00c      	b.n	8009a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	4a12      	ldr	r2, [pc, #72]	@ (8009abc <prvInitialiseTaskLists+0x60>)
 8009a74:	4413      	add	r3, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fc72 	bl	8008360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	607b      	str	r3, [r7, #4]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b37      	cmp	r3, #55	@ 0x37
 8009a86:	d9ef      	bls.n	8009a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a88:	480d      	ldr	r0, [pc, #52]	@ (8009ac0 <prvInitialiseTaskLists+0x64>)
 8009a8a:	f7fe fc69 	bl	8008360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a8e:	480d      	ldr	r0, [pc, #52]	@ (8009ac4 <prvInitialiseTaskLists+0x68>)
 8009a90:	f7fe fc66 	bl	8008360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a94:	480c      	ldr	r0, [pc, #48]	@ (8009ac8 <prvInitialiseTaskLists+0x6c>)
 8009a96:	f7fe fc63 	bl	8008360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a9a:	480c      	ldr	r0, [pc, #48]	@ (8009acc <prvInitialiseTaskLists+0x70>)
 8009a9c:	f7fe fc60 	bl	8008360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009aa0:	480b      	ldr	r0, [pc, #44]	@ (8009ad0 <prvInitialiseTaskLists+0x74>)
 8009aa2:	f7fe fc5d 	bl	8008360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <prvInitialiseTaskLists+0x78>)
 8009aa8:	4a05      	ldr	r2, [pc, #20]	@ (8009ac0 <prvInitialiseTaskLists+0x64>)
 8009aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad8 <prvInitialiseTaskLists+0x7c>)
 8009aae:	4a05      	ldr	r2, [pc, #20]	@ (8009ac4 <prvInitialiseTaskLists+0x68>)
 8009ab0:	601a      	str	r2, [r3, #0]
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	240009ac 	.word	0x240009ac
 8009ac0:	24000e0c 	.word	0x24000e0c
 8009ac4:	24000e20 	.word	0x24000e20
 8009ac8:	24000e3c 	.word	0x24000e3c
 8009acc:	24000e50 	.word	0x24000e50
 8009ad0:	24000e68 	.word	0x24000e68
 8009ad4:	24000e34 	.word	0x24000e34
 8009ad8:	24000e38 	.word	0x24000e38

08009adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ae2:	e019      	b.n	8009b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ae4:	f000 fde8 	bl	800a6b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae8:	4b10      	ldr	r3, [pc, #64]	@ (8009b2c <prvCheckTasksWaitingTermination+0x50>)
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fe fcbd 	bl	8008474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009afa:	4b0d      	ldr	r3, [pc, #52]	@ (8009b30 <prvCheckTasksWaitingTermination+0x54>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	4a0b      	ldr	r2, [pc, #44]	@ (8009b30 <prvCheckTasksWaitingTermination+0x54>)
 8009b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b04:	4b0b      	ldr	r3, [pc, #44]	@ (8009b34 <prvCheckTasksWaitingTermination+0x58>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b34 <prvCheckTasksWaitingTermination+0x58>)
 8009b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b0e:	f000 fe05 	bl	800a71c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f810 	bl	8009b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b18:	4b06      	ldr	r3, [pc, #24]	@ (8009b34 <prvCheckTasksWaitingTermination+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1e1      	bne.n	8009ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b20:	bf00      	nop
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	24000e50 	.word	0x24000e50
 8009b30:	24000e7c 	.word	0x24000e7c
 8009b34:	24000e64 	.word	0x24000e64

08009b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3354      	adds	r3, #84	@ 0x54
 8009b44:	4618      	mov	r0, r3
 8009b46:	f001 faf7 	bl	800b138 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d108      	bne.n	8009b66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 ff9d 	bl	800aa98 <vPortFree>
				vPortFree( pxTCB );
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 ff9a 	bl	800aa98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b64:	e019      	b.n	8009b9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d103      	bne.n	8009b78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 ff91 	bl	800aa98 <vPortFree>
	}
 8009b76:	e010      	b.n	8009b9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d00b      	beq.n	8009b9a <prvDeleteTCB+0x62>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	60fb      	str	r3, [r7, #12]
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop
 8009b98:	e7fd      	b.n	8009b96 <prvDeleteTCB+0x5e>
	}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009baa:	4b0c      	ldr	r3, [pc, #48]	@ (8009bdc <prvResetNextTaskUnblockTime+0x38>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8009be0 <prvResetNextTaskUnblockTime+0x3c>)
 8009bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009bbc:	e008      	b.n	8009bd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bbe:	4b07      	ldr	r3, [pc, #28]	@ (8009bdc <prvResetNextTaskUnblockTime+0x38>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	4a04      	ldr	r2, [pc, #16]	@ (8009be0 <prvResetNextTaskUnblockTime+0x3c>)
 8009bce:	6013      	str	r3, [r2, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	24000e34 	.word	0x24000e34
 8009be0:	24000e9c 	.word	0x24000e9c

08009be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bea:	4b0b      	ldr	r3, [pc, #44]	@ (8009c18 <xTaskGetSchedulerState+0x34>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	607b      	str	r3, [r7, #4]
 8009bf6:	e008      	b.n	8009c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf8:	4b08      	ldr	r3, [pc, #32]	@ (8009c1c <xTaskGetSchedulerState+0x38>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c00:	2302      	movs	r3, #2
 8009c02:	607b      	str	r3, [r7, #4]
 8009c04:	e001      	b.n	8009c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c06:	2300      	movs	r3, #0
 8009c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c0a:	687b      	ldr	r3, [r7, #4]
	}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	24000e88 	.word	0x24000e88
 8009c1c:	24000ea4 	.word	0x24000ea4

08009c20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d058      	beq.n	8009ce8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c36:	4b2f      	ldr	r3, [pc, #188]	@ (8009cf4 <xTaskPriorityDisinherit+0xd4>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d00b      	beq.n	8009c58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60fb      	str	r3, [r7, #12]
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10b      	bne.n	8009c78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	60bb      	str	r3, [r7, #8]
}
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	e7fd      	b.n	8009c74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c7c:	1e5a      	subs	r2, r3, #1
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d02c      	beq.n	8009ce8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d128      	bne.n	8009ce8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fbea 	bl	8008474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf8 <xTaskPriorityDisinherit+0xd8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d903      	bls.n	8009cc8 <xTaskPriorityDisinherit+0xa8>
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8009cf8 <xTaskPriorityDisinherit+0xd8>)
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4a09      	ldr	r2, [pc, #36]	@ (8009cfc <xTaskPriorityDisinherit+0xdc>)
 8009cd6:	441a      	add	r2, r3
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f7fe fb6b 	bl	80083ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ce8:	697b      	ldr	r3, [r7, #20]
	}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	240009a8 	.word	0x240009a8
 8009cf8:	24000e84 	.word	0x24000e84
 8009cfc:	240009ac 	.word	0x240009ac

08009d00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d0a:	4b21      	ldr	r3, [pc, #132]	@ (8009d90 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d10:	4b20      	ldr	r3, [pc, #128]	@ (8009d94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fbac 	bl	8008474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d22:	d10a      	bne.n	8009d3a <prvAddCurrentTaskToDelayedList+0x3a>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d007      	beq.n	8009d3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8009d94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4619      	mov	r1, r3
 8009d32:	4819      	ldr	r0, [pc, #100]	@ (8009d98 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d34:	f7fe fb41 	bl	80083ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d38:	e026      	b.n	8009d88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4413      	add	r3, r2
 8009d40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d42:	4b14      	ldr	r3, [pc, #80]	@ (8009d94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d209      	bcs.n	8009d66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d52:	4b12      	ldr	r3, [pc, #72]	@ (8009d9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4b0f      	ldr	r3, [pc, #60]	@ (8009d94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fe fb4f 	bl	8008402 <vListInsert>
}
 8009d64:	e010      	b.n	8009d88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d66:	4b0e      	ldr	r3, [pc, #56]	@ (8009da0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d94 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4619      	mov	r1, r3
 8009d72:	4610      	mov	r0, r2
 8009d74:	f7fe fb45 	bl	8008402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d78:	4b0a      	ldr	r3, [pc, #40]	@ (8009da4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d202      	bcs.n	8009d88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d82:	4a08      	ldr	r2, [pc, #32]	@ (8009da4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	6013      	str	r3, [r2, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	24000e80 	.word	0x24000e80
 8009d94:	240009a8 	.word	0x240009a8
 8009d98:	24000e68 	.word	0x24000e68
 8009d9c:	24000e38 	.word	0x24000e38
 8009da0:	24000e34 	.word	0x24000e34
 8009da4:	24000e9c 	.word	0x24000e9c

08009da8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	@ 0x28
 8009dac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009db2:	f000 fb13 	bl	800a3dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009db6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e2c <xTimerCreateTimerTask+0x84>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d021      	beq.n	8009e02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009dc6:	1d3a      	adds	r2, r7, #4
 8009dc8:	f107 0108 	add.w	r1, r7, #8
 8009dcc:	f107 030c 	add.w	r3, r7, #12
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fe faab 	bl	800832c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	9202      	str	r2, [sp, #8]
 8009dde:	9301      	str	r3, [sp, #4]
 8009de0:	2302      	movs	r3, #2
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	460a      	mov	r2, r1
 8009de8:	4911      	ldr	r1, [pc, #68]	@ (8009e30 <xTimerCreateTimerTask+0x88>)
 8009dea:	4812      	ldr	r0, [pc, #72]	@ (8009e34 <xTimerCreateTimerTask+0x8c>)
 8009dec:	f7ff f8a2 	bl	8008f34 <xTaskCreateStatic>
 8009df0:	4603      	mov	r3, r0
 8009df2:	4a11      	ldr	r2, [pc, #68]	@ (8009e38 <xTimerCreateTimerTask+0x90>)
 8009df4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009df6:	4b10      	ldr	r3, [pc, #64]	@ (8009e38 <xTimerCreateTimerTask+0x90>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10b      	bne.n	8009e20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	613b      	str	r3, [r7, #16]
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e20:	697b      	ldr	r3, [r7, #20]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3718      	adds	r7, #24
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	24000ed8 	.word	0x24000ed8
 8009e30:	0800be0c 	.word	0x0800be0c
 8009e34:	08009f75 	.word	0x08009f75
 8009e38:	24000edc 	.word	0x24000edc

08009e3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b08a      	sub	sp, #40	@ 0x28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
 8009e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10b      	bne.n	8009e6c <xTimerGenericCommand+0x30>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	623b      	str	r3, [r7, #32]
}
 8009e66:	bf00      	nop
 8009e68:	bf00      	nop
 8009e6a:	e7fd      	b.n	8009e68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e6c:	4b19      	ldr	r3, [pc, #100]	@ (8009ed4 <xTimerGenericCommand+0x98>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d02a      	beq.n	8009eca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b05      	cmp	r3, #5
 8009e84:	dc18      	bgt.n	8009eb8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e86:	f7ff fead 	bl	8009be4 <xTaskGetSchedulerState>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d109      	bne.n	8009ea4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e90:	4b10      	ldr	r3, [pc, #64]	@ (8009ed4 <xTimerGenericCommand+0x98>)
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	f107 0110 	add.w	r1, r7, #16
 8009e98:	2300      	movs	r3, #0
 8009e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e9c:	f7fe fc5a 	bl	8008754 <xQueueGenericSend>
 8009ea0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ea2:	e012      	b.n	8009eca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed4 <xTimerGenericCommand+0x98>)
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	f107 0110 	add.w	r1, r7, #16
 8009eac:	2300      	movs	r3, #0
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f7fe fc50 	bl	8008754 <xQueueGenericSend>
 8009eb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8009eb6:	e008      	b.n	8009eca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009eb8:	4b06      	ldr	r3, [pc, #24]	@ (8009ed4 <xTimerGenericCommand+0x98>)
 8009eba:	6818      	ldr	r0, [r3, #0]
 8009ebc:	f107 0110 	add.w	r1, r7, #16
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	f7fe fd48 	bl	8008958 <xQueueGenericSendFromISR>
 8009ec8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3728      	adds	r7, #40	@ 0x28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	24000ed8 	.word	0x24000ed8

08009ed8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee2:	4b23      	ldr	r3, [pc, #140]	@ (8009f70 <prvProcessExpiredTimer+0x98>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe fabf 	bl	8008474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d023      	beq.n	8009f4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	699a      	ldr	r2, [r3, #24]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	18d1      	adds	r1, r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	6978      	ldr	r0, [r7, #20]
 8009f12:	f000 f8d5 	bl	800a0c0 <prvInsertTimerInActiveList>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d020      	beq.n	8009f5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	2300      	movs	r3, #0
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	2100      	movs	r1, #0
 8009f26:	6978      	ldr	r0, [r7, #20]
 8009f28:	f7ff ff88 	bl	8009e3c <xTimerGenericCommand>
 8009f2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d114      	bne.n	8009f5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	60fb      	str	r3, [r7, #12]
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	e7fd      	b.n	8009f48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f52:	f023 0301 	bic.w	r3, r3, #1
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	6978      	ldr	r0, [r7, #20]
 8009f64:	4798      	blx	r3
}
 8009f66:	bf00      	nop
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	24000ed0 	.word	0x24000ed0

08009f74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f7c:	f107 0308 	add.w	r3, r7, #8
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 f859 	bl	800a038 <prvGetNextExpireTime>
 8009f86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 f805 	bl	8009f9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f92:	f000 f8d7 	bl	800a144 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f96:	bf00      	nop
 8009f98:	e7f0      	b.n	8009f7c <prvTimerTask+0x8>
	...

08009f9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fa6:	f7ff fa29 	bl	80093fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009faa:	f107 0308 	add.w	r3, r7, #8
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 f866 	bl	800a080 <prvSampleTimeNow>
 8009fb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d130      	bne.n	800a01e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <prvProcessTimerOrBlockTask+0x3c>
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d806      	bhi.n	8009fd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009fca:	f7ff fa25 	bl	8009418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009fce:	68f9      	ldr	r1, [r7, #12]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff ff81 	bl	8009ed8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009fd6:	e024      	b.n	800a022 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d008      	beq.n	8009ff0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009fde:	4b13      	ldr	r3, [pc, #76]	@ (800a02c <prvProcessTimerOrBlockTask+0x90>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <prvProcessTimerOrBlockTask+0x50>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e000      	b.n	8009fee <prvProcessTimerOrBlockTask+0x52>
 8009fec:	2300      	movs	r3, #0
 8009fee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	@ (800a030 <prvProcessTimerOrBlockTask+0x94>)
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	f7fe ff65 	bl	8008ecc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a002:	f7ff fa09 	bl	8009418 <xTaskResumeAll>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a00c:	4b09      	ldr	r3, [pc, #36]	@ (800a034 <prvProcessTimerOrBlockTask+0x98>)
 800a00e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	f3bf 8f6f 	isb	sy
}
 800a01c:	e001      	b.n	800a022 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a01e:	f7ff f9fb 	bl	8009418 <xTaskResumeAll>
}
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	24000ed4 	.word	0x24000ed4
 800a030:	24000ed8 	.word	0x24000ed8
 800a034:	e000ed04 	.word	0xe000ed04

0800a038 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a040:	4b0e      	ldr	r3, [pc, #56]	@ (800a07c <prvGetNextExpireTime+0x44>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <prvGetNextExpireTime+0x16>
 800a04a:	2201      	movs	r2, #1
 800a04c:	e000      	b.n	800a050 <prvGetNextExpireTime+0x18>
 800a04e:	2200      	movs	r2, #0
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d105      	bne.n	800a068 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a05c:	4b07      	ldr	r3, [pc, #28]	@ (800a07c <prvGetNextExpireTime+0x44>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e001      	b.n	800a06c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a06c:	68fb      	ldr	r3, [r7, #12]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	24000ed0 	.word	0x24000ed0

0800a080 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a088:	f7ff fa64 	bl	8009554 <xTaskGetTickCount>
 800a08c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a08e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0bc <prvSampleTimeNow+0x3c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	429a      	cmp	r2, r3
 800a096:	d205      	bcs.n	800a0a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a098:	f000 f93a 	bl	800a310 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0aa:	4a04      	ldr	r2, [pc, #16]	@ (800a0bc <prvSampleTimeNow+0x3c>)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	24000ee0 	.word	0x24000ee0

0800a0c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d812      	bhi.n	800a10c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	1ad2      	subs	r2, r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d302      	bcc.n	800a0fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	617b      	str	r3, [r7, #20]
 800a0f8:	e01b      	b.n	800a132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0fa:	4b10      	ldr	r3, [pc, #64]	@ (800a13c <prvInsertTimerInActiveList+0x7c>)
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3304      	adds	r3, #4
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f7fe f97c 	bl	8008402 <vListInsert>
 800a10a:	e012      	b.n	800a132 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	429a      	cmp	r2, r3
 800a112:	d206      	bcs.n	800a122 <prvInsertTimerInActiveList+0x62>
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d302      	bcc.n	800a122 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e007      	b.n	800a132 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a122:	4b07      	ldr	r3, [pc, #28]	@ (800a140 <prvInsertTimerInActiveList+0x80>)
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3304      	adds	r3, #4
 800a12a:	4619      	mov	r1, r3
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7fe f968 	bl	8008402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a132:	697b      	ldr	r3, [r7, #20]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3718      	adds	r7, #24
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	24000ed4 	.word	0x24000ed4
 800a140:	24000ed0 	.word	0x24000ed0

0800a144 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08e      	sub	sp, #56	@ 0x38
 800a148:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a14a:	e0ce      	b.n	800a2ea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	da19      	bge.n	800a186 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a152:	1d3b      	adds	r3, r7, #4
 800a154:	3304      	adds	r3, #4
 800a156:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10b      	bne.n	800a176 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	61fb      	str	r3, [r7, #28]
}
 800a170:	bf00      	nop
 800a172:	bf00      	nop
 800a174:	e7fd      	b.n	800a172 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a17c:	6850      	ldr	r0, [r2, #4]
 800a17e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a180:	6892      	ldr	r2, [r2, #8]
 800a182:	4611      	mov	r1, r2
 800a184:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f2c0 80ae 	blt.w	800a2ea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	695b      	ldr	r3, [r3, #20]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	3304      	adds	r3, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe f968 	bl	8008474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1a4:	463b      	mov	r3, r7
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7ff ff6a 	bl	800a080 <prvSampleTimeNow>
 800a1ac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b09      	cmp	r3, #9
 800a1b2:	f200 8097 	bhi.w	800a2e4 <prvProcessReceivedCommands+0x1a0>
 800a1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1bc <prvProcessReceivedCommands+0x78>)
 800a1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1bc:	0800a1e5 	.word	0x0800a1e5
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a1e5 	.word	0x0800a1e5
 800a1c8:	0800a25b 	.word	0x0800a25b
 800a1cc:	0800a26f 	.word	0x0800a26f
 800a1d0:	0800a2bb 	.word	0x0800a2bb
 800a1d4:	0800a1e5 	.word	0x0800a1e5
 800a1d8:	0800a1e5 	.word	0x0800a1e5
 800a1dc:	0800a25b 	.word	0x0800a25b
 800a1e0:	0800a26f 	.word	0x0800a26f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1ea:	f043 0301 	orr.w	r3, r3, #1
 800a1ee:	b2da      	uxtb	r2, r3
 800a1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	18d1      	adds	r1, r2, r3
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a202:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a204:	f7ff ff5c 	bl	800a0c0 <prvInsertTimerInActiveList>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d06c      	beq.n	800a2e8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a214:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a21c:	f003 0304 	and.w	r3, r3, #4
 800a220:	2b00      	cmp	r3, #0
 800a222:	d061      	beq.n	800a2e8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	441a      	add	r2, r3
 800a22c:	2300      	movs	r3, #0
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	2300      	movs	r3, #0
 800a232:	2100      	movs	r1, #0
 800a234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a236:	f7ff fe01 	bl	8009e3c <xTimerGenericCommand>
 800a23a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d152      	bne.n	800a2e8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	61bb      	str	r3, [r7, #24]
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	e7fd      	b.n	800a256 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a260:	f023 0301 	bic.w	r3, r3, #1
 800a264:	b2da      	uxtb	r2, r3
 800a266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a268:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a26c:	e03d      	b.n	800a2ea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a274:	f043 0301 	orr.w	r3, r3, #1
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a284:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10b      	bne.n	800a2a6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	617b      	str	r3, [r7, #20]
}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	e7fd      	b.n	800a2a2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	699a      	ldr	r2, [r3, #24]
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	18d1      	adds	r1, r2, r3
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2b4:	f7ff ff04 	bl	800a0c0 <prvInsertTimerInActiveList>
					break;
 800a2b8:	e017      	b.n	800a2ea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d103      	bne.n	800a2d0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a2c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2ca:	f000 fbe5 	bl	800aa98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2ce:	e00c      	b.n	800a2ea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2d6:	f023 0301 	bic.w	r3, r3, #1
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2e2:	e002      	b.n	800a2ea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a2e4:	bf00      	nop
 800a2e6:	e000      	b.n	800a2ea <prvProcessReceivedCommands+0x1a6>
					break;
 800a2e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2ea:	4b08      	ldr	r3, [pc, #32]	@ (800a30c <prvProcessReceivedCommands+0x1c8>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	1d39      	adds	r1, r7, #4
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe fbce 	bl	8008a94 <xQueueReceive>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f47f af26 	bne.w	800a14c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	3730      	adds	r7, #48	@ 0x30
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	24000ed8 	.word	0x24000ed8

0800a310 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a316:	e049      	b.n	800a3ac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a318:	4b2e      	ldr	r3, [pc, #184]	@ (800a3d4 <prvSwitchTimerLists+0xc4>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a322:	4b2c      	ldr	r3, [pc, #176]	@ (800a3d4 <prvSwitchTimerLists+0xc4>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3304      	adds	r3, #4
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe f89f 	bl	8008474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d02f      	beq.n	800a3ac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4413      	add	r3, r2
 800a354:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d90e      	bls.n	800a37c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a36a:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d4 <prvSwitchTimerLists+0xc4>)
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3304      	adds	r3, #4
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f7fe f844 	bl	8008402 <vListInsert>
 800a37a:	e017      	b.n	800a3ac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a37c:	2300      	movs	r3, #0
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	2300      	movs	r3, #0
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	2100      	movs	r1, #0
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fd58 	bl	8009e3c <xTimerGenericCommand>
 800a38c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	603b      	str	r3, [r7, #0]
}
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	e7fd      	b.n	800a3a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3ac:	4b09      	ldr	r3, [pc, #36]	@ (800a3d4 <prvSwitchTimerLists+0xc4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1b0      	bne.n	800a318 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3b6:	4b07      	ldr	r3, [pc, #28]	@ (800a3d4 <prvSwitchTimerLists+0xc4>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3bc:	4b06      	ldr	r3, [pc, #24]	@ (800a3d8 <prvSwitchTimerLists+0xc8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a04      	ldr	r2, [pc, #16]	@ (800a3d4 <prvSwitchTimerLists+0xc4>)
 800a3c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3c4:	4a04      	ldr	r2, [pc, #16]	@ (800a3d8 <prvSwitchTimerLists+0xc8>)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6013      	str	r3, [r2, #0]
}
 800a3ca:	bf00      	nop
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	24000ed0 	.word	0x24000ed0
 800a3d8:	24000ed4 	.word	0x24000ed4

0800a3dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3e2:	f000 f969 	bl	800a6b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3e6:	4b15      	ldr	r3, [pc, #84]	@ (800a43c <prvCheckForValidListAndQueue+0x60>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d120      	bne.n	800a430 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3ee:	4814      	ldr	r0, [pc, #80]	@ (800a440 <prvCheckForValidListAndQueue+0x64>)
 800a3f0:	f7fd ffb6 	bl	8008360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3f4:	4813      	ldr	r0, [pc, #76]	@ (800a444 <prvCheckForValidListAndQueue+0x68>)
 800a3f6:	f7fd ffb3 	bl	8008360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a3fa:	4b13      	ldr	r3, [pc, #76]	@ (800a448 <prvCheckForValidListAndQueue+0x6c>)
 800a3fc:	4a10      	ldr	r2, [pc, #64]	@ (800a440 <prvCheckForValidListAndQueue+0x64>)
 800a3fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a400:	4b12      	ldr	r3, [pc, #72]	@ (800a44c <prvCheckForValidListAndQueue+0x70>)
 800a402:	4a10      	ldr	r2, [pc, #64]	@ (800a444 <prvCheckForValidListAndQueue+0x68>)
 800a404:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a406:	2300      	movs	r3, #0
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	4b11      	ldr	r3, [pc, #68]	@ (800a450 <prvCheckForValidListAndQueue+0x74>)
 800a40c:	4a11      	ldr	r2, [pc, #68]	@ (800a454 <prvCheckForValidListAndQueue+0x78>)
 800a40e:	2110      	movs	r1, #16
 800a410:	200a      	movs	r0, #10
 800a412:	f7fe f8c3 	bl	800859c <xQueueGenericCreateStatic>
 800a416:	4603      	mov	r3, r0
 800a418:	4a08      	ldr	r2, [pc, #32]	@ (800a43c <prvCheckForValidListAndQueue+0x60>)
 800a41a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a41c:	4b07      	ldr	r3, [pc, #28]	@ (800a43c <prvCheckForValidListAndQueue+0x60>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a424:	4b05      	ldr	r3, [pc, #20]	@ (800a43c <prvCheckForValidListAndQueue+0x60>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	490b      	ldr	r1, [pc, #44]	@ (800a458 <prvCheckForValidListAndQueue+0x7c>)
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fd24 	bl	8008e78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a430:	f000 f974 	bl	800a71c <vPortExitCritical>
}
 800a434:	bf00      	nop
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	24000ed8 	.word	0x24000ed8
 800a440:	24000ea8 	.word	0x24000ea8
 800a444:	24000ebc 	.word	0x24000ebc
 800a448:	24000ed0 	.word	0x24000ed0
 800a44c:	24000ed4 	.word	0x24000ed4
 800a450:	24000f84 	.word	0x24000f84
 800a454:	24000ee4 	.word	0x24000ee4
 800a458:	0800be14 	.word	0x0800be14

0800a45c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3b04      	subs	r3, #4
 800a46c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3b04      	subs	r3, #4
 800a47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f023 0201 	bic.w	r2, r3, #1
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3b04      	subs	r3, #4
 800a48a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a48c:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c0 <pxPortInitialiseStack+0x64>)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3b14      	subs	r3, #20
 800a496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3b04      	subs	r3, #4
 800a4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f06f 0202 	mvn.w	r2, #2
 800a4aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3b20      	subs	r3, #32
 800a4b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	0800a4c5 	.word	0x0800a4c5

0800a4c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4ce:	4b13      	ldr	r3, [pc, #76]	@ (800a51c <prvTaskExitError+0x58>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d6:	d00b      	beq.n	800a4f0 <prvTaskExitError+0x2c>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	60fb      	str	r3, [r7, #12]
}
 800a4ea:	bf00      	nop
 800a4ec:	bf00      	nop
 800a4ee:	e7fd      	b.n	800a4ec <prvTaskExitError+0x28>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	60bb      	str	r3, [r7, #8]
}
 800a502:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a504:	bf00      	nop
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0fc      	beq.n	800a506 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	24000010 	.word	0x24000010

0800a520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a520:	4b07      	ldr	r3, [pc, #28]	@ (800a540 <pxCurrentTCBConst2>)
 800a522:	6819      	ldr	r1, [r3, #0]
 800a524:	6808      	ldr	r0, [r1, #0]
 800a526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52a:	f380 8809 	msr	PSP, r0
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f04f 0000 	mov.w	r0, #0
 800a536:	f380 8811 	msr	BASEPRI, r0
 800a53a:	4770      	bx	lr
 800a53c:	f3af 8000 	nop.w

0800a540 <pxCurrentTCBConst2>:
 800a540:	240009a8 	.word	0x240009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop

0800a548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a548:	4808      	ldr	r0, [pc, #32]	@ (800a56c <prvPortStartFirstTask+0x24>)
 800a54a:	6800      	ldr	r0, [r0, #0]
 800a54c:	6800      	ldr	r0, [r0, #0]
 800a54e:	f380 8808 	msr	MSP, r0
 800a552:	f04f 0000 	mov.w	r0, #0
 800a556:	f380 8814 	msr	CONTROL, r0
 800a55a:	b662      	cpsie	i
 800a55c:	b661      	cpsie	f
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	df00      	svc	0
 800a568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a56a:	bf00      	nop
 800a56c:	e000ed08 	.word	0xe000ed08

0800a570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a576:	4b47      	ldr	r3, [pc, #284]	@ (800a694 <xPortStartScheduler+0x124>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a47      	ldr	r2, [pc, #284]	@ (800a698 <xPortStartScheduler+0x128>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d10b      	bne.n	800a598 <xPortStartScheduler+0x28>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	613b      	str	r3, [r7, #16]
}
 800a592:	bf00      	nop
 800a594:	bf00      	nop
 800a596:	e7fd      	b.n	800a594 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a598:	4b3e      	ldr	r3, [pc, #248]	@ (800a694 <xPortStartScheduler+0x124>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a3f      	ldr	r2, [pc, #252]	@ (800a69c <xPortStartScheduler+0x12c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d10b      	bne.n	800a5ba <xPortStartScheduler+0x4a>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	60fb      	str	r3, [r7, #12]
}
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
 800a5b8:	e7fd      	b.n	800a5b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5ba:	4b39      	ldr	r3, [pc, #228]	@ (800a6a0 <xPortStartScheduler+0x130>)
 800a5bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	22ff      	movs	r2, #255	@ 0xff
 800a5ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5d4:	78fb      	ldrb	r3, [r7, #3]
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	4b31      	ldr	r3, [pc, #196]	@ (800a6a4 <xPortStartScheduler+0x134>)
 800a5e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5e2:	4b31      	ldr	r3, [pc, #196]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a5e4:	2207      	movs	r2, #7
 800a5e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5e8:	e009      	b.n	800a5fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a5ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a5f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5f4:	78fb      	ldrb	r3, [r7, #3]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a606:	2b80      	cmp	r3, #128	@ 0x80
 800a608:	d0ef      	beq.n	800a5ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a60a:	4b27      	ldr	r3, [pc, #156]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f1c3 0307 	rsb	r3, r3, #7
 800a612:	2b04      	cmp	r3, #4
 800a614:	d00b      	beq.n	800a62e <xPortStartScheduler+0xbe>
	__asm volatile
 800a616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60bb      	str	r3, [r7, #8]
}
 800a628:	bf00      	nop
 800a62a:	bf00      	nop
 800a62c:	e7fd      	b.n	800a62a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a62e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	4a1c      	ldr	r2, [pc, #112]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a636:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a638:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a640:	4a19      	ldr	r2, [pc, #100]	@ (800a6a8 <xPortStartScheduler+0x138>)
 800a642:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	b2da      	uxtb	r2, r3
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a64c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a16      	ldr	r2, [pc, #88]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a652:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a656:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a658:	4b14      	ldr	r3, [pc, #80]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a13      	ldr	r2, [pc, #76]	@ (800a6ac <xPortStartScheduler+0x13c>)
 800a65e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a662:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a664:	f000 f8da 	bl	800a81c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a668:	4b11      	ldr	r3, [pc, #68]	@ (800a6b0 <xPortStartScheduler+0x140>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a66e:	f000 f8f9 	bl	800a864 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a672:	4b10      	ldr	r3, [pc, #64]	@ (800a6b4 <xPortStartScheduler+0x144>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a0f      	ldr	r2, [pc, #60]	@ (800a6b4 <xPortStartScheduler+0x144>)
 800a678:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a67c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a67e:	f7ff ff63 	bl	800a548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a682:	f7ff f831 	bl	80096e8 <vTaskSwitchContext>
	prvTaskExitError();
 800a686:	f7ff ff1d 	bl	800a4c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	e000ed00 	.word	0xe000ed00
 800a698:	410fc271 	.word	0x410fc271
 800a69c:	410fc270 	.word	0x410fc270
 800a6a0:	e000e400 	.word	0xe000e400
 800a6a4:	24000fd4 	.word	0x24000fd4
 800a6a8:	24000fd8 	.word	0x24000fd8
 800a6ac:	e000ed20 	.word	0xe000ed20
 800a6b0:	24000010 	.word	0x24000010
 800a6b4:	e000ef34 	.word	0xe000ef34

0800a6b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	607b      	str	r3, [r7, #4]
}
 800a6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6d2:	4b10      	ldr	r3, [pc, #64]	@ (800a714 <vPortEnterCritical+0x5c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a714 <vPortEnterCritical+0x5c>)
 800a6da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <vPortEnterCritical+0x5c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d110      	bne.n	800a706 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800a718 <vPortEnterCritical+0x60>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00b      	beq.n	800a706 <vPortEnterCritical+0x4e>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	603b      	str	r3, [r7, #0]
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	e7fd      	b.n	800a702 <vPortEnterCritical+0x4a>
	}
}
 800a706:	bf00      	nop
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	24000010 	.word	0x24000010
 800a718:	e000ed04 	.word	0xe000ed04

0800a71c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a722:	4b12      	ldr	r3, [pc, #72]	@ (800a76c <vPortExitCritical+0x50>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10b      	bne.n	800a742 <vPortExitCritical+0x26>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	607b      	str	r3, [r7, #4]
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	e7fd      	b.n	800a73e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a742:	4b0a      	ldr	r3, [pc, #40]	@ (800a76c <vPortExitCritical+0x50>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3b01      	subs	r3, #1
 800a748:	4a08      	ldr	r2, [pc, #32]	@ (800a76c <vPortExitCritical+0x50>)
 800a74a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a74c:	4b07      	ldr	r3, [pc, #28]	@ (800a76c <vPortExitCritical+0x50>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d105      	bne.n	800a760 <vPortExitCritical+0x44>
 800a754:	2300      	movs	r3, #0
 800a756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	f383 8811 	msr	BASEPRI, r3
}
 800a75e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	24000010 	.word	0x24000010

0800a770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a770:	f3ef 8009 	mrs	r0, PSP
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	4b15      	ldr	r3, [pc, #84]	@ (800a7d0 <pxCurrentTCBConst>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	f01e 0f10 	tst.w	lr, #16
 800a780:	bf08      	it	eq
 800a782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	6010      	str	r0, [r2, #0]
 800a78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a790:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a794:	f380 8811 	msr	BASEPRI, r0
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f7fe ffa2 	bl	80096e8 <vTaskSwitchContext>
 800a7a4:	f04f 0000 	mov.w	r0, #0
 800a7a8:	f380 8811 	msr	BASEPRI, r0
 800a7ac:	bc09      	pop	{r0, r3}
 800a7ae:	6819      	ldr	r1, [r3, #0]
 800a7b0:	6808      	ldr	r0, [r1, #0]
 800a7b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b6:	f01e 0f10 	tst.w	lr, #16
 800a7ba:	bf08      	it	eq
 800a7bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7c0:	f380 8809 	msr	PSP, r0
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	f3af 8000 	nop.w

0800a7d0 <pxCurrentTCBConst>:
 800a7d0:	240009a8 	.word	0x240009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop

0800a7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7f2:	f7fe febf 	bl	8009574 <xTaskIncrementTick>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7fc:	4b06      	ldr	r3, [pc, #24]	@ (800a818 <xPortSysTickHandler+0x40>)
 800a7fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a802:	601a      	str	r2, [r3, #0]
 800a804:	2300      	movs	r3, #0
 800a806:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	f383 8811 	msr	BASEPRI, r3
}
 800a80e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	e000ed04 	.word	0xe000ed04

0800a81c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a81c:	b480      	push	{r7}
 800a81e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a820:	4b0b      	ldr	r3, [pc, #44]	@ (800a850 <vPortSetupTimerInterrupt+0x34>)
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a826:	4b0b      	ldr	r3, [pc, #44]	@ (800a854 <vPortSetupTimerInterrupt+0x38>)
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a82c:	4b0a      	ldr	r3, [pc, #40]	@ (800a858 <vPortSetupTimerInterrupt+0x3c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a0a      	ldr	r2, [pc, #40]	@ (800a85c <vPortSetupTimerInterrupt+0x40>)
 800a832:	fba2 2303 	umull	r2, r3, r2, r3
 800a836:	099b      	lsrs	r3, r3, #6
 800a838:	4a09      	ldr	r2, [pc, #36]	@ (800a860 <vPortSetupTimerInterrupt+0x44>)
 800a83a:	3b01      	subs	r3, #1
 800a83c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a83e:	4b04      	ldr	r3, [pc, #16]	@ (800a850 <vPortSetupTimerInterrupt+0x34>)
 800a840:	2207      	movs	r2, #7
 800a842:	601a      	str	r2, [r3, #0]
}
 800a844:	bf00      	nop
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	e000e010 	.word	0xe000e010
 800a854:	e000e018 	.word	0xe000e018
 800a858:	24000000 	.word	0x24000000
 800a85c:	10624dd3 	.word	0x10624dd3
 800a860:	e000e014 	.word	0xe000e014

0800a864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a864:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a874 <vPortEnableVFP+0x10>
 800a868:	6801      	ldr	r1, [r0, #0]
 800a86a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a86e:	6001      	str	r1, [r0, #0]
 800a870:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a872:	bf00      	nop
 800a874:	e000ed88 	.word	0xe000ed88

0800a878 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a87e:	f3ef 8305 	mrs	r3, IPSR
 800a882:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b0f      	cmp	r3, #15
 800a888:	d915      	bls.n	800a8b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a88a:	4a18      	ldr	r2, [pc, #96]	@ (800a8ec <vPortValidateInterruptPriority+0x74>)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	4413      	add	r3, r2
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a894:	4b16      	ldr	r3, [pc, #88]	@ (800a8f0 <vPortValidateInterruptPriority+0x78>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	7afa      	ldrb	r2, [r7, #11]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d20b      	bcs.n	800a8b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	607b      	str	r3, [r7, #4]
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	e7fd      	b.n	800a8b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f4 <vPortValidateInterruptPriority+0x7c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8be:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f8 <vPortValidateInterruptPriority+0x80>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d90b      	bls.n	800a8de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	603b      	str	r3, [r7, #0]
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	e7fd      	b.n	800a8da <vPortValidateInterruptPriority+0x62>
	}
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	e000e3f0 	.word	0xe000e3f0
 800a8f0:	24000fd4 	.word	0x24000fd4
 800a8f4:	e000ed0c 	.word	0xe000ed0c
 800a8f8:	24000fd8 	.word	0x24000fd8

0800a8fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08a      	sub	sp, #40	@ 0x28
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a904:	2300      	movs	r3, #0
 800a906:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a908:	f7fe fd78 	bl	80093fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a90c:	4b5c      	ldr	r3, [pc, #368]	@ (800aa80 <pvPortMalloc+0x184>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a914:	f000 f924 	bl	800ab60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a918:	4b5a      	ldr	r3, [pc, #360]	@ (800aa84 <pvPortMalloc+0x188>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4013      	ands	r3, r2
 800a920:	2b00      	cmp	r3, #0
 800a922:	f040 8095 	bne.w	800aa50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d01e      	beq.n	800a96a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a92c:	2208      	movs	r2, #8
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4413      	add	r3, r2
 800a932:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d015      	beq.n	800a96a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f023 0307 	bic.w	r3, r3, #7
 800a944:	3308      	adds	r3, #8
 800a946:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f003 0307 	and.w	r3, r3, #7
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00b      	beq.n	800a96a <pvPortMalloc+0x6e>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	617b      	str	r3, [r7, #20]
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop
 800a968:	e7fd      	b.n	800a966 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d06f      	beq.n	800aa50 <pvPortMalloc+0x154>
 800a970:	4b45      	ldr	r3, [pc, #276]	@ (800aa88 <pvPortMalloc+0x18c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	429a      	cmp	r2, r3
 800a978:	d86a      	bhi.n	800aa50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a97a:	4b44      	ldr	r3, [pc, #272]	@ (800aa8c <pvPortMalloc+0x190>)
 800a97c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a97e:	4b43      	ldr	r3, [pc, #268]	@ (800aa8c <pvPortMalloc+0x190>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a984:	e004      	b.n	800a990 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	429a      	cmp	r2, r3
 800a998:	d903      	bls.n	800a9a2 <pvPortMalloc+0xa6>
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1f1      	bne.n	800a986 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9a2:	4b37      	ldr	r3, [pc, #220]	@ (800aa80 <pvPortMalloc+0x184>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d051      	beq.n	800aa50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9ac:	6a3b      	ldr	r3, [r7, #32]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	4413      	add	r3, r2
 800a9b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	1ad2      	subs	r2, r2, r3
 800a9c6:	2308      	movs	r3, #8
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d920      	bls.n	800aa10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00b      	beq.n	800a9f8 <pvPortMalloc+0xfc>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	613b      	str	r3, [r7, #16]
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	e7fd      	b.n	800a9f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa0a:	69b8      	ldr	r0, [r7, #24]
 800aa0c:	f000 f90a 	bl	800ac24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa10:	4b1d      	ldr	r3, [pc, #116]	@ (800aa88 <pvPortMalloc+0x18c>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	4a1b      	ldr	r2, [pc, #108]	@ (800aa88 <pvPortMalloc+0x18c>)
 800aa1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa1e:	4b1a      	ldr	r3, [pc, #104]	@ (800aa88 <pvPortMalloc+0x18c>)
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4b1b      	ldr	r3, [pc, #108]	@ (800aa90 <pvPortMalloc+0x194>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d203      	bcs.n	800aa32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa2a:	4b17      	ldr	r3, [pc, #92]	@ (800aa88 <pvPortMalloc+0x18c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a18      	ldr	r2, [pc, #96]	@ (800aa90 <pvPortMalloc+0x194>)
 800aa30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	4b13      	ldr	r3, [pc, #76]	@ (800aa84 <pvPortMalloc+0x188>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	431a      	orrs	r2, r3
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa46:	4b13      	ldr	r3, [pc, #76]	@ (800aa94 <pvPortMalloc+0x198>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	4a11      	ldr	r2, [pc, #68]	@ (800aa94 <pvPortMalloc+0x198>)
 800aa4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa50:	f7fe fce2 	bl	8009418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	f003 0307 	and.w	r3, r3, #7
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00b      	beq.n	800aa76 <pvPortMalloc+0x17a>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	60fb      	str	r3, [r7, #12]
}
 800aa70:	bf00      	nop
 800aa72:	bf00      	nop
 800aa74:	e7fd      	b.n	800aa72 <pvPortMalloc+0x176>
	return pvReturn;
 800aa76:	69fb      	ldr	r3, [r7, #28]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3728      	adds	r7, #40	@ 0x28
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	24004be4 	.word	0x24004be4
 800aa84:	24004bf8 	.word	0x24004bf8
 800aa88:	24004be8 	.word	0x24004be8
 800aa8c:	24004bdc 	.word	0x24004bdc
 800aa90:	24004bec 	.word	0x24004bec
 800aa94:	24004bf0 	.word	0x24004bf0

0800aa98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d04f      	beq.n	800ab4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aaaa:	2308      	movs	r3, #8
 800aaac:	425b      	negs	r3, r3
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	4413      	add	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	4b25      	ldr	r3, [pc, #148]	@ (800ab54 <vPortFree+0xbc>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4013      	ands	r3, r2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10b      	bne.n	800aade <vPortFree+0x46>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	60fb      	str	r3, [r7, #12]
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	e7fd      	b.n	800aada <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00b      	beq.n	800aafe <vPortFree+0x66>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	60bb      	str	r3, [r7, #8]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	4b14      	ldr	r3, [pc, #80]	@ (800ab54 <vPortFree+0xbc>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4013      	ands	r3, r2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d01e      	beq.n	800ab4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d11a      	bne.n	800ab4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	4b0e      	ldr	r3, [pc, #56]	@ (800ab54 <vPortFree+0xbc>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	43db      	mvns	r3, r3
 800ab1e:	401a      	ands	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab24:	f7fe fc6a 	bl	80093fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab58 <vPortFree+0xc0>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4413      	add	r3, r2
 800ab32:	4a09      	ldr	r2, [pc, #36]	@ (800ab58 <vPortFree+0xc0>)
 800ab34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab36:	6938      	ldr	r0, [r7, #16]
 800ab38:	f000 f874 	bl	800ac24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab3c:	4b07      	ldr	r3, [pc, #28]	@ (800ab5c <vPortFree+0xc4>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3301      	adds	r3, #1
 800ab42:	4a06      	ldr	r2, [pc, #24]	@ (800ab5c <vPortFree+0xc4>)
 800ab44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab46:	f7fe fc67 	bl	8009418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab4a:	bf00      	nop
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	24004bf8 	.word	0x24004bf8
 800ab58:	24004be8 	.word	0x24004be8
 800ab5c:	24004bf4 	.word	0x24004bf4

0800ab60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ab6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab6c:	4b27      	ldr	r3, [pc, #156]	@ (800ac0c <prvHeapInit+0xac>)
 800ab6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00c      	beq.n	800ab94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3307      	adds	r3, #7
 800ab7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0307 	bic.w	r3, r3, #7
 800ab86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ac0c <prvHeapInit+0xac>)
 800ab90:	4413      	add	r3, r2
 800ab92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab98:	4a1d      	ldr	r2, [pc, #116]	@ (800ac10 <prvHeapInit+0xb0>)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab9e:	4b1c      	ldr	r3, [pc, #112]	@ (800ac10 <prvHeapInit+0xb0>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	4413      	add	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abac:	2208      	movs	r2, #8
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1a9b      	subs	r3, r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0307 	bic.w	r3, r3, #7
 800abba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4a15      	ldr	r2, [pc, #84]	@ (800ac14 <prvHeapInit+0xb4>)
 800abc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abc2:	4b14      	ldr	r3, [pc, #80]	@ (800ac14 <prvHeapInit+0xb4>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2200      	movs	r2, #0
 800abc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abca:	4b12      	ldr	r3, [pc, #72]	@ (800ac14 <prvHeapInit+0xb4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	1ad2      	subs	r2, r2, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abe0:	4b0c      	ldr	r3, [pc, #48]	@ (800ac14 <prvHeapInit+0xb4>)
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	4a0a      	ldr	r2, [pc, #40]	@ (800ac18 <prvHeapInit+0xb8>)
 800abee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4a09      	ldr	r2, [pc, #36]	@ (800ac1c <prvHeapInit+0xbc>)
 800abf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abf8:	4b09      	ldr	r3, [pc, #36]	@ (800ac20 <prvHeapInit+0xc0>)
 800abfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800abfe:	601a      	str	r2, [r3, #0]
}
 800ac00:	bf00      	nop
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	24000fdc 	.word	0x24000fdc
 800ac10:	24004bdc 	.word	0x24004bdc
 800ac14:	24004be4 	.word	0x24004be4
 800ac18:	24004bec 	.word	0x24004bec
 800ac1c:	24004be8 	.word	0x24004be8
 800ac20:	24004bf8 	.word	0x24004bf8

0800ac24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac2c:	4b28      	ldr	r3, [pc, #160]	@ (800acd0 <prvInsertBlockIntoFreeList+0xac>)
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	e002      	b.n	800ac38 <prvInsertBlockIntoFreeList+0x14>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d8f7      	bhi.n	800ac32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d108      	bne.n	800ac66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	441a      	add	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d118      	bne.n	800acac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4b15      	ldr	r3, [pc, #84]	@ (800acd4 <prvInsertBlockIntoFreeList+0xb0>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d00d      	beq.n	800aca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	441a      	add	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	e008      	b.n	800acb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aca2:	4b0c      	ldr	r3, [pc, #48]	@ (800acd4 <prvInsertBlockIntoFreeList+0xb0>)
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	e003      	b.n	800acb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d002      	beq.n	800acc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acc2:	bf00      	nop
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	24004bdc 	.word	0x24004bdc
 800acd4:	24004be4 	.word	0x24004be4

0800acd8 <std>:
 800acd8:	2300      	movs	r3, #0
 800acda:	b510      	push	{r4, lr}
 800acdc:	4604      	mov	r4, r0
 800acde:	e9c0 3300 	strd	r3, r3, [r0]
 800ace2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ace6:	6083      	str	r3, [r0, #8]
 800ace8:	8181      	strh	r1, [r0, #12]
 800acea:	6643      	str	r3, [r0, #100]	@ 0x64
 800acec:	81c2      	strh	r2, [r0, #14]
 800acee:	6183      	str	r3, [r0, #24]
 800acf0:	4619      	mov	r1, r3
 800acf2:	2208      	movs	r2, #8
 800acf4:	305c      	adds	r0, #92	@ 0x5c
 800acf6:	f000 fa07 	bl	800b108 <memset>
 800acfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ad30 <std+0x58>)
 800acfc:	6263      	str	r3, [r4, #36]	@ 0x24
 800acfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ad34 <std+0x5c>)
 800ad00:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad02:	4b0d      	ldr	r3, [pc, #52]	@ (800ad38 <std+0x60>)
 800ad04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad06:	4b0d      	ldr	r3, [pc, #52]	@ (800ad3c <std+0x64>)
 800ad08:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad40 <std+0x68>)
 800ad0c:	6224      	str	r4, [r4, #32]
 800ad0e:	429c      	cmp	r4, r3
 800ad10:	d006      	beq.n	800ad20 <std+0x48>
 800ad12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad16:	4294      	cmp	r4, r2
 800ad18:	d002      	beq.n	800ad20 <std+0x48>
 800ad1a:	33d0      	adds	r3, #208	@ 0xd0
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	d105      	bne.n	800ad2c <std+0x54>
 800ad20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad28:	f000 babc 	b.w	800b2a4 <__retarget_lock_init_recursive>
 800ad2c:	bd10      	pop	{r4, pc}
 800ad2e:	bf00      	nop
 800ad30:	0800af59 	.word	0x0800af59
 800ad34:	0800af7b 	.word	0x0800af7b
 800ad38:	0800afb3 	.word	0x0800afb3
 800ad3c:	0800afd7 	.word	0x0800afd7
 800ad40:	24004bfc 	.word	0x24004bfc

0800ad44 <stdio_exit_handler>:
 800ad44:	4a02      	ldr	r2, [pc, #8]	@ (800ad50 <stdio_exit_handler+0xc>)
 800ad46:	4903      	ldr	r1, [pc, #12]	@ (800ad54 <stdio_exit_handler+0x10>)
 800ad48:	4803      	ldr	r0, [pc, #12]	@ (800ad58 <stdio_exit_handler+0x14>)
 800ad4a:	f000 b869 	b.w	800ae20 <_fwalk_sglue>
 800ad4e:	bf00      	nop
 800ad50:	24000014 	.word	0x24000014
 800ad54:	0800bb8d 	.word	0x0800bb8d
 800ad58:	24000024 	.word	0x24000024

0800ad5c <cleanup_stdio>:
 800ad5c:	6841      	ldr	r1, [r0, #4]
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad90 <cleanup_stdio+0x34>)
 800ad60:	4299      	cmp	r1, r3
 800ad62:	b510      	push	{r4, lr}
 800ad64:	4604      	mov	r4, r0
 800ad66:	d001      	beq.n	800ad6c <cleanup_stdio+0x10>
 800ad68:	f000 ff10 	bl	800bb8c <_fflush_r>
 800ad6c:	68a1      	ldr	r1, [r4, #8]
 800ad6e:	4b09      	ldr	r3, [pc, #36]	@ (800ad94 <cleanup_stdio+0x38>)
 800ad70:	4299      	cmp	r1, r3
 800ad72:	d002      	beq.n	800ad7a <cleanup_stdio+0x1e>
 800ad74:	4620      	mov	r0, r4
 800ad76:	f000 ff09 	bl	800bb8c <_fflush_r>
 800ad7a:	68e1      	ldr	r1, [r4, #12]
 800ad7c:	4b06      	ldr	r3, [pc, #24]	@ (800ad98 <cleanup_stdio+0x3c>)
 800ad7e:	4299      	cmp	r1, r3
 800ad80:	d004      	beq.n	800ad8c <cleanup_stdio+0x30>
 800ad82:	4620      	mov	r0, r4
 800ad84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad88:	f000 bf00 	b.w	800bb8c <_fflush_r>
 800ad8c:	bd10      	pop	{r4, pc}
 800ad8e:	bf00      	nop
 800ad90:	24004bfc 	.word	0x24004bfc
 800ad94:	24004c64 	.word	0x24004c64
 800ad98:	24004ccc 	.word	0x24004ccc

0800ad9c <global_stdio_init.part.0>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	4b0b      	ldr	r3, [pc, #44]	@ (800adcc <global_stdio_init.part.0+0x30>)
 800ada0:	4c0b      	ldr	r4, [pc, #44]	@ (800add0 <global_stdio_init.part.0+0x34>)
 800ada2:	4a0c      	ldr	r2, [pc, #48]	@ (800add4 <global_stdio_init.part.0+0x38>)
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	4620      	mov	r0, r4
 800ada8:	2200      	movs	r2, #0
 800adaa:	2104      	movs	r1, #4
 800adac:	f7ff ff94 	bl	800acd8 <std>
 800adb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800adb4:	2201      	movs	r2, #1
 800adb6:	2109      	movs	r1, #9
 800adb8:	f7ff ff8e 	bl	800acd8 <std>
 800adbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800adc0:	2202      	movs	r2, #2
 800adc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc6:	2112      	movs	r1, #18
 800adc8:	f7ff bf86 	b.w	800acd8 <std>
 800adcc:	24004d34 	.word	0x24004d34
 800add0:	24004bfc 	.word	0x24004bfc
 800add4:	0800ad45 	.word	0x0800ad45

0800add8 <__sfp_lock_acquire>:
 800add8:	4801      	ldr	r0, [pc, #4]	@ (800ade0 <__sfp_lock_acquire+0x8>)
 800adda:	f000 ba64 	b.w	800b2a6 <__retarget_lock_acquire_recursive>
 800adde:	bf00      	nop
 800ade0:	24004d3d 	.word	0x24004d3d

0800ade4 <__sfp_lock_release>:
 800ade4:	4801      	ldr	r0, [pc, #4]	@ (800adec <__sfp_lock_release+0x8>)
 800ade6:	f000 ba5f 	b.w	800b2a8 <__retarget_lock_release_recursive>
 800adea:	bf00      	nop
 800adec:	24004d3d 	.word	0x24004d3d

0800adf0 <__sinit>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	4604      	mov	r4, r0
 800adf4:	f7ff fff0 	bl	800add8 <__sfp_lock_acquire>
 800adf8:	6a23      	ldr	r3, [r4, #32]
 800adfa:	b11b      	cbz	r3, 800ae04 <__sinit+0x14>
 800adfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae00:	f7ff bff0 	b.w	800ade4 <__sfp_lock_release>
 800ae04:	4b04      	ldr	r3, [pc, #16]	@ (800ae18 <__sinit+0x28>)
 800ae06:	6223      	str	r3, [r4, #32]
 800ae08:	4b04      	ldr	r3, [pc, #16]	@ (800ae1c <__sinit+0x2c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1f5      	bne.n	800adfc <__sinit+0xc>
 800ae10:	f7ff ffc4 	bl	800ad9c <global_stdio_init.part.0>
 800ae14:	e7f2      	b.n	800adfc <__sinit+0xc>
 800ae16:	bf00      	nop
 800ae18:	0800ad5d 	.word	0x0800ad5d
 800ae1c:	24004d34 	.word	0x24004d34

0800ae20 <_fwalk_sglue>:
 800ae20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae24:	4607      	mov	r7, r0
 800ae26:	4688      	mov	r8, r1
 800ae28:	4614      	mov	r4, r2
 800ae2a:	2600      	movs	r6, #0
 800ae2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae30:	f1b9 0901 	subs.w	r9, r9, #1
 800ae34:	d505      	bpl.n	800ae42 <_fwalk_sglue+0x22>
 800ae36:	6824      	ldr	r4, [r4, #0]
 800ae38:	2c00      	cmp	r4, #0
 800ae3a:	d1f7      	bne.n	800ae2c <_fwalk_sglue+0xc>
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae42:	89ab      	ldrh	r3, [r5, #12]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d907      	bls.n	800ae58 <_fwalk_sglue+0x38>
 800ae48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	d003      	beq.n	800ae58 <_fwalk_sglue+0x38>
 800ae50:	4629      	mov	r1, r5
 800ae52:	4638      	mov	r0, r7
 800ae54:	47c0      	blx	r8
 800ae56:	4306      	orrs	r6, r0
 800ae58:	3568      	adds	r5, #104	@ 0x68
 800ae5a:	e7e9      	b.n	800ae30 <_fwalk_sglue+0x10>

0800ae5c <_puts_r>:
 800ae5c:	6a03      	ldr	r3, [r0, #32]
 800ae5e:	b570      	push	{r4, r5, r6, lr}
 800ae60:	6884      	ldr	r4, [r0, #8]
 800ae62:	4605      	mov	r5, r0
 800ae64:	460e      	mov	r6, r1
 800ae66:	b90b      	cbnz	r3, 800ae6c <_puts_r+0x10>
 800ae68:	f7ff ffc2 	bl	800adf0 <__sinit>
 800ae6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d405      	bmi.n	800ae7e <_puts_r+0x22>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	0598      	lsls	r0, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_puts_r+0x22>
 800ae78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae7a:	f000 fa14 	bl	800b2a6 <__retarget_lock_acquire_recursive>
 800ae7e:	89a3      	ldrh	r3, [r4, #12]
 800ae80:	0719      	lsls	r1, r3, #28
 800ae82:	d502      	bpl.n	800ae8a <_puts_r+0x2e>
 800ae84:	6923      	ldr	r3, [r4, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d135      	bne.n	800aef6 <_puts_r+0x9a>
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f000 f8e5 	bl	800b05c <__swsetup_r>
 800ae92:	b380      	cbz	r0, 800aef6 <_puts_r+0x9a>
 800ae94:	f04f 35ff 	mov.w	r5, #4294967295
 800ae98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae9a:	07da      	lsls	r2, r3, #31
 800ae9c:	d405      	bmi.n	800aeaa <_puts_r+0x4e>
 800ae9e:	89a3      	ldrh	r3, [r4, #12]
 800aea0:	059b      	lsls	r3, r3, #22
 800aea2:	d402      	bmi.n	800aeaa <_puts_r+0x4e>
 800aea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aea6:	f000 f9ff 	bl	800b2a8 <__retarget_lock_release_recursive>
 800aeaa:	4628      	mov	r0, r5
 800aeac:	bd70      	pop	{r4, r5, r6, pc}
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	da04      	bge.n	800aebc <_puts_r+0x60>
 800aeb2:	69a2      	ldr	r2, [r4, #24]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	dc17      	bgt.n	800aee8 <_puts_r+0x8c>
 800aeb8:	290a      	cmp	r1, #10
 800aeba:	d015      	beq.n	800aee8 <_puts_r+0x8c>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	6022      	str	r2, [r4, #0]
 800aec2:	7019      	strb	r1, [r3, #0]
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aeca:	3b01      	subs	r3, #1
 800aecc:	60a3      	str	r3, [r4, #8]
 800aece:	2900      	cmp	r1, #0
 800aed0:	d1ed      	bne.n	800aeae <_puts_r+0x52>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da11      	bge.n	800aefa <_puts_r+0x9e>
 800aed6:	4622      	mov	r2, r4
 800aed8:	210a      	movs	r1, #10
 800aeda:	4628      	mov	r0, r5
 800aedc:	f000 f87f 	bl	800afde <__swbuf_r>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d0d7      	beq.n	800ae94 <_puts_r+0x38>
 800aee4:	250a      	movs	r5, #10
 800aee6:	e7d7      	b.n	800ae98 <_puts_r+0x3c>
 800aee8:	4622      	mov	r2, r4
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 f877 	bl	800afde <__swbuf_r>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d1e7      	bne.n	800aec4 <_puts_r+0x68>
 800aef4:	e7ce      	b.n	800ae94 <_puts_r+0x38>
 800aef6:	3e01      	subs	r6, #1
 800aef8:	e7e4      	b.n	800aec4 <_puts_r+0x68>
 800aefa:	6823      	ldr	r3, [r4, #0]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	6022      	str	r2, [r4, #0]
 800af00:	220a      	movs	r2, #10
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	e7ee      	b.n	800aee4 <_puts_r+0x88>
	...

0800af08 <puts>:
 800af08:	4b02      	ldr	r3, [pc, #8]	@ (800af14 <puts+0xc>)
 800af0a:	4601      	mov	r1, r0
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f7ff bfa5 	b.w	800ae5c <_puts_r>
 800af12:	bf00      	nop
 800af14:	24000020 	.word	0x24000020

0800af18 <siprintf>:
 800af18:	b40e      	push	{r1, r2, r3}
 800af1a:	b500      	push	{lr}
 800af1c:	b09c      	sub	sp, #112	@ 0x70
 800af1e:	ab1d      	add	r3, sp, #116	@ 0x74
 800af20:	9002      	str	r0, [sp, #8]
 800af22:	9006      	str	r0, [sp, #24]
 800af24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af28:	4809      	ldr	r0, [pc, #36]	@ (800af50 <siprintf+0x38>)
 800af2a:	9107      	str	r1, [sp, #28]
 800af2c:	9104      	str	r1, [sp, #16]
 800af2e:	4909      	ldr	r1, [pc, #36]	@ (800af54 <siprintf+0x3c>)
 800af30:	f853 2b04 	ldr.w	r2, [r3], #4
 800af34:	9105      	str	r1, [sp, #20]
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	a902      	add	r1, sp, #8
 800af3c:	f000 fb18 	bl	800b570 <_svfiprintf_r>
 800af40:	9b02      	ldr	r3, [sp, #8]
 800af42:	2200      	movs	r2, #0
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	b01c      	add	sp, #112	@ 0x70
 800af48:	f85d eb04 	ldr.w	lr, [sp], #4
 800af4c:	b003      	add	sp, #12
 800af4e:	4770      	bx	lr
 800af50:	24000020 	.word	0x24000020
 800af54:	ffff0208 	.word	0xffff0208

0800af58 <__sread>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	460c      	mov	r4, r1
 800af5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af60:	f000 f952 	bl	800b208 <_read_r>
 800af64:	2800      	cmp	r0, #0
 800af66:	bfab      	itete	ge
 800af68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af6a:	89a3      	ldrhlt	r3, [r4, #12]
 800af6c:	181b      	addge	r3, r3, r0
 800af6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800af72:	bfac      	ite	ge
 800af74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800af76:	81a3      	strhlt	r3, [r4, #12]
 800af78:	bd10      	pop	{r4, pc}

0800af7a <__swrite>:
 800af7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7e:	461f      	mov	r7, r3
 800af80:	898b      	ldrh	r3, [r1, #12]
 800af82:	05db      	lsls	r3, r3, #23
 800af84:	4605      	mov	r5, r0
 800af86:	460c      	mov	r4, r1
 800af88:	4616      	mov	r6, r2
 800af8a:	d505      	bpl.n	800af98 <__swrite+0x1e>
 800af8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af90:	2302      	movs	r3, #2
 800af92:	2200      	movs	r2, #0
 800af94:	f000 f926 	bl	800b1e4 <_lseek_r>
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	4632      	mov	r2, r6
 800afa6:	463b      	mov	r3, r7
 800afa8:	4628      	mov	r0, r5
 800afaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afae:	f000 b93d 	b.w	800b22c <_write_r>

0800afb2 <__sseek>:
 800afb2:	b510      	push	{r4, lr}
 800afb4:	460c      	mov	r4, r1
 800afb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afba:	f000 f913 	bl	800b1e4 <_lseek_r>
 800afbe:	1c43      	adds	r3, r0, #1
 800afc0:	89a3      	ldrh	r3, [r4, #12]
 800afc2:	bf15      	itete	ne
 800afc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800afc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800afca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800afce:	81a3      	strheq	r3, [r4, #12]
 800afd0:	bf18      	it	ne
 800afd2:	81a3      	strhne	r3, [r4, #12]
 800afd4:	bd10      	pop	{r4, pc}

0800afd6 <__sclose>:
 800afd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afda:	f000 b89d 	b.w	800b118 <_close_r>

0800afde <__swbuf_r>:
 800afde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe0:	460e      	mov	r6, r1
 800afe2:	4614      	mov	r4, r2
 800afe4:	4605      	mov	r5, r0
 800afe6:	b118      	cbz	r0, 800aff0 <__swbuf_r+0x12>
 800afe8:	6a03      	ldr	r3, [r0, #32]
 800afea:	b90b      	cbnz	r3, 800aff0 <__swbuf_r+0x12>
 800afec:	f7ff ff00 	bl	800adf0 <__sinit>
 800aff0:	69a3      	ldr	r3, [r4, #24]
 800aff2:	60a3      	str	r3, [r4, #8]
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	071a      	lsls	r2, r3, #28
 800aff8:	d501      	bpl.n	800affe <__swbuf_r+0x20>
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	b943      	cbnz	r3, 800b010 <__swbuf_r+0x32>
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f000 f82b 	bl	800b05c <__swsetup_r>
 800b006:	b118      	cbz	r0, 800b010 <__swbuf_r+0x32>
 800b008:	f04f 37ff 	mov.w	r7, #4294967295
 800b00c:	4638      	mov	r0, r7
 800b00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b010:	6823      	ldr	r3, [r4, #0]
 800b012:	6922      	ldr	r2, [r4, #16]
 800b014:	1a98      	subs	r0, r3, r2
 800b016:	6963      	ldr	r3, [r4, #20]
 800b018:	b2f6      	uxtb	r6, r6
 800b01a:	4283      	cmp	r3, r0
 800b01c:	4637      	mov	r7, r6
 800b01e:	dc05      	bgt.n	800b02c <__swbuf_r+0x4e>
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f000 fdb2 	bl	800bb8c <_fflush_r>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d1ed      	bne.n	800b008 <__swbuf_r+0x2a>
 800b02c:	68a3      	ldr	r3, [r4, #8]
 800b02e:	3b01      	subs	r3, #1
 800b030:	60a3      	str	r3, [r4, #8]
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	6022      	str	r2, [r4, #0]
 800b038:	701e      	strb	r6, [r3, #0]
 800b03a:	6962      	ldr	r2, [r4, #20]
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	429a      	cmp	r2, r3
 800b040:	d004      	beq.n	800b04c <__swbuf_r+0x6e>
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	07db      	lsls	r3, r3, #31
 800b046:	d5e1      	bpl.n	800b00c <__swbuf_r+0x2e>
 800b048:	2e0a      	cmp	r6, #10
 800b04a:	d1df      	bne.n	800b00c <__swbuf_r+0x2e>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4628      	mov	r0, r5
 800b050:	f000 fd9c 	bl	800bb8c <_fflush_r>
 800b054:	2800      	cmp	r0, #0
 800b056:	d0d9      	beq.n	800b00c <__swbuf_r+0x2e>
 800b058:	e7d6      	b.n	800b008 <__swbuf_r+0x2a>
	...

0800b05c <__swsetup_r>:
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4b29      	ldr	r3, [pc, #164]	@ (800b104 <__swsetup_r+0xa8>)
 800b060:	4605      	mov	r5, r0
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	460c      	mov	r4, r1
 800b066:	b118      	cbz	r0, 800b070 <__swsetup_r+0x14>
 800b068:	6a03      	ldr	r3, [r0, #32]
 800b06a:	b90b      	cbnz	r3, 800b070 <__swsetup_r+0x14>
 800b06c:	f7ff fec0 	bl	800adf0 <__sinit>
 800b070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b074:	0719      	lsls	r1, r3, #28
 800b076:	d422      	bmi.n	800b0be <__swsetup_r+0x62>
 800b078:	06da      	lsls	r2, r3, #27
 800b07a:	d407      	bmi.n	800b08c <__swsetup_r+0x30>
 800b07c:	2209      	movs	r2, #9
 800b07e:	602a      	str	r2, [r5, #0]
 800b080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	f04f 30ff 	mov.w	r0, #4294967295
 800b08a:	e033      	b.n	800b0f4 <__swsetup_r+0x98>
 800b08c:	0758      	lsls	r0, r3, #29
 800b08e:	d512      	bpl.n	800b0b6 <__swsetup_r+0x5a>
 800b090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b092:	b141      	cbz	r1, 800b0a6 <__swsetup_r+0x4a>
 800b094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b098:	4299      	cmp	r1, r3
 800b09a:	d002      	beq.n	800b0a2 <__swsetup_r+0x46>
 800b09c:	4628      	mov	r0, r5
 800b09e:	f000 f913 	bl	800b2c8 <_free_r>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	6063      	str	r3, [r4, #4]
 800b0b2:	6923      	ldr	r3, [r4, #16]
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	f043 0308 	orr.w	r3, r3, #8
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	6923      	ldr	r3, [r4, #16]
 800b0c0:	b94b      	cbnz	r3, 800b0d6 <__swsetup_r+0x7a>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0cc:	d003      	beq.n	800b0d6 <__swsetup_r+0x7a>
 800b0ce:	4621      	mov	r1, r4
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f000 fda9 	bl	800bc28 <__smakebuf_r>
 800b0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0da:	f013 0201 	ands.w	r2, r3, #1
 800b0de:	d00a      	beq.n	800b0f6 <__swsetup_r+0x9a>
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	60a2      	str	r2, [r4, #8]
 800b0e4:	6962      	ldr	r2, [r4, #20]
 800b0e6:	4252      	negs	r2, r2
 800b0e8:	61a2      	str	r2, [r4, #24]
 800b0ea:	6922      	ldr	r2, [r4, #16]
 800b0ec:	b942      	cbnz	r2, 800b100 <__swsetup_r+0xa4>
 800b0ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0f2:	d1c5      	bne.n	800b080 <__swsetup_r+0x24>
 800b0f4:	bd38      	pop	{r3, r4, r5, pc}
 800b0f6:	0799      	lsls	r1, r3, #30
 800b0f8:	bf58      	it	pl
 800b0fa:	6962      	ldrpl	r2, [r4, #20]
 800b0fc:	60a2      	str	r2, [r4, #8]
 800b0fe:	e7f4      	b.n	800b0ea <__swsetup_r+0x8e>
 800b100:	2000      	movs	r0, #0
 800b102:	e7f7      	b.n	800b0f4 <__swsetup_r+0x98>
 800b104:	24000020 	.word	0x24000020

0800b108 <memset>:
 800b108:	4402      	add	r2, r0
 800b10a:	4603      	mov	r3, r0
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d100      	bne.n	800b112 <memset+0xa>
 800b110:	4770      	bx	lr
 800b112:	f803 1b01 	strb.w	r1, [r3], #1
 800b116:	e7f9      	b.n	800b10c <memset+0x4>

0800b118 <_close_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d06      	ldr	r5, [pc, #24]	@ (800b134 <_close_r+0x1c>)
 800b11c:	2300      	movs	r3, #0
 800b11e:	4604      	mov	r4, r0
 800b120:	4608      	mov	r0, r1
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	f7f5 fedf 	bl	8000ee6 <_close>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d102      	bne.n	800b132 <_close_r+0x1a>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	b103      	cbz	r3, 800b132 <_close_r+0x1a>
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	24004d38 	.word	0x24004d38

0800b138 <_reclaim_reent>:
 800b138:	4b29      	ldr	r3, [pc, #164]	@ (800b1e0 <_reclaim_reent+0xa8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4283      	cmp	r3, r0
 800b13e:	b570      	push	{r4, r5, r6, lr}
 800b140:	4604      	mov	r4, r0
 800b142:	d04b      	beq.n	800b1dc <_reclaim_reent+0xa4>
 800b144:	69c3      	ldr	r3, [r0, #28]
 800b146:	b1ab      	cbz	r3, 800b174 <_reclaim_reent+0x3c>
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	b16b      	cbz	r3, 800b168 <_reclaim_reent+0x30>
 800b14c:	2500      	movs	r5, #0
 800b14e:	69e3      	ldr	r3, [r4, #28]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	5959      	ldr	r1, [r3, r5]
 800b154:	2900      	cmp	r1, #0
 800b156:	d13b      	bne.n	800b1d0 <_reclaim_reent+0x98>
 800b158:	3504      	adds	r5, #4
 800b15a:	2d80      	cmp	r5, #128	@ 0x80
 800b15c:	d1f7      	bne.n	800b14e <_reclaim_reent+0x16>
 800b15e:	69e3      	ldr	r3, [r4, #28]
 800b160:	4620      	mov	r0, r4
 800b162:	68d9      	ldr	r1, [r3, #12]
 800b164:	f000 f8b0 	bl	800b2c8 <_free_r>
 800b168:	69e3      	ldr	r3, [r4, #28]
 800b16a:	6819      	ldr	r1, [r3, #0]
 800b16c:	b111      	cbz	r1, 800b174 <_reclaim_reent+0x3c>
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 f8aa 	bl	800b2c8 <_free_r>
 800b174:	6961      	ldr	r1, [r4, #20]
 800b176:	b111      	cbz	r1, 800b17e <_reclaim_reent+0x46>
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 f8a5 	bl	800b2c8 <_free_r>
 800b17e:	69e1      	ldr	r1, [r4, #28]
 800b180:	b111      	cbz	r1, 800b188 <_reclaim_reent+0x50>
 800b182:	4620      	mov	r0, r4
 800b184:	f000 f8a0 	bl	800b2c8 <_free_r>
 800b188:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b18a:	b111      	cbz	r1, 800b192 <_reclaim_reent+0x5a>
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 f89b 	bl	800b2c8 <_free_r>
 800b192:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b194:	b111      	cbz	r1, 800b19c <_reclaim_reent+0x64>
 800b196:	4620      	mov	r0, r4
 800b198:	f000 f896 	bl	800b2c8 <_free_r>
 800b19c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b19e:	b111      	cbz	r1, 800b1a6 <_reclaim_reent+0x6e>
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 f891 	bl	800b2c8 <_free_r>
 800b1a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b1a8:	b111      	cbz	r1, 800b1b0 <_reclaim_reent+0x78>
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 f88c 	bl	800b2c8 <_free_r>
 800b1b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b1b2:	b111      	cbz	r1, 800b1ba <_reclaim_reent+0x82>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 f887 	bl	800b2c8 <_free_r>
 800b1ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b1bc:	b111      	cbz	r1, 800b1c4 <_reclaim_reent+0x8c>
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 f882 	bl	800b2c8 <_free_r>
 800b1c4:	6a23      	ldr	r3, [r4, #32]
 800b1c6:	b14b      	cbz	r3, 800b1dc <_reclaim_reent+0xa4>
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1ce:	4718      	bx	r3
 800b1d0:	680e      	ldr	r6, [r1, #0]
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 f878 	bl	800b2c8 <_free_r>
 800b1d8:	4631      	mov	r1, r6
 800b1da:	e7bb      	b.n	800b154 <_reclaim_reent+0x1c>
 800b1dc:	bd70      	pop	{r4, r5, r6, pc}
 800b1de:	bf00      	nop
 800b1e0:	24000020 	.word	0x24000020

0800b1e4 <_lseek_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4d07      	ldr	r5, [pc, #28]	@ (800b204 <_lseek_r+0x20>)
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	4608      	mov	r0, r1
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	602a      	str	r2, [r5, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	f7f5 fe9e 	bl	8000f34 <_lseek>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_lseek_r+0x1e>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_lseek_r+0x1e>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	24004d38 	.word	0x24004d38

0800b208 <_read_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	@ (800b228 <_read_r+0x20>)
 800b20c:	4604      	mov	r4, r0
 800b20e:	4608      	mov	r0, r1
 800b210:	4611      	mov	r1, r2
 800b212:	2200      	movs	r2, #0
 800b214:	602a      	str	r2, [r5, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	f7f5 fe48 	bl	8000eac <_read>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_read_r+0x1e>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_read_r+0x1e>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	24004d38 	.word	0x24004d38

0800b22c <_write_r>:
 800b22c:	b538      	push	{r3, r4, r5, lr}
 800b22e:	4d07      	ldr	r5, [pc, #28]	@ (800b24c <_write_r+0x20>)
 800b230:	4604      	mov	r4, r0
 800b232:	4608      	mov	r0, r1
 800b234:	4611      	mov	r1, r2
 800b236:	2200      	movs	r2, #0
 800b238:	602a      	str	r2, [r5, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	f7f5 fc10 	bl	8000a60 <_write>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_write_r+0x1e>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_write_r+0x1e>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	24004d38 	.word	0x24004d38

0800b250 <__errno>:
 800b250:	4b01      	ldr	r3, [pc, #4]	@ (800b258 <__errno+0x8>)
 800b252:	6818      	ldr	r0, [r3, #0]
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	24000020 	.word	0x24000020

0800b25c <__libc_init_array>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	4d0d      	ldr	r5, [pc, #52]	@ (800b294 <__libc_init_array+0x38>)
 800b260:	4c0d      	ldr	r4, [pc, #52]	@ (800b298 <__libc_init_array+0x3c>)
 800b262:	1b64      	subs	r4, r4, r5
 800b264:	10a4      	asrs	r4, r4, #2
 800b266:	2600      	movs	r6, #0
 800b268:	42a6      	cmp	r6, r4
 800b26a:	d109      	bne.n	800b280 <__libc_init_array+0x24>
 800b26c:	4d0b      	ldr	r5, [pc, #44]	@ (800b29c <__libc_init_array+0x40>)
 800b26e:	4c0c      	ldr	r4, [pc, #48]	@ (800b2a0 <__libc_init_array+0x44>)
 800b270:	f000 fd98 	bl	800bda4 <_init>
 800b274:	1b64      	subs	r4, r4, r5
 800b276:	10a4      	asrs	r4, r4, #2
 800b278:	2600      	movs	r6, #0
 800b27a:	42a6      	cmp	r6, r4
 800b27c:	d105      	bne.n	800b28a <__libc_init_array+0x2e>
 800b27e:	bd70      	pop	{r4, r5, r6, pc}
 800b280:	f855 3b04 	ldr.w	r3, [r5], #4
 800b284:	4798      	blx	r3
 800b286:	3601      	adds	r6, #1
 800b288:	e7ee      	b.n	800b268 <__libc_init_array+0xc>
 800b28a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28e:	4798      	blx	r3
 800b290:	3601      	adds	r6, #1
 800b292:	e7f2      	b.n	800b27a <__libc_init_array+0x1e>
 800b294:	0800beb4 	.word	0x0800beb4
 800b298:	0800beb4 	.word	0x0800beb4
 800b29c:	0800beb4 	.word	0x0800beb4
 800b2a0:	0800beb8 	.word	0x0800beb8

0800b2a4 <__retarget_lock_init_recursive>:
 800b2a4:	4770      	bx	lr

0800b2a6 <__retarget_lock_acquire_recursive>:
 800b2a6:	4770      	bx	lr

0800b2a8 <__retarget_lock_release_recursive>:
 800b2a8:	4770      	bx	lr

0800b2aa <memcpy>:
 800b2aa:	440a      	add	r2, r1
 800b2ac:	4291      	cmp	r1, r2
 800b2ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2b2:	d100      	bne.n	800b2b6 <memcpy+0xc>
 800b2b4:	4770      	bx	lr
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2c0:	4291      	cmp	r1, r2
 800b2c2:	d1f9      	bne.n	800b2b8 <memcpy+0xe>
 800b2c4:	bd10      	pop	{r4, pc}
	...

0800b2c8 <_free_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	2900      	cmp	r1, #0
 800b2ce:	d041      	beq.n	800b354 <_free_r+0x8c>
 800b2d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d4:	1f0c      	subs	r4, r1, #4
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bfb8      	it	lt
 800b2da:	18e4      	addlt	r4, r4, r3
 800b2dc:	f000 f8e0 	bl	800b4a0 <__malloc_lock>
 800b2e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b358 <_free_r+0x90>)
 800b2e2:	6813      	ldr	r3, [r2, #0]
 800b2e4:	b933      	cbnz	r3, 800b2f4 <_free_r+0x2c>
 800b2e6:	6063      	str	r3, [r4, #4]
 800b2e8:	6014      	str	r4, [r2, #0]
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2f0:	f000 b8dc 	b.w	800b4ac <__malloc_unlock>
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	d908      	bls.n	800b30a <_free_r+0x42>
 800b2f8:	6820      	ldr	r0, [r4, #0]
 800b2fa:	1821      	adds	r1, r4, r0
 800b2fc:	428b      	cmp	r3, r1
 800b2fe:	bf01      	itttt	eq
 800b300:	6819      	ldreq	r1, [r3, #0]
 800b302:	685b      	ldreq	r3, [r3, #4]
 800b304:	1809      	addeq	r1, r1, r0
 800b306:	6021      	streq	r1, [r4, #0]
 800b308:	e7ed      	b.n	800b2e6 <_free_r+0x1e>
 800b30a:	461a      	mov	r2, r3
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	b10b      	cbz	r3, 800b314 <_free_r+0x4c>
 800b310:	42a3      	cmp	r3, r4
 800b312:	d9fa      	bls.n	800b30a <_free_r+0x42>
 800b314:	6811      	ldr	r1, [r2, #0]
 800b316:	1850      	adds	r0, r2, r1
 800b318:	42a0      	cmp	r0, r4
 800b31a:	d10b      	bne.n	800b334 <_free_r+0x6c>
 800b31c:	6820      	ldr	r0, [r4, #0]
 800b31e:	4401      	add	r1, r0
 800b320:	1850      	adds	r0, r2, r1
 800b322:	4283      	cmp	r3, r0
 800b324:	6011      	str	r1, [r2, #0]
 800b326:	d1e0      	bne.n	800b2ea <_free_r+0x22>
 800b328:	6818      	ldr	r0, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	6053      	str	r3, [r2, #4]
 800b32e:	4408      	add	r0, r1
 800b330:	6010      	str	r0, [r2, #0]
 800b332:	e7da      	b.n	800b2ea <_free_r+0x22>
 800b334:	d902      	bls.n	800b33c <_free_r+0x74>
 800b336:	230c      	movs	r3, #12
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	e7d6      	b.n	800b2ea <_free_r+0x22>
 800b33c:	6820      	ldr	r0, [r4, #0]
 800b33e:	1821      	adds	r1, r4, r0
 800b340:	428b      	cmp	r3, r1
 800b342:	bf04      	itt	eq
 800b344:	6819      	ldreq	r1, [r3, #0]
 800b346:	685b      	ldreq	r3, [r3, #4]
 800b348:	6063      	str	r3, [r4, #4]
 800b34a:	bf04      	itt	eq
 800b34c:	1809      	addeq	r1, r1, r0
 800b34e:	6021      	streq	r1, [r4, #0]
 800b350:	6054      	str	r4, [r2, #4]
 800b352:	e7ca      	b.n	800b2ea <_free_r+0x22>
 800b354:	bd38      	pop	{r3, r4, r5, pc}
 800b356:	bf00      	nop
 800b358:	24004d44 	.word	0x24004d44

0800b35c <sbrk_aligned>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	4e0f      	ldr	r6, [pc, #60]	@ (800b39c <sbrk_aligned+0x40>)
 800b360:	460c      	mov	r4, r1
 800b362:	6831      	ldr	r1, [r6, #0]
 800b364:	4605      	mov	r5, r0
 800b366:	b911      	cbnz	r1, 800b36e <sbrk_aligned+0x12>
 800b368:	f000 fcd6 	bl	800bd18 <_sbrk_r>
 800b36c:	6030      	str	r0, [r6, #0]
 800b36e:	4621      	mov	r1, r4
 800b370:	4628      	mov	r0, r5
 800b372:	f000 fcd1 	bl	800bd18 <_sbrk_r>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	d103      	bne.n	800b382 <sbrk_aligned+0x26>
 800b37a:	f04f 34ff 	mov.w	r4, #4294967295
 800b37e:	4620      	mov	r0, r4
 800b380:	bd70      	pop	{r4, r5, r6, pc}
 800b382:	1cc4      	adds	r4, r0, #3
 800b384:	f024 0403 	bic.w	r4, r4, #3
 800b388:	42a0      	cmp	r0, r4
 800b38a:	d0f8      	beq.n	800b37e <sbrk_aligned+0x22>
 800b38c:	1a21      	subs	r1, r4, r0
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 fcc2 	bl	800bd18 <_sbrk_r>
 800b394:	3001      	adds	r0, #1
 800b396:	d1f2      	bne.n	800b37e <sbrk_aligned+0x22>
 800b398:	e7ef      	b.n	800b37a <sbrk_aligned+0x1e>
 800b39a:	bf00      	nop
 800b39c:	24004d40 	.word	0x24004d40

0800b3a0 <_malloc_r>:
 800b3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a4:	1ccd      	adds	r5, r1, #3
 800b3a6:	f025 0503 	bic.w	r5, r5, #3
 800b3aa:	3508      	adds	r5, #8
 800b3ac:	2d0c      	cmp	r5, #12
 800b3ae:	bf38      	it	cc
 800b3b0:	250c      	movcc	r5, #12
 800b3b2:	2d00      	cmp	r5, #0
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	db01      	blt.n	800b3bc <_malloc_r+0x1c>
 800b3b8:	42a9      	cmp	r1, r5
 800b3ba:	d904      	bls.n	800b3c6 <_malloc_r+0x26>
 800b3bc:	230c      	movs	r3, #12
 800b3be:	6033      	str	r3, [r6, #0]
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b49c <_malloc_r+0xfc>
 800b3ca:	f000 f869 	bl	800b4a0 <__malloc_lock>
 800b3ce:	f8d8 3000 	ldr.w	r3, [r8]
 800b3d2:	461c      	mov	r4, r3
 800b3d4:	bb44      	cbnz	r4, 800b428 <_malloc_r+0x88>
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff ffbf 	bl	800b35c <sbrk_aligned>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	d158      	bne.n	800b496 <_malloc_r+0xf6>
 800b3e4:	f8d8 4000 	ldr.w	r4, [r8]
 800b3e8:	4627      	mov	r7, r4
 800b3ea:	2f00      	cmp	r7, #0
 800b3ec:	d143      	bne.n	800b476 <_malloc_r+0xd6>
 800b3ee:	2c00      	cmp	r4, #0
 800b3f0:	d04b      	beq.n	800b48a <_malloc_r+0xea>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	eb04 0903 	add.w	r9, r4, r3
 800b3fc:	f000 fc8c 	bl	800bd18 <_sbrk_r>
 800b400:	4581      	cmp	r9, r0
 800b402:	d142      	bne.n	800b48a <_malloc_r+0xea>
 800b404:	6821      	ldr	r1, [r4, #0]
 800b406:	1a6d      	subs	r5, r5, r1
 800b408:	4629      	mov	r1, r5
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7ff ffa6 	bl	800b35c <sbrk_aligned>
 800b410:	3001      	adds	r0, #1
 800b412:	d03a      	beq.n	800b48a <_malloc_r+0xea>
 800b414:	6823      	ldr	r3, [r4, #0]
 800b416:	442b      	add	r3, r5
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	f8d8 3000 	ldr.w	r3, [r8]
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	bb62      	cbnz	r2, 800b47c <_malloc_r+0xdc>
 800b422:	f8c8 7000 	str.w	r7, [r8]
 800b426:	e00f      	b.n	800b448 <_malloc_r+0xa8>
 800b428:	6822      	ldr	r2, [r4, #0]
 800b42a:	1b52      	subs	r2, r2, r5
 800b42c:	d420      	bmi.n	800b470 <_malloc_r+0xd0>
 800b42e:	2a0b      	cmp	r2, #11
 800b430:	d917      	bls.n	800b462 <_malloc_r+0xc2>
 800b432:	1961      	adds	r1, r4, r5
 800b434:	42a3      	cmp	r3, r4
 800b436:	6025      	str	r5, [r4, #0]
 800b438:	bf18      	it	ne
 800b43a:	6059      	strne	r1, [r3, #4]
 800b43c:	6863      	ldr	r3, [r4, #4]
 800b43e:	bf08      	it	eq
 800b440:	f8c8 1000 	streq.w	r1, [r8]
 800b444:	5162      	str	r2, [r4, r5]
 800b446:	604b      	str	r3, [r1, #4]
 800b448:	4630      	mov	r0, r6
 800b44a:	f000 f82f 	bl	800b4ac <__malloc_unlock>
 800b44e:	f104 000b 	add.w	r0, r4, #11
 800b452:	1d23      	adds	r3, r4, #4
 800b454:	f020 0007 	bic.w	r0, r0, #7
 800b458:	1ac2      	subs	r2, r0, r3
 800b45a:	bf1c      	itt	ne
 800b45c:	1a1b      	subne	r3, r3, r0
 800b45e:	50a3      	strne	r3, [r4, r2]
 800b460:	e7af      	b.n	800b3c2 <_malloc_r+0x22>
 800b462:	6862      	ldr	r2, [r4, #4]
 800b464:	42a3      	cmp	r3, r4
 800b466:	bf0c      	ite	eq
 800b468:	f8c8 2000 	streq.w	r2, [r8]
 800b46c:	605a      	strne	r2, [r3, #4]
 800b46e:	e7eb      	b.n	800b448 <_malloc_r+0xa8>
 800b470:	4623      	mov	r3, r4
 800b472:	6864      	ldr	r4, [r4, #4]
 800b474:	e7ae      	b.n	800b3d4 <_malloc_r+0x34>
 800b476:	463c      	mov	r4, r7
 800b478:	687f      	ldr	r7, [r7, #4]
 800b47a:	e7b6      	b.n	800b3ea <_malloc_r+0x4a>
 800b47c:	461a      	mov	r2, r3
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	42a3      	cmp	r3, r4
 800b482:	d1fb      	bne.n	800b47c <_malloc_r+0xdc>
 800b484:	2300      	movs	r3, #0
 800b486:	6053      	str	r3, [r2, #4]
 800b488:	e7de      	b.n	800b448 <_malloc_r+0xa8>
 800b48a:	230c      	movs	r3, #12
 800b48c:	6033      	str	r3, [r6, #0]
 800b48e:	4630      	mov	r0, r6
 800b490:	f000 f80c 	bl	800b4ac <__malloc_unlock>
 800b494:	e794      	b.n	800b3c0 <_malloc_r+0x20>
 800b496:	6005      	str	r5, [r0, #0]
 800b498:	e7d6      	b.n	800b448 <_malloc_r+0xa8>
 800b49a:	bf00      	nop
 800b49c:	24004d44 	.word	0x24004d44

0800b4a0 <__malloc_lock>:
 800b4a0:	4801      	ldr	r0, [pc, #4]	@ (800b4a8 <__malloc_lock+0x8>)
 800b4a2:	f7ff bf00 	b.w	800b2a6 <__retarget_lock_acquire_recursive>
 800b4a6:	bf00      	nop
 800b4a8:	24004d3c 	.word	0x24004d3c

0800b4ac <__malloc_unlock>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	@ (800b4b4 <__malloc_unlock+0x8>)
 800b4ae:	f7ff befb 	b.w	800b2a8 <__retarget_lock_release_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	24004d3c 	.word	0x24004d3c

0800b4b8 <__ssputs_r>:
 800b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	688e      	ldr	r6, [r1, #8]
 800b4be:	461f      	mov	r7, r3
 800b4c0:	42be      	cmp	r6, r7
 800b4c2:	680b      	ldr	r3, [r1, #0]
 800b4c4:	4682      	mov	sl, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4690      	mov	r8, r2
 800b4ca:	d82d      	bhi.n	800b528 <__ssputs_r+0x70>
 800b4cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4d4:	d026      	beq.n	800b524 <__ssputs_r+0x6c>
 800b4d6:	6965      	ldr	r5, [r4, #20]
 800b4d8:	6909      	ldr	r1, [r1, #16]
 800b4da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4de:	eba3 0901 	sub.w	r9, r3, r1
 800b4e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4e6:	1c7b      	adds	r3, r7, #1
 800b4e8:	444b      	add	r3, r9
 800b4ea:	106d      	asrs	r5, r5, #1
 800b4ec:	429d      	cmp	r5, r3
 800b4ee:	bf38      	it	cc
 800b4f0:	461d      	movcc	r5, r3
 800b4f2:	0553      	lsls	r3, r2, #21
 800b4f4:	d527      	bpl.n	800b546 <__ssputs_r+0x8e>
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7ff ff52 	bl	800b3a0 <_malloc_r>
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	b360      	cbz	r0, 800b55a <__ssputs_r+0xa2>
 800b500:	6921      	ldr	r1, [r4, #16]
 800b502:	464a      	mov	r2, r9
 800b504:	f7ff fed1 	bl	800b2aa <memcpy>
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b50e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	6126      	str	r6, [r4, #16]
 800b516:	6165      	str	r5, [r4, #20]
 800b518:	444e      	add	r6, r9
 800b51a:	eba5 0509 	sub.w	r5, r5, r9
 800b51e:	6026      	str	r6, [r4, #0]
 800b520:	60a5      	str	r5, [r4, #8]
 800b522:	463e      	mov	r6, r7
 800b524:	42be      	cmp	r6, r7
 800b526:	d900      	bls.n	800b52a <__ssputs_r+0x72>
 800b528:	463e      	mov	r6, r7
 800b52a:	6820      	ldr	r0, [r4, #0]
 800b52c:	4632      	mov	r2, r6
 800b52e:	4641      	mov	r1, r8
 800b530:	f000 fbb6 	bl	800bca0 <memmove>
 800b534:	68a3      	ldr	r3, [r4, #8]
 800b536:	1b9b      	subs	r3, r3, r6
 800b538:	60a3      	str	r3, [r4, #8]
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	4433      	add	r3, r6
 800b53e:	6023      	str	r3, [r4, #0]
 800b540:	2000      	movs	r0, #0
 800b542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b546:	462a      	mov	r2, r5
 800b548:	f000 fbf6 	bl	800bd38 <_realloc_r>
 800b54c:	4606      	mov	r6, r0
 800b54e:	2800      	cmp	r0, #0
 800b550:	d1e0      	bne.n	800b514 <__ssputs_r+0x5c>
 800b552:	6921      	ldr	r1, [r4, #16]
 800b554:	4650      	mov	r0, sl
 800b556:	f7ff feb7 	bl	800b2c8 <_free_r>
 800b55a:	230c      	movs	r3, #12
 800b55c:	f8ca 3000 	str.w	r3, [sl]
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b566:	81a3      	strh	r3, [r4, #12]
 800b568:	f04f 30ff 	mov.w	r0, #4294967295
 800b56c:	e7e9      	b.n	800b542 <__ssputs_r+0x8a>
	...

0800b570 <_svfiprintf_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	4698      	mov	r8, r3
 800b576:	898b      	ldrh	r3, [r1, #12]
 800b578:	061b      	lsls	r3, r3, #24
 800b57a:	b09d      	sub	sp, #116	@ 0x74
 800b57c:	4607      	mov	r7, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	4614      	mov	r4, r2
 800b582:	d510      	bpl.n	800b5a6 <_svfiprintf_r+0x36>
 800b584:	690b      	ldr	r3, [r1, #16]
 800b586:	b973      	cbnz	r3, 800b5a6 <_svfiprintf_r+0x36>
 800b588:	2140      	movs	r1, #64	@ 0x40
 800b58a:	f7ff ff09 	bl	800b3a0 <_malloc_r>
 800b58e:	6028      	str	r0, [r5, #0]
 800b590:	6128      	str	r0, [r5, #16]
 800b592:	b930      	cbnz	r0, 800b5a2 <_svfiprintf_r+0x32>
 800b594:	230c      	movs	r3, #12
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	b01d      	add	sp, #116	@ 0x74
 800b59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a2:	2340      	movs	r3, #64	@ 0x40
 800b5a4:	616b      	str	r3, [r5, #20]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5aa:	2320      	movs	r3, #32
 800b5ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b4:	2330      	movs	r3, #48	@ 0x30
 800b5b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b754 <_svfiprintf_r+0x1e4>
 800b5ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5be:	f04f 0901 	mov.w	r9, #1
 800b5c2:	4623      	mov	r3, r4
 800b5c4:	469a      	mov	sl, r3
 800b5c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ca:	b10a      	cbz	r2, 800b5d0 <_svfiprintf_r+0x60>
 800b5cc:	2a25      	cmp	r2, #37	@ 0x25
 800b5ce:	d1f9      	bne.n	800b5c4 <_svfiprintf_r+0x54>
 800b5d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d4:	d00b      	beq.n	800b5ee <_svfiprintf_r+0x7e>
 800b5d6:	465b      	mov	r3, fp
 800b5d8:	4622      	mov	r2, r4
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f7ff ff6b 	bl	800b4b8 <__ssputs_r>
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	f000 80a7 	beq.w	800b736 <_svfiprintf_r+0x1c6>
 800b5e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5ea:	445a      	add	r2, fp
 800b5ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 809f 	beq.w	800b736 <_svfiprintf_r+0x1c6>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b602:	f10a 0a01 	add.w	sl, sl, #1
 800b606:	9304      	str	r3, [sp, #16]
 800b608:	9307      	str	r3, [sp, #28]
 800b60a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b60e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b610:	4654      	mov	r4, sl
 800b612:	2205      	movs	r2, #5
 800b614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b618:	484e      	ldr	r0, [pc, #312]	@ (800b754 <_svfiprintf_r+0x1e4>)
 800b61a:	f7f4 fe81 	bl	8000320 <memchr>
 800b61e:	9a04      	ldr	r2, [sp, #16]
 800b620:	b9d8      	cbnz	r0, 800b65a <_svfiprintf_r+0xea>
 800b622:	06d0      	lsls	r0, r2, #27
 800b624:	bf44      	itt	mi
 800b626:	2320      	movmi	r3, #32
 800b628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b62c:	0711      	lsls	r1, r2, #28
 800b62e:	bf44      	itt	mi
 800b630:	232b      	movmi	r3, #43	@ 0x2b
 800b632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b636:	f89a 3000 	ldrb.w	r3, [sl]
 800b63a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b63c:	d015      	beq.n	800b66a <_svfiprintf_r+0xfa>
 800b63e:	9a07      	ldr	r2, [sp, #28]
 800b640:	4654      	mov	r4, sl
 800b642:	2000      	movs	r0, #0
 800b644:	f04f 0c0a 	mov.w	ip, #10
 800b648:	4621      	mov	r1, r4
 800b64a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b64e:	3b30      	subs	r3, #48	@ 0x30
 800b650:	2b09      	cmp	r3, #9
 800b652:	d94b      	bls.n	800b6ec <_svfiprintf_r+0x17c>
 800b654:	b1b0      	cbz	r0, 800b684 <_svfiprintf_r+0x114>
 800b656:	9207      	str	r2, [sp, #28]
 800b658:	e014      	b.n	800b684 <_svfiprintf_r+0x114>
 800b65a:	eba0 0308 	sub.w	r3, r0, r8
 800b65e:	fa09 f303 	lsl.w	r3, r9, r3
 800b662:	4313      	orrs	r3, r2
 800b664:	9304      	str	r3, [sp, #16]
 800b666:	46a2      	mov	sl, r4
 800b668:	e7d2      	b.n	800b610 <_svfiprintf_r+0xa0>
 800b66a:	9b03      	ldr	r3, [sp, #12]
 800b66c:	1d19      	adds	r1, r3, #4
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	9103      	str	r1, [sp, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	bfbb      	ittet	lt
 800b676:	425b      	neglt	r3, r3
 800b678:	f042 0202 	orrlt.w	r2, r2, #2
 800b67c:	9307      	strge	r3, [sp, #28]
 800b67e:	9307      	strlt	r3, [sp, #28]
 800b680:	bfb8      	it	lt
 800b682:	9204      	strlt	r2, [sp, #16]
 800b684:	7823      	ldrb	r3, [r4, #0]
 800b686:	2b2e      	cmp	r3, #46	@ 0x2e
 800b688:	d10a      	bne.n	800b6a0 <_svfiprintf_r+0x130>
 800b68a:	7863      	ldrb	r3, [r4, #1]
 800b68c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b68e:	d132      	bne.n	800b6f6 <_svfiprintf_r+0x186>
 800b690:	9b03      	ldr	r3, [sp, #12]
 800b692:	1d1a      	adds	r2, r3, #4
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	9203      	str	r2, [sp, #12]
 800b698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b69c:	3402      	adds	r4, #2
 800b69e:	9305      	str	r3, [sp, #20]
 800b6a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b764 <_svfiprintf_r+0x1f4>
 800b6a4:	7821      	ldrb	r1, [r4, #0]
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	f7f4 fe39 	bl	8000320 <memchr>
 800b6ae:	b138      	cbz	r0, 800b6c0 <_svfiprintf_r+0x150>
 800b6b0:	9b04      	ldr	r3, [sp, #16]
 800b6b2:	eba0 000a 	sub.w	r0, r0, sl
 800b6b6:	2240      	movs	r2, #64	@ 0x40
 800b6b8:	4082      	lsls	r2, r0
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	3401      	adds	r4, #1
 800b6be:	9304      	str	r3, [sp, #16]
 800b6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c4:	4824      	ldr	r0, [pc, #144]	@ (800b758 <_svfiprintf_r+0x1e8>)
 800b6c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	f7f4 fe28 	bl	8000320 <memchr>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d036      	beq.n	800b742 <_svfiprintf_r+0x1d2>
 800b6d4:	4b21      	ldr	r3, [pc, #132]	@ (800b75c <_svfiprintf_r+0x1ec>)
 800b6d6:	bb1b      	cbnz	r3, 800b720 <_svfiprintf_r+0x1b0>
 800b6d8:	9b03      	ldr	r3, [sp, #12]
 800b6da:	3307      	adds	r3, #7
 800b6dc:	f023 0307 	bic.w	r3, r3, #7
 800b6e0:	3308      	adds	r3, #8
 800b6e2:	9303      	str	r3, [sp, #12]
 800b6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6e6:	4433      	add	r3, r6
 800b6e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ea:	e76a      	b.n	800b5c2 <_svfiprintf_r+0x52>
 800b6ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	e7a8      	b.n	800b648 <_svfiprintf_r+0xd8>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	3401      	adds	r4, #1
 800b6fa:	9305      	str	r3, [sp, #20]
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	f04f 0c0a 	mov.w	ip, #10
 800b702:	4620      	mov	r0, r4
 800b704:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b708:	3a30      	subs	r2, #48	@ 0x30
 800b70a:	2a09      	cmp	r2, #9
 800b70c:	d903      	bls.n	800b716 <_svfiprintf_r+0x1a6>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0c6      	beq.n	800b6a0 <_svfiprintf_r+0x130>
 800b712:	9105      	str	r1, [sp, #20]
 800b714:	e7c4      	b.n	800b6a0 <_svfiprintf_r+0x130>
 800b716:	fb0c 2101 	mla	r1, ip, r1, r2
 800b71a:	4604      	mov	r4, r0
 800b71c:	2301      	movs	r3, #1
 800b71e:	e7f0      	b.n	800b702 <_svfiprintf_r+0x192>
 800b720:	ab03      	add	r3, sp, #12
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	462a      	mov	r2, r5
 800b726:	4b0e      	ldr	r3, [pc, #56]	@ (800b760 <_svfiprintf_r+0x1f0>)
 800b728:	a904      	add	r1, sp, #16
 800b72a:	4638      	mov	r0, r7
 800b72c:	f3af 8000 	nop.w
 800b730:	1c42      	adds	r2, r0, #1
 800b732:	4606      	mov	r6, r0
 800b734:	d1d6      	bne.n	800b6e4 <_svfiprintf_r+0x174>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	065b      	lsls	r3, r3, #25
 800b73a:	f53f af2d 	bmi.w	800b598 <_svfiprintf_r+0x28>
 800b73e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b740:	e72c      	b.n	800b59c <_svfiprintf_r+0x2c>
 800b742:	ab03      	add	r3, sp, #12
 800b744:	9300      	str	r3, [sp, #0]
 800b746:	462a      	mov	r2, r5
 800b748:	4b05      	ldr	r3, [pc, #20]	@ (800b760 <_svfiprintf_r+0x1f0>)
 800b74a:	a904      	add	r1, sp, #16
 800b74c:	4638      	mov	r0, r7
 800b74e:	f000 f879 	bl	800b844 <_printf_i>
 800b752:	e7ed      	b.n	800b730 <_svfiprintf_r+0x1c0>
 800b754:	0800be78 	.word	0x0800be78
 800b758:	0800be82 	.word	0x0800be82
 800b75c:	00000000 	.word	0x00000000
 800b760:	0800b4b9 	.word	0x0800b4b9
 800b764:	0800be7e 	.word	0x0800be7e

0800b768 <_printf_common>:
 800b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76c:	4616      	mov	r6, r2
 800b76e:	4698      	mov	r8, r3
 800b770:	688a      	ldr	r2, [r1, #8]
 800b772:	690b      	ldr	r3, [r1, #16]
 800b774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b778:	4293      	cmp	r3, r2
 800b77a:	bfb8      	it	lt
 800b77c:	4613      	movlt	r3, r2
 800b77e:	6033      	str	r3, [r6, #0]
 800b780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b784:	4607      	mov	r7, r0
 800b786:	460c      	mov	r4, r1
 800b788:	b10a      	cbz	r2, 800b78e <_printf_common+0x26>
 800b78a:	3301      	adds	r3, #1
 800b78c:	6033      	str	r3, [r6, #0]
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	0699      	lsls	r1, r3, #26
 800b792:	bf42      	ittt	mi
 800b794:	6833      	ldrmi	r3, [r6, #0]
 800b796:	3302      	addmi	r3, #2
 800b798:	6033      	strmi	r3, [r6, #0]
 800b79a:	6825      	ldr	r5, [r4, #0]
 800b79c:	f015 0506 	ands.w	r5, r5, #6
 800b7a0:	d106      	bne.n	800b7b0 <_printf_common+0x48>
 800b7a2:	f104 0a19 	add.w	sl, r4, #25
 800b7a6:	68e3      	ldr	r3, [r4, #12]
 800b7a8:	6832      	ldr	r2, [r6, #0]
 800b7aa:	1a9b      	subs	r3, r3, r2
 800b7ac:	42ab      	cmp	r3, r5
 800b7ae:	dc26      	bgt.n	800b7fe <_printf_common+0x96>
 800b7b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7b4:	6822      	ldr	r2, [r4, #0]
 800b7b6:	3b00      	subs	r3, #0
 800b7b8:	bf18      	it	ne
 800b7ba:	2301      	movne	r3, #1
 800b7bc:	0692      	lsls	r2, r2, #26
 800b7be:	d42b      	bmi.n	800b818 <_printf_common+0xb0>
 800b7c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7c4:	4641      	mov	r1, r8
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	47c8      	blx	r9
 800b7ca:	3001      	adds	r0, #1
 800b7cc:	d01e      	beq.n	800b80c <_printf_common+0xa4>
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	6922      	ldr	r2, [r4, #16]
 800b7d2:	f003 0306 	and.w	r3, r3, #6
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	bf02      	ittt	eq
 800b7da:	68e5      	ldreq	r5, [r4, #12]
 800b7dc:	6833      	ldreq	r3, [r6, #0]
 800b7de:	1aed      	subeq	r5, r5, r3
 800b7e0:	68a3      	ldr	r3, [r4, #8]
 800b7e2:	bf0c      	ite	eq
 800b7e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e8:	2500      	movne	r5, #0
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	bfc4      	itt	gt
 800b7ee:	1a9b      	subgt	r3, r3, r2
 800b7f0:	18ed      	addgt	r5, r5, r3
 800b7f2:	2600      	movs	r6, #0
 800b7f4:	341a      	adds	r4, #26
 800b7f6:	42b5      	cmp	r5, r6
 800b7f8:	d11a      	bne.n	800b830 <_printf_common+0xc8>
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	e008      	b.n	800b810 <_printf_common+0xa8>
 800b7fe:	2301      	movs	r3, #1
 800b800:	4652      	mov	r2, sl
 800b802:	4641      	mov	r1, r8
 800b804:	4638      	mov	r0, r7
 800b806:	47c8      	blx	r9
 800b808:	3001      	adds	r0, #1
 800b80a:	d103      	bne.n	800b814 <_printf_common+0xac>
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b814:	3501      	adds	r5, #1
 800b816:	e7c6      	b.n	800b7a6 <_printf_common+0x3e>
 800b818:	18e1      	adds	r1, r4, r3
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	2030      	movs	r0, #48	@ 0x30
 800b81e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b822:	4422      	add	r2, r4
 800b824:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b828:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b82c:	3302      	adds	r3, #2
 800b82e:	e7c7      	b.n	800b7c0 <_printf_common+0x58>
 800b830:	2301      	movs	r3, #1
 800b832:	4622      	mov	r2, r4
 800b834:	4641      	mov	r1, r8
 800b836:	4638      	mov	r0, r7
 800b838:	47c8      	blx	r9
 800b83a:	3001      	adds	r0, #1
 800b83c:	d0e6      	beq.n	800b80c <_printf_common+0xa4>
 800b83e:	3601      	adds	r6, #1
 800b840:	e7d9      	b.n	800b7f6 <_printf_common+0x8e>
	...

0800b844 <_printf_i>:
 800b844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b848:	7e0f      	ldrb	r7, [r1, #24]
 800b84a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b84c:	2f78      	cmp	r7, #120	@ 0x78
 800b84e:	4691      	mov	r9, r2
 800b850:	4680      	mov	r8, r0
 800b852:	460c      	mov	r4, r1
 800b854:	469a      	mov	sl, r3
 800b856:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b85a:	d807      	bhi.n	800b86c <_printf_i+0x28>
 800b85c:	2f62      	cmp	r7, #98	@ 0x62
 800b85e:	d80a      	bhi.n	800b876 <_printf_i+0x32>
 800b860:	2f00      	cmp	r7, #0
 800b862:	f000 80d2 	beq.w	800ba0a <_printf_i+0x1c6>
 800b866:	2f58      	cmp	r7, #88	@ 0x58
 800b868:	f000 80b9 	beq.w	800b9de <_printf_i+0x19a>
 800b86c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b870:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b874:	e03a      	b.n	800b8ec <_printf_i+0xa8>
 800b876:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b87a:	2b15      	cmp	r3, #21
 800b87c:	d8f6      	bhi.n	800b86c <_printf_i+0x28>
 800b87e:	a101      	add	r1, pc, #4	@ (adr r1, 800b884 <_printf_i+0x40>)
 800b880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b884:	0800b8dd 	.word	0x0800b8dd
 800b888:	0800b8f1 	.word	0x0800b8f1
 800b88c:	0800b86d 	.word	0x0800b86d
 800b890:	0800b86d 	.word	0x0800b86d
 800b894:	0800b86d 	.word	0x0800b86d
 800b898:	0800b86d 	.word	0x0800b86d
 800b89c:	0800b8f1 	.word	0x0800b8f1
 800b8a0:	0800b86d 	.word	0x0800b86d
 800b8a4:	0800b86d 	.word	0x0800b86d
 800b8a8:	0800b86d 	.word	0x0800b86d
 800b8ac:	0800b86d 	.word	0x0800b86d
 800b8b0:	0800b9f1 	.word	0x0800b9f1
 800b8b4:	0800b91b 	.word	0x0800b91b
 800b8b8:	0800b9ab 	.word	0x0800b9ab
 800b8bc:	0800b86d 	.word	0x0800b86d
 800b8c0:	0800b86d 	.word	0x0800b86d
 800b8c4:	0800ba13 	.word	0x0800ba13
 800b8c8:	0800b86d 	.word	0x0800b86d
 800b8cc:	0800b91b 	.word	0x0800b91b
 800b8d0:	0800b86d 	.word	0x0800b86d
 800b8d4:	0800b86d 	.word	0x0800b86d
 800b8d8:	0800b9b3 	.word	0x0800b9b3
 800b8dc:	6833      	ldr	r3, [r6, #0]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6032      	str	r2, [r6, #0]
 800b8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e09d      	b.n	800ba2c <_printf_i+0x1e8>
 800b8f0:	6833      	ldr	r3, [r6, #0]
 800b8f2:	6820      	ldr	r0, [r4, #0]
 800b8f4:	1d19      	adds	r1, r3, #4
 800b8f6:	6031      	str	r1, [r6, #0]
 800b8f8:	0606      	lsls	r6, r0, #24
 800b8fa:	d501      	bpl.n	800b900 <_printf_i+0xbc>
 800b8fc:	681d      	ldr	r5, [r3, #0]
 800b8fe:	e003      	b.n	800b908 <_printf_i+0xc4>
 800b900:	0645      	lsls	r5, r0, #25
 800b902:	d5fb      	bpl.n	800b8fc <_printf_i+0xb8>
 800b904:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b908:	2d00      	cmp	r5, #0
 800b90a:	da03      	bge.n	800b914 <_printf_i+0xd0>
 800b90c:	232d      	movs	r3, #45	@ 0x2d
 800b90e:	426d      	negs	r5, r5
 800b910:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b914:	4859      	ldr	r0, [pc, #356]	@ (800ba7c <_printf_i+0x238>)
 800b916:	230a      	movs	r3, #10
 800b918:	e011      	b.n	800b93e <_printf_i+0xfa>
 800b91a:	6821      	ldr	r1, [r4, #0]
 800b91c:	6833      	ldr	r3, [r6, #0]
 800b91e:	0608      	lsls	r0, r1, #24
 800b920:	f853 5b04 	ldr.w	r5, [r3], #4
 800b924:	d402      	bmi.n	800b92c <_printf_i+0xe8>
 800b926:	0649      	lsls	r1, r1, #25
 800b928:	bf48      	it	mi
 800b92a:	b2ad      	uxthmi	r5, r5
 800b92c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b92e:	4853      	ldr	r0, [pc, #332]	@ (800ba7c <_printf_i+0x238>)
 800b930:	6033      	str	r3, [r6, #0]
 800b932:	bf14      	ite	ne
 800b934:	230a      	movne	r3, #10
 800b936:	2308      	moveq	r3, #8
 800b938:	2100      	movs	r1, #0
 800b93a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b93e:	6866      	ldr	r6, [r4, #4]
 800b940:	60a6      	str	r6, [r4, #8]
 800b942:	2e00      	cmp	r6, #0
 800b944:	bfa2      	ittt	ge
 800b946:	6821      	ldrge	r1, [r4, #0]
 800b948:	f021 0104 	bicge.w	r1, r1, #4
 800b94c:	6021      	strge	r1, [r4, #0]
 800b94e:	b90d      	cbnz	r5, 800b954 <_printf_i+0x110>
 800b950:	2e00      	cmp	r6, #0
 800b952:	d04b      	beq.n	800b9ec <_printf_i+0x1a8>
 800b954:	4616      	mov	r6, r2
 800b956:	fbb5 f1f3 	udiv	r1, r5, r3
 800b95a:	fb03 5711 	mls	r7, r3, r1, r5
 800b95e:	5dc7      	ldrb	r7, [r0, r7]
 800b960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b964:	462f      	mov	r7, r5
 800b966:	42bb      	cmp	r3, r7
 800b968:	460d      	mov	r5, r1
 800b96a:	d9f4      	bls.n	800b956 <_printf_i+0x112>
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d10b      	bne.n	800b988 <_printf_i+0x144>
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	07df      	lsls	r7, r3, #31
 800b974:	d508      	bpl.n	800b988 <_printf_i+0x144>
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	6861      	ldr	r1, [r4, #4]
 800b97a:	4299      	cmp	r1, r3
 800b97c:	bfde      	ittt	le
 800b97e:	2330      	movle	r3, #48	@ 0x30
 800b980:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b984:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b988:	1b92      	subs	r2, r2, r6
 800b98a:	6122      	str	r2, [r4, #16]
 800b98c:	f8cd a000 	str.w	sl, [sp]
 800b990:	464b      	mov	r3, r9
 800b992:	aa03      	add	r2, sp, #12
 800b994:	4621      	mov	r1, r4
 800b996:	4640      	mov	r0, r8
 800b998:	f7ff fee6 	bl	800b768 <_printf_common>
 800b99c:	3001      	adds	r0, #1
 800b99e:	d14a      	bne.n	800ba36 <_printf_i+0x1f2>
 800b9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a4:	b004      	add	sp, #16
 800b9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	f043 0320 	orr.w	r3, r3, #32
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	4833      	ldr	r0, [pc, #204]	@ (800ba80 <_printf_i+0x23c>)
 800b9b4:	2778      	movs	r7, #120	@ 0x78
 800b9b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	6831      	ldr	r1, [r6, #0]
 800b9be:	061f      	lsls	r7, r3, #24
 800b9c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9c4:	d402      	bmi.n	800b9cc <_printf_i+0x188>
 800b9c6:	065f      	lsls	r7, r3, #25
 800b9c8:	bf48      	it	mi
 800b9ca:	b2ad      	uxthmi	r5, r5
 800b9cc:	6031      	str	r1, [r6, #0]
 800b9ce:	07d9      	lsls	r1, r3, #31
 800b9d0:	bf44      	itt	mi
 800b9d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9d6:	6023      	strmi	r3, [r4, #0]
 800b9d8:	b11d      	cbz	r5, 800b9e2 <_printf_i+0x19e>
 800b9da:	2310      	movs	r3, #16
 800b9dc:	e7ac      	b.n	800b938 <_printf_i+0xf4>
 800b9de:	4827      	ldr	r0, [pc, #156]	@ (800ba7c <_printf_i+0x238>)
 800b9e0:	e7e9      	b.n	800b9b6 <_printf_i+0x172>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	f023 0320 	bic.w	r3, r3, #32
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	e7f6      	b.n	800b9da <_printf_i+0x196>
 800b9ec:	4616      	mov	r6, r2
 800b9ee:	e7bd      	b.n	800b96c <_printf_i+0x128>
 800b9f0:	6833      	ldr	r3, [r6, #0]
 800b9f2:	6825      	ldr	r5, [r4, #0]
 800b9f4:	6961      	ldr	r1, [r4, #20]
 800b9f6:	1d18      	adds	r0, r3, #4
 800b9f8:	6030      	str	r0, [r6, #0]
 800b9fa:	062e      	lsls	r6, r5, #24
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	d501      	bpl.n	800ba04 <_printf_i+0x1c0>
 800ba00:	6019      	str	r1, [r3, #0]
 800ba02:	e002      	b.n	800ba0a <_printf_i+0x1c6>
 800ba04:	0668      	lsls	r0, r5, #25
 800ba06:	d5fb      	bpl.n	800ba00 <_printf_i+0x1bc>
 800ba08:	8019      	strh	r1, [r3, #0]
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	6123      	str	r3, [r4, #16]
 800ba0e:	4616      	mov	r6, r2
 800ba10:	e7bc      	b.n	800b98c <_printf_i+0x148>
 800ba12:	6833      	ldr	r3, [r6, #0]
 800ba14:	1d1a      	adds	r2, r3, #4
 800ba16:	6032      	str	r2, [r6, #0]
 800ba18:	681e      	ldr	r6, [r3, #0]
 800ba1a:	6862      	ldr	r2, [r4, #4]
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7f4 fc7e 	bl	8000320 <memchr>
 800ba24:	b108      	cbz	r0, 800ba2a <_printf_i+0x1e6>
 800ba26:	1b80      	subs	r0, r0, r6
 800ba28:	6060      	str	r0, [r4, #4]
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	6123      	str	r3, [r4, #16]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba34:	e7aa      	b.n	800b98c <_printf_i+0x148>
 800ba36:	6923      	ldr	r3, [r4, #16]
 800ba38:	4632      	mov	r2, r6
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	47d0      	blx	sl
 800ba40:	3001      	adds	r0, #1
 800ba42:	d0ad      	beq.n	800b9a0 <_printf_i+0x15c>
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	079b      	lsls	r3, r3, #30
 800ba48:	d413      	bmi.n	800ba72 <_printf_i+0x22e>
 800ba4a:	68e0      	ldr	r0, [r4, #12]
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	4298      	cmp	r0, r3
 800ba50:	bfb8      	it	lt
 800ba52:	4618      	movlt	r0, r3
 800ba54:	e7a6      	b.n	800b9a4 <_printf_i+0x160>
 800ba56:	2301      	movs	r3, #1
 800ba58:	4632      	mov	r2, r6
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	47d0      	blx	sl
 800ba60:	3001      	adds	r0, #1
 800ba62:	d09d      	beq.n	800b9a0 <_printf_i+0x15c>
 800ba64:	3501      	adds	r5, #1
 800ba66:	68e3      	ldr	r3, [r4, #12]
 800ba68:	9903      	ldr	r1, [sp, #12]
 800ba6a:	1a5b      	subs	r3, r3, r1
 800ba6c:	42ab      	cmp	r3, r5
 800ba6e:	dcf2      	bgt.n	800ba56 <_printf_i+0x212>
 800ba70:	e7eb      	b.n	800ba4a <_printf_i+0x206>
 800ba72:	2500      	movs	r5, #0
 800ba74:	f104 0619 	add.w	r6, r4, #25
 800ba78:	e7f5      	b.n	800ba66 <_printf_i+0x222>
 800ba7a:	bf00      	nop
 800ba7c:	0800be89 	.word	0x0800be89
 800ba80:	0800be9a 	.word	0x0800be9a

0800ba84 <__sflush_r>:
 800ba84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8c:	0716      	lsls	r6, r2, #28
 800ba8e:	4605      	mov	r5, r0
 800ba90:	460c      	mov	r4, r1
 800ba92:	d454      	bmi.n	800bb3e <__sflush_r+0xba>
 800ba94:	684b      	ldr	r3, [r1, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dc02      	bgt.n	800baa0 <__sflush_r+0x1c>
 800ba9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	dd48      	ble.n	800bb32 <__sflush_r+0xae>
 800baa0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baa2:	2e00      	cmp	r6, #0
 800baa4:	d045      	beq.n	800bb32 <__sflush_r+0xae>
 800baa6:	2300      	movs	r3, #0
 800baa8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baac:	682f      	ldr	r7, [r5, #0]
 800baae:	6a21      	ldr	r1, [r4, #32]
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	d030      	beq.n	800bb16 <__sflush_r+0x92>
 800bab4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	0759      	lsls	r1, r3, #29
 800baba:	d505      	bpl.n	800bac8 <__sflush_r+0x44>
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	1ad2      	subs	r2, r2, r3
 800bac0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bac2:	b10b      	cbz	r3, 800bac8 <__sflush_r+0x44>
 800bac4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bac6:	1ad2      	subs	r2, r2, r3
 800bac8:	2300      	movs	r3, #0
 800baca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bacc:	6a21      	ldr	r1, [r4, #32]
 800bace:	4628      	mov	r0, r5
 800bad0:	47b0      	blx	r6
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	d106      	bne.n	800bae6 <__sflush_r+0x62>
 800bad8:	6829      	ldr	r1, [r5, #0]
 800bada:	291d      	cmp	r1, #29
 800badc:	d82b      	bhi.n	800bb36 <__sflush_r+0xb2>
 800bade:	4a2a      	ldr	r2, [pc, #168]	@ (800bb88 <__sflush_r+0x104>)
 800bae0:	410a      	asrs	r2, r1
 800bae2:	07d6      	lsls	r6, r2, #31
 800bae4:	d427      	bmi.n	800bb36 <__sflush_r+0xb2>
 800bae6:	2200      	movs	r2, #0
 800bae8:	6062      	str	r2, [r4, #4]
 800baea:	04d9      	lsls	r1, r3, #19
 800baec:	6922      	ldr	r2, [r4, #16]
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	d504      	bpl.n	800bafc <__sflush_r+0x78>
 800baf2:	1c42      	adds	r2, r0, #1
 800baf4:	d101      	bne.n	800bafa <__sflush_r+0x76>
 800baf6:	682b      	ldr	r3, [r5, #0]
 800baf8:	b903      	cbnz	r3, 800bafc <__sflush_r+0x78>
 800bafa:	6560      	str	r0, [r4, #84]	@ 0x54
 800bafc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bafe:	602f      	str	r7, [r5, #0]
 800bb00:	b1b9      	cbz	r1, 800bb32 <__sflush_r+0xae>
 800bb02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb06:	4299      	cmp	r1, r3
 800bb08:	d002      	beq.n	800bb10 <__sflush_r+0x8c>
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	f7ff fbdc 	bl	800b2c8 <_free_r>
 800bb10:	2300      	movs	r3, #0
 800bb12:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb14:	e00d      	b.n	800bb32 <__sflush_r+0xae>
 800bb16:	2301      	movs	r3, #1
 800bb18:	4628      	mov	r0, r5
 800bb1a:	47b0      	blx	r6
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	1c50      	adds	r0, r2, #1
 800bb20:	d1c9      	bne.n	800bab6 <__sflush_r+0x32>
 800bb22:	682b      	ldr	r3, [r5, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d0c6      	beq.n	800bab6 <__sflush_r+0x32>
 800bb28:	2b1d      	cmp	r3, #29
 800bb2a:	d001      	beq.n	800bb30 <__sflush_r+0xac>
 800bb2c:	2b16      	cmp	r3, #22
 800bb2e:	d11e      	bne.n	800bb6e <__sflush_r+0xea>
 800bb30:	602f      	str	r7, [r5, #0]
 800bb32:	2000      	movs	r0, #0
 800bb34:	e022      	b.n	800bb7c <__sflush_r+0xf8>
 800bb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb3a:	b21b      	sxth	r3, r3
 800bb3c:	e01b      	b.n	800bb76 <__sflush_r+0xf2>
 800bb3e:	690f      	ldr	r7, [r1, #16]
 800bb40:	2f00      	cmp	r7, #0
 800bb42:	d0f6      	beq.n	800bb32 <__sflush_r+0xae>
 800bb44:	0793      	lsls	r3, r2, #30
 800bb46:	680e      	ldr	r6, [r1, #0]
 800bb48:	bf08      	it	eq
 800bb4a:	694b      	ldreq	r3, [r1, #20]
 800bb4c:	600f      	str	r7, [r1, #0]
 800bb4e:	bf18      	it	ne
 800bb50:	2300      	movne	r3, #0
 800bb52:	eba6 0807 	sub.w	r8, r6, r7
 800bb56:	608b      	str	r3, [r1, #8]
 800bb58:	f1b8 0f00 	cmp.w	r8, #0
 800bb5c:	dde9      	ble.n	800bb32 <__sflush_r+0xae>
 800bb5e:	6a21      	ldr	r1, [r4, #32]
 800bb60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb62:	4643      	mov	r3, r8
 800bb64:	463a      	mov	r2, r7
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b0      	blx	r6
 800bb6a:	2800      	cmp	r0, #0
 800bb6c:	dc08      	bgt.n	800bb80 <__sflush_r+0xfc>
 800bb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	f04f 30ff 	mov.w	r0, #4294967295
 800bb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb80:	4407      	add	r7, r0
 800bb82:	eba8 0800 	sub.w	r8, r8, r0
 800bb86:	e7e7      	b.n	800bb58 <__sflush_r+0xd4>
 800bb88:	dfbffffe 	.word	0xdfbffffe

0800bb8c <_fflush_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	690b      	ldr	r3, [r1, #16]
 800bb90:	4605      	mov	r5, r0
 800bb92:	460c      	mov	r4, r1
 800bb94:	b913      	cbnz	r3, 800bb9c <_fflush_r+0x10>
 800bb96:	2500      	movs	r5, #0
 800bb98:	4628      	mov	r0, r5
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	b118      	cbz	r0, 800bba6 <_fflush_r+0x1a>
 800bb9e:	6a03      	ldr	r3, [r0, #32]
 800bba0:	b90b      	cbnz	r3, 800bba6 <_fflush_r+0x1a>
 800bba2:	f7ff f925 	bl	800adf0 <__sinit>
 800bba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0f3      	beq.n	800bb96 <_fflush_r+0xa>
 800bbae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbb0:	07d0      	lsls	r0, r2, #31
 800bbb2:	d404      	bmi.n	800bbbe <_fflush_r+0x32>
 800bbb4:	0599      	lsls	r1, r3, #22
 800bbb6:	d402      	bmi.n	800bbbe <_fflush_r+0x32>
 800bbb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbba:	f7ff fb74 	bl	800b2a6 <__retarget_lock_acquire_recursive>
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	f7ff ff5f 	bl	800ba84 <__sflush_r>
 800bbc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbc8:	07da      	lsls	r2, r3, #31
 800bbca:	4605      	mov	r5, r0
 800bbcc:	d4e4      	bmi.n	800bb98 <_fflush_r+0xc>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	059b      	lsls	r3, r3, #22
 800bbd2:	d4e1      	bmi.n	800bb98 <_fflush_r+0xc>
 800bbd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbd6:	f7ff fb67 	bl	800b2a8 <__retarget_lock_release_recursive>
 800bbda:	e7dd      	b.n	800bb98 <_fflush_r+0xc>

0800bbdc <__swhatbuf_r>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	460c      	mov	r4, r1
 800bbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe4:	2900      	cmp	r1, #0
 800bbe6:	b096      	sub	sp, #88	@ 0x58
 800bbe8:	4615      	mov	r5, r2
 800bbea:	461e      	mov	r6, r3
 800bbec:	da0d      	bge.n	800bc0a <__swhatbuf_r+0x2e>
 800bbee:	89a3      	ldrh	r3, [r4, #12]
 800bbf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bbf4:	f04f 0100 	mov.w	r1, #0
 800bbf8:	bf14      	ite	ne
 800bbfa:	2340      	movne	r3, #64	@ 0x40
 800bbfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc00:	2000      	movs	r0, #0
 800bc02:	6031      	str	r1, [r6, #0]
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	b016      	add	sp, #88	@ 0x58
 800bc08:	bd70      	pop	{r4, r5, r6, pc}
 800bc0a:	466a      	mov	r2, sp
 800bc0c:	f000 f862 	bl	800bcd4 <_fstat_r>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	dbec      	blt.n	800bbee <__swhatbuf_r+0x12>
 800bc14:	9901      	ldr	r1, [sp, #4]
 800bc16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc1e:	4259      	negs	r1, r3
 800bc20:	4159      	adcs	r1, r3
 800bc22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc26:	e7eb      	b.n	800bc00 <__swhatbuf_r+0x24>

0800bc28 <__smakebuf_r>:
 800bc28:	898b      	ldrh	r3, [r1, #12]
 800bc2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc2c:	079d      	lsls	r5, r3, #30
 800bc2e:	4606      	mov	r6, r0
 800bc30:	460c      	mov	r4, r1
 800bc32:	d507      	bpl.n	800bc44 <__smakebuf_r+0x1c>
 800bc34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	6123      	str	r3, [r4, #16]
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	6163      	str	r3, [r4, #20]
 800bc40:	b003      	add	sp, #12
 800bc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc44:	ab01      	add	r3, sp, #4
 800bc46:	466a      	mov	r2, sp
 800bc48:	f7ff ffc8 	bl	800bbdc <__swhatbuf_r>
 800bc4c:	9f00      	ldr	r7, [sp, #0]
 800bc4e:	4605      	mov	r5, r0
 800bc50:	4639      	mov	r1, r7
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7ff fba4 	bl	800b3a0 <_malloc_r>
 800bc58:	b948      	cbnz	r0, 800bc6e <__smakebuf_r+0x46>
 800bc5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc5e:	059a      	lsls	r2, r3, #22
 800bc60:	d4ee      	bmi.n	800bc40 <__smakebuf_r+0x18>
 800bc62:	f023 0303 	bic.w	r3, r3, #3
 800bc66:	f043 0302 	orr.w	r3, r3, #2
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	e7e2      	b.n	800bc34 <__smakebuf_r+0xc>
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	6020      	str	r0, [r4, #0]
 800bc72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc7e:	b15b      	cbz	r3, 800bc98 <__smakebuf_r+0x70>
 800bc80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc84:	4630      	mov	r0, r6
 800bc86:	f000 f837 	bl	800bcf8 <_isatty_r>
 800bc8a:	b128      	cbz	r0, 800bc98 <__smakebuf_r+0x70>
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	81a3      	strh	r3, [r4, #12]
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	431d      	orrs	r5, r3
 800bc9c:	81a5      	strh	r5, [r4, #12]
 800bc9e:	e7cf      	b.n	800bc40 <__smakebuf_r+0x18>

0800bca0 <memmove>:
 800bca0:	4288      	cmp	r0, r1
 800bca2:	b510      	push	{r4, lr}
 800bca4:	eb01 0402 	add.w	r4, r1, r2
 800bca8:	d902      	bls.n	800bcb0 <memmove+0x10>
 800bcaa:	4284      	cmp	r4, r0
 800bcac:	4623      	mov	r3, r4
 800bcae:	d807      	bhi.n	800bcc0 <memmove+0x20>
 800bcb0:	1e43      	subs	r3, r0, #1
 800bcb2:	42a1      	cmp	r1, r4
 800bcb4:	d008      	beq.n	800bcc8 <memmove+0x28>
 800bcb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bcbe:	e7f8      	b.n	800bcb2 <memmove+0x12>
 800bcc0:	4402      	add	r2, r0
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	428a      	cmp	r2, r1
 800bcc6:	d100      	bne.n	800bcca <memmove+0x2a>
 800bcc8:	bd10      	pop	{r4, pc}
 800bcca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcd2:	e7f7      	b.n	800bcc4 <memmove+0x24>

0800bcd4 <_fstat_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4d07      	ldr	r5, [pc, #28]	@ (800bcf4 <_fstat_r+0x20>)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	4611      	mov	r1, r2
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	f7f5 f90c 	bl	8000efe <_fstat>
 800bce6:	1c43      	adds	r3, r0, #1
 800bce8:	d102      	bne.n	800bcf0 <_fstat_r+0x1c>
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	b103      	cbz	r3, 800bcf0 <_fstat_r+0x1c>
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	bd38      	pop	{r3, r4, r5, pc}
 800bcf2:	bf00      	nop
 800bcf4:	24004d38 	.word	0x24004d38

0800bcf8 <_isatty_r>:
 800bcf8:	b538      	push	{r3, r4, r5, lr}
 800bcfa:	4d06      	ldr	r5, [pc, #24]	@ (800bd14 <_isatty_r+0x1c>)
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	4604      	mov	r4, r0
 800bd00:	4608      	mov	r0, r1
 800bd02:	602b      	str	r3, [r5, #0]
 800bd04:	f7f5 f90b 	bl	8000f1e <_isatty>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_isatty_r+0x1a>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_isatty_r+0x1a>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	24004d38 	.word	0x24004d38

0800bd18 <_sbrk_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	4d06      	ldr	r5, [pc, #24]	@ (800bd34 <_sbrk_r+0x1c>)
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	4604      	mov	r4, r0
 800bd20:	4608      	mov	r0, r1
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	f7f5 f914 	bl	8000f50 <_sbrk>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	d102      	bne.n	800bd32 <_sbrk_r+0x1a>
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	b103      	cbz	r3, 800bd32 <_sbrk_r+0x1a>
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	bd38      	pop	{r3, r4, r5, pc}
 800bd34:	24004d38 	.word	0x24004d38

0800bd38 <_realloc_r>:
 800bd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4615      	mov	r5, r2
 800bd40:	460c      	mov	r4, r1
 800bd42:	b921      	cbnz	r1, 800bd4e <_realloc_r+0x16>
 800bd44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd48:	4611      	mov	r1, r2
 800bd4a:	f7ff bb29 	b.w	800b3a0 <_malloc_r>
 800bd4e:	b92a      	cbnz	r2, 800bd5c <_realloc_r+0x24>
 800bd50:	f7ff faba 	bl	800b2c8 <_free_r>
 800bd54:	2400      	movs	r4, #0
 800bd56:	4620      	mov	r0, r4
 800bd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5c:	f000 f81a 	bl	800bd94 <_malloc_usable_size_r>
 800bd60:	4285      	cmp	r5, r0
 800bd62:	4606      	mov	r6, r0
 800bd64:	d802      	bhi.n	800bd6c <_realloc_r+0x34>
 800bd66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd6a:	d8f4      	bhi.n	800bd56 <_realloc_r+0x1e>
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4640      	mov	r0, r8
 800bd70:	f7ff fb16 	bl	800b3a0 <_malloc_r>
 800bd74:	4607      	mov	r7, r0
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d0ec      	beq.n	800bd54 <_realloc_r+0x1c>
 800bd7a:	42b5      	cmp	r5, r6
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	4621      	mov	r1, r4
 800bd80:	bf28      	it	cs
 800bd82:	4632      	movcs	r2, r6
 800bd84:	f7ff fa91 	bl	800b2aa <memcpy>
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	f7ff fa9c 	bl	800b2c8 <_free_r>
 800bd90:	463c      	mov	r4, r7
 800bd92:	e7e0      	b.n	800bd56 <_realloc_r+0x1e>

0800bd94 <_malloc_usable_size_r>:
 800bd94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd98:	1f18      	subs	r0, r3, #4
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	bfbc      	itt	lt
 800bd9e:	580b      	ldrlt	r3, [r1, r0]
 800bda0:	18c0      	addlt	r0, r0, r3
 800bda2:	4770      	bx	lr

0800bda4 <_init>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	bf00      	nop
 800bda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdaa:	bc08      	pop	{r3}
 800bdac:	469e      	mov	lr, r3
 800bdae:	4770      	bx	lr

0800bdb0 <_fini>:
 800bdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb2:	bf00      	nop
 800bdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdb6:	bc08      	pop	{r3}
 800bdb8:	469e      	mov	lr, r3
 800bdba:	4770      	bx	lr
