
HC12_FreeRTOS_Send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3ec  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800a6bc  0800a6bc  0000b6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a788  0800a788  0000b788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a790  0800a790  0000b790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a794  0800a794  0000b794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a798  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cd0  24000064  0800a7fc  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004d34  0800a7fc  0000cd34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021cf5  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003fc5  00000000  00000000  0002dd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001900  00000000  00000000  00031d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001374  00000000  00000000  00033650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004f38  00000000  00000000  000349c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000208c3  00000000  00000000  000398fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158501  00000000  00000000  0005a1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b26c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006edc  00000000  00000000  001b2704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007c  00000000  00000000  001b95e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a6a4 	.word	0x0800a6a4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800a6a4 	.word	0x0800a6a4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 f9c8 	bl	8000a48 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fcec 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f81c 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f922 	bl	8000908 <MX_GPIO_Init>
  MX_UART7_Init();
 80006c4:	f000 f888 	bl	80007d8 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80006c8:	f000 f8d2 	bl	8000870 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006cc:	f006 fd44 	bl	8007158 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d0:	4a06      	ldr	r2, [pc, #24]	@ (80006ec <main+0x3c>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <main+0x40>)
 80006d6:	f006 fd89 	bl	80071ec <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <main+0x44>)
 80006de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  systemTaskInit();
 80006e0:	f000 fc62 	bl	8000fa8 <systemTaskInit>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e4:	f006 fd5c 	bl	80071a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0x38>
 80006ec:	0800a6f8 	.word	0x0800a6f8
 80006f0:	08000a39 	.word	0x08000a39
 80006f4:	240001a8 	.word	0x240001a8

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09c      	sub	sp, #112	@ 0x70
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000702:	224c      	movs	r2, #76	@ 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f009 faf6 	bl	8009cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2220      	movs	r2, #32
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f009 faf0 	bl	8009cf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000718:	2002      	movs	r0, #2
 800071a:	f001 fd95 	bl	8002248 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <SystemClock_Config+0xdc>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800072a:	4a2a      	ldr	r2, [pc, #168]	@ (80007d4 <SystemClock_Config+0xdc>)
 800072c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <SystemClock_Config+0xdc>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073e:	bf00      	nop
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <SystemClock_Config+0xdc>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800074c:	d1f8      	bne.n	8000740 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074e:	2302      	movs	r3, #2
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000752:	2301      	movs	r3, #1
 8000754:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000756:	2340      	movs	r3, #64	@ 0x40
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075e:	2300      	movs	r3, #0
 8000760:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000762:	2304      	movs	r3, #4
 8000764:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000766:	230c      	movs	r3, #12
 8000768:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076e:	2304      	movs	r3, #4
 8000770:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000776:	230c      	movs	r3, #12
 8000778:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077a:	2300      	movs	r3, #0
 800077c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fd98 	bl	80022bc <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000792:	f000 f997 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	233f      	movs	r3, #63	@ 0x3f
 8000798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2303      	movs	r3, #3
 800079c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a2:	2308      	movs	r3, #8
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007aa:	2340      	movs	r3, #64	@ 0x40
 80007ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b4:	2340      	movs	r3, #64	@ 0x40
 80007b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 f957 	bl	8002a70 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007c8:	f000 f97c 	bl	8000ac4 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3770      	adds	r7, #112	@ 0x70
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58024800 	.word	0x58024800

080007d8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_UART7_Init+0x90>)
 80007de:	4a23      	ldr	r2, [pc, #140]	@ (800086c <MX_UART7_Init+0x94>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_UART7_Init+0x90>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_UART7_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_UART7_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_UART7_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_UART7_Init+0x90>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_UART7_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_UART7_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_UART7_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_UART7_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_UART7_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000820:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_UART7_Init+0x90>)
 8000822:	f004 fd97 	bl	8005354 <HAL_UART_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f94a 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	480d      	ldr	r0, [pc, #52]	@ (8000868 <MX_UART7_Init+0x90>)
 8000834:	f006 fb82 	bl	8006f3c <HAL_UARTEx_SetTxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f941 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <MX_UART7_Init+0x90>)
 8000846:	f006 fbb7 	bl	8006fb8 <HAL_UARTEx_SetRxFifoThreshold>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f938 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_UART7_Init+0x90>)
 8000856:	f006 fb38 	bl	8006eca <HAL_UARTEx_DisableFifoMode>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f930 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000080 	.word	0x24000080
 800086c:	40007800 	.word	0x40007800

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	@ (8000904 <MX_USART3_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008ba:	f004 fd4b 	bl	8005354 <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f8fe 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008cc:	f006 fb36 	bl	8006f3c <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f8f5 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008de:	f006 fb6b 	bl	8006fb8 <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f8ec 	bl	8000ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_USART3_UART_Init+0x90>)
 80008ee:	f006 faec 	bl	8006eca <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f8e4 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000114 	.word	0x24000114
 8000904:	40004800 	.word	0x40004800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b42      	ldr	r3, [pc, #264]	@ (8000a28 <MX_GPIO_Init+0x120>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	4a40      	ldr	r2, [pc, #256]	@ (8000a28 <MX_GPIO_Init+0x120>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a28 <MX_GPIO_Init+0x120>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a28 <MX_GPIO_Init+0x120>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	4a39      	ldr	r2, [pc, #228]	@ (8000a28 <MX_GPIO_Init+0x120>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094c:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <MX_GPIO_Init+0x120>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095a:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <MX_GPIO_Init+0x120>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	4a31      	ldr	r2, [pc, #196]	@ (8000a28 <MX_GPIO_Init+0x120>)
 8000962:	f043 0308 	orr.w	r3, r3, #8
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <MX_GPIO_Init+0x120>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b2b      	ldr	r3, [pc, #172]	@ (8000a28 <MX_GPIO_Init+0x120>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097e:	4a2a      	ldr	r2, [pc, #168]	@ (8000a28 <MX_GPIO_Init+0x120>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <MX_GPIO_Init+0x120>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000996:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <MX_GPIO_Init+0x120>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099c:	4a22      	ldr	r2, [pc, #136]	@ (8000a28 <MX_GPIO_Init+0x120>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <MX_GPIO_Init+0x120>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009ba:	481c      	ldr	r0, [pc, #112]	@ (8000a2c <MX_GPIO_Init+0x124>)
 80009bc:	f001 fc2a 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2102      	movs	r1, #2
 80009c4:	481a      	ldr	r0, [pc, #104]	@ (8000a30 <MX_GPIO_Init+0x128>)
 80009c6:	f001 fc25 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <MX_GPIO_Init+0x12c>)
 80009e0:	f001 fa70 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009e4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <MX_GPIO_Init+0x124>)
 80009fe:	f001 fa61 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a02:	2302      	movs	r3, #2
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_GPIO_Init+0x128>)
 8000a1a:	f001 fa53 	bl	8001ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58020400 	.word	0x58020400
 8000a30:	58021000 	.word	0x58021000
 8000a34:	58020800 	.word	0x58020800

08000a38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f006 fc65 	bl	8007310 <osDelay>
 8000a46:	e7fb      	b.n	8000a40 <StartDefaultTask+0x8>

08000a48 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a5a:	f000 fc57 	bl	800130c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a6a:	231f      	movs	r3, #31
 8000a6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a6e:	2387      	movs	r3, #135	@ 0x87
 8000a70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a76:	2300      	movs	r3, #0
 8000a78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc75 	bl	800137c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a92:	2004      	movs	r0, #4
 8000a94:	f000 fc52 	bl	800133c <HAL_MPU_Enable>

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab2:	f000 fb2b 	bl	800110c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40000800 	.word	0x40000800

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_MspInit+0x38>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_MspInit+0x38>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae6:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_MspInit+0x38>)
 8000ae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	210f      	movs	r1, #15
 8000af8:	f06f 0001 	mvn.w	r0, #1
 8000afc:	f000 fbde 	bl	80012bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	58024400 	.word	0x58024400

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	22b8      	movs	r2, #184	@ 0xb8
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f009 f8e3 	bl	8009cf8 <memset>
  if(huart->Instance==UART7)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a55      	ldr	r2, [pc, #340]	@ (8000c8c <HAL_UART_MspInit+0x180>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d14e      	bne.n	8000bda <HAL_UART_MspInit+0xce>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000b3c:	f04f 0202 	mov.w	r2, #2
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fb5a 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b5e:	f7ff ffb1 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000b62:	4b4b      	ldr	r3, [pc, #300]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b68:	4a49      	ldr	r2, [pc, #292]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b72:	4b47      	ldr	r3, [pc, #284]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b78:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b43      	ldr	r3, [pc, #268]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	4a42      	ldr	r2, [pc, #264]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b90:	4b3f      	ldr	r3, [pc, #252]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    PB4(NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b9e:	2318      	movs	r3, #24
 8000ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000bb6:	230b      	movs	r3, #11
 8000bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4834      	ldr	r0, [pc, #208]	@ (8000c94 <HAL_UART_MspInit+0x188>)
 8000bc4:	f001 f97e 	bl	8001ec4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2105      	movs	r1, #5
 8000bcc:	2052      	movs	r0, #82	@ 0x52
 8000bce:	f000 fb75 	bl	80012bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000bd2:	2052      	movs	r0, #82	@ 0x52
 8000bd4:	f000 fb8c 	bl	80012f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bd8:	e053      	b.n	8000c82 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a2e      	ldr	r2, [pc, #184]	@ (8000c98 <HAL_UART_MspInit+0x18c>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d14e      	bne.n	8000c82 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000be4:	f04f 0202 	mov.w	r2, #2
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 fb06 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000c06:	f7ff ff5d 	bl	8000ac4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c10:	4a1f      	ldr	r2, [pc, #124]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000c12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c28:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	4a18      	ldr	r2, [pc, #96]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_UART_MspInit+0x184>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c60:	2307      	movs	r3, #7
 8000c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <HAL_UART_MspInit+0x190>)
 8000c6e:	f001 f929 	bl	8001ec4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2027      	movs	r0, #39	@ 0x27
 8000c78:	f000 fb20 	bl	80012bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c7c:	2027      	movs	r0, #39	@ 0x27
 8000c7e:	f000 fb37 	bl	80012f0 <HAL_NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	37e8      	adds	r7, #232	@ 0xe8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40007800 	.word	0x40007800
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020400 	.word	0x58020400
 8000c98:	40004800 	.word	0x40004800
 8000c9c:	58020c00 	.word	0x58020c00

08000ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b090      	sub	sp, #64	@ 0x40
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b0f      	cmp	r3, #15
 8000cac:	d827      	bhi.n	8000cfe <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	201e      	movs	r0, #30
 8000cb4:	f000 fb02 	bl	80012bc <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cb8:	201e      	movs	r0, #30
 8000cba:	f000 fb19 	bl	80012f0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000cbe:	4a29      	ldr	r2, [pc, #164]	@ (8000d64 <HAL_InitTick+0xc4>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <HAL_InitTick+0xc8>)
 8000cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cca:	4a27      	ldr	r2, [pc, #156]	@ (8000d68 <HAL_InitTick+0xc8>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cd4:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <HAL_InitTick+0xc8>)
 8000cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce2:	f107 0210 	add.w	r2, r7, #16
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fa4b 	bl	8003188 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <HAL_InitTick+0x6a>
 8000cfc:	e001      	b.n	8000d02 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e02b      	b.n	8000d5a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d02:	f002 fa15 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8000d06:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d08:	e004      	b.n	8000d14 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d0a:	f002 fa11 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d16:	4a15      	ldr	r2, [pc, #84]	@ (8000d6c <HAL_InitTick+0xcc>)
 8000d18:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1c:	0c9b      	lsrs	r3, r3, #18
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000d24:	4a13      	ldr	r2, [pc, #76]	@ (8000d74 <HAL_InitTick+0xd4>)
 8000d26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000d2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d30:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d34:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000d42:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000d44:	f004 f824 	bl	8004d90 <HAL_TIM_Base_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d104      	bne.n	8000d58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000d4e:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <HAL_InitTick+0xd0>)
 8000d50:	f004 f880 	bl	8004e54 <HAL_TIM_Base_Start_IT>
 8000d54:	4603      	mov	r3, r0
 8000d56:	e000      	b.n	8000d5a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3740      	adds	r7, #64	@ 0x40
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	24000008 	.word	0x24000008
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	240001ac 	.word	0x240001ac
 8000d74:	40000800 	.word	0x40000800

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <NMI_Handler+0x4>

08000d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <MemManage_Handler+0x4>

08000d90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <UsageFault_Handler+0x4>

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <TIM4_IRQHandler+0x10>)
 8000db6:	f004 f8d3 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	240001ac 	.word	0x240001ac

08000dc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dc8:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <USART3_IRQHandler+0x10>)
 8000dca:	f004 fba1 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	24000114 	.word	0x24000114

08000dd8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <UART7_IRQHandler+0x10>)
 8000dde:	f004 fb97 	bl	8005510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000080 	.word	0x24000080

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f008 ffca 	bl	8009db4 <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24050000 	.word	0x24050000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	240001f8 	.word	0x240001f8
 8000e54:	24004d38 	.word	0x24004d38

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f58 <SystemInit+0x100>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <SystemInit+0x100>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f5c <SystemInit+0x104>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d807      	bhi.n	8000e88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e78:	4b38      	ldr	r3, [pc, #224]	@ (8000f5c <SystemInit+0x104>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	4a36      	ldr	r2, [pc, #216]	@ (8000f5c <SystemInit+0x104>)
 8000e82:	f043 0307 	orr.w	r3, r3, #7
 8000e86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e88:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <SystemInit+0x108>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a34      	ldr	r2, [pc, #208]	@ (8000f60 <SystemInit+0x108>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e94:	4b32      	ldr	r3, [pc, #200]	@ (8000f60 <SystemInit+0x108>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <SystemInit+0x108>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4930      	ldr	r1, [pc, #192]	@ (8000f60 <SystemInit+0x108>)
 8000ea0:	4b30      	ldr	r3, [pc, #192]	@ (8000f64 <SystemInit+0x10c>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <SystemInit+0x104>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <SystemInit+0x104>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 030f 	bic.w	r3, r3, #15
 8000eba:	4a28      	ldr	r2, [pc, #160]	@ (8000f5c <SystemInit+0x104>)
 8000ebc:	f043 0307 	orr.w	r3, r3, #7
 8000ec0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <SystemInit+0x108>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <SystemInit+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ece:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <SystemInit+0x108>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <SystemInit+0x108>)
 8000ed6:	4a24      	ldr	r2, [pc, #144]	@ (8000f68 <SystemInit+0x110>)
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <SystemInit+0x108>)
 8000edc:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <SystemInit+0x114>)
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <SystemInit+0x108>)
 8000ee2:	4a23      	ldr	r2, [pc, #140]	@ (8000f70 <SystemInit+0x118>)
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <SystemInit+0x108>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <SystemInit+0x108>)
 8000eee:	4a20      	ldr	r2, [pc, #128]	@ (8000f70 <SystemInit+0x118>)
 8000ef0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <SystemInit+0x108>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <SystemInit+0x108>)
 8000efa:	4a1d      	ldr	r2, [pc, #116]	@ (8000f70 <SystemInit+0x118>)
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <SystemInit+0x108>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <SystemInit+0x108>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <SystemInit+0x108>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <SystemInit+0x108>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <SystemInit+0x108>)
 8000f18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d113      	bne.n	8000f4c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <SystemInit+0x108>)
 8000f26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <SystemInit+0x108>)
 8000f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <SystemInit+0x11c>)
 8000f36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <SystemInit+0x108>)
 8000f3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f42:	4a07      	ldr	r2, [pc, #28]	@ (8000f60 <SystemInit+0x108>)
 8000f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	52002000 	.word	0x52002000
 8000f60:	58024400 	.word	0x58024400
 8000f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f68:	02020200 	.word	0x02020200
 8000f6c:	01ff0000 	.word	0x01ff0000
 8000f70:	01010280 	.word	0x01010280
 8000f74:	52004000 	.word	0x52004000

08000f78 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <ExitRun0Mode+0x2c>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <ExitRun0Mode+0x2c>)
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f88:	bf00      	nop
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <ExitRun0Mode+0x2c>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024800 	.word	0x58024800

08000fa8 <systemTaskInit>:
extern UART_HandleTypeDef huart7;

TaskHandle_t hc12SendTaskHandle;

void systemTaskInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af02      	add	r7, sp, #8
  xTaskCreate(StartHC12SendTask, "HC12SendTask", 128, NULL, tskIDLE_PRIORITY + 1, &hc12SendTaskHandle);
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <systemTaskInit+0x20>)
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	4904      	ldr	r1, [pc, #16]	@ (8000fcc <systemTaskInit+0x24>)
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <systemTaskInit+0x28>)
 8000fbe:	f007 f805 	bl	8007fcc <xTaskCreate>
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	240001fc 	.word	0x240001fc
 8000fcc:	0800a6c8 	.word	0x0800a6c8
 8000fd0:	08001019 	.word	0x08001019

08000fd4 <sendData>:

void sendData(int cnt)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	char txBuffer[20];
	sprintf(txBuffer, "%d\r\n", cnt);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	490b      	ldr	r1, [pc, #44]	@ (8001010 <sendData+0x3c>)
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 fe67 	bl	8009cb8 <siprintf>
	HAL_UART_Transmit(&huart7, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff f98e 	bl	8000310 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f107 010c 	add.w	r1, r7, #12
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <sendData+0x40>)
 8001002:	f004 f9f7 	bl	80053f4 <HAL_UART_Transmit>
}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	0800a6d8 	.word	0x0800a6d8
 8001014:	24000080 	.word	0x24000080

08001018 <StartHC12SendTask>:

// HC-12 Send Task
void StartHC12SendTask(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  for (;;)
  {
    sendData(count++);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	1c5a      	adds	r2, r3, #1
 8001028:	60fa      	str	r2, [r7, #12]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffd2 	bl	8000fd4 <sendData>
    vTaskDelay(pdMS_TO_TICKS(1000));
 8001030:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001034:	f007 f928 	bl	8008288 <vTaskDelay>
    sendData(count++);
 8001038:	bf00      	nop
 800103a:	e7f3      	b.n	8001024 <StartHC12SendTask+0xc>

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001078 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001040:	f7ff ff9a 	bl	8000f78 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001044:	f7ff ff08 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800104a:	490d      	ldr	r1, [pc, #52]	@ (8001080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001060:	4c0a      	ldr	r4, [pc, #40]	@ (800108c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106e:	f008 fea7 	bl	8009dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fb1d 	bl	80006b0 <main>
  bx  lr
 8001076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800107c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001080:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001084:	0800a798 	.word	0x0800a798
  ldr r2, =_sbss
 8001088:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800108c:	24004d34 	.word	0x24004d34

08001090 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC3_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109a:	2003      	movs	r0, #3
 800109c:	f000 f903 	bl	80012a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010a0:	f001 fe9c 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 80010a4:	4602      	mov	r2, r0
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_Init+0x68>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	4913      	ldr	r1, [pc, #76]	@ (8001100 <HAL_Init+0x6c>)
 80010b2:	5ccb      	ldrb	r3, [r1, r3]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_Init+0x68>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <HAL_Init+0x6c>)
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <HAL_Init+0x70>)
 80010d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <HAL_Init+0x74>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	200f      	movs	r0, #15
 80010e0:	f7ff fdde 	bl	8000ca0 <HAL_InitTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e002      	b.n	80010f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ee:	f7ff fcef 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	58024400 	.word	0x58024400
 8001100:	0800a71c 	.word	0x0800a71c
 8001104:	24000004 	.word	0x24000004
 8001108:	24000000 	.word	0x24000000

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2400000c 	.word	0x2400000c
 8001130:	24000200 	.word	0x24000200

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	24000200 	.word	0x24000200

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	db0b      	blt.n	80011da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	@ (80011e8 <__NVIC_EnableIRQ+0x38>)
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff4c 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ca:	f7ff ff63 	bl	8001194 <__NVIC_GetPriorityGrouping>
 80012ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ffb3 	bl	8001240 <NVIC_EncodePriority>
 80012da:	4602      	mov	r2, r0
 80012dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff82 	bl	80011ec <__NVIC_SetPriority>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff56 	bl	80011b0 <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001310:	f3bf 8f5f 	dmb	sy
}
 8001314:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_MPU_Disable+0x28>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131a:	4a06      	ldr	r2, [pc, #24]	@ (8001334 <HAL_MPU_Disable+0x28>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001320:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_MPU_Disable+0x2c>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00
 8001338:	e000ed90 	.word	0xe000ed90

0800133c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001344:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <HAL_MPU_Enable+0x38>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_MPU_Enable+0x3c>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	4a09      	ldr	r2, [pc, #36]	@ (8001378 <HAL_MPU_Enable+0x3c>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001358:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800135a:	f3bf 8f4f 	dsb	sy
}
 800135e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001360:	f3bf 8f6f 	isb	sy
}
 8001364:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed90 	.word	0xe000ed90
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	785a      	ldrb	r2, [r3, #1]
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <HAL_MPU_ConfigRegion+0x7c>)
 800138a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <HAL_MPU_ConfigRegion+0x7c>)
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	4a19      	ldr	r2, [pc, #100]	@ (80013f8 <HAL_MPU_ConfigRegion+0x7c>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001398:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <HAL_MPU_ConfigRegion+0x7c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7b1b      	ldrb	r3, [r3, #12]
 80013a4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7adb      	ldrb	r3, [r3, #11]
 80013aa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7a9b      	ldrb	r3, [r3, #10]
 80013b2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7b5b      	ldrb	r3, [r3, #13]
 80013ba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7b9b      	ldrb	r3, [r3, #14]
 80013c2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7bdb      	ldrb	r3, [r3, #15]
 80013ca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7a5b      	ldrb	r3, [r3, #9]
 80013d2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7a1b      	ldrb	r3, [r3, #8]
 80013da:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013dc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013e6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e8:	6113      	str	r3, [r2, #16]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed90 	.word	0xe000ed90

080013fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff fe96 	bl	8001134 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e2dc      	b.n	80019ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d008      	beq.n	8001432 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2280      	movs	r2, #128	@ 0x80
 8001424:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e2cd      	b.n	80019ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a76      	ldr	r2, [pc, #472]	@ (8001610 <HAL_DMA_Abort+0x214>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d04a      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a74      	ldr	r2, [pc, #464]	@ (8001614 <HAL_DMA_Abort+0x218>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d045      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a73      	ldr	r2, [pc, #460]	@ (8001618 <HAL_DMA_Abort+0x21c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d040      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a71      	ldr	r2, [pc, #452]	@ (800161c <HAL_DMA_Abort+0x220>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d03b      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a70      	ldr	r2, [pc, #448]	@ (8001620 <HAL_DMA_Abort+0x224>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d036      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a6e      	ldr	r2, [pc, #440]	@ (8001624 <HAL_DMA_Abort+0x228>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d031      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6d      	ldr	r2, [pc, #436]	@ (8001628 <HAL_DMA_Abort+0x22c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d02c      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a6b      	ldr	r2, [pc, #428]	@ (800162c <HAL_DMA_Abort+0x230>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d027      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6a      	ldr	r2, [pc, #424]	@ (8001630 <HAL_DMA_Abort+0x234>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d022      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a68      	ldr	r2, [pc, #416]	@ (8001634 <HAL_DMA_Abort+0x238>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d01d      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a67      	ldr	r2, [pc, #412]	@ (8001638 <HAL_DMA_Abort+0x23c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d018      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a65      	ldr	r2, [pc, #404]	@ (800163c <HAL_DMA_Abort+0x240>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a64      	ldr	r2, [pc, #400]	@ (8001640 <HAL_DMA_Abort+0x244>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d00e      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a62      	ldr	r2, [pc, #392]	@ (8001644 <HAL_DMA_Abort+0x248>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d009      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a61      	ldr	r2, [pc, #388]	@ (8001648 <HAL_DMA_Abort+0x24c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d004      	beq.n	80014d2 <HAL_DMA_Abort+0xd6>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a5f      	ldr	r2, [pc, #380]	@ (800164c <HAL_DMA_Abort+0x250>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_DMA_Abort+0xda>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_DMA_Abort+0xdc>
 80014d6:	2300      	movs	r3, #0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 021e 	bic.w	r2, r2, #30
 80014ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	e00a      	b.n	800151a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 020e 	bic.w	r2, r2, #14
 8001512:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a3c      	ldr	r2, [pc, #240]	@ (8001610 <HAL_DMA_Abort+0x214>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d072      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a3a      	ldr	r2, [pc, #232]	@ (8001614 <HAL_DMA_Abort+0x218>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d06d      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a39      	ldr	r2, [pc, #228]	@ (8001618 <HAL_DMA_Abort+0x21c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d068      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a37      	ldr	r2, [pc, #220]	@ (800161c <HAL_DMA_Abort+0x220>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d063      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <HAL_DMA_Abort+0x224>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d05e      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a34      	ldr	r2, [pc, #208]	@ (8001624 <HAL_DMA_Abort+0x228>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d059      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a33      	ldr	r2, [pc, #204]	@ (8001628 <HAL_DMA_Abort+0x22c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d054      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a31      	ldr	r2, [pc, #196]	@ (800162c <HAL_DMA_Abort+0x230>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d04f      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a30      	ldr	r2, [pc, #192]	@ (8001630 <HAL_DMA_Abort+0x234>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04a      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2e      	ldr	r2, [pc, #184]	@ (8001634 <HAL_DMA_Abort+0x238>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d045      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a2d      	ldr	r2, [pc, #180]	@ (8001638 <HAL_DMA_Abort+0x23c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d040      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2b      	ldr	r2, [pc, #172]	@ (800163c <HAL_DMA_Abort+0x240>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d03b      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a2a      	ldr	r2, [pc, #168]	@ (8001640 <HAL_DMA_Abort+0x244>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d036      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <HAL_DMA_Abort+0x248>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d031      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a27      	ldr	r2, [pc, #156]	@ (8001648 <HAL_DMA_Abort+0x24c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d02c      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a25      	ldr	r2, [pc, #148]	@ (800164c <HAL_DMA_Abort+0x250>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d027      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a24      	ldr	r2, [pc, #144]	@ (8001650 <HAL_DMA_Abort+0x254>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d022      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a22      	ldr	r2, [pc, #136]	@ (8001654 <HAL_DMA_Abort+0x258>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01d      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <HAL_DMA_Abort+0x25c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d018      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1f      	ldr	r2, [pc, #124]	@ (800165c <HAL_DMA_Abort+0x260>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <HAL_DMA_Abort+0x264>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00e      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <HAL_DMA_Abort+0x268>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d009      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001668 <HAL_DMA_Abort+0x26c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d004      	beq.n	800160a <HAL_DMA_Abort+0x20e>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <HAL_DMA_Abort+0x270>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d132      	bne.n	8001670 <HAL_DMA_Abort+0x274>
 800160a:	2301      	movs	r3, #1
 800160c:	e031      	b.n	8001672 <HAL_DMA_Abort+0x276>
 800160e:	bf00      	nop
 8001610:	40020010 	.word	0x40020010
 8001614:	40020028 	.word	0x40020028
 8001618:	40020040 	.word	0x40020040
 800161c:	40020058 	.word	0x40020058
 8001620:	40020070 	.word	0x40020070
 8001624:	40020088 	.word	0x40020088
 8001628:	400200a0 	.word	0x400200a0
 800162c:	400200b8 	.word	0x400200b8
 8001630:	40020410 	.word	0x40020410
 8001634:	40020428 	.word	0x40020428
 8001638:	40020440 	.word	0x40020440
 800163c:	40020458 	.word	0x40020458
 8001640:	40020470 	.word	0x40020470
 8001644:	40020488 	.word	0x40020488
 8001648:	400204a0 	.word	0x400204a0
 800164c:	400204b8 	.word	0x400204b8
 8001650:	58025408 	.word	0x58025408
 8001654:	5802541c 	.word	0x5802541c
 8001658:	58025430 	.word	0x58025430
 800165c:	58025444 	.word	0x58025444
 8001660:	58025458 	.word	0x58025458
 8001664:	5802546c 	.word	0x5802546c
 8001668:	58025480 	.word	0x58025480
 800166c:	58025494 	.word	0x58025494
 8001670:	2300      	movs	r3, #0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001684:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a6d      	ldr	r2, [pc, #436]	@ (8001840 <HAL_DMA_Abort+0x444>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d04a      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6b      	ldr	r2, [pc, #428]	@ (8001844 <HAL_DMA_Abort+0x448>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d045      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6a      	ldr	r2, [pc, #424]	@ (8001848 <HAL_DMA_Abort+0x44c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d040      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a68      	ldr	r2, [pc, #416]	@ (800184c <HAL_DMA_Abort+0x450>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d03b      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a67      	ldr	r2, [pc, #412]	@ (8001850 <HAL_DMA_Abort+0x454>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d036      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a65      	ldr	r2, [pc, #404]	@ (8001854 <HAL_DMA_Abort+0x458>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d031      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a64      	ldr	r2, [pc, #400]	@ (8001858 <HAL_DMA_Abort+0x45c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d02c      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a62      	ldr	r2, [pc, #392]	@ (800185c <HAL_DMA_Abort+0x460>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d027      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a61      	ldr	r2, [pc, #388]	@ (8001860 <HAL_DMA_Abort+0x464>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d022      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001864 <HAL_DMA_Abort+0x468>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d01d      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001868 <HAL_DMA_Abort+0x46c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d018      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a5c      	ldr	r2, [pc, #368]	@ (800186c <HAL_DMA_Abort+0x470>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a5b      	ldr	r2, [pc, #364]	@ (8001870 <HAL_DMA_Abort+0x474>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00e      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a59      	ldr	r2, [pc, #356]	@ (8001874 <HAL_DMA_Abort+0x478>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d009      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a58      	ldr	r2, [pc, #352]	@ (8001878 <HAL_DMA_Abort+0x47c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d004      	beq.n	8001726 <HAL_DMA_Abort+0x32a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a56      	ldr	r2, [pc, #344]	@ (800187c <HAL_DMA_Abort+0x480>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d108      	bne.n	8001738 <HAL_DMA_Abort+0x33c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e007      	b.n	8001748 <HAL_DMA_Abort+0x34c>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001748:	e013      	b.n	8001772 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800174a:	f7ff fcf3 	bl	8001134 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b05      	cmp	r3, #5
 8001756:	d90c      	bls.n	8001772 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2220      	movs	r2, #32
 800175c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e12d      	b.n	80019ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1e5      	bne.n	800174a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a2f      	ldr	r2, [pc, #188]	@ (8001840 <HAL_DMA_Abort+0x444>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04a      	beq.n	800181e <HAL_DMA_Abort+0x422>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2d      	ldr	r2, [pc, #180]	@ (8001844 <HAL_DMA_Abort+0x448>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d045      	beq.n	800181e <HAL_DMA_Abort+0x422>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2c      	ldr	r2, [pc, #176]	@ (8001848 <HAL_DMA_Abort+0x44c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d040      	beq.n	800181e <HAL_DMA_Abort+0x422>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2a      	ldr	r2, [pc, #168]	@ (800184c <HAL_DMA_Abort+0x450>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d03b      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a29      	ldr	r2, [pc, #164]	@ (8001850 <HAL_DMA_Abort+0x454>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d036      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_DMA_Abort+0x458>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d031      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_DMA_Abort+0x45c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d02c      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a24      	ldr	r2, [pc, #144]	@ (800185c <HAL_DMA_Abort+0x460>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d027      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <HAL_DMA_Abort+0x464>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d022      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_DMA_Abort+0x468>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01d      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a20      	ldr	r2, [pc, #128]	@ (8001868 <HAL_DMA_Abort+0x46c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d018      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1e      	ldr	r2, [pc, #120]	@ (800186c <HAL_DMA_Abort+0x470>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_DMA_Abort+0x422>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_DMA_Abort+0x474>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00e      	beq.n	800181e <HAL_DMA_Abort+0x422>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_DMA_Abort+0x478>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_DMA_Abort+0x422>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1a      	ldr	r2, [pc, #104]	@ (8001878 <HAL_DMA_Abort+0x47c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_DMA_Abort+0x422>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a18      	ldr	r2, [pc, #96]	@ (800187c <HAL_DMA_Abort+0x480>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_DMA_Abort+0x426>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_DMA_Abort+0x428>
 8001822:	2300      	movs	r3, #0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d02b      	beq.n	8001880 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	223f      	movs	r2, #63	@ 0x3f
 8001838:	409a      	lsls	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e02a      	b.n	8001896 <HAL_DMA_Abort+0x49a>
 8001840:	40020010 	.word	0x40020010
 8001844:	40020028 	.word	0x40020028
 8001848:	40020040 	.word	0x40020040
 800184c:	40020058 	.word	0x40020058
 8001850:	40020070 	.word	0x40020070
 8001854:	40020088 	.word	0x40020088
 8001858:	400200a0 	.word	0x400200a0
 800185c:	400200b8 	.word	0x400200b8
 8001860:	40020410 	.word	0x40020410
 8001864:	40020428 	.word	0x40020428
 8001868:	40020440 	.word	0x40020440
 800186c:	40020458 	.word	0x40020458
 8001870:	40020470 	.word	0x40020470
 8001874:	40020488 	.word	0x40020488
 8001878:	400204a0 	.word	0x400204a0
 800187c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2201      	movs	r2, #1
 8001890:	409a      	lsls	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a4f      	ldr	r2, [pc, #316]	@ (80019d8 <HAL_DMA_Abort+0x5dc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d072      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	@ (80019dc <HAL_DMA_Abort+0x5e0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d06d      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a4c      	ldr	r2, [pc, #304]	@ (80019e0 <HAL_DMA_Abort+0x5e4>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d068      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	@ (80019e4 <HAL_DMA_Abort+0x5e8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d063      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a49      	ldr	r2, [pc, #292]	@ (80019e8 <HAL_DMA_Abort+0x5ec>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a47      	ldr	r2, [pc, #284]	@ (80019ec <HAL_DMA_Abort+0x5f0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d059      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a46      	ldr	r2, [pc, #280]	@ (80019f0 <HAL_DMA_Abort+0x5f4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d054      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a44      	ldr	r2, [pc, #272]	@ (80019f4 <HAL_DMA_Abort+0x5f8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d04f      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a43      	ldr	r2, [pc, #268]	@ (80019f8 <HAL_DMA_Abort+0x5fc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d04a      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a41      	ldr	r2, [pc, #260]	@ (80019fc <HAL_DMA_Abort+0x600>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d045      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a40      	ldr	r2, [pc, #256]	@ (8001a00 <HAL_DMA_Abort+0x604>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d040      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a3e      	ldr	r2, [pc, #248]	@ (8001a04 <HAL_DMA_Abort+0x608>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d03b      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a3d      	ldr	r2, [pc, #244]	@ (8001a08 <HAL_DMA_Abort+0x60c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d036      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a0c <HAL_DMA_Abort+0x610>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d031      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a3a      	ldr	r2, [pc, #232]	@ (8001a10 <HAL_DMA_Abort+0x614>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d02c      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a38      	ldr	r2, [pc, #224]	@ (8001a14 <HAL_DMA_Abort+0x618>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d027      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a37      	ldr	r2, [pc, #220]	@ (8001a18 <HAL_DMA_Abort+0x61c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d022      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a35      	ldr	r2, [pc, #212]	@ (8001a1c <HAL_DMA_Abort+0x620>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01d      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a34      	ldr	r2, [pc, #208]	@ (8001a20 <HAL_DMA_Abort+0x624>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d018      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a32      	ldr	r2, [pc, #200]	@ (8001a24 <HAL_DMA_Abort+0x628>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a31      	ldr	r2, [pc, #196]	@ (8001a28 <HAL_DMA_Abort+0x62c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00e      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a2c <HAL_DMA_Abort+0x630>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d009      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2e      	ldr	r2, [pc, #184]	@ (8001a30 <HAL_DMA_Abort+0x634>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d004      	beq.n	8001986 <HAL_DMA_Abort+0x58a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2c      	ldr	r2, [pc, #176]	@ (8001a34 <HAL_DMA_Abort+0x638>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_DMA_Abort+0x58e>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_DMA_Abort+0x590>
 800198a:	2300      	movs	r3, #0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d015      	beq.n	80019bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001998:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020010 	.word	0x40020010
 80019dc:	40020028 	.word	0x40020028
 80019e0:	40020040 	.word	0x40020040
 80019e4:	40020058 	.word	0x40020058
 80019e8:	40020070 	.word	0x40020070
 80019ec:	40020088 	.word	0x40020088
 80019f0:	400200a0 	.word	0x400200a0
 80019f4:	400200b8 	.word	0x400200b8
 80019f8:	40020410 	.word	0x40020410
 80019fc:	40020428 	.word	0x40020428
 8001a00:	40020440 	.word	0x40020440
 8001a04:	40020458 	.word	0x40020458
 8001a08:	40020470 	.word	0x40020470
 8001a0c:	40020488 	.word	0x40020488
 8001a10:	400204a0 	.word	0x400204a0
 8001a14:	400204b8 	.word	0x400204b8
 8001a18:	58025408 	.word	0x58025408
 8001a1c:	5802541c 	.word	0x5802541c
 8001a20:	58025430 	.word	0x58025430
 8001a24:	58025444 	.word	0x58025444
 8001a28:	58025458 	.word	0x58025458
 8001a2c:	5802546c 	.word	0x5802546c
 8001a30:	58025480 	.word	0x58025480
 8001a34:	58025494 	.word	0x58025494

08001a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e237      	b.n	8001eba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d004      	beq.n	8001a60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e22c      	b.n	8001eba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5c      	ldr	r2, [pc, #368]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1a0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d04a      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bdc <HAL_DMA_Abort_IT+0x1a4>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d045      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a59      	ldr	r2, [pc, #356]	@ (8001be0 <HAL_DMA_Abort_IT+0x1a8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d040      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a58      	ldr	r2, [pc, #352]	@ (8001be4 <HAL_DMA_Abort_IT+0x1ac>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d03b      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a56      	ldr	r2, [pc, #344]	@ (8001be8 <HAL_DMA_Abort_IT+0x1b0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d036      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a55      	ldr	r2, [pc, #340]	@ (8001bec <HAL_DMA_Abort_IT+0x1b4>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d031      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a53      	ldr	r2, [pc, #332]	@ (8001bf0 <HAL_DMA_Abort_IT+0x1b8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d02c      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a52      	ldr	r2, [pc, #328]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1bc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d027      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1c0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d022      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a4f      	ldr	r2, [pc, #316]	@ (8001bfc <HAL_DMA_Abort_IT+0x1c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d01d      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a4d      	ldr	r2, [pc, #308]	@ (8001c00 <HAL_DMA_Abort_IT+0x1c8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d018      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8001c04 <HAL_DMA_Abort_IT+0x1cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d013      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a4a      	ldr	r2, [pc, #296]	@ (8001c08 <HAL_DMA_Abort_IT+0x1d0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00e      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a49      	ldr	r2, [pc, #292]	@ (8001c0c <HAL_DMA_Abort_IT+0x1d4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a47      	ldr	r2, [pc, #284]	@ (8001c10 <HAL_DMA_Abort_IT+0x1d8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <HAL_DMA_Abort_IT+0xc8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a46      	ldr	r2, [pc, #280]	@ (8001c14 <HAL_DMA_Abort_IT+0x1dc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_DMA_Abort_IT+0xcc>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_DMA_Abort_IT+0xce>
 8001b04:	2300      	movs	r3, #0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8086 	beq.w	8001c18 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1a0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d04a      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2e      	ldr	r2, [pc, #184]	@ (8001bdc <HAL_DMA_Abort_IT+0x1a4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d045      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001be0 <HAL_DMA_Abort_IT+0x1a8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d040      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a2b      	ldr	r2, [pc, #172]	@ (8001be4 <HAL_DMA_Abort_IT+0x1ac>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d03b      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a29      	ldr	r2, [pc, #164]	@ (8001be8 <HAL_DMA_Abort_IT+0x1b0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d036      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a28      	ldr	r2, [pc, #160]	@ (8001bec <HAL_DMA_Abort_IT+0x1b4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d031      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a26      	ldr	r2, [pc, #152]	@ (8001bf0 <HAL_DMA_Abort_IT+0x1b8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d02c      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a25      	ldr	r2, [pc, #148]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1bc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d027      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1c0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d022      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a22      	ldr	r2, [pc, #136]	@ (8001bfc <HAL_DMA_Abort_IT+0x1c4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d01d      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <HAL_DMA_Abort_IT+0x1c8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d018      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1f      	ldr	r2, [pc, #124]	@ (8001c04 <HAL_DMA_Abort_IT+0x1cc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	@ (8001c08 <HAL_DMA_Abort_IT+0x1d0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d00e      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c0c <HAL_DMA_Abort_IT+0x1d4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d009      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c10 <HAL_DMA_Abort_IT+0x1d8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d004      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x17c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <HAL_DMA_Abort_IT+0x1dc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d108      	bne.n	8001bc6 <HAL_DMA_Abort_IT+0x18e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e178      	b.n	8001eb8 <HAL_DMA_Abort_IT+0x480>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0201 	bic.w	r2, r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e16f      	b.n	8001eb8 <HAL_DMA_Abort_IT+0x480>
 8001bd8:	40020010 	.word	0x40020010
 8001bdc:	40020028 	.word	0x40020028
 8001be0:	40020040 	.word	0x40020040
 8001be4:	40020058 	.word	0x40020058
 8001be8:	40020070 	.word	0x40020070
 8001bec:	40020088 	.word	0x40020088
 8001bf0:	400200a0 	.word	0x400200a0
 8001bf4:	400200b8 	.word	0x400200b8
 8001bf8:	40020410 	.word	0x40020410
 8001bfc:	40020428 	.word	0x40020428
 8001c00:	40020440 	.word	0x40020440
 8001c04:	40020458 	.word	0x40020458
 8001c08:	40020470 	.word	0x40020470
 8001c0c:	40020488 	.word	0x40020488
 8001c10:	400204a0 	.word	0x400204a0
 8001c14:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 020e 	bic.w	r2, r2, #14
 8001c26:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6c      	ldr	r2, [pc, #432]	@ (8001de0 <HAL_DMA_Abort_IT+0x3a8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d04a      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6b      	ldr	r2, [pc, #428]	@ (8001de4 <HAL_DMA_Abort_IT+0x3ac>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d045      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a69      	ldr	r2, [pc, #420]	@ (8001de8 <HAL_DMA_Abort_IT+0x3b0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d040      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a68      	ldr	r2, [pc, #416]	@ (8001dec <HAL_DMA_Abort_IT+0x3b4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d03b      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a66      	ldr	r2, [pc, #408]	@ (8001df0 <HAL_DMA_Abort_IT+0x3b8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d036      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a65      	ldr	r2, [pc, #404]	@ (8001df4 <HAL_DMA_Abort_IT+0x3bc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d031      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a63      	ldr	r2, [pc, #396]	@ (8001df8 <HAL_DMA_Abort_IT+0x3c0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d02c      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a62      	ldr	r2, [pc, #392]	@ (8001dfc <HAL_DMA_Abort_IT+0x3c4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d027      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a60      	ldr	r2, [pc, #384]	@ (8001e00 <HAL_DMA_Abort_IT+0x3c8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d022      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a5f      	ldr	r2, [pc, #380]	@ (8001e04 <HAL_DMA_Abort_IT+0x3cc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d01d      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a5d      	ldr	r2, [pc, #372]	@ (8001e08 <HAL_DMA_Abort_IT+0x3d0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d018      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a5c      	ldr	r2, [pc, #368]	@ (8001e0c <HAL_DMA_Abort_IT+0x3d4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8001e10 <HAL_DMA_Abort_IT+0x3d8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00e      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a59      	ldr	r2, [pc, #356]	@ (8001e14 <HAL_DMA_Abort_IT+0x3dc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d009      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a57      	ldr	r2, [pc, #348]	@ (8001e18 <HAL_DMA_Abort_IT+0x3e0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x290>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a56      	ldr	r2, [pc, #344]	@ (8001e1c <HAL_DMA_Abort_IT+0x3e4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d108      	bne.n	8001cda <HAL_DMA_Abort_IT+0x2a2>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e007      	b.n	8001cea <HAL_DMA_Abort_IT+0x2b2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0201 	bic.w	r2, r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a3c      	ldr	r2, [pc, #240]	@ (8001de0 <HAL_DMA_Abort_IT+0x3a8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d072      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8001de4 <HAL_DMA_Abort_IT+0x3ac>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d06d      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a39      	ldr	r2, [pc, #228]	@ (8001de8 <HAL_DMA_Abort_IT+0x3b0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d068      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a37      	ldr	r2, [pc, #220]	@ (8001dec <HAL_DMA_Abort_IT+0x3b4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d063      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a36      	ldr	r2, [pc, #216]	@ (8001df0 <HAL_DMA_Abort_IT+0x3b8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d05e      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <HAL_DMA_Abort_IT+0x3bc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d059      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a33      	ldr	r2, [pc, #204]	@ (8001df8 <HAL_DMA_Abort_IT+0x3c0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d054      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a31      	ldr	r2, [pc, #196]	@ (8001dfc <HAL_DMA_Abort_IT+0x3c4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d04f      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a30      	ldr	r2, [pc, #192]	@ (8001e00 <HAL_DMA_Abort_IT+0x3c8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d04a      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2e      	ldr	r2, [pc, #184]	@ (8001e04 <HAL_DMA_Abort_IT+0x3cc>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d045      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a2d      	ldr	r2, [pc, #180]	@ (8001e08 <HAL_DMA_Abort_IT+0x3d0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d040      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <HAL_DMA_Abort_IT+0x3d4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d03b      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <HAL_DMA_Abort_IT+0x3d8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d036      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a28      	ldr	r2, [pc, #160]	@ (8001e14 <HAL_DMA_Abort_IT+0x3dc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d031      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a27      	ldr	r2, [pc, #156]	@ (8001e18 <HAL_DMA_Abort_IT+0x3e0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d02c      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a25      	ldr	r2, [pc, #148]	@ (8001e1c <HAL_DMA_Abort_IT+0x3e4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d027      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a24      	ldr	r2, [pc, #144]	@ (8001e20 <HAL_DMA_Abort_IT+0x3e8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d022      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a22      	ldr	r2, [pc, #136]	@ (8001e24 <HAL_DMA_Abort_IT+0x3ec>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01d      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a21      	ldr	r2, [pc, #132]	@ (8001e28 <HAL_DMA_Abort_IT+0x3f0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d018      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <HAL_DMA_Abort_IT+0x3f4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e30 <HAL_DMA_Abort_IT+0x3f8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00e      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e34 <HAL_DMA_Abort_IT+0x3fc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d009      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1b      	ldr	r2, [pc, #108]	@ (8001e38 <HAL_DMA_Abort_IT+0x400>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d004      	beq.n	8001dda <HAL_DMA_Abort_IT+0x3a2>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <HAL_DMA_Abort_IT+0x404>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d132      	bne.n	8001e40 <HAL_DMA_Abort_IT+0x408>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e031      	b.n	8001e42 <HAL_DMA_Abort_IT+0x40a>
 8001dde:	bf00      	nop
 8001de0:	40020010 	.word	0x40020010
 8001de4:	40020028 	.word	0x40020028
 8001de8:	40020040 	.word	0x40020040
 8001dec:	40020058 	.word	0x40020058
 8001df0:	40020070 	.word	0x40020070
 8001df4:	40020088 	.word	0x40020088
 8001df8:	400200a0 	.word	0x400200a0
 8001dfc:	400200b8 	.word	0x400200b8
 8001e00:	40020410 	.word	0x40020410
 8001e04:	40020428 	.word	0x40020428
 8001e08:	40020440 	.word	0x40020440
 8001e0c:	40020458 	.word	0x40020458
 8001e10:	40020470 	.word	0x40020470
 8001e14:	40020488 	.word	0x40020488
 8001e18:	400204a0 	.word	0x400204a0
 8001e1c:	400204b8 	.word	0x400204b8
 8001e20:	58025408 	.word	0x58025408
 8001e24:	5802541c 	.word	0x5802541c
 8001e28:	58025430 	.word	0x58025430
 8001e2c:	58025444 	.word	0x58025444
 8001e30:	58025458 	.word	0x58025458
 8001e34:	5802546c 	.word	0x5802546c
 8001e38:	58025480 	.word	0x58025480
 8001e3c:	58025494 	.word	0x58025494
 8001e40:	2300      	movs	r3, #0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d028      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2201      	movs	r2, #1
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ed2:	4b86      	ldr	r3, [pc, #536]	@ (80020ec <HAL_GPIO_Init+0x228>)
 8001ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ed6:	e18c      	b.n	80021f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 817e 	beq.w	80021ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d005      	beq.n	8001f08 <HAL_GPIO_Init+0x44>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d130      	bne.n	8001f6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f3e:	2201      	movs	r2, #1
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f003 0201 	and.w	r2, r3, #1
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d017      	beq.n	8001fa6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	2203      	movs	r2, #3
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d123      	bne.n	8001ffa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	69b9      	ldr	r1, [r7, #24]
 8001ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0203 	and.w	r2, r3, #3
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80d8 	beq.w	80021ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203c:	4b2c      	ldr	r3, [pc, #176]	@ (80020f0 <HAL_GPIO_Init+0x22c>)
 800203e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002042:	4a2b      	ldr	r2, [pc, #172]	@ (80020f0 <HAL_GPIO_Init+0x22c>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800204c:	4b28      	ldr	r3, [pc, #160]	@ (80020f0 <HAL_GPIO_Init+0x22c>)
 800204e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205a:	4a26      	ldr	r2, [pc, #152]	@ (80020f4 <HAL_GPIO_Init+0x230>)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1d      	ldr	r2, [pc, #116]	@ (80020f8 <HAL_GPIO_Init+0x234>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d04a      	beq.n	800211c <HAL_GPIO_Init+0x258>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <HAL_GPIO_Init+0x238>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d02b      	beq.n	80020e6 <HAL_GPIO_Init+0x222>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1b      	ldr	r2, [pc, #108]	@ (8002100 <HAL_GPIO_Init+0x23c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d025      	beq.n	80020e2 <HAL_GPIO_Init+0x21e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1a      	ldr	r2, [pc, #104]	@ (8002104 <HAL_GPIO_Init+0x240>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <HAL_GPIO_Init+0x21a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_GPIO_Init+0x244>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x216>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a18      	ldr	r2, [pc, #96]	@ (800210c <HAL_GPIO_Init+0x248>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x212>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HAL_GPIO_Init+0x24c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a16      	ldr	r2, [pc, #88]	@ (8002114 <HAL_GPIO_Init+0x250>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x20a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <HAL_GPIO_Init+0x254>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x206>
 80020c6:	2309      	movs	r3, #9
 80020c8:	e029      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020ca:	230a      	movs	r3, #10
 80020cc:	e027      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020ce:	2307      	movs	r3, #7
 80020d0:	e025      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020d2:	2306      	movs	r3, #6
 80020d4:	e023      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020d6:	2305      	movs	r3, #5
 80020d8:	e021      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020da:	2304      	movs	r3, #4
 80020dc:	e01f      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020de:	2303      	movs	r3, #3
 80020e0:	e01d      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e01b      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e019      	b.n	800211e <HAL_GPIO_Init+0x25a>
 80020ea:	bf00      	nop
 80020ec:	58000080 	.word	0x58000080
 80020f0:	58024400 	.word	0x58024400
 80020f4:	58000400 	.word	0x58000400
 80020f8:	58020000 	.word	0x58020000
 80020fc:	58020400 	.word	0x58020400
 8002100:	58020800 	.word	0x58020800
 8002104:	58020c00 	.word	0x58020c00
 8002108:	58021000 	.word	0x58021000
 800210c:	58021400 	.word	0x58021400
 8002110:	58021800 	.word	0x58021800
 8002114:	58021c00 	.word	0x58021c00
 8002118:	58022400 	.word	0x58022400
 800211c:	2300      	movs	r3, #0
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	f002 0203 	and.w	r2, r2, #3
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	4093      	lsls	r3, r2
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212e:	4938      	ldr	r1, [pc, #224]	@ (8002210 <HAL_GPIO_Init+0x34c>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002162:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002190:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	3301      	adds	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f47f ae6b 	bne.w	8001ed8 <HAL_GPIO_Init+0x14>
  }
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	3724      	adds	r7, #36	@ 0x24
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	58000400 	.word	0x58000400

08002214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	4613      	mov	r3, r2
 8002222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002224:	787b      	ldrb	r3, [r7, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002230:	e003      	b.n	800223a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	041a      	lsls	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002250:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d00a      	beq.n	8002272 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d001      	beq.n	800226e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e01f      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	e01d      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002272:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	490f      	ldr	r1, [pc, #60]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4313      	orrs	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002282:	f7fe ff57 	bl	8001134 <HAL_GetTick>
 8002286:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002288:	e009      	b.n	800229e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800228a:	f7fe ff53 	bl	8001134 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002298:	d901      	bls.n	800229e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e007      	b.n	80022ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_PWREx_ConfigSupply+0x70>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022aa:	d1ee      	bne.n	800228a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	58024800 	.word	0x58024800

080022bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	@ 0x30
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e3c8      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8087 	beq.w	80023ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022dc:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022e6:	4b86      	ldr	r3, [pc, #536]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d007      	beq.n	8002302 <HAL_RCC_OscConfig+0x46>
 80022f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f4:	2b18      	cmp	r3, #24
 80022f6:	d110      	bne.n	800231a <HAL_RCC_OscConfig+0x5e>
 80022f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d10b      	bne.n	800231a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002302:	4b7f      	ldr	r3, [pc, #508]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x12c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d168      	bne.n	80023e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e3a2      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x76>
 8002324:	4b76      	ldr	r3, [pc, #472]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a75      	ldr	r2, [pc, #468]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800232a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e02e      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x98>
 800233a:	4b71      	ldr	r3, [pc, #452]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a70      	ldr	r2, [pc, #448]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6e      	ldr	r3, [pc, #440]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6d      	ldr	r2, [pc, #436]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800234c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0xbc>
 800235e:	4b68      	ldr	r3, [pc, #416]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a67      	ldr	r2, [pc, #412]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b65      	ldr	r3, [pc, #404]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a64      	ldr	r2, [pc, #400]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0xd4>
 8002378:	4b61      	ldr	r3, [pc, #388]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a60      	ldr	r2, [pc, #384]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b5e      	ldr	r3, [pc, #376]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a5d      	ldr	r2, [pc, #372]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fecc 	bl	8001134 <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fe fec8 	bl	8001134 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e356      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023b2:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe4>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe feb8 	bl	8001134 <HAL_GetTick>
 80023c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7fe feb4 	bl	8001134 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	@ 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e342      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023da:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x10c>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 808c 	beq.w	8002510 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f8:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002400:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002402:	4b3f      	ldr	r3, [pc, #252]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002406:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_RCC_OscConfig+0x162>
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	2b18      	cmp	r3, #24
 8002412:	d137      	bne.n	8002484 <HAL_RCC_OscConfig+0x1c8>
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d132      	bne.n	8002484 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241e:	4b38      	ldr	r3, [pc, #224]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x17a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e314      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002436:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 0219 	bic.w	r2, r3, #25
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	492f      	ldr	r1, [pc, #188]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fe74 	bl	8001134 <HAL_GetTick>
 800244c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7fe fe70 	bl	8001134 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e2fe      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002462:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	4920      	ldr	r1, [pc, #128]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002482:	e045      	b.n	8002510 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d026      	beq.n	80024da <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800248c:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 0219 	bic.w	r2, r3, #25
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4919      	ldr	r1, [pc, #100]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe fe49 	bl	8001134 <HAL_GetTick>
 80024a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fe45 	bl	8001134 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e2d3      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	490b      	ldr	r1, [pc, #44]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	e01a      	b.n	8002510 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a08      	ldr	r2, [pc, #32]	@ (8002500 <HAL_RCC_OscConfig+0x244>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fe25 	bl	8001134 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7fe fe21 	bl	8001134 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d903      	bls.n	8002504 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e2af      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
 8002500:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002504:	4b96      	ldr	r3, [pc, #600]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d06a      	beq.n	80025f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251c:	4b90      	ldr	r3, [pc, #576]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002524:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002526:	4b8e      	ldr	r3, [pc, #568]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d007      	beq.n	8002542 <HAL_RCC_OscConfig+0x286>
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b18      	cmp	r3, #24
 8002536:	d11b      	bne.n	8002570 <HAL_RCC_OscConfig+0x2b4>
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b01      	cmp	r3, #1
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002542:	4b87      	ldr	r3, [pc, #540]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x29e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b80      	cmp	r3, #128	@ 0x80
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e282      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800255a:	4b81      	ldr	r3, [pc, #516]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	497d      	ldr	r1, [pc, #500]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800256e:	e040      	b.n	80025f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002578:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a78      	ldr	r2, [pc, #480]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800257e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fdd6 	bl	8001134 <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800258c:	f7fe fdd2 	bl	8001134 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e260      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800259e:	4b70      	ldr	r3, [pc, #448]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	4969      	ldr	r1, [pc, #420]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
 80025be:	e018      	b.n	80025f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025c0:	4b67      	ldr	r3, [pc, #412]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a66      	ldr	r2, [pc, #408]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80025c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fdb2 	bl	8001134 <HAL_GetTick>
 80025d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025d4:	f7fe fdae 	bl	8001134 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e23c      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d036      	beq.n	800266c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b56      	ldr	r3, [pc, #344]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260a:	4a55      	ldr	r2, [pc, #340]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fd8f 	bl	8001134 <HAL_GetTick>
 8002616:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261a:	f7fe fd8b 	bl	8001134 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e219      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800262c:	4b4c      	ldr	r3, [pc, #304]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x35e>
 8002638:	e018      	b.n	800266c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263a:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	4a48      	ldr	r2, [pc, #288]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fd75 	bl	8001134 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe fd71 	bl	8001134 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1ff      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002660:	4b3f      	ldr	r3, [pc, #252]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d036      	beq.n	80026e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d019      	beq.n	80026b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002680:	4b37      	ldr	r3, [pc, #220]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a36      	ldr	r2, [pc, #216]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002686:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800268a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800268c:	f7fe fd52 	bl	8001134 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002694:	f7fe fd4e 	bl	8001134 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1dc      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x3d8>
 80026b2:	e018      	b.n	80026e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a29      	ldr	r2, [pc, #164]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80026ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026c0:	f7fe fd38 	bl	8001134 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c8:	f7fe fd34 	bl	8001134 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1c2      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026da:	4b21      	ldr	r3, [pc, #132]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8086 	beq.w	8002800 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x4a8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002764 <HAL_RCC_OscConfig+0x4a8>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002700:	f7fe fd18 	bl	8001134 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fd14 	bl	8001134 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1a2      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <HAL_RCC_OscConfig+0x4a8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d106      	bne.n	800273c <HAL_RCC_OscConfig+0x480>
 800272e:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6713      	str	r3, [r2, #112]	@ 0x70
 800273a:	e032      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_RCC_OscConfig+0x4ac>
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002750:	4b03      	ldr	r3, [pc, #12]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002754:	4a02      	ldr	r2, [pc, #8]	@ (8002760 <HAL_RCC_OscConfig+0x4a4>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	6713      	str	r3, [r2, #112]	@ 0x70
 800275c:	e021      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e6>
 800275e:	bf00      	nop
 8002760:	58024400 	.word	0x58024400
 8002764:	58024800 	.word	0x58024800
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x4ce>
 8002770:	4b83      	ldr	r3, [pc, #524]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a82      	ldr	r2, [pc, #520]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	4b80      	ldr	r3, [pc, #512]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a7f      	ldr	r2, [pc, #508]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
 8002788:	e00b      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e6>
 800278a:	4b7d      	ldr	r3, [pc, #500]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	4a7c      	ldr	r2, [pc, #496]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	@ 0x70
 8002796:	4b7a      	ldr	r3, [pc, #488]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	4a79      	ldr	r2, [pc, #484]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d015      	beq.n	80027d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe fcc3 	bl	8001134 <HAL_GetTick>
 80027ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7fe fcbf 	bl	8001134 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e14b      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ee      	beq.n	80027b2 <HAL_RCC_OscConfig+0x4f6>
 80027d4:	e014      	b.n	8002800 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7fe fcad 	bl	8001134 <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027dc:	e00a      	b.n	80027f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe fca9 	bl	8001134 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e135      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027f4:	4b62      	ldr	r3, [pc, #392]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ee      	bne.n	80027de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 812a 	beq.w	8002a5e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800280a:	4b5d      	ldr	r3, [pc, #372]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002812:	2b18      	cmp	r3, #24
 8002814:	f000 80ba 	beq.w	800298c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	2b02      	cmp	r3, #2
 800281e:	f040 8095 	bne.w	800294c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a56      	ldr	r2, [pc, #344]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002828:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fc81 	bl	8001134 <HAL_GetTick>
 8002832:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002836:	f7fe fc7d 	bl	8001134 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e10b      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002848:	4b4d      	ldr	r3, [pc, #308]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b4a      	ldr	r3, [pc, #296]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002858:	4b4a      	ldr	r3, [pc, #296]	@ (8002984 <HAL_RCC_OscConfig+0x6c8>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	430a      	orrs	r2, r1
 8002868:	4945      	ldr	r1, [pc, #276]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	628b      	str	r3, [r1, #40]	@ 0x28
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	3b01      	subs	r3, #1
 8002874:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287c:	3b01      	subs	r3, #1
 800287e:	025b      	lsls	r3, r3, #9
 8002880:	b29b      	uxth	r3, r3
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002888:	3b01      	subs	r3, #1
 800288a:	041b      	lsls	r3, r3, #16
 800288c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002896:	3b01      	subs	r3, #1
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800289e:	4938      	ldr	r1, [pc, #224]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028a4:	4b36      	ldr	r3, [pc, #216]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a8:	4a35      	ldr	r2, [pc, #212]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028b0:	4b33      	ldr	r3, [pc, #204]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028b4:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_RCC_OscConfig+0x6cc>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028bc:	00d2      	lsls	r2, r2, #3
 80028be:	4930      	ldr	r1, [pc, #192]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f023 020c 	bic.w	r2, r3, #12
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	492b      	ldr	r1, [pc, #172]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f023 0202 	bic.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	4927      	ldr	r1, [pc, #156]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028f4:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f8:	4a21      	ldr	r2, [pc, #132]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 80028fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002900:	4b1f      	ldr	r3, [pc, #124]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002906:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800290a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800290c:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	4a1b      	ldr	r2, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002918:	4b19      	ldr	r3, [pc, #100]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a18      	ldr	r2, [pc, #96]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fc06 	bl	8001134 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fc02 	bl	8001134 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e090      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x670>
 800294a:	e088      	b.n	8002a5e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fbec 	bl	8001134 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fbe8 	bl	8001134 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e076      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002972:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_RCC_OscConfig+0x6c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x6a4>
 800297e:	e06e      	b.n	8002a5e <HAL_RCC_OscConfig+0x7a2>
 8002980:	58024400 	.word	0x58024400
 8002984:	fffffc0c 	.word	0xfffffc0c
 8002988:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800298c:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002992:	4b35      	ldr	r3, [pc, #212]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	2b01      	cmp	r3, #1
 800299e:	d031      	beq.n	8002a04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d12a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d122      	bne.n	8002a04 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d11a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0a5b      	lsrs	r3, r3, #9
 80029d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d111      	bne.n	8002a04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	0e1b      	lsrs	r3, r3, #24
 80029f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e02b      	b.n	8002a60 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a08:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d01f      	beq.n	8002a5e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a1e:	4b12      	ldr	r3, [pc, #72]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	4a11      	ldr	r2, [pc, #68]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a2a:	f7fe fb83 	bl	8001134 <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a30:	bf00      	nop
 8002a32:	f7fe fb7f 	bl	8001134 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d0f9      	beq.n	8002a32 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_RCC_OscConfig+0x7b0>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a4a:	00d2      	lsls	r2, r2, #3
 8002a4c:	4906      	ldr	r1, [pc, #24]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a52:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	4a04      	ldr	r2, [pc, #16]	@ (8002a68 <HAL_RCC_OscConfig+0x7ac>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3730      	adds	r7, #48	@ 0x30
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	58024400 	.word	0x58024400
 8002a6c:	ffff0007 	.word	0xffff0007

08002a70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e19c      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b8a      	ldr	r3, [pc, #552]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d910      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b87      	ldr	r3, [pc, #540]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 020f 	bic.w	r2, r3, #15
 8002a9a:	4985      	ldr	r1, [pc, #532]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b83      	ldr	r3, [pc, #524]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e184      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d908      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ad0:	4b78      	ldr	r3, [pc, #480]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	4975      	ldr	r1, [pc, #468]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	4b70      	ldr	r3, [pc, #448]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d908      	bls.n	8002b10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002afe:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	496a      	ldr	r1, [pc, #424]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	4b64      	ldr	r3, [pc, #400]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d908      	bls.n	8002b3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b2c:	4b61      	ldr	r3, [pc, #388]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	495e      	ldr	r1, [pc, #376]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	4b59      	ldr	r3, [pc, #356]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d908      	bls.n	8002b6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b5a:	4b56      	ldr	r3, [pc, #344]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4953      	ldr	r1, [pc, #332]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d908      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f023 020f 	bic.w	r2, r3, #15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4947      	ldr	r1, [pc, #284]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d055      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ba6:	4b43      	ldr	r3, [pc, #268]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4940      	ldr	r1, [pc, #256]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d121      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0f6      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bd8:	4b36      	ldr	r3, [pc, #216]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d115      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0ea      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0de      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c00:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0d6      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c10:	4b28      	ldr	r3, [pc, #160]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4925      	ldr	r1, [pc, #148]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c22:	f7fe fa87 	bl	8001134 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2a:	f7fe fa83 	bl	8001134 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0be      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c40:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d1eb      	bne.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b14      	ldr	r3, [pc, #80]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d208      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6e:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	490e      	ldr	r1, [pc, #56]	@ (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d214      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 020f 	bic.w	r2, r3, #15
 8002c96:	4906      	ldr	r1, [pc, #24]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e086      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
 8002cb0:	52002000 	.word	0x52002000
 8002cb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d208      	bcs.n	8002ce6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	4939      	ldr	r1, [pc, #228]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	4b34      	ldr	r3, [pc, #208]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d208      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d02:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	492e      	ldr	r1, [pc, #184]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d208      	bcs.n	8002d42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4922      	ldr	r1, [pc, #136]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d208      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4917      	ldr	r1, [pc, #92]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d70:	f000 f834 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	4912      	ldr	r1, [pc, #72]	@ (8002dcc <HAL_RCC_ClockConfig+0x35c>)
 8002d82:	5ccb      	ldrb	r3, [r1, r3]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <HAL_RCC_ClockConfig+0x35c>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <HAL_RCC_ClockConfig+0x360>)
 8002da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002da8:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <HAL_RCC_ClockConfig+0x364>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_RCC_ClockConfig+0x368>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd ff74 	bl	8000ca0 <HAL_InitTick>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	0800a71c 	.word	0x0800a71c
 8002dd0:	24000004 	.word	0x24000004
 8002dd4:	24000000 	.word	0x24000000
 8002dd8:	24000008 	.word	0x24000008

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	@ 0x24
 8002de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de2:	4bb3      	ldr	r3, [pc, #716]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dea:	2b18      	cmp	r3, #24
 8002dec:	f200 8155 	bhi.w	800309a <HAL_RCC_GetSysClockFreq+0x2be>
 8002df0:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e5d 	.word	0x08002e5d
 8002dfc:	0800309b 	.word	0x0800309b
 8002e00:	0800309b 	.word	0x0800309b
 8002e04:	0800309b 	.word	0x0800309b
 8002e08:	0800309b 	.word	0x0800309b
 8002e0c:	0800309b 	.word	0x0800309b
 8002e10:	0800309b 	.word	0x0800309b
 8002e14:	0800309b 	.word	0x0800309b
 8002e18:	08002e83 	.word	0x08002e83
 8002e1c:	0800309b 	.word	0x0800309b
 8002e20:	0800309b 	.word	0x0800309b
 8002e24:	0800309b 	.word	0x0800309b
 8002e28:	0800309b 	.word	0x0800309b
 8002e2c:	0800309b 	.word	0x0800309b
 8002e30:	0800309b 	.word	0x0800309b
 8002e34:	0800309b 	.word	0x0800309b
 8002e38:	08002e89 	.word	0x08002e89
 8002e3c:	0800309b 	.word	0x0800309b
 8002e40:	0800309b 	.word	0x0800309b
 8002e44:	0800309b 	.word	0x0800309b
 8002e48:	0800309b 	.word	0x0800309b
 8002e4c:	0800309b 	.word	0x0800309b
 8002e50:	0800309b 	.word	0x0800309b
 8002e54:	0800309b 	.word	0x0800309b
 8002e58:	08002e8f 	.word	0x08002e8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e5c:	4b94      	ldr	r3, [pc, #592]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e68:	4b91      	ldr	r3, [pc, #580]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	4a90      	ldr	r2, [pc, #576]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e7a:	e111      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e7c:	4b8d      	ldr	r3, [pc, #564]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e7e:	61bb      	str	r3, [r7, #24]
      break;
 8002e80:	e10e      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e82:	4b8d      	ldr	r3, [pc, #564]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e84:	61bb      	str	r3, [r7, #24]
      break;
 8002e86:	e10b      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e88:	4b8c      	ldr	r3, [pc, #560]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e8a:	61bb      	str	r3, [r7, #24]
      break;
 8002e8c:	e108      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e8e:	4b88      	ldr	r3, [pc, #544]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e98:	4b85      	ldr	r3, [pc, #532]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ea2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ea4:	4b82      	ldr	r3, [pc, #520]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002eae:	4b80      	ldr	r3, [pc, #512]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	08db      	lsrs	r3, r3, #3
 8002eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80e1 	beq.w	8003094 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	f000 8083 	beq.w	8002fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	f200 80a1 	bhi.w	8003024 <HAL_RCC_GetSysClockFreq+0x248>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d056      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002eee:	e099      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02d      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002efc:	4b6c      	ldr	r3, [pc, #432]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	4a6b      	ldr	r2, [pc, #428]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f26:	4b62      	ldr	r3, [pc, #392]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f56:	e087      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f6a:	4b51      	ldr	r3, [pc, #324]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f9a:	e065      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80030c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fae:	4b40      	ldr	r3, [pc, #256]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fde:	e043      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80030cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003002:	ed97 6a02 	vldr	s12, [r7, #8]
 8003006:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800300a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003022:	e021      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80030c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003036:	4b1e      	ldr	r3, [pc, #120]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003046:	ed97 6a02 	vldr	s12, [r7, #8]
 800304a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800304e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800305a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800305e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003066:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003068:	4b11      	ldr	r3, [pc, #68]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	0a5b      	lsrs	r3, r3, #9
 800306e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003072:	3301      	adds	r3, #1
 8003074:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003080:	edd7 6a07 	vldr	s13, [r7, #28]
 8003084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308c:	ee17 3a90 	vmov	r3, s15
 8003090:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003092:	e005      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
      break;
 8003098:	e002      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800309a:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800309c:	61bb      	str	r3, [r7, #24]
      break;
 800309e:	bf00      	nop
  }

  return sysclockfreq;
 80030a0:	69bb      	ldr	r3, [r7, #24]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	@ 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	58024400 	.word	0x58024400
 80030b4:	03d09000 	.word	0x03d09000
 80030b8:	003d0900 	.word	0x003d0900
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	46000000 	.word	0x46000000
 80030c4:	4c742400 	.word	0x4c742400
 80030c8:	4a742400 	.word	0x4a742400
 80030cc:	4af42400 	.word	0x4af42400

080030d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030d6:	f7ff fe81 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <HAL_RCC_GetHCLKFreq+0x50>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490f      	ldr	r1, [pc, #60]	@ (8003124 <HAL_RCC_GetHCLKFreq+0x54>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <HAL_RCC_GetHCLKFreq+0x50>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <HAL_RCC_GetHCLKFreq+0x54>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a07      	ldr	r2, [pc, #28]	@ (8003128 <HAL_RCC_GetHCLKFreq+0x58>)
 800310c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800310e:	4a07      	ldr	r2, [pc, #28]	@ (800312c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003114:	4b04      	ldr	r3, [pc, #16]	@ (8003128 <HAL_RCC_GetHCLKFreq+0x58>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58024400 	.word	0x58024400
 8003124:	0800a71c 	.word	0x0800a71c
 8003128:	24000004 	.word	0x24000004
 800312c:	24000000 	.word	0x24000000

08003130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003134:	f7ff ffcc 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_RCC_GetPCLK1Freq+0x24>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4904      	ldr	r1, [pc, #16]	@ (8003158 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58024400 	.word	0x58024400
 8003158:	0800a71c 	.word	0x0800a71c

0800315c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003160:	f7ff ffb6 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003164:	4602      	mov	r2, r0
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	4904      	ldr	r1, [pc, #16]	@ (8003184 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003172:	5ccb      	ldrb	r3, [r1, r3]
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	58024400 	.word	0x58024400
 8003184:	0800a71c 	.word	0x0800a71c

08003188 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	223f      	movs	r2, #63	@ 0x3f
 8003196:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <HAL_RCC_GetClockConfig+0x7c>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f003 0207 	and.w	r2, r3, #7
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80031a4:	4b17      	ldr	r3, [pc, #92]	@ (8003204 <HAL_RCC_GetClockConfig+0x7c>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80031b0:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <HAL_RCC_GetClockConfig+0x7c>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 020f 	and.w	r2, r3, #15
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <HAL_RCC_GetClockConfig+0x7c>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <HAL_RCC_GetClockConfig+0x7c>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003204 <HAL_RCC_GetClockConfig+0x7c>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <HAL_RCC_GetClockConfig+0x7c>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_RCC_GetClockConfig+0x80>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	601a      	str	r2, [r3, #0]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	58024400 	.word	0x58024400
 8003208:	52002000 	.word	0x52002000

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b0c6      	sub	sp, #280	@ 0x118
 8003212:	af00      	add	r7, sp, #0
 8003214:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003230:	2500      	movs	r5, #0
 8003232:	ea54 0305 	orrs.w	r3, r4, r5
 8003236:	d049      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800323e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003242:	d02f      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003244:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003248:	d828      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800324a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800324e:	d01a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003254:	d822      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325e:	d007      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003260:	e01c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003262:	4bab      	ldr	r3, [pc, #684]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	4aaa      	ldr	r2, [pc, #680]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800326e:	e01a      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003274:	3308      	adds	r3, #8
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f001 fc25 	bl	8004ac8 <RCCEx_PLL2_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003284:	e00f      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800328a:	3328      	adds	r3, #40	@ 0x28
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fccc 	bl	8004c2c <RCCEx_PLL3_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032ae:	4b98      	ldr	r3, [pc, #608]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032bc:	4a94      	ldr	r2, [pc, #592]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032be:	430b      	orrs	r3, r1
 80032c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80032c2:	e003      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032d8:	f04f 0900 	mov.w	r9, #0
 80032dc:	ea58 0309 	orrs.w	r3, r8, r9
 80032e0:	d047      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d82a      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003309 	.word	0x08003309
 80032f8:	08003317 	.word	0x08003317
 80032fc:	0800332d 	.word	0x0800332d
 8003300:	0800334b 	.word	0x0800334b
 8003304:	0800334b 	.word	0x0800334b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003308:	4b81      	ldr	r3, [pc, #516]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	4a80      	ldr	r2, [pc, #512]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800330e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003314:	e01a      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331a:	3308      	adds	r3, #8
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fbd2 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800332a:	e00f      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003330:	3328      	adds	r3, #40	@ 0x28
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fc79 	bl	8004c2c <RCCEx_PLL3_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003340:	e004      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003354:	4b6e      	ldr	r3, [pc, #440]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	f023 0107 	bic.w	r1, r3, #7
 800335c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	4a6b      	ldr	r2, [pc, #428]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003364:	430b      	orrs	r3, r1
 8003366:	6513      	str	r3, [r2, #80]	@ 0x50
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800336e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800337e:	f04f 0b00 	mov.w	fp, #0
 8003382:	ea5a 030b 	orrs.w	r3, sl, fp
 8003386:	d05b      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003390:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003394:	d03b      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003396:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800339a:	d834      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800339c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a0:	d037      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a6:	d82e      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033ac:	d033      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033b2:	d828      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b8:	d01a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033be:	d822      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80033c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c8:	d007      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80033ca:	e01c      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033cc:	4b50      	ldr	r3, [pc, #320]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033d8:	e01e      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033de:	3308      	adds	r3, #8
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 fb70 	bl	8004ac8 <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033ee:	e013      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f4:	3328      	adds	r3, #40	@ 0x28
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 fc17 	bl	8004c2c <RCCEx_PLL3_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003404:	e008      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800340c:	e004      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800340e:	bf00      	nop
 8003410:	e002      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003418:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003420:	4b3b      	ldr	r3, [pc, #236]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800342c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003430:	4a37      	ldr	r2, [pc, #220]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6593      	str	r3, [r2, #88]	@ 0x58
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800343c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800344c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003456:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d05d      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003464:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003468:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800346c:	d03b      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800346e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003472:	d834      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003474:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003478:	d037      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800347a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800347e:	d82e      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003480:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003484:	d033      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003486:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800348a:	d828      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800348c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003490:	d01a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003496:	d822      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a0:	d007      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80034a2:	e01c      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	4a19      	ldr	r2, [pc, #100]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b0:	e01e      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b6:	3308      	adds	r3, #8
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fb04 	bl	8004ac8 <RCCEx_PLL2_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034c6:	e013      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034cc:	3328      	adds	r3, #40	@ 0x28
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 fbab 	bl	8004c2c <RCCEx_PLL3_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034dc:	e008      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034e4:	e004      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80034e6:	bf00      	nop
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80034ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003504:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003508:	4a01      	ldr	r2, [pc, #4]	@ (8003510 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800350a:	430b      	orrs	r3, r1
 800350c:	6593      	str	r3, [r2, #88]	@ 0x58
 800350e:	e005      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800351c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003528:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003532:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	d03a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800353c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003542:	2b30      	cmp	r3, #48	@ 0x30
 8003544:	d01f      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003546:	2b30      	cmp	r3, #48	@ 0x30
 8003548:	d819      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800354a:	2b20      	cmp	r3, #32
 800354c:	d00c      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800354e:	2b20      	cmp	r3, #32
 8003550:	d815      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d019      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003556:	2b10      	cmp	r3, #16
 8003558:	d111      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4baa      	ldr	r3, [pc, #680]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	4aa9      	ldr	r2, [pc, #676]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003566:	e011      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800356c:	3308      	adds	r3, #8
 800356e:	2102      	movs	r1, #2
 8003570:	4618      	mov	r0, r3
 8003572:	f001 faa9 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800358a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003594:	4b9b      	ldr	r3, [pc, #620]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003598:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	4a98      	ldr	r2, [pc, #608]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80035be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80035c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80035cc:	460b      	mov	r3, r1
 80035ce:	4313      	orrs	r3, r2
 80035d0:	d051      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035dc:	d035      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80035de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035e2:	d82e      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035e8:	d031      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80035ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035ee:	d828      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f4:	d01a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fa:	d822      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003604:	d007      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003606:	e01c      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003608:	4b7e      	ldr	r3, [pc, #504]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	4a7d      	ldr	r2, [pc, #500]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800360e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003614:	e01c      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361a:	3308      	adds	r3, #8
 800361c:	2100      	movs	r1, #0
 800361e:	4618      	mov	r0, r3
 8003620:	f001 fa52 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800362a:	e011      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800362c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003630:	3328      	adds	r3, #40	@ 0x28
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f001 faf9 	bl	8004c2c <RCCEx_PLL3_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800364e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003650:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003658:	4b6a      	ldr	r3, [pc, #424]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800365a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003666:	4a67      	ldr	r2, [pc, #412]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003668:	430b      	orrs	r3, r1
 800366a:	6513      	str	r3, [r2, #80]	@ 0x50
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003672:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003682:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800368c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003690:	460b      	mov	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	d053      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a0:	d033      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80036a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a6:	d82c      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036ac:	d02f      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80036ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036b2:	d826      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036b8:	d02b      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036be:	d820      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036c4:	d012      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80036c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ca:	d81a      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d022      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d4:	d115      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036da:	3308      	adds	r3, #8
 80036dc:	2101      	movs	r1, #1
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 f9f2 	bl	8004ac8 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036ea:	e015      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f0:	3328      	adds	r3, #40	@ 0x28
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 fa99 	bl	8004c2c <RCCEx_PLL3_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003700:	e00a      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800370a:	bf00      	nop
 800370c:	e004      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003720:	4b38      	ldr	r3, [pc, #224]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372e:	4a35      	ldr	r2, [pc, #212]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003730:	430b      	orrs	r3, r1
 8003732:	6513      	str	r3, [r2, #80]	@ 0x50
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800373a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800373e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800374a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003754:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d058      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800375e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003762:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800376a:	d033      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800376c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003770:	d82c      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003776:	d02f      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d826      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800377e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003782:	d02b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003784:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003788:	d820      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800378a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378e:	d012      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003794:	d81a      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d022      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800379a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800379e:	d115      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a4:	3308      	adds	r3, #8
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 f98d 	bl	8004ac8 <RCCEx_PLL2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037b4:	e015      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ba:	3328      	adds	r3, #40	@ 0x28
 80037bc:	2101      	movs	r1, #1
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 fa34 	bl	8004c2c <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037ca:	e00a      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037d2:	e006      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037d4:	bf00      	nop
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037d8:	bf00      	nop
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037dc:	bf00      	nop
 80037de:	e000      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10e      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037fa:	4a02      	ldr	r2, [pc, #8]	@ (8003804 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	e006      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003802:	bf00      	nop
 8003804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800380c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800381c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003826:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	d037      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800383a:	d00e      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800383c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003840:	d816      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d018      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003846:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384a:	d111      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384c:	4bc4      	ldr	r3, [pc, #784]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	4ac3      	ldr	r2, [pc, #780]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003858:	e00f      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800385a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800385e:	3308      	adds	r3, #8
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f930 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800386e:	e004      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003876:	e000      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003882:	4bb7      	ldr	r3, [pc, #732]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003886:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800388a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003890:	4ab3      	ldr	r2, [pc, #716]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003892:	430b      	orrs	r3, r1
 8003894:	6513      	str	r3, [r2, #80]	@ 0x50
 8003896:	e003      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800389c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80038ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d039      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d81c      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80038ca:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	0800390d 	.word	0x0800390d
 80038d4:	080038e1 	.word	0x080038e1
 80038d8:	080038ef 	.word	0x080038ef
 80038dc:	0800390d 	.word	0x0800390d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e0:	4b9f      	ldr	r3, [pc, #636]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	4a9e      	ldr	r2, [pc, #632]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038ec:	e00f      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f2:	3308      	adds	r3, #8
 80038f4:	2102      	movs	r1, #2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f8e6 	bl	8004ac8 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003902:	e004      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800390c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003916:	4b92      	ldr	r3, [pc, #584]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	f023 0103 	bic.w	r1, r3, #3
 800391e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	4a8e      	ldr	r2, [pc, #568]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003926:	430b      	orrs	r3, r1
 8003928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800392a:	e003      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003930:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003940:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800394a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800394e:	460b      	mov	r3, r1
 8003950:	4313      	orrs	r3, r2
 8003952:	f000 8099 	beq.w	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003956:	4b83      	ldr	r3, [pc, #524]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a82      	ldr	r2, [pc, #520]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003960:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003962:	f7fd fbe7 	bl	8001134 <HAL_GetTick>
 8003966:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800396a:	e00b      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd fbe2 	bl	8001134 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	@ 0x64
 800397a:	d903      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003982:	e005      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003984:	4b77      	ldr	r3, [pc, #476]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ed      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003994:	2b00      	cmp	r3, #0
 8003996:	d173      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003998:	4b71      	ldr	r3, [pc, #452]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800399a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039a4:	4053      	eors	r3, r2
 80039a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d015      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039ba:	4b69      	ldr	r3, [pc, #420]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039be:	4a68      	ldr	r2, [pc, #416]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039c6:	4b66      	ldr	r3, [pc, #408]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	4a65      	ldr	r2, [pc, #404]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039d2:	4a63      	ldr	r2, [pc, #396]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e6:	d118      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fba4 	bl	8001134 <HAL_GetTick>
 80039ec:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039f0:	e00d      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fd fb9f 	bl	8001134 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80039fc:	1ad2      	subs	r2, r2, r3
 80039fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d903      	bls.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003a0c:	e005      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a0e:	4b54      	ldr	r3, [pc, #336]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0eb      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d129      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a32:	d10e      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003a34:	4b4a      	ldr	r3, [pc, #296]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a44:	091a      	lsrs	r2, r3, #4
 8003a46:	4b48      	ldr	r3, [pc, #288]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	4a45      	ldr	r2, [pc, #276]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6113      	str	r3, [r2, #16]
 8003a50:	e005      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003a52:	4b43      	ldr	r3, [pc, #268]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	4a42      	ldr	r2, [pc, #264]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a5c:	6113      	str	r3, [r2, #16]
 8003a5e:	4b40      	ldr	r3, [pc, #256]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a60:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a74:	e008      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 0301 	and.w	r3, r2, #1
 8003a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f000 808f 	beq.w	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ab0:	2b28      	cmp	r3, #40	@ 0x28
 8003ab2:	d871      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8003abc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003ba1 	.word	0x08003ba1
 8003ac0:	08003b99 	.word	0x08003b99
 8003ac4:	08003b99 	.word	0x08003b99
 8003ac8:	08003b99 	.word	0x08003b99
 8003acc:	08003b99 	.word	0x08003b99
 8003ad0:	08003b99 	.word	0x08003b99
 8003ad4:	08003b99 	.word	0x08003b99
 8003ad8:	08003b99 	.word	0x08003b99
 8003adc:	08003b6d 	.word	0x08003b6d
 8003ae0:	08003b99 	.word	0x08003b99
 8003ae4:	08003b99 	.word	0x08003b99
 8003ae8:	08003b99 	.word	0x08003b99
 8003aec:	08003b99 	.word	0x08003b99
 8003af0:	08003b99 	.word	0x08003b99
 8003af4:	08003b99 	.word	0x08003b99
 8003af8:	08003b99 	.word	0x08003b99
 8003afc:	08003b83 	.word	0x08003b83
 8003b00:	08003b99 	.word	0x08003b99
 8003b04:	08003b99 	.word	0x08003b99
 8003b08:	08003b99 	.word	0x08003b99
 8003b0c:	08003b99 	.word	0x08003b99
 8003b10:	08003b99 	.word	0x08003b99
 8003b14:	08003b99 	.word	0x08003b99
 8003b18:	08003b99 	.word	0x08003b99
 8003b1c:	08003ba1 	.word	0x08003ba1
 8003b20:	08003b99 	.word	0x08003b99
 8003b24:	08003b99 	.word	0x08003b99
 8003b28:	08003b99 	.word	0x08003b99
 8003b2c:	08003b99 	.word	0x08003b99
 8003b30:	08003b99 	.word	0x08003b99
 8003b34:	08003b99 	.word	0x08003b99
 8003b38:	08003b99 	.word	0x08003b99
 8003b3c:	08003ba1 	.word	0x08003ba1
 8003b40:	08003b99 	.word	0x08003b99
 8003b44:	08003b99 	.word	0x08003b99
 8003b48:	08003b99 	.word	0x08003b99
 8003b4c:	08003b99 	.word	0x08003b99
 8003b50:	08003b99 	.word	0x08003b99
 8003b54:	08003b99 	.word	0x08003b99
 8003b58:	08003b99 	.word	0x08003b99
 8003b5c:	08003ba1 	.word	0x08003ba1
 8003b60:	58024400 	.word	0x58024400
 8003b64:	58024800 	.word	0x58024800
 8003b68:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b70:	3308      	adds	r3, #8
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 ffa7 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b80:	e00f      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b86:	3328      	adds	r3, #40	@ 0x28
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f84e 	bl	8004c2c <RCCEx_PLL3_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b96:	e004      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003baa:	4bbf      	ldr	r3, [pc, #764]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb8:	4abb      	ldr	r2, [pc, #748]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bbe:	e003      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f002 0302 	and.w	r3, r2, #2
 8003bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bde:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4313      	orrs	r3, r2
 8003be6:	d041      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d824      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c45 	.word	0x08003c45
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c27 	.word	0x08003c27
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c45 	.word	0x08003c45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c14:	3308      	adds	r3, #8
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ff55 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c24:	e00f      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2a:	3328      	adds	r3, #40	@ 0x28
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fffc 	bl	8004c2c <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c4e:	4b96      	ldr	r3, [pc, #600]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c52:	f023 0107 	bic.w	r1, r3, #7
 8003c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c5c:	4a92      	ldr	r2, [pc, #584]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 0304 	and.w	r3, r2, #4
 8003c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c82:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d044      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	2b05      	cmp	r3, #5
 8003c96:	d825      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003c98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003ced 	.word	0x08003ced
 8003ca4:	08003cb9 	.word	0x08003cb9
 8003ca8:	08003ccf 	.word	0x08003ccf
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003ced 	.word	0x08003ced
 8003cb4:	08003ced 	.word	0x08003ced
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 ff01 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00f      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd2:	3328      	adds	r3, #40	@ 0x28
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 ffa8 	bl	8004c2c <RCCEx_PLL3_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e004      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	f023 0107 	bic.w	r1, r3, #7
 8003cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d06:	4a68      	ldr	r2, [pc, #416]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f002 0320 	and.w	r3, r2, #32
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4313      	orrs	r3, r2
 8003d34:	d055      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d42:	d033      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d48:	d82c      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4e:	d02f      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d54:	d826      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d5a:	d02b      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003d5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d60:	d820      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d66:	d012      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003d68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d6c:	d81a      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d022      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003d72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d76:	d115      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fea1 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d8c:	e015      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d92:	3328      	adds	r3, #40	@ 0x28
 8003d94:	2102      	movs	r1, #2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 ff48 	bl	8004c2c <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003da2:	e00a      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003daa:	e006      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003dac:	bf00      	nop
 8003dae:	e004      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dc2:	4b39      	ldr	r3, [pc, #228]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dd2:	4a35      	ldr	r2, [pc, #212]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dd8:	e003      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003dee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003df2:	2300      	movs	r3, #0
 8003df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003df8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	d058      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e0e:	d033      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003e10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e14:	d82c      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1a:	d02f      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e20:	d826      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e26:	d02b      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e2c:	d820      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e32:	d012      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e38:	d81a      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d022      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e42:	d115      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e48:	3308      	adds	r3, #8
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fe3b 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e58:	e015      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5e:	3328      	adds	r3, #40	@ 0x28
 8003e60:	2102      	movs	r1, #2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fee2 	bl	8004c2c <RCCEx_PLL3_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e76:	e006      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e78:	bf00      	nop
 8003e7a:	e004      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e002      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e80:	bf00      	nop
 8003e82:	e000      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10e      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e9e:	4a02      	ldr	r2, [pc, #8]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003ea6:	bf00      	nop
 8003ea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d055      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003edc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ee0:	d033      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003ee2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ee6:	d82c      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eec:	d02f      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ef2:	d826      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ef4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ef8:	d02b      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003efa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003efe:	d820      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f04:	d012      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f0a:	d81a      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d022      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f14:	d115      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fdd2 	bl	8004ac8 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f2a:	e015      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f30:	3328      	adds	r3, #40	@ 0x28
 8003f32:	2102      	movs	r1, #2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fe79 	bl	8004c2c <RCCEx_PLL3_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f40:	e00a      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e004      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f60:	4ba0      	ldr	r3, [pc, #640]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f70:	4a9c      	ldr	r2, [pc, #624]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f72:	430b      	orrs	r3, r1
 8003f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f76:	e003      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f002 0308 	and.w	r3, r2, #8
 8003f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f96:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	d01e      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb2:	3328      	adds	r3, #40	@ 0x28
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fe38 	bl	8004c2c <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003fc8:	4b86      	ldr	r3, [pc, #536]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fcc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fd8:	4a82      	ldr	r2, [pc, #520]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f002 0310 	and.w	r3, r2, #16
 8003fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ff4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d01e      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800400a:	d10c      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800400c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004010:	3328      	adds	r3, #40	@ 0x28
 8004012:	2102      	movs	r1, #2
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fe09 	bl	8004c2c <RCCEx_PLL3_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004026:	4b6f      	ldr	r3, [pc, #444]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800402e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004036:	4a6b      	ldr	r2, [pc, #428]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004038:	430b      	orrs	r3, r1
 800403a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800404a:	2300      	movs	r3, #0
 800404c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800404e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004052:	460b      	mov	r3, r1
 8004054:	4313      	orrs	r3, r2
 8004056:	d03e      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800405c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004064:	d022      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800406a:	d81b      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004074:	d00b      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004076:	e015      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	3308      	adds	r3, #8
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fd21 	bl	8004ac8 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800408c:	e00f      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800408e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004092:	3328      	adds	r3, #40	@ 0x28
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fdc8 	bl	8004c2c <RCCEx_PLL3_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80040ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b6:	4b4b      	ldr	r3, [pc, #300]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040c6:	4a47      	ldr	r2, [pc, #284]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	e003      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80040e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80040e4:	2300      	movs	r3, #0
 80040e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80040e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80040f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040fe:	d01f      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004100:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004104:	d818      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800410c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004110:	d007      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004112:	e011      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004114:	4b33      	ldr	r3, [pc, #204]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	4a32      	ldr	r2, [pc, #200]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800411e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004126:	3328      	adds	r3, #40	@ 0x28
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fd7e 	bl	8004c2c <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415a:	4a22      	ldr	r2, [pc, #136]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800415c:	430b      	orrs	r3, r1
 800415e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004166:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800416a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004178:	2300      	movs	r3, #0
 800417a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d034      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004194:	d007      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004196:	e011      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004198:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	4a11      	ldr	r2, [pc, #68]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800419e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041a4:	e00e      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	3308      	adds	r3, #8
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fc8a 	bl	8004ac8 <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041ba:	e003      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041da:	4a02      	ldr	r2, [pc, #8]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80041fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041fe:	2300      	movs	r3, #0
 8004200:	667b      	str	r3, [r7, #100]	@ 0x64
 8004202:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d00c      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004210:	3328      	adds	r3, #40	@ 0x28
 8004212:	2102      	movs	r1, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fd09 	bl	8004c2c <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004232:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004234:	2300      	movs	r3, #0
 8004236:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004238:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d036      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424c:	d018      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800424e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004252:	d811      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004258:	d014      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800425a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800425e:	d80b      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d011      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004268:	d106      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426a:	4bb7      	ldr	r3, [pc, #732]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	4ab6      	ldr	r2, [pc, #728]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004274:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004276:	e008      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800427e:	e004      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004292:	4bad      	ldr	r3, [pc, #692]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004296:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800429a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800429e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042a0:	4aa9      	ldr	r2, [pc, #676]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042a2:	430b      	orrs	r3, r1
 80042a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80042a6:	e003      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80042be:	2300      	movs	r3, #0
 80042c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80042c6:	460b      	mov	r3, r1
 80042c8:	4313      	orrs	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042cc:	4b9e      	ldr	r3, [pc, #632]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80042d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	4a9b      	ldr	r2, [pc, #620]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042dc:	430b      	orrs	r3, r1
 80042de:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80042ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042ee:	2300      	movs	r3, #0
 80042f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80042f6:	460b      	mov	r3, r1
 80042f8:	4313      	orrs	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042fc:	4b92      	ldr	r3, [pc, #584]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004300:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800430a:	4a8f      	ldr	r2, [pc, #572]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800430c:	430b      	orrs	r3, r1
 800430e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800431c:	643b      	str	r3, [r7, #64]	@ 0x40
 800431e:	2300      	movs	r3, #0
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
 8004322:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	d00e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800432c:	4b86      	ldr	r3, [pc, #536]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	4a85      	ldr	r2, [pc, #532]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004332:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004336:	6113      	str	r3, [r2, #16]
 8004338:	4b83      	ldr	r3, [pc, #524]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800433a:	6919      	ldr	r1, [r3, #16]
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004344:	4a80      	ldr	r2, [pc, #512]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800434a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004358:	2300      	movs	r3, #0
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800435c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004360:	460b      	mov	r3, r1
 8004362:	4313      	orrs	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004366:	4b78      	ldr	r3, [pc, #480]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800436e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004374:	4a74      	ldr	r2, [pc, #464]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004376:	430b      	orrs	r3, r1
 8004378:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800437a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004386:	633b      	str	r3, [r7, #48]	@ 0x30
 8004388:	2300      	movs	r3, #0
 800438a:	637b      	str	r3, [r7, #52]	@ 0x34
 800438c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d00a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004396:	4b6c      	ldr	r3, [pc, #432]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800439e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a6:	4a68      	ldr	r2, [pc, #416]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80043ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	2100      	movs	r1, #0
 80043b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	d011      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043cc:	3308      	adds	r3, #8
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fb79 	bl	8004ac8 <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80043ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	2100      	movs	r1, #0
 80043f6:	6239      	str	r1, [r7, #32]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d011      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800440c:	3308      	adds	r3, #8
 800440e:	2101      	movs	r1, #1
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fb59 	bl	8004ac8 <RCCEx_PLL2_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800441c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800442c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	2100      	movs	r1, #0
 8004436:	61b9      	str	r1, [r7, #24]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d011      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444c:	3308      	adds	r3, #8
 800444e:	2102      	movs	r1, #2
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fb39 	bl	8004ac8 <RCCEx_PLL2_Config>
 8004456:	4603      	mov	r3, r0
 8004458:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800445c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004468:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800446c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	2100      	movs	r1, #0
 8004476:	6139      	str	r1, [r7, #16]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d011      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448c:	3328      	adds	r3, #40	@ 0x28
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fbcb 	bl	8004c2c <RCCEx_PLL3_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800449c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	2100      	movs	r1, #0
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d011      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	2101      	movs	r1, #1
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fbab 	bl	8004c2c <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	2100      	movs	r1, #0
 80044f6:	6039      	str	r1, [r7, #0]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004502:	460b      	mov	r3, r1
 8004504:	4313      	orrs	r3, r2
 8004506:	d011      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	3328      	adds	r3, #40	@ 0x28
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fb8b 	bl	8004c2c <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800451c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004528:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800452c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
}
 800453a:	4618      	mov	r0, r3
 800453c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004540:	46bd      	mov	sp, r7
 8004542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004546:	bf00      	nop
 8004548:	58024400 	.word	0x58024400

0800454c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004550:	f7fe fdbe 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4904      	ldr	r1, [pc, #16]	@ (8004574 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	58024400 	.word	0x58024400
 8004574:	0800a71c 	.word	0x0800a71c

08004578 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	@ 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004580:	4ba1      	ldr	r3, [pc, #644]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800458a:	4b9f      	ldr	r3, [pc, #636]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	0b1b      	lsrs	r3, r3, #12
 8004590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004594:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004596:	4b9c      	ldr	r3, [pc, #624]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80045a2:	4b99      	ldr	r3, [pc, #612]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a6:	08db      	lsrs	r3, r3, #3
 80045a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 8111 	beq.w	80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	f000 8083 	beq.w	80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	f200 80a1 	bhi.w	8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d056      	beq.n	8004690 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045e2:	e099      	b.n	8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e4:	4b88      	ldr	r3, [pc, #544]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02d      	beq.n	800464c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045f0:	4b85      	ldr	r3, [pc, #532]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	08db      	lsrs	r3, r3, #3
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	4a84      	ldr	r2, [pc, #528]	@ (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	ee07 3a90 	vmov	s15, r3
 8004608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461a:	4b7b      	ldr	r3, [pc, #492]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800461c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462a:	ed97 6a03 	vldr	s12, [r7, #12]
 800462e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004646:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800464a:	e087      	b.n	800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465e:	4b6a      	ldr	r3, [pc, #424]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004672:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800468e:	e065      	b.n	800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a2:	4b59      	ldr	r3, [pc, #356]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046d2:	e043      	b.n	800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800481c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b48      	ldr	r3, [pc, #288]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004716:	e021      	b.n	800475c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b37      	ldr	r3, [pc, #220]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473a:	ed97 6a03 	vldr	s12, [r7, #12]
 800473e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800475a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800475c:	4b2a      	ldr	r3, [pc, #168]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	0a5b      	lsrs	r3, r3, #9
 8004762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004776:	edd7 6a07 	vldr	s13, [r7, #28]
 800477a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800477e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004782:	ee17 2a90 	vmov	r2, s15
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800478a:	4b1f      	ldr	r3, [pc, #124]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	0c1b      	lsrs	r3, r3, #16
 8004790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b0:	ee17 2a90 	vmov	r2, s15
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047bc:	0e1b      	lsrs	r3, r3, #24
 80047be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047de:	ee17 2a90 	vmov	r2, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047e6:	e008      	b.n	80047fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
}
 80047fa:	bf00      	nop
 80047fc:	3724      	adds	r7, #36	@ 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
 800480c:	03d09000 	.word	0x03d09000
 8004810:	46000000 	.word	0x46000000
 8004814:	4c742400 	.word	0x4c742400
 8004818:	4a742400 	.word	0x4a742400
 800481c:	4af42400 	.word	0x4af42400

08004820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	@ 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004828:	4ba1      	ldr	r3, [pc, #644]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004832:	4b9f      	ldr	r3, [pc, #636]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004836:	0d1b      	lsrs	r3, r3, #20
 8004838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800483c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800483e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800484a:	4b99      	ldr	r3, [pc, #612]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484e:	08db      	lsrs	r3, r3, #3
 8004850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8111 	beq.w	8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b02      	cmp	r3, #2
 8004872:	f000 8083 	beq.w	800497c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b02      	cmp	r3, #2
 800487a:	f200 80a1 	bhi.w	80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d056      	beq.n	8004938 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800488a:	e099      	b.n	80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800488c:	4b88      	ldr	r3, [pc, #544]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02d      	beq.n	80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004898:	4b85      	ldr	r3, [pc, #532]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	4a84      	ldr	r2, [pc, #528]	@ (8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
 80048a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048f2:	e087      	b.n	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004abc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004906:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004916:	ed97 6a03 	vldr	s12, [r7, #12]
 800491a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800491e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004936:	e065      	b.n	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494a:	4b59      	ldr	r3, [pc, #356]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	ed97 6a03 	vldr	s12, [r7, #12]
 800495e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800496e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497a:	e043      	b.n	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b48      	ldr	r3, [pc, #288]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049be:	e021      	b.n	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b37      	ldr	r3, [pc, #220]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a02:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a04:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	0a5b      	lsrs	r3, r3, #9
 8004a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2a:	ee17 2a90 	vmov	r2, s15
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a32:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a58:	ee17 2a90 	vmov	r2, s15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a60:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	0e1b      	lsrs	r3, r3, #24
 8004a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a86:	ee17 2a90 	vmov	r2, s15
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	bf00      	nop
 8004aa4:	3724      	adds	r7, #36	@ 0x24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	58024400 	.word	0x58024400
 8004ab4:	03d09000 	.word	0x03d09000
 8004ab8:	46000000 	.word	0x46000000
 8004abc:	4c742400 	.word	0x4c742400
 8004ac0:	4a742400 	.word	0x4a742400
 8004ac4:	4af42400 	.word	0x4af42400

08004ac8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ad6:	4b53      	ldr	r3, [pc, #332]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d101      	bne.n	8004ae6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e099      	b.n	8004c1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a4e      	ldr	r2, [pc, #312]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fc fb1f 	bl	8001134 <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004af8:	e008      	b.n	8004b0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004afa:	f7fc fb1b 	bl	8001134 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e086      	b.n	8004c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b0c:	4b45      	ldr	r3, [pc, #276]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f0      	bne.n	8004afa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b18:	4b42      	ldr	r3, [pc, #264]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	031b      	lsls	r3, r3, #12
 8004b26:	493f      	ldr	r1, [pc, #252]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	025b      	lsls	r3, r3, #9
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b5c:	4931      	ldr	r1, [pc, #196]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b62:	4b30      	ldr	r3, [pc, #192]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	492d      	ldr	r1, [pc, #180]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b74:	4b2b      	ldr	r3, [pc, #172]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	f023 0220 	bic.w	r2, r3, #32
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	4928      	ldr	r1, [pc, #160]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b86:	4b27      	ldr	r3, [pc, #156]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	4a26      	ldr	r2, [pc, #152]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b8c:	f023 0310 	bic.w	r3, r3, #16
 8004b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b92:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b96:	4b24      	ldr	r3, [pc, #144]	@ (8004c28 <RCCEx_PLL2_Config+0x160>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	69d2      	ldr	r2, [r2, #28]
 8004b9e:	00d2      	lsls	r2, r2, #3
 8004ba0:	4920      	ldr	r1, [pc, #128]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	4a1e      	ldr	r2, [pc, #120]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	f043 0310 	orr.w	r3, r3, #16
 8004bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbc:	4a19      	ldr	r2, [pc, #100]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bc4:	e00f      	b.n	8004be6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d106      	bne.n	8004bda <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bcc:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd0:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bd8:	e005      	b.n	8004be6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bda:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	4a11      	ldr	r2, [pc, #68]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004be0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a0e      	ldr	r2, [pc, #56]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf2:	f7fc fa9f 	bl	8001134 <HAL_GetTick>
 8004bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bf8:	e008      	b.n	8004c0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bfa:	f7fc fa9b 	bl	8001134 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e006      	b.n	8004c1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	58024400 	.word	0x58024400
 8004c28:	ffff0007 	.word	0xffff0007

08004c2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c3a:	4b53      	ldr	r3, [pc, #332]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d101      	bne.n	8004c4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e099      	b.n	8004d7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c56:	f7fc fa6d 	bl	8001134 <HAL_GetTick>
 8004c5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c5c:	e008      	b.n	8004c70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c5e:	f7fc fa69 	bl	8001134 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e086      	b.n	8004d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c70:	4b45      	ldr	r3, [pc, #276]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c7c:	4b42      	ldr	r3, [pc, #264]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	051b      	lsls	r3, r3, #20
 8004c8a:	493f      	ldr	r1, [pc, #252]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	025b      	lsls	r3, r3, #9
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	061b      	lsls	r3, r3, #24
 8004cbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cc0:	4931      	ldr	r1, [pc, #196]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cc6:	4b30      	ldr	r3, [pc, #192]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	492d      	ldr	r1, [pc, #180]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	4928      	ldr	r1, [pc, #160]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	4a26      	ldr	r2, [pc, #152]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cf6:	4b24      	ldr	r3, [pc, #144]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004cf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <RCCEx_PLL3_Config+0x160>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	69d2      	ldr	r2, [r2, #28]
 8004d02:	00d2      	lsls	r2, r2, #3
 8004d04:	4920      	ldr	r1, [pc, #128]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d106      	bne.n	8004d2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d28:	e00f      	b.n	8004d4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d106      	bne.n	8004d3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d30:	4b15      	ldr	r3, [pc, #84]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a14      	ldr	r2, [pc, #80]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d3c:	e005      	b.n	8004d4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d3e:	4b12      	ldr	r3, [pc, #72]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	4a11      	ldr	r2, [pc, #68]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d56:	f7fc f9ed 	bl	8001134 <HAL_GetTick>
 8004d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d5c:	e008      	b.n	8004d70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d5e:	f7fc f9e9 	bl	8001134 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e006      	b.n	8004d7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	58024400 	.word	0x58024400
 8004d8c:	ffff0007 	.word	0xffff0007

08004d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e049      	b.n	8004e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f841 	bl	8004e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 f9f6 	bl	80051c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d001      	beq.n	8004e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e05e      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a2b      	ldr	r2, [pc, #172]	@ (8004f38 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d02c      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e96:	d027      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a27      	ldr	r2, [pc, #156]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xe8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d022      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a26      	ldr	r2, [pc, #152]	@ (8004f40 <HAL_TIM_Base_Start_IT+0xec>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <HAL_TIM_Base_Start_IT+0xf0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a23      	ldr	r2, [pc, #140]	@ (8004f48 <HAL_TIM_Base_Start_IT+0xf4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a21      	ldr	r2, [pc, #132]	@ (8004f4c <HAL_TIM_Base_Start_IT+0xf8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a20      	ldr	r2, [pc, #128]	@ (8004f50 <HAL_TIM_Base_Start_IT+0xfc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f54 <HAL_TIM_Base_Start_IT+0x100>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x94>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f58 <HAL_TIM_Base_Start_IT+0x104>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d115      	bne.n	8004f14 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_TIM_Base_Start_IT+0x108>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d015      	beq.n	8004f26 <HAL_TIM_Base_Start_IT+0xd2>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f00:	d011      	beq.n	8004f26 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	e008      	b.n	8004f26 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40010400 	.word	0x40010400
 8004f4c:	40001800 	.word	0x40001800
 8004f50:	40014000 	.word	0x40014000
 8004f54:	4000e000 	.word	0x4000e000
 8004f58:	4000e400 	.word	0x4000e400
 8004f5c:	00010007 	.word	0x00010007

08004f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d020      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01b      	beq.n	8004fc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0202 	mvn.w	r2, #2
 8004f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8e9 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8db 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f8ec 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d020      	beq.n	8005010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01b      	beq.n	8005010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0204 	mvn.w	r2, #4
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f8c3 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8b5 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f8c6 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d020      	beq.n	800505c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01b      	beq.n	800505c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0208 	mvn.w	r2, #8
 800502c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2204      	movs	r2, #4
 8005032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f89d 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f88f 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f8a0 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	d020      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 0310 	and.w	r3, r3, #16
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01b      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0210 	mvn.w	r2, #16
 8005078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2208      	movs	r2, #8
 800507e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f877 	bl	8005182 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f869 	bl	800516e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f87a 	bl	8005196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0201 	mvn.w	r2, #1
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fb fcea 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00c      	beq.n	80050fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f919 	bl	800532c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00c      	beq.n	800511e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f911 	bl	8005340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800513a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f834 	bl	80051aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00c      	beq.n	8005166 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f06f 0220 	mvn.w	r2, #32
 800515e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8d9 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a47      	ldr	r2, [pc, #284]	@ (80052f0 <TIM_Base_SetConfig+0x130>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051de:	d00f      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a44      	ldr	r2, [pc, #272]	@ (80052f4 <TIM_Base_SetConfig+0x134>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00b      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a43      	ldr	r2, [pc, #268]	@ (80052f8 <TIM_Base_SetConfig+0x138>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a42      	ldr	r2, [pc, #264]	@ (80052fc <TIM_Base_SetConfig+0x13c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a41      	ldr	r2, [pc, #260]	@ (8005300 <TIM_Base_SetConfig+0x140>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d108      	bne.n	8005212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a36      	ldr	r2, [pc, #216]	@ (80052f0 <TIM_Base_SetConfig+0x130>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d027      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d023      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a33      	ldr	r2, [pc, #204]	@ (80052f4 <TIM_Base_SetConfig+0x134>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01f      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a32      	ldr	r2, [pc, #200]	@ (80052f8 <TIM_Base_SetConfig+0x138>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01b      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a31      	ldr	r2, [pc, #196]	@ (80052fc <TIM_Base_SetConfig+0x13c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d017      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a30      	ldr	r2, [pc, #192]	@ (8005300 <TIM_Base_SetConfig+0x140>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2f      	ldr	r2, [pc, #188]	@ (8005304 <TIM_Base_SetConfig+0x144>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00f      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2e      	ldr	r2, [pc, #184]	@ (8005308 <TIM_Base_SetConfig+0x148>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d00b      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2d      	ldr	r2, [pc, #180]	@ (800530c <TIM_Base_SetConfig+0x14c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2c      	ldr	r2, [pc, #176]	@ (8005310 <TIM_Base_SetConfig+0x150>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_Base_SetConfig+0xaa>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2b      	ldr	r2, [pc, #172]	@ (8005314 <TIM_Base_SetConfig+0x154>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d108      	bne.n	800527c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a14      	ldr	r2, [pc, #80]	@ (80052f0 <TIM_Base_SetConfig+0x130>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0x102>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a16      	ldr	r2, [pc, #88]	@ (8005300 <TIM_Base_SetConfig+0x140>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x102>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a15      	ldr	r2, [pc, #84]	@ (8005304 <TIM_Base_SetConfig+0x144>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x102>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a14      	ldr	r2, [pc, #80]	@ (8005308 <TIM_Base_SetConfig+0x148>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x102>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a13      	ldr	r2, [pc, #76]	@ (800530c <TIM_Base_SetConfig+0x14c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d103      	bne.n	80052ca <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f043 0204 	orr.w	r2, r3, #4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40010400 	.word	0x40010400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	4000e000 	.word	0x4000e000
 8005314:	4000e400 	.word	0x4000e400

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e042      	b.n	80053ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fb fbc7 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2224      	movs	r2, #36	@ 0x24
 8005382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f001 fb18 	bl	80069d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fca9 	bl	8005cfc <UART_SetConfig>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e01b      	b.n	80053ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 fb97 	bl	8006b18 <UART_CheckIdleState>
 80053ea:	4603      	mov	r3, r0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	@ 0x28
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540a:	2b20      	cmp	r3, #32
 800540c:	d17b      	bne.n	8005506 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d002      	beq.n	800541a <HAL_UART_Transmit+0x26>
 8005414:	88fb      	ldrh	r3, [r7, #6]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e074      	b.n	8005508 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2221      	movs	r2, #33	@ 0x21
 800542a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542e:	f7fb fe81 	bl	8001134 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544c:	d108      	bne.n	8005460 <HAL_UART_Transmit+0x6c>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	e003      	b.n	8005468 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005468:	e030      	b.n	80054cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	2180      	movs	r1, #128	@ 0x80
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f001 fbf9 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e03d      	b.n	8005508 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3302      	adds	r3, #2
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	e007      	b.n	80054ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	3301      	adds	r3, #1
 80054b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1c8      	bne.n	800546a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2200      	movs	r2, #0
 80054e0:	2140      	movs	r1, #64	@ 0x40
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f001 fbc2 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e006      	b.n	8005508 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0ba      	sub	sp, #232	@ 0xe8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800553a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800553e:	4013      	ands	r3, r2
 8005540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11b      	bne.n	8005584 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d009      	beq.n	8005584 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8393 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	4798      	blx	r3
      }
      return;
 8005582:	e38d      	b.n	8005ca0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8123 	beq.w	80057d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800558e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005592:	4b8d      	ldr	r3, [pc, #564]	@ (80057c8 <HAL_UART_IRQHandler+0x2b8>)
 8005594:	4013      	ands	r3, r2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800559a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800559e:	4b8b      	ldr	r3, [pc, #556]	@ (80057cc <HAL_UART_IRQHandler+0x2bc>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8116 	beq.w	80057d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d011      	beq.n	80055d8 <HAL_UART_IRQHandler+0xc8>
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00b      	beq.n	80055d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d011      	beq.n	8005608 <HAL_UART_IRQHandler+0xf8>
 80055e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d011      	beq.n	8005638 <HAL_UART_IRQHandler+0x128>
 8005614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2204      	movs	r2, #4
 8005626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562e:	f043 0202 	orr.w	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d105      	bne.n	800565c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005650:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005654:	4b5c      	ldr	r3, [pc, #368]	@ (80057c8 <HAL_UART_IRQHandler+0x2b8>)
 8005656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2208      	movs	r2, #8
 8005662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566a:	f043 0208 	orr.w	r2, r3, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800567c:	2b00      	cmp	r3, #0
 800567e:	d012      	beq.n	80056a6 <HAL_UART_IRQHandler+0x196>
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 82f9 	beq.w	8005ca4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fa:	2b40      	cmp	r3, #64	@ 0x40
 80056fc:	d005      	beq.n	800570a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005702:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005706:	2b00      	cmp	r3, #0
 8005708:	d054      	beq.n	80057b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fb1c 	bl	8006d48 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571a:	2b40      	cmp	r3, #64	@ 0x40
 800571c:	d146      	bne.n	80057ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800574a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	d017      	beq.n	80057a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800577a:	4a15      	ldr	r2, [pc, #84]	@ (80057d0 <HAL_UART_IRQHandler+0x2c0>)
 800577c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005784:	4618      	mov	r0, r3
 8005786:	f7fc f957 	bl	8001a38 <HAL_DMA_Abort_IT>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d019      	beq.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800579e:	4610      	mov	r0, r2
 80057a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a2:	e00f      	b.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa93 	bl	8005cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057aa:	e00b      	b.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa8f 	bl	8005cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b2:	e007      	b.n	80057c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fa8b 	bl	8005cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80057c2:	e26f      	b.n	8005ca4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057c4:	bf00      	nop
    return;
 80057c6:	e26d      	b.n	8005ca4 <HAL_UART_IRQHandler+0x794>
 80057c8:	10000001 	.word	0x10000001
 80057cc:	04000120 	.word	0x04000120
 80057d0:	08006e15 	.word	0x08006e15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	f040 8203 	bne.w	8005be4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 81fc 	beq.w	8005be4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 81f5 	beq.w	8005be4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2210      	movs	r2, #16
 8005800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b40      	cmp	r3, #64	@ 0x40
 800580e:	f040 816d 	bne.w	8005aec <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4aa4      	ldr	r2, [pc, #656]	@ (8005aac <HAL_UART_IRQHandler+0x59c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d068      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4aa1      	ldr	r2, [pc, #644]	@ (8005ab0 <HAL_UART_IRQHandler+0x5a0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d061      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a9f      	ldr	r2, [pc, #636]	@ (8005ab4 <HAL_UART_IRQHandler+0x5a4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d05a      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a9c      	ldr	r2, [pc, #624]	@ (8005ab8 <HAL_UART_IRQHandler+0x5a8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d053      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a9a      	ldr	r2, [pc, #616]	@ (8005abc <HAL_UART_IRQHandler+0x5ac>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d04c      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a97      	ldr	r2, [pc, #604]	@ (8005ac0 <HAL_UART_IRQHandler+0x5b0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d045      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a95      	ldr	r2, [pc, #596]	@ (8005ac4 <HAL_UART_IRQHandler+0x5b4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d03e      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a92      	ldr	r2, [pc, #584]	@ (8005ac8 <HAL_UART_IRQHandler+0x5b8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d037      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a90      	ldr	r2, [pc, #576]	@ (8005acc <HAL_UART_IRQHandler+0x5bc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d030      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a8d      	ldr	r2, [pc, #564]	@ (8005ad0 <HAL_UART_IRQHandler+0x5c0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d029      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a8b      	ldr	r2, [pc, #556]	@ (8005ad4 <HAL_UART_IRQHandler+0x5c4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d022      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a88      	ldr	r2, [pc, #544]	@ (8005ad8 <HAL_UART_IRQHandler+0x5c8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01b      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a86      	ldr	r2, [pc, #536]	@ (8005adc <HAL_UART_IRQHandler+0x5cc>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d014      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a83      	ldr	r2, [pc, #524]	@ (8005ae0 <HAL_UART_IRQHandler+0x5d0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00d      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a81      	ldr	r2, [pc, #516]	@ (8005ae4 <HAL_UART_IRQHandler+0x5d4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d006      	beq.n	80058f2 <HAL_UART_IRQHandler+0x3e2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a7e      	ldr	r2, [pc, #504]	@ (8005ae8 <HAL_UART_IRQHandler+0x5d8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d106      	bne.n	8005900 <HAL_UART_IRQHandler+0x3f0>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	e005      	b.n	800590c <HAL_UART_IRQHandler+0x3fc>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	b29b      	uxth	r3, r3
 800590c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80ad 	beq.w	8005a74 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005920:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005924:	429a      	cmp	r2, r3
 8005926:	f080 80a5 	bcs.w	8005a74 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005940:	f000 8087 	beq.w	8005a52 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005958:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800595c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005960:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800596e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005972:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800597a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1da      	bne.n	8005944 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800599e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e1      	bne.n	800598e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3308      	adds	r3, #8
 80059ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e3      	bne.n	80059ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a20:	f023 0310 	bic.w	r3, r3, #16
 8005a24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e4      	bne.n	8005a10 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fb fcd5 	bl	80013fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f939 	bl	8005ce4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a72:	e119      	b.n	8005ca8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	f040 8112 	bne.w	8005ca8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a90:	f040 810a 	bne.w	8005ca8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f91e 	bl	8005ce4 <HAL_UARTEx_RxEventCallback>
      return;
 8005aa8:	e0fe      	b.n	8005ca8 <HAL_UART_IRQHandler+0x798>
 8005aaa:	bf00      	nop
 8005aac:	40020010 	.word	0x40020010
 8005ab0:	40020028 	.word	0x40020028
 8005ab4:	40020040 	.word	0x40020040
 8005ab8:	40020058 	.word	0x40020058
 8005abc:	40020070 	.word	0x40020070
 8005ac0:	40020088 	.word	0x40020088
 8005ac4:	400200a0 	.word	0x400200a0
 8005ac8:	400200b8 	.word	0x400200b8
 8005acc:	40020410 	.word	0x40020410
 8005ad0:	40020428 	.word	0x40020428
 8005ad4:	40020440 	.word	0x40020440
 8005ad8:	40020458 	.word	0x40020458
 8005adc:	40020470 	.word	0x40020470
 8005ae0:	40020488 	.word	0x40020488
 8005ae4:	400204a0 	.word	0x400204a0
 8005ae8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80cf 	beq.w	8005cac <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80ca 	beq.w	8005cac <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e4      	bne.n	8005b18 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3308      	adds	r3, #8
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	4b55      	ldr	r3, [pc, #340]	@ (8005cb8 <HAL_UART_IRQHandler+0x7a8>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b72:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e3      	bne.n	8005b4e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	69b9      	ldr	r1, [r7, #24]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e4      	bne.n	8005b9a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f881 	bl	8005ce4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005be2:	e063      	b.n	8005cac <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00e      	beq.n	8005c0e <HAL_UART_IRQHandler+0x6fe>
 8005bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005c04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 f941 	bl	8006e8e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c0c:	e051      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d03a      	beq.n	8005cb0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
    }
    return;
 8005c42:	e035      	b.n	8005cb0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <HAL_UART_IRQHandler+0x754>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f8eb 	bl	8006e38 <UART_EndTransmit_IT>
    return;
 8005c62:	e026      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <HAL_UART_IRQHandler+0x774>
 8005c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 f91a 	bl	8006eb6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c82:	e016      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d010      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	da0c      	bge.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 f902 	bl	8006ea2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c9e:	e008      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005ca0:	bf00      	nop
 8005ca2:	e006      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005ca4:	bf00      	nop
 8005ca6:	e004      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005ca8:	bf00      	nop
 8005caa:	e002      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005cac:	bf00      	nop
 8005cae:	e000      	b.n	8005cb2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005cb0:	bf00      	nop
  }
}
 8005cb2:	37e8      	adds	r7, #232	@ 0xe8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	effffffe 	.word	0xeffffffe

08005cbc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d00:	b092      	sub	sp, #72	@ 0x48
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4bbe      	ldr	r3, [pc, #760]	@ (8006024 <UART_SetConfig+0x328>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4ab3      	ldr	r2, [pc, #716]	@ (8006028 <UART_SetConfig+0x32c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d004      	beq.n	8005d68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d64:	4313      	orrs	r3, r2
 8005d66:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	4baf      	ldr	r3, [pc, #700]	@ (800602c <UART_SetConfig+0x330>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d82:	f023 010f 	bic.w	r1, r3, #15
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4aa6      	ldr	r2, [pc, #664]	@ (8006030 <UART_SetConfig+0x334>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d177      	bne.n	8005e8c <UART_SetConfig+0x190>
 8005d9c:	4ba5      	ldr	r3, [pc, #660]	@ (8006034 <UART_SetConfig+0x338>)
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005da4:	2b28      	cmp	r3, #40	@ 0x28
 8005da6:	d86d      	bhi.n	8005e84 <UART_SetConfig+0x188>
 8005da8:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <UART_SetConfig+0xb4>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005e55 	.word	0x08005e55
 8005db4:	08005e85 	.word	0x08005e85
 8005db8:	08005e85 	.word	0x08005e85
 8005dbc:	08005e85 	.word	0x08005e85
 8005dc0:	08005e85 	.word	0x08005e85
 8005dc4:	08005e85 	.word	0x08005e85
 8005dc8:	08005e85 	.word	0x08005e85
 8005dcc:	08005e85 	.word	0x08005e85
 8005dd0:	08005e5d 	.word	0x08005e5d
 8005dd4:	08005e85 	.word	0x08005e85
 8005dd8:	08005e85 	.word	0x08005e85
 8005ddc:	08005e85 	.word	0x08005e85
 8005de0:	08005e85 	.word	0x08005e85
 8005de4:	08005e85 	.word	0x08005e85
 8005de8:	08005e85 	.word	0x08005e85
 8005dec:	08005e85 	.word	0x08005e85
 8005df0:	08005e65 	.word	0x08005e65
 8005df4:	08005e85 	.word	0x08005e85
 8005df8:	08005e85 	.word	0x08005e85
 8005dfc:	08005e85 	.word	0x08005e85
 8005e00:	08005e85 	.word	0x08005e85
 8005e04:	08005e85 	.word	0x08005e85
 8005e08:	08005e85 	.word	0x08005e85
 8005e0c:	08005e85 	.word	0x08005e85
 8005e10:	08005e6d 	.word	0x08005e6d
 8005e14:	08005e85 	.word	0x08005e85
 8005e18:	08005e85 	.word	0x08005e85
 8005e1c:	08005e85 	.word	0x08005e85
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	08005e85 	.word	0x08005e85
 8005e28:	08005e85 	.word	0x08005e85
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e85 	.word	0x08005e85
 8005e38:	08005e85 	.word	0x08005e85
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e85 	.word	0x08005e85
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e85 	.word	0x08005e85
 8005e4c:	08005e85 	.word	0x08005e85
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e326      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e322      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005e64:	2308      	movs	r3, #8
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e31e      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e31a      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005e74:	2320      	movs	r3, #32
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e316      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005e7c:	2340      	movs	r3, #64	@ 0x40
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e312      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e30e      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a69      	ldr	r2, [pc, #420]	@ (8006038 <UART_SetConfig+0x33c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d130      	bne.n	8005ef8 <UART_SetConfig+0x1fc>
 8005e96:	4b67      	ldr	r3, [pc, #412]	@ (8006034 <UART_SetConfig+0x338>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d826      	bhi.n	8005ef0 <UART_SetConfig+0x1f4>
 8005ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <UART_SetConfig+0x1ac>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005ec1 	.word	0x08005ec1
 8005eac:	08005ec9 	.word	0x08005ec9
 8005eb0:	08005ed1 	.word	0x08005ed1
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e2f0      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e2ec      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e2e8      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e2e4      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e2e0      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005ee8:	2340      	movs	r3, #64	@ 0x40
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e2dc      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e2d8      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a4f      	ldr	r2, [pc, #316]	@ (800603c <UART_SetConfig+0x340>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d130      	bne.n	8005f64 <UART_SetConfig+0x268>
 8005f02:	4b4c      	ldr	r3, [pc, #304]	@ (8006034 <UART_SetConfig+0x338>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d826      	bhi.n	8005f5c <UART_SetConfig+0x260>
 8005f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <UART_SetConfig+0x218>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f2d 	.word	0x08005f2d
 8005f18:	08005f35 	.word	0x08005f35
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e2ba      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005f34:	2304      	movs	r3, #4
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e2b6      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e2b2      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e2ae      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e2aa      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005f54:	2340      	movs	r3, #64	@ 0x40
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e2a6      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005f5c:	2380      	movs	r3, #128	@ 0x80
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e2a2      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a35      	ldr	r2, [pc, #212]	@ (8006040 <UART_SetConfig+0x344>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d130      	bne.n	8005fd0 <UART_SetConfig+0x2d4>
 8005f6e:	4b31      	ldr	r3, [pc, #196]	@ (8006034 <UART_SetConfig+0x338>)
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d826      	bhi.n	8005fc8 <UART_SetConfig+0x2cc>
 8005f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f80 <UART_SetConfig+0x284>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005f99 	.word	0x08005f99
 8005f84:	08005fa1 	.word	0x08005fa1
 8005f88:	08005fa9 	.word	0x08005fa9
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005fb9 	.word	0x08005fb9
 8005f94:	08005fc1 	.word	0x08005fc1
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e284      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005fa0:	2304      	movs	r3, #4
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e280      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005fa8:	2308      	movs	r3, #8
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e27c      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e278      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005fb8:	2320      	movs	r3, #32
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e274      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005fc0:	2340      	movs	r3, #64	@ 0x40
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e270      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e26c      	b.n	80064aa <UART_SetConfig+0x7ae>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <UART_SetConfig+0x348>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d142      	bne.n	8006060 <UART_SetConfig+0x364>
 8005fda:	4b16      	ldr	r3, [pc, #88]	@ (8006034 <UART_SetConfig+0x338>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d838      	bhi.n	8006058 <UART_SetConfig+0x35c>
 8005fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <UART_SetConfig+0x2f0>)
 8005fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fec:	08006005 	.word	0x08006005
 8005ff0:	0800600d 	.word	0x0800600d
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006049 	.word	0x08006049
 8006000:	08006051 	.word	0x08006051
 8006004:	2300      	movs	r3, #0
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e24e      	b.n	80064aa <UART_SetConfig+0x7ae>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e24a      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e246      	b.n	80064aa <UART_SetConfig+0x7ae>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e242      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006024:	cfff69f3 	.word	0xcfff69f3
 8006028:	58000c00 	.word	0x58000c00
 800602c:	11fff4ff 	.word	0x11fff4ff
 8006030:	40011000 	.word	0x40011000
 8006034:	58024400 	.word	0x58024400
 8006038:	40004400 	.word	0x40004400
 800603c:	40004800 	.word	0x40004800
 8006040:	40004c00 	.word	0x40004c00
 8006044:	40005000 	.word	0x40005000
 8006048:	2320      	movs	r3, #32
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e22c      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006050:	2340      	movs	r3, #64	@ 0x40
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e228      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006058:	2380      	movs	r3, #128	@ 0x80
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e224      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4ab1      	ldr	r2, [pc, #708]	@ (800632c <UART_SetConfig+0x630>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d176      	bne.n	8006158 <UART_SetConfig+0x45c>
 800606a:	4bb1      	ldr	r3, [pc, #708]	@ (8006330 <UART_SetConfig+0x634>)
 800606c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006072:	2b28      	cmp	r3, #40	@ 0x28
 8006074:	d86c      	bhi.n	8006150 <UART_SetConfig+0x454>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <UART_SetConfig+0x380>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	08006121 	.word	0x08006121
 8006080:	08006151 	.word	0x08006151
 8006084:	08006151 	.word	0x08006151
 8006088:	08006151 	.word	0x08006151
 800608c:	08006151 	.word	0x08006151
 8006090:	08006151 	.word	0x08006151
 8006094:	08006151 	.word	0x08006151
 8006098:	08006151 	.word	0x08006151
 800609c:	08006129 	.word	0x08006129
 80060a0:	08006151 	.word	0x08006151
 80060a4:	08006151 	.word	0x08006151
 80060a8:	08006151 	.word	0x08006151
 80060ac:	08006151 	.word	0x08006151
 80060b0:	08006151 	.word	0x08006151
 80060b4:	08006151 	.word	0x08006151
 80060b8:	08006151 	.word	0x08006151
 80060bc:	08006131 	.word	0x08006131
 80060c0:	08006151 	.word	0x08006151
 80060c4:	08006151 	.word	0x08006151
 80060c8:	08006151 	.word	0x08006151
 80060cc:	08006151 	.word	0x08006151
 80060d0:	08006151 	.word	0x08006151
 80060d4:	08006151 	.word	0x08006151
 80060d8:	08006151 	.word	0x08006151
 80060dc:	08006139 	.word	0x08006139
 80060e0:	08006151 	.word	0x08006151
 80060e4:	08006151 	.word	0x08006151
 80060e8:	08006151 	.word	0x08006151
 80060ec:	08006151 	.word	0x08006151
 80060f0:	08006151 	.word	0x08006151
 80060f4:	08006151 	.word	0x08006151
 80060f8:	08006151 	.word	0x08006151
 80060fc:	08006141 	.word	0x08006141
 8006100:	08006151 	.word	0x08006151
 8006104:	08006151 	.word	0x08006151
 8006108:	08006151 	.word	0x08006151
 800610c:	08006151 	.word	0x08006151
 8006110:	08006151 	.word	0x08006151
 8006114:	08006151 	.word	0x08006151
 8006118:	08006151 	.word	0x08006151
 800611c:	08006149 	.word	0x08006149
 8006120:	2301      	movs	r3, #1
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e1c0      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e1bc      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e1b8      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e1b4      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006140:	2320      	movs	r3, #32
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e1b0      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006148:	2340      	movs	r3, #64	@ 0x40
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e1ac      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006150:	2380      	movs	r3, #128	@ 0x80
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e1a8      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a75      	ldr	r2, [pc, #468]	@ (8006334 <UART_SetConfig+0x638>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d130      	bne.n	80061c4 <UART_SetConfig+0x4c8>
 8006162:	4b73      	ldr	r3, [pc, #460]	@ (8006330 <UART_SetConfig+0x634>)
 8006164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b05      	cmp	r3, #5
 800616c:	d826      	bhi.n	80061bc <UART_SetConfig+0x4c0>
 800616e:	a201      	add	r2, pc, #4	@ (adr r2, 8006174 <UART_SetConfig+0x478>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	0800618d 	.word	0x0800618d
 8006178:	08006195 	.word	0x08006195
 800617c:	0800619d 	.word	0x0800619d
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061ad 	.word	0x080061ad
 8006188:	080061b5 	.word	0x080061b5
 800618c:	2300      	movs	r3, #0
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e18a      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006194:	2304      	movs	r3, #4
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e186      	b.n	80064aa <UART_SetConfig+0x7ae>
 800619c:	2308      	movs	r3, #8
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e182      	b.n	80064aa <UART_SetConfig+0x7ae>
 80061a4:	2310      	movs	r3, #16
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e17e      	b.n	80064aa <UART_SetConfig+0x7ae>
 80061ac:	2320      	movs	r3, #32
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e17a      	b.n	80064aa <UART_SetConfig+0x7ae>
 80061b4:	2340      	movs	r3, #64	@ 0x40
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e176      	b.n	80064aa <UART_SetConfig+0x7ae>
 80061bc:	2380      	movs	r3, #128	@ 0x80
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e172      	b.n	80064aa <UART_SetConfig+0x7ae>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a5b      	ldr	r2, [pc, #364]	@ (8006338 <UART_SetConfig+0x63c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d130      	bne.n	8006230 <UART_SetConfig+0x534>
 80061ce:	4b58      	ldr	r3, [pc, #352]	@ (8006330 <UART_SetConfig+0x634>)
 80061d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	2b05      	cmp	r3, #5
 80061d8:	d826      	bhi.n	8006228 <UART_SetConfig+0x52c>
 80061da:	a201      	add	r2, pc, #4	@ (adr r2, 80061e0 <UART_SetConfig+0x4e4>)
 80061dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e0:	080061f9 	.word	0x080061f9
 80061e4:	08006201 	.word	0x08006201
 80061e8:	08006209 	.word	0x08006209
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006219 	.word	0x08006219
 80061f4:	08006221 	.word	0x08006221
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e154      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006200:	2304      	movs	r3, #4
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e150      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e14c      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006210:	2310      	movs	r3, #16
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e148      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006218:	2320      	movs	r3, #32
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e144      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006220:	2340      	movs	r3, #64	@ 0x40
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e140      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006228:	2380      	movs	r3, #128	@ 0x80
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e13c      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a41      	ldr	r2, [pc, #260]	@ (800633c <UART_SetConfig+0x640>)
 8006236:	4293      	cmp	r3, r2
 8006238:	f040 8082 	bne.w	8006340 <UART_SetConfig+0x644>
 800623c:	4b3c      	ldr	r3, [pc, #240]	@ (8006330 <UART_SetConfig+0x634>)
 800623e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006244:	2b28      	cmp	r3, #40	@ 0x28
 8006246:	d86d      	bhi.n	8006324 <UART_SetConfig+0x628>
 8006248:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <UART_SetConfig+0x554>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	080062f5 	.word	0x080062f5
 8006254:	08006325 	.word	0x08006325
 8006258:	08006325 	.word	0x08006325
 800625c:	08006325 	.word	0x08006325
 8006260:	08006325 	.word	0x08006325
 8006264:	08006325 	.word	0x08006325
 8006268:	08006325 	.word	0x08006325
 800626c:	08006325 	.word	0x08006325
 8006270:	080062fd 	.word	0x080062fd
 8006274:	08006325 	.word	0x08006325
 8006278:	08006325 	.word	0x08006325
 800627c:	08006325 	.word	0x08006325
 8006280:	08006325 	.word	0x08006325
 8006284:	08006325 	.word	0x08006325
 8006288:	08006325 	.word	0x08006325
 800628c:	08006325 	.word	0x08006325
 8006290:	08006305 	.word	0x08006305
 8006294:	08006325 	.word	0x08006325
 8006298:	08006325 	.word	0x08006325
 800629c:	08006325 	.word	0x08006325
 80062a0:	08006325 	.word	0x08006325
 80062a4:	08006325 	.word	0x08006325
 80062a8:	08006325 	.word	0x08006325
 80062ac:	08006325 	.word	0x08006325
 80062b0:	0800630d 	.word	0x0800630d
 80062b4:	08006325 	.word	0x08006325
 80062b8:	08006325 	.word	0x08006325
 80062bc:	08006325 	.word	0x08006325
 80062c0:	08006325 	.word	0x08006325
 80062c4:	08006325 	.word	0x08006325
 80062c8:	08006325 	.word	0x08006325
 80062cc:	08006325 	.word	0x08006325
 80062d0:	08006315 	.word	0x08006315
 80062d4:	08006325 	.word	0x08006325
 80062d8:	08006325 	.word	0x08006325
 80062dc:	08006325 	.word	0x08006325
 80062e0:	08006325 	.word	0x08006325
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006325 	.word	0x08006325
 80062ec:	08006325 	.word	0x08006325
 80062f0:	0800631d 	.word	0x0800631d
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fa:	e0d6      	b.n	80064aa <UART_SetConfig+0x7ae>
 80062fc:	2304      	movs	r3, #4
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006302:	e0d2      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006304:	2308      	movs	r3, #8
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630a:	e0ce      	b.n	80064aa <UART_SetConfig+0x7ae>
 800630c:	2310      	movs	r3, #16
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006312:	e0ca      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006314:	2320      	movs	r3, #32
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631a:	e0c6      	b.n	80064aa <UART_SetConfig+0x7ae>
 800631c:	2340      	movs	r3, #64	@ 0x40
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006322:	e0c2      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006324:	2380      	movs	r3, #128	@ 0x80
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632a:	e0be      	b.n	80064aa <UART_SetConfig+0x7ae>
 800632c:	40011400 	.word	0x40011400
 8006330:	58024400 	.word	0x58024400
 8006334:	40007800 	.word	0x40007800
 8006338:	40007c00 	.word	0x40007c00
 800633c:	40011800 	.word	0x40011800
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4aad      	ldr	r2, [pc, #692]	@ (80065fc <UART_SetConfig+0x900>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d176      	bne.n	8006438 <UART_SetConfig+0x73c>
 800634a:	4bad      	ldr	r3, [pc, #692]	@ (8006600 <UART_SetConfig+0x904>)
 800634c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006352:	2b28      	cmp	r3, #40	@ 0x28
 8006354:	d86c      	bhi.n	8006430 <UART_SetConfig+0x734>
 8006356:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <UART_SetConfig+0x660>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006401 	.word	0x08006401
 8006360:	08006431 	.word	0x08006431
 8006364:	08006431 	.word	0x08006431
 8006368:	08006431 	.word	0x08006431
 800636c:	08006431 	.word	0x08006431
 8006370:	08006431 	.word	0x08006431
 8006374:	08006431 	.word	0x08006431
 8006378:	08006431 	.word	0x08006431
 800637c:	08006409 	.word	0x08006409
 8006380:	08006431 	.word	0x08006431
 8006384:	08006431 	.word	0x08006431
 8006388:	08006431 	.word	0x08006431
 800638c:	08006431 	.word	0x08006431
 8006390:	08006431 	.word	0x08006431
 8006394:	08006431 	.word	0x08006431
 8006398:	08006431 	.word	0x08006431
 800639c:	08006411 	.word	0x08006411
 80063a0:	08006431 	.word	0x08006431
 80063a4:	08006431 	.word	0x08006431
 80063a8:	08006431 	.word	0x08006431
 80063ac:	08006431 	.word	0x08006431
 80063b0:	08006431 	.word	0x08006431
 80063b4:	08006431 	.word	0x08006431
 80063b8:	08006431 	.word	0x08006431
 80063bc:	08006419 	.word	0x08006419
 80063c0:	08006431 	.word	0x08006431
 80063c4:	08006431 	.word	0x08006431
 80063c8:	08006431 	.word	0x08006431
 80063cc:	08006431 	.word	0x08006431
 80063d0:	08006431 	.word	0x08006431
 80063d4:	08006431 	.word	0x08006431
 80063d8:	08006431 	.word	0x08006431
 80063dc:	08006421 	.word	0x08006421
 80063e0:	08006431 	.word	0x08006431
 80063e4:	08006431 	.word	0x08006431
 80063e8:	08006431 	.word	0x08006431
 80063ec:	08006431 	.word	0x08006431
 80063f0:	08006431 	.word	0x08006431
 80063f4:	08006431 	.word	0x08006431
 80063f8:	08006431 	.word	0x08006431
 80063fc:	08006429 	.word	0x08006429
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e050      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006408:	2304      	movs	r3, #4
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e04c      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006410:	2308      	movs	r3, #8
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e048      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006418:	2310      	movs	r3, #16
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e044      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006420:	2320      	movs	r3, #32
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e040      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006428:	2340      	movs	r3, #64	@ 0x40
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e03c      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006430:	2380      	movs	r3, #128	@ 0x80
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006436:	e038      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a71      	ldr	r2, [pc, #452]	@ (8006604 <UART_SetConfig+0x908>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d130      	bne.n	80064a4 <UART_SetConfig+0x7a8>
 8006442:	4b6f      	ldr	r3, [pc, #444]	@ (8006600 <UART_SetConfig+0x904>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b05      	cmp	r3, #5
 800644c:	d826      	bhi.n	800649c <UART_SetConfig+0x7a0>
 800644e:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0x758>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	0800646d 	.word	0x0800646d
 8006458:	08006475 	.word	0x08006475
 800645c:	0800647d 	.word	0x0800647d
 8006460:	08006485 	.word	0x08006485
 8006464:	0800648d 	.word	0x0800648d
 8006468:	08006495 	.word	0x08006495
 800646c:	2302      	movs	r3, #2
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006472:	e01a      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006474:	2304      	movs	r3, #4
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647a:	e016      	b.n	80064aa <UART_SetConfig+0x7ae>
 800647c:	2308      	movs	r3, #8
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006482:	e012      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006484:	2310      	movs	r3, #16
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648a:	e00e      	b.n	80064aa <UART_SetConfig+0x7ae>
 800648c:	2320      	movs	r3, #32
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006492:	e00a      	b.n	80064aa <UART_SetConfig+0x7ae>
 8006494:	2340      	movs	r3, #64	@ 0x40
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649a:	e006      	b.n	80064aa <UART_SetConfig+0x7ae>
 800649c:	2380      	movs	r3, #128	@ 0x80
 800649e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a2:	e002      	b.n	80064aa <UART_SetConfig+0x7ae>
 80064a4:	2380      	movs	r3, #128	@ 0x80
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a55      	ldr	r2, [pc, #340]	@ (8006604 <UART_SetConfig+0x908>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	f040 80f8 	bne.w	80066a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	dc46      	bgt.n	800654c <UART_SetConfig+0x850>
 80064be:	2b02      	cmp	r3, #2
 80064c0:	db75      	blt.n	80065ae <UART_SetConfig+0x8b2>
 80064c2:	3b02      	subs	r3, #2
 80064c4:	2b1e      	cmp	r3, #30
 80064c6:	d872      	bhi.n	80065ae <UART_SetConfig+0x8b2>
 80064c8:	a201      	add	r2, pc, #4	@ (adr r2, 80064d0 <UART_SetConfig+0x7d4>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	08006553 	.word	0x08006553
 80064d4:	080065af 	.word	0x080065af
 80064d8:	0800655b 	.word	0x0800655b
 80064dc:	080065af 	.word	0x080065af
 80064e0:	080065af 	.word	0x080065af
 80064e4:	080065af 	.word	0x080065af
 80064e8:	0800656b 	.word	0x0800656b
 80064ec:	080065af 	.word	0x080065af
 80064f0:	080065af 	.word	0x080065af
 80064f4:	080065af 	.word	0x080065af
 80064f8:	080065af 	.word	0x080065af
 80064fc:	080065af 	.word	0x080065af
 8006500:	080065af 	.word	0x080065af
 8006504:	080065af 	.word	0x080065af
 8006508:	0800657b 	.word	0x0800657b
 800650c:	080065af 	.word	0x080065af
 8006510:	080065af 	.word	0x080065af
 8006514:	080065af 	.word	0x080065af
 8006518:	080065af 	.word	0x080065af
 800651c:	080065af 	.word	0x080065af
 8006520:	080065af 	.word	0x080065af
 8006524:	080065af 	.word	0x080065af
 8006528:	080065af 	.word	0x080065af
 800652c:	080065af 	.word	0x080065af
 8006530:	080065af 	.word	0x080065af
 8006534:	080065af 	.word	0x080065af
 8006538:	080065af 	.word	0x080065af
 800653c:	080065af 	.word	0x080065af
 8006540:	080065af 	.word	0x080065af
 8006544:	080065af 	.word	0x080065af
 8006548:	080065a1 	.word	0x080065a1
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	d02a      	beq.n	80065a6 <UART_SetConfig+0x8aa>
 8006550:	e02d      	b.n	80065ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006552:	f7fd fffb 	bl	800454c <HAL_RCCEx_GetD3PCLK1Freq>
 8006556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006558:	e02f      	b.n	80065ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe f80a 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006568:	e027      	b.n	80065ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656a:	f107 0318 	add.w	r3, r7, #24
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe f956 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006578:	e01f      	b.n	80065ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800657a:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <UART_SetConfig+0x904>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006586:	4b1e      	ldr	r3, [pc, #120]	@ (8006600 <UART_SetConfig+0x904>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	08db      	lsrs	r3, r3, #3
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <UART_SetConfig+0x90c>)
 8006592:	fa22 f303 	lsr.w	r3, r2, r3
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006598:	e00f      	b.n	80065ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800659a:	4b1b      	ldr	r3, [pc, #108]	@ (8006608 <UART_SetConfig+0x90c>)
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800659e:	e00c      	b.n	80065ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065a0:	4b1a      	ldr	r3, [pc, #104]	@ (800660c <UART_SetConfig+0x910>)
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a4:	e009      	b.n	80065ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ac:	e005      	b.n	80065ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 81ee 	beq.w	800699e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c6:	4a12      	ldr	r2, [pc, #72]	@ (8006610 <UART_SetConfig+0x914>)
 80065c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d305      	bcc.n	80065f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d910      	bls.n	8006614 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065f8:	e1d1      	b.n	800699e <UART_SetConfig+0xca2>
 80065fa:	bf00      	nop
 80065fc:	40011c00 	.word	0x40011c00
 8006600:	58024400 	.word	0x58024400
 8006604:	58000c00 	.word	0x58000c00
 8006608:	03d09000 	.word	0x03d09000
 800660c:	003d0900 	.word	0x003d0900
 8006610:	0800a72c 	.word	0x0800a72c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006616:	2200      	movs	r2, #0
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	60fa      	str	r2, [r7, #12]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006620:	4ac0      	ldr	r2, [pc, #768]	@ (8006924 <UART_SetConfig+0xc28>)
 8006622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006626:	b29b      	uxth	r3, r3
 8006628:	2200      	movs	r2, #0
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006636:	f7f9 fec3 	bl	80003c0 <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4610      	mov	r0, r2
 8006640:	4619      	mov	r1, r3
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	020b      	lsls	r3, r1, #8
 800664c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006650:	0202      	lsls	r2, r0, #8
 8006652:	6979      	ldr	r1, [r7, #20]
 8006654:	6849      	ldr	r1, [r1, #4]
 8006656:	0849      	lsrs	r1, r1, #1
 8006658:	2000      	movs	r0, #0
 800665a:	460c      	mov	r4, r1
 800665c:	4605      	mov	r5, r0
 800665e:	eb12 0804 	adds.w	r8, r2, r4
 8006662:	eb43 0905 	adc.w	r9, r3, r5
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	469a      	mov	sl, r3
 800666e:	4693      	mov	fp, r2
 8006670:	4652      	mov	r2, sl
 8006672:	465b      	mov	r3, fp
 8006674:	4640      	mov	r0, r8
 8006676:	4649      	mov	r1, r9
 8006678:	f7f9 fea2 	bl	80003c0 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800668a:	d308      	bcc.n	800669e <UART_SetConfig+0x9a2>
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006692:	d204      	bcs.n	800669e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	e17f      	b.n	800699e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066a4:	e17b      	b.n	800699e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ae:	f040 80bd 	bne.w	800682c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80066b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	dc48      	bgt.n	800674c <UART_SetConfig+0xa50>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	db7b      	blt.n	80067b6 <UART_SetConfig+0xaba>
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d879      	bhi.n	80067b6 <UART_SetConfig+0xaba>
 80066c2:	a201      	add	r2, pc, #4	@ (adr r2, 80066c8 <UART_SetConfig+0x9cc>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	08006753 	.word	0x08006753
 80066cc:	0800675b 	.word	0x0800675b
 80066d0:	080067b7 	.word	0x080067b7
 80066d4:	080067b7 	.word	0x080067b7
 80066d8:	08006763 	.word	0x08006763
 80066dc:	080067b7 	.word	0x080067b7
 80066e0:	080067b7 	.word	0x080067b7
 80066e4:	080067b7 	.word	0x080067b7
 80066e8:	08006773 	.word	0x08006773
 80066ec:	080067b7 	.word	0x080067b7
 80066f0:	080067b7 	.word	0x080067b7
 80066f4:	080067b7 	.word	0x080067b7
 80066f8:	080067b7 	.word	0x080067b7
 80066fc:	080067b7 	.word	0x080067b7
 8006700:	080067b7 	.word	0x080067b7
 8006704:	080067b7 	.word	0x080067b7
 8006708:	08006783 	.word	0x08006783
 800670c:	080067b7 	.word	0x080067b7
 8006710:	080067b7 	.word	0x080067b7
 8006714:	080067b7 	.word	0x080067b7
 8006718:	080067b7 	.word	0x080067b7
 800671c:	080067b7 	.word	0x080067b7
 8006720:	080067b7 	.word	0x080067b7
 8006724:	080067b7 	.word	0x080067b7
 8006728:	080067b7 	.word	0x080067b7
 800672c:	080067b7 	.word	0x080067b7
 8006730:	080067b7 	.word	0x080067b7
 8006734:	080067b7 	.word	0x080067b7
 8006738:	080067b7 	.word	0x080067b7
 800673c:	080067b7 	.word	0x080067b7
 8006740:	080067b7 	.word	0x080067b7
 8006744:	080067b7 	.word	0x080067b7
 8006748:	080067a9 	.word	0x080067a9
 800674c:	2b40      	cmp	r3, #64	@ 0x40
 800674e:	d02e      	beq.n	80067ae <UART_SetConfig+0xab2>
 8006750:	e031      	b.n	80067b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006752:	f7fc fced 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8006756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006758:	e033      	b.n	80067c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800675a:	f7fc fcff 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 800675e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006760:	e02f      	b.n	80067c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006766:	4618      	mov	r0, r3
 8006768:	f7fd ff06 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006770:	e027      	b.n	80067c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006772:	f107 0318 	add.w	r3, r7, #24
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe f852 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006780:	e01f      	b.n	80067c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006782:	4b69      	ldr	r3, [pc, #420]	@ (8006928 <UART_SetConfig+0xc2c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800678e:	4b66      	ldr	r3, [pc, #408]	@ (8006928 <UART_SetConfig+0xc2c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	08db      	lsrs	r3, r3, #3
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	4a64      	ldr	r2, [pc, #400]	@ (800692c <UART_SetConfig+0xc30>)
 800679a:	fa22 f303 	lsr.w	r3, r2, r3
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067a0:	e00f      	b.n	80067c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80067a2:	4b62      	ldr	r3, [pc, #392]	@ (800692c <UART_SetConfig+0xc30>)
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a6:	e00c      	b.n	80067c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067a8:	4b61      	ldr	r3, [pc, #388]	@ (8006930 <UART_SetConfig+0xc34>)
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067ac:	e009      	b.n	80067c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b4:	e005      	b.n	80067c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 80ea 	beq.w	800699e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ce:	4a55      	ldr	r2, [pc, #340]	@ (8006924 <UART_SetConfig+0xc28>)
 80067d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067dc:	005a      	lsls	r2, r3, #1
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	441a      	add	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d916      	bls.n	8006824 <UART_SetConfig+0xb28>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fc:	d212      	bcs.n	8006824 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	b29b      	uxth	r3, r3
 8006802:	f023 030f 	bic.w	r3, r3, #15
 8006806:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	b29b      	uxth	r3, r3
 800680e:	f003 0307 	and.w	r3, r3, #7
 8006812:	b29a      	uxth	r2, r3
 8006814:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006816:	4313      	orrs	r3, r2
 8006818:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006820:	60da      	str	r2, [r3, #12]
 8006822:	e0bc      	b.n	800699e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800682a:	e0b8      	b.n	800699e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800682c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006830:	2b20      	cmp	r3, #32
 8006832:	dc4b      	bgt.n	80068cc <UART_SetConfig+0xbd0>
 8006834:	2b00      	cmp	r3, #0
 8006836:	f2c0 8087 	blt.w	8006948 <UART_SetConfig+0xc4c>
 800683a:	2b20      	cmp	r3, #32
 800683c:	f200 8084 	bhi.w	8006948 <UART_SetConfig+0xc4c>
 8006840:	a201      	add	r2, pc, #4	@ (adr r2, 8006848 <UART_SetConfig+0xb4c>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	080068d3 	.word	0x080068d3
 800684c:	080068db 	.word	0x080068db
 8006850:	08006949 	.word	0x08006949
 8006854:	08006949 	.word	0x08006949
 8006858:	080068e3 	.word	0x080068e3
 800685c:	08006949 	.word	0x08006949
 8006860:	08006949 	.word	0x08006949
 8006864:	08006949 	.word	0x08006949
 8006868:	080068f3 	.word	0x080068f3
 800686c:	08006949 	.word	0x08006949
 8006870:	08006949 	.word	0x08006949
 8006874:	08006949 	.word	0x08006949
 8006878:	08006949 	.word	0x08006949
 800687c:	08006949 	.word	0x08006949
 8006880:	08006949 	.word	0x08006949
 8006884:	08006949 	.word	0x08006949
 8006888:	08006903 	.word	0x08006903
 800688c:	08006949 	.word	0x08006949
 8006890:	08006949 	.word	0x08006949
 8006894:	08006949 	.word	0x08006949
 8006898:	08006949 	.word	0x08006949
 800689c:	08006949 	.word	0x08006949
 80068a0:	08006949 	.word	0x08006949
 80068a4:	08006949 	.word	0x08006949
 80068a8:	08006949 	.word	0x08006949
 80068ac:	08006949 	.word	0x08006949
 80068b0:	08006949 	.word	0x08006949
 80068b4:	08006949 	.word	0x08006949
 80068b8:	08006949 	.word	0x08006949
 80068bc:	08006949 	.word	0x08006949
 80068c0:	08006949 	.word	0x08006949
 80068c4:	08006949 	.word	0x08006949
 80068c8:	0800693b 	.word	0x0800693b
 80068cc:	2b40      	cmp	r3, #64	@ 0x40
 80068ce:	d037      	beq.n	8006940 <UART_SetConfig+0xc44>
 80068d0:	e03a      	b.n	8006948 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d2:	f7fc fc2d 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 80068d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068d8:	e03c      	b.n	8006954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068da:	f7fc fc3f 	bl	800315c <HAL_RCC_GetPCLK2Freq>
 80068de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068e0:	e038      	b.n	8006954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd fe46 	bl	8004578 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f0:	e030      	b.n	8006954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f2:	f107 0318 	add.w	r3, r7, #24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fd ff92 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006900:	e028      	b.n	8006954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006902:	4b09      	ldr	r3, [pc, #36]	@ (8006928 <UART_SetConfig+0xc2c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d012      	beq.n	8006934 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800690e:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <UART_SetConfig+0xc2c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	f003 0303 	and.w	r3, r3, #3
 8006918:	4a04      	ldr	r2, [pc, #16]	@ (800692c <UART_SetConfig+0xc30>)
 800691a:	fa22 f303 	lsr.w	r3, r2, r3
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006920:	e018      	b.n	8006954 <UART_SetConfig+0xc58>
 8006922:	bf00      	nop
 8006924:	0800a72c 	.word	0x0800a72c
 8006928:	58024400 	.word	0x58024400
 800692c:	03d09000 	.word	0x03d09000
 8006930:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006934:	4b24      	ldr	r3, [pc, #144]	@ (80069c8 <UART_SetConfig+0xccc>)
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006938:	e00c      	b.n	8006954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800693a:	4b24      	ldr	r3, [pc, #144]	@ (80069cc <UART_SetConfig+0xcd0>)
 800693c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800693e:	e009      	b.n	8006954 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006940:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006946:	e005      	b.n	8006954 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006952:	bf00      	nop
    }

    if (pclk != 0U)
 8006954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d021      	beq.n	800699e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695e:	4a1c      	ldr	r2, [pc, #112]	@ (80069d0 <UART_SetConfig+0xcd4>)
 8006960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006964:	461a      	mov	r2, r3
 8006966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006968:	fbb3 f2f2 	udiv	r2, r3, r2
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	441a      	add	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	fbb2 f3f3 	udiv	r3, r2, r3
 800697c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006980:	2b0f      	cmp	r3, #15
 8006982:	d909      	bls.n	8006998 <UART_SetConfig+0xc9c>
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698a:	d205      	bcs.n	8006998 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800698c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698e:	b29a      	uxth	r2, r3
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60da      	str	r2, [r3, #12]
 8006996:	e002      	b.n	800699e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2200      	movs	r2, #0
 80069b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	2200      	movs	r2, #0
 80069b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80069ba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3748      	adds	r7, #72	@ 0x48
 80069c2:	46bd      	mov	sp, r7
 80069c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069c8:	03d09000 	.word	0x03d09000
 80069cc:	003d0900 	.word	0x003d0900
 80069d0:	0800a72c 	.word	0x0800a72c

080069d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00a      	beq.n	80069fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01a      	beq.n	8006aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ad2:	d10a      	bne.n	8006aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00a      	beq.n	8006b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b098      	sub	sp, #96	@ 0x60
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b28:	f7fa fb04 	bl	8001134 <HAL_GetTick>
 8006b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0308 	and.w	r3, r3, #8
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d12f      	bne.n	8006b9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b44:	2200      	movs	r2, #0
 8006b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f88e 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d022      	beq.n	8006b9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e6      	bne.n	8006b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e063      	b.n	8006c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d149      	bne.n	8006c3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006baa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f857 	bl	8006c6c <UART_WaitOnFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d03c      	beq.n	8006c3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e6      	bne.n	8006bc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3308      	adds	r3, #8
 8006c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c16:	61fa      	str	r2, [r7, #28]
 8006c18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	69b9      	ldr	r1, [r7, #24]
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	617b      	str	r3, [r7, #20]
   return(result);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e5      	bne.n	8006bf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e012      	b.n	8006c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3758      	adds	r7, #88	@ 0x58
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7c:	e04f      	b.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d04b      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fa fa55 	bl	8001134 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e04e      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d037      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b80      	cmp	r3, #128	@ 0x80
 8006cb2:	d034      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b40      	cmp	r3, #64	@ 0x40
 8006cb8:	d031      	beq.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d110      	bne.n	8006cea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f000 f839 	bl	8006d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2208      	movs	r2, #8
 8006cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e029      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf8:	d111      	bne.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 f81f 	bl	8006d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e00f      	b.n	8006d3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4013      	ands	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2301      	moveq	r3, #1
 8006d30:	2300      	movne	r3, #0
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d0a0      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
	...

08006d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b095      	sub	sp, #84	@ 0x54
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e6      	bne.n	8006d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	4b1e      	ldr	r3, [pc, #120]	@ (8006e10 <UART_EndRxTransfer+0xc8>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e5      	bne.n	8006d82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d118      	bne.n	8006df0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f023 0310 	bic.w	r3, r3, #16
 8006dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ddc:	61bb      	str	r3, [r7, #24]
 8006dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6979      	ldr	r1, [r7, #20]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e04:	bf00      	nop
 8006e06:	3754      	adds	r7, #84	@ 0x54
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	effffffe 	.word	0xeffffffe

08006e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f7fe ff50 	bl	8005cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6979      	ldr	r1, [r7, #20]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e6      	bne.n	8006e40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7fe ff1b 	bl	8005cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e86:	bf00      	nop
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e027      	b.n	8006f30 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2224      	movs	r2, #36	@ 0x24
 8006eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e02d      	b.n	8006fb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2224      	movs	r2, #36	@ 0x24
 8006f60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f022 0201 	bic.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f84f 	bl	8007034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e02d      	b.n	800702c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2224      	movs	r2, #36	@ 0x24
 8006fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0201 	bic.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f811 	bl	8007034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007040:	2b00      	cmp	r3, #0
 8007042:	d108      	bne.n	8007056 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007054:	e031      	b.n	80070ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007056:	2310      	movs	r3, #16
 8007058:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800705a:	2310      	movs	r3, #16
 800705c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	0e5b      	lsrs	r3, r3, #25
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	0f5b      	lsrs	r3, r3, #29
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	7b3a      	ldrb	r2, [r7, #12]
 8007082:	4911      	ldr	r1, [pc, #68]	@ (80070c8 <UARTEx_SetNbDataToProcess+0x94>)
 8007084:	5c8a      	ldrb	r2, [r1, r2]
 8007086:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800708a:	7b3a      	ldrb	r2, [r7, #12]
 800708c:	490f      	ldr	r1, [pc, #60]	@ (80070cc <UARTEx_SetNbDataToProcess+0x98>)
 800708e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007090:	fb93 f3f2 	sdiv	r3, r3, r2
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	7b7a      	ldrb	r2, [r7, #13]
 80070a0:	4909      	ldr	r1, [pc, #36]	@ (80070c8 <UARTEx_SetNbDataToProcess+0x94>)
 80070a2:	5c8a      	ldrb	r2, [r1, r2]
 80070a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070a8:	7b7a      	ldrb	r2, [r7, #13]
 80070aa:	4908      	ldr	r1, [pc, #32]	@ (80070cc <UARTEx_SetNbDataToProcess+0x98>)
 80070ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	0800a744 	.word	0x0800a744
 80070cc:	0800a74c 	.word	0x0800a74c

080070d0 <__NVIC_SetPriority>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4603      	mov	r3, r0
 80070d8:	6039      	str	r1, [r7, #0]
 80070da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db0a      	blt.n	80070fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	490c      	ldr	r1, [pc, #48]	@ (800711c <__NVIC_SetPriority+0x4c>)
 80070ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ee:	0112      	lsls	r2, r2, #4
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	440b      	add	r3, r1
 80070f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80070f8:	e00a      	b.n	8007110 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	4908      	ldr	r1, [pc, #32]	@ (8007120 <__NVIC_SetPriority+0x50>)
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3b04      	subs	r3, #4
 8007108:	0112      	lsls	r2, r2, #4
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	440b      	add	r3, r1
 800710e:	761a      	strb	r2, [r3, #24]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	e000e100 	.word	0xe000e100
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007128:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <SysTick_Handler+0x1c>)
 800712a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800712c:	f001 fd46 	bl	8008bbc <xTaskGetSchedulerState>
 8007130:	4603      	mov	r3, r0
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007136:	f002 fb3f 	bl	80097b8 <xPortSysTickHandler>
  }
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	e000e010 	.word	0xe000e010

08007144 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007148:	2100      	movs	r1, #0
 800714a:	f06f 0004 	mvn.w	r0, #4
 800714e:	f7ff ffbf 	bl	80070d0 <__NVIC_SetPriority>
#endif
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800715e:	f3ef 8305 	mrs	r3, IPSR
 8007162:	603b      	str	r3, [r7, #0]
  return(result);
 8007164:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800716a:	f06f 0305 	mvn.w	r3, #5
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	e00c      	b.n	800718c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007172:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <osKernelInitialize+0x44>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800717a:	4b08      	ldr	r3, [pc, #32]	@ (800719c <osKernelInitialize+0x44>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007180:	2300      	movs	r3, #0
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	e002      	b.n	800718c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007186:	f04f 33ff 	mov.w	r3, #4294967295
 800718a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800718c:	687b      	ldr	r3, [r7, #4]
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	24000204 	.word	0x24000204

080071a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a6:	f3ef 8305 	mrs	r3, IPSR
 80071aa:	603b      	str	r3, [r7, #0]
  return(result);
 80071ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80071b2:	f06f 0305 	mvn.w	r3, #5
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	e010      	b.n	80071dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071ba:	4b0b      	ldr	r3, [pc, #44]	@ (80071e8 <osKernelStart+0x48>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d109      	bne.n	80071d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071c2:	f7ff ffbf 	bl	8007144 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071c6:	4b08      	ldr	r3, [pc, #32]	@ (80071e8 <osKernelStart+0x48>)
 80071c8:	2202      	movs	r2, #2
 80071ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071cc:	f001 f892 	bl	80082f4 <vTaskStartScheduler>
      stat = osOK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	e002      	b.n	80071dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071dc:	687b      	ldr	r3, [r7, #4]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	24000204 	.word	0x24000204

080071ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	@ 0x38
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071fc:	f3ef 8305 	mrs	r3, IPSR
 8007200:	617b      	str	r3, [r7, #20]
  return(result);
 8007202:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007204:	2b00      	cmp	r3, #0
 8007206:	d17e      	bne.n	8007306 <osThreadNew+0x11a>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d07b      	beq.n	8007306 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800720e:	2380      	movs	r3, #128	@ 0x80
 8007210:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007212:	2318      	movs	r3, #24
 8007214:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800721a:	f04f 33ff 	mov.w	r3, #4294967295
 800721e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d045      	beq.n	80072b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <osThreadNew+0x48>
        name = attr->name;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d008      	beq.n	800725a <osThreadNew+0x6e>
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b38      	cmp	r3, #56	@ 0x38
 800724c:	d805      	bhi.n	800725a <osThreadNew+0x6e>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <osThreadNew+0x72>
        return (NULL);
 800725a:	2300      	movs	r3, #0
 800725c:	e054      	b.n	8007308 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	089b      	lsrs	r3, r3, #2
 800726c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <osThreadNew+0xa8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2ba7      	cmp	r3, #167	@ 0xa7
 800727c:	d90a      	bls.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007282:	2b00      	cmp	r3, #0
 8007284:	d006      	beq.n	8007294 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <osThreadNew+0xa8>
        mem = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61bb      	str	r3, [r7, #24]
 8007292:	e010      	b.n	80072b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10c      	bne.n	80072b6 <osThreadNew+0xca>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <osThreadNew+0xca>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <osThreadNew+0xca>
          mem = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e001      	b.n	80072b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d110      	bne.n	80072de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072c4:	9202      	str	r2, [sp, #8]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a3a      	ldr	r2, [r7, #32]
 80072d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fe1a 	bl	8007f0c <xTaskCreateStatic>
 80072d8:	4603      	mov	r3, r0
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	e013      	b.n	8007306 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d110      	bne.n	8007306 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	9301      	str	r3, [sp, #4]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fe68 	bl	8007fcc <xTaskCreate>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d001      	beq.n	8007306 <osThreadNew+0x11a>
            hTask = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007306:	693b      	ldr	r3, [r7, #16]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	@ 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007318:	f3ef 8305 	mrs	r3, IPSR
 800731c:	60bb      	str	r3, [r7, #8]
  return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007320:	2b00      	cmp	r3, #0
 8007322:	d003      	beq.n	800732c <osDelay+0x1c>
    stat = osErrorISR;
 8007324:	f06f 0305 	mvn.w	r3, #5
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e007      	b.n	800733c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 ffa6 	bl	8008288 <vTaskDelay>
    }
  }

  return (stat);
 800733c:	68fb      	ldr	r3, [r7, #12]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a07      	ldr	r2, [pc, #28]	@ (8007374 <vApplicationGetIdleTaskMemory+0x2c>)
 8007358:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	4a06      	ldr	r2, [pc, #24]	@ (8007378 <vApplicationGetIdleTaskMemory+0x30>)
 800735e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2280      	movs	r2, #128	@ 0x80
 8007364:	601a      	str	r2, [r3, #0]
}
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	24000208 	.word	0x24000208
 8007378:	240002b0 	.word	0x240002b0

0800737c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4a07      	ldr	r2, [pc, #28]	@ (80073a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800738c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	4a06      	ldr	r2, [pc, #24]	@ (80073ac <vApplicationGetTimerTaskMemory+0x30>)
 8007392:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800739a:	601a      	str	r2, [r3, #0]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	240004b0 	.word	0x240004b0
 80073ac:	24000558 	.word	0x24000558

080073b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f103 0208 	add.w	r2, r3, #8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f103 0208 	add.w	r2, r3, #8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 0208 	add.w	r2, r3, #8
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
}
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d103      	bne.n	8007472 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e00c      	b.n	800748c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3308      	adds	r3, #8
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e002      	b.n	8007480 <vListInsert+0x2e>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d2f6      	bcs.n	800747a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	6892      	ldr	r2, [r2, #8]
 80074da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6852      	ldr	r2, [r2, #4]
 80074e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d103      	bne.n	80074f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007544:	f002 f8a8 	bl	8009698 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	68f9      	ldr	r1, [r7, #12]
 8007552:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007554:	fb01 f303 	mul.w	r3, r1, r3
 8007558:	441a      	add	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007574:	3b01      	subs	r3, #1
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	441a      	add	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	22ff      	movs	r2, #255	@ 0xff
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	22ff      	movs	r2, #255	@ 0xff
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d114      	bne.n	80075c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01a      	beq.n	80075d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3310      	adds	r3, #16
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 f942 	bl	8008830 <xTaskRemoveFromEventList>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d012      	beq.n	80075d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075b2:	4b0d      	ldr	r3, [pc, #52]	@ (80075e8 <xQueueGenericReset+0xd0>)
 80075b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	e009      	b.n	80075d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3310      	adds	r3, #16
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fef1 	bl	80073b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3324      	adds	r3, #36	@ 0x24
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7ff feec 	bl	80073b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075d8:	f002 f890 	bl	80096fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075dc:	2301      	movs	r3, #1
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08e      	sub	sp, #56	@ 0x38
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10b      	bne.n	8007618 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007612:	bf00      	nop
 8007614:	bf00      	nop
 8007616:	e7fd      	b.n	8007614 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <xQueueGenericCreateStatic+0x56>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <xQueueGenericCreateStatic+0x5a>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericCreateStatic+0x5c>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	623b      	str	r3, [r7, #32]
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d102      	bne.n	8007670 <xQueueGenericCreateStatic+0x84>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <xQueueGenericCreateStatic+0x88>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <xQueueGenericCreateStatic+0x8a>
 8007674:	2300      	movs	r3, #0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	61fb      	str	r3, [r7, #28]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007692:	2350      	movs	r3, #80	@ 0x50
 8007694:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b50      	cmp	r3, #80	@ 0x50
 800769a:	d00b      	beq.n	80076b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	61bb      	str	r3, [r7, #24]
}
 80076ae:	bf00      	nop
 80076b0:	bf00      	nop
 80076b2:	e7fd      	b.n	80076b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80076ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00d      	beq.n	80076dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80076cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f805 	bl	80076e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80076de:	4618      	mov	r0, r3
 80076e0:	3730      	adds	r7, #48	@ 0x30
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
 80076f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d103      	bne.n	8007702 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e002      	b.n	8007708 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007714:	2101      	movs	r1, #1
 8007716:	69b8      	ldr	r0, [r7, #24]
 8007718:	f7ff fefe 	bl	8007518 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08e      	sub	sp, #56	@ 0x38
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10b      	bne.n	8007760 <xQueueGenericSend+0x34>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <xQueueGenericSend+0x42>
 8007766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <xQueueGenericSend+0x46>
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <xQueueGenericSend+0x48>
 8007772:	2300      	movs	r3, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <xQueueGenericSend+0x64>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	e7fd      	b.n	800778c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d103      	bne.n	800779e <xQueueGenericSend+0x72>
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <xQueueGenericSend+0x76>
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <xQueueGenericSend+0x78>
 80077a2:	2300      	movs	r3, #0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10b      	bne.n	80077c0 <xQueueGenericSend+0x94>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	623b      	str	r3, [r7, #32]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077c0:	f001 f9fc 	bl	8008bbc <xTaskGetSchedulerState>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d102      	bne.n	80077d0 <xQueueGenericSend+0xa4>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xQueueGenericSend+0xa8>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <xQueueGenericSend+0xaa>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	61fb      	str	r3, [r7, #28]
}
 80077ec:	bf00      	nop
 80077ee:	bf00      	nop
 80077f0:	e7fd      	b.n	80077ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077f2:	f001 ff51 	bl	8009698 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <xQueueGenericSend+0xdc>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d129      	bne.n	800785c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800780e:	f000 fa0f 	bl	8007c30 <prvCopyDataToQueue>
 8007812:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	3324      	adds	r3, #36	@ 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f001 f805 	bl	8008830 <xTaskRemoveFromEventList>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d013      	beq.n	8007854 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800782c:	4b3f      	ldr	r3, [pc, #252]	@ (800792c <xQueueGenericSend+0x200>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	e00a      	b.n	8007854 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007844:	4b39      	ldr	r3, [pc, #228]	@ (800792c <xQueueGenericSend+0x200>)
 8007846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007854:	f001 ff52 	bl	80096fc <vPortExitCritical>
				return pdPASS;
 8007858:	2301      	movs	r3, #1
 800785a:	e063      	b.n	8007924 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007862:	f001 ff4b 	bl	80096fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007866:	2300      	movs	r3, #0
 8007868:	e05c      	b.n	8007924 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007870:	f107 0314 	add.w	r3, r7, #20
 8007874:	4618      	mov	r0, r3
 8007876:	f001 f83f 	bl	80088f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800787e:	f001 ff3d 	bl	80096fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007882:	f000 fda7 	bl	80083d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007886:	f001 ff07 	bl	8009698 <vPortEnterCritical>
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007890:	b25b      	sxtb	r3, r3
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d103      	bne.n	80078a0 <xQueueGenericSend+0x174>
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078a6:	b25b      	sxtb	r3, r3
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d103      	bne.n	80078b6 <xQueueGenericSend+0x18a>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078b6:	f001 ff21 	bl	80096fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ba:	1d3a      	adds	r2, r7, #4
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f001 f82e 	bl	8008924 <xTaskCheckForTimeOut>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d124      	bne.n	8007918 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078d0:	f000 faa6 	bl	8007e20 <prvIsQueueFull>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	3310      	adds	r3, #16
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 ff52 	bl	800878c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078ea:	f000 fa31 	bl	8007d50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078ee:	f000 fd7f 	bl	80083f0 <xTaskResumeAll>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f af7c 	bne.w	80077f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078fa:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <xQueueGenericSend+0x200>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e772      	b.n	80077f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800790c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800790e:	f000 fa1f 	bl	8007d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007912:	f000 fd6d 	bl	80083f0 <xTaskResumeAll>
 8007916:	e76c      	b.n	80077f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800791a:	f000 fa19 	bl	8007d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791e:	f000 fd67 	bl	80083f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007924:	4618      	mov	r0, r3
 8007926:	3738      	adds	r7, #56	@ 0x38
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b090      	sub	sp, #64	@ 0x40
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
 800793c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <xQueueGenericSendFromISR+0x3e>
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <xQueueGenericSendFromISR+0x42>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGenericSendFromISR+0x44>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d103      	bne.n	800799e <xQueueGenericSendFromISR+0x6e>
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <xQueueGenericSendFromISR+0x72>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericSendFromISR+0x74>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	e7fd      	b.n	80079bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079c0:	f001 ff4a 	bl	8009858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079c4:	f3ef 8211 	mrs	r2, BASEPRI
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	61fa      	str	r2, [r7, #28]
 80079da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d302      	bcc.n	80079f2 <xQueueGenericSendFromISR+0xc2>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d12f      	bne.n	8007a52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	68b9      	ldr	r1, [r7, #8]
 8007a06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a08:	f000 f912 	bl	8007c30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a14:	d112      	bne.n	8007a3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d016      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a20:	3324      	adds	r3, #36	@ 0x24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 ff04 	bl	8008830 <xTaskRemoveFromEventList>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00e      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e007      	b.n	8007a4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a40:	3301      	adds	r3, #1
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	b25a      	sxtb	r2, r3
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a50:	e001      	b.n	8007a56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3740      	adds	r7, #64	@ 0x40
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08c      	sub	sp, #48	@ 0x30
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <xQueueReceive+0x32>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	623b      	str	r3, [r7, #32]
}
 8007a98:	bf00      	nop
 8007a9a:	bf00      	nop
 8007a9c:	e7fd      	b.n	8007a9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <xQueueReceive+0x40>
 8007aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <xQueueReceive+0x44>
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <xQueueReceive+0x46>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <xQueueReceive+0x62>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	61fb      	str	r3, [r7, #28]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ace:	f001 f875 	bl	8008bbc <xTaskGetSchedulerState>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <xQueueReceive+0x72>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <xQueueReceive+0x76>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueReceive+0x78>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <xQueueReceive+0x94>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	61bb      	str	r3, [r7, #24]
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b00:	f001 fdca 	bl	8009698 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01f      	beq.n	8007b50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b14:	f000 f8f6 	bl	8007d04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	1e5a      	subs	r2, r3, #1
 8007b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00f      	beq.n	8007b48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2a:	3310      	adds	r3, #16
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fe7f 	bl	8008830 <xTaskRemoveFromEventList>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b38:	4b3c      	ldr	r3, [pc, #240]	@ (8007c2c <xQueueReceive+0x1c0>)
 8007b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b48:	f001 fdd8 	bl	80096fc <vPortExitCritical>
				return pdPASS;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e069      	b.n	8007c24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b56:	f001 fdd1 	bl	80096fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e062      	b.n	8007c24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d106      	bne.n	8007b72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fec5 	bl	80088f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b72:	f001 fdc3 	bl	80096fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b76:	f000 fc2d 	bl	80083d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b7a:	f001 fd8d 	bl	8009698 <vPortEnterCritical>
 8007b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b84:	b25b      	sxtb	r3, r3
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d103      	bne.n	8007b94 <xQueueReceive+0x128>
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b9a:	b25b      	sxtb	r3, r3
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d103      	bne.n	8007baa <xQueueReceive+0x13e>
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007baa:	f001 fda7 	bl	80096fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bae:	1d3a      	adds	r2, r7, #4
 8007bb0:	f107 0310 	add.w	r3, r7, #16
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 feb4 	bl	8008924 <xTaskCheckForTimeOut>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d123      	bne.n	8007c0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bc4:	f000 f916 	bl	8007df4 <prvIsQueueEmpty>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d017      	beq.n	8007bfe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd0:	3324      	adds	r3, #36	@ 0x24
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fdd8 	bl	800878c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bde:	f000 f8b7 	bl	8007d50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007be2:	f000 fc05 	bl	80083f0 <xTaskResumeAll>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d189      	bne.n	8007b00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007bec:	4b0f      	ldr	r3, [pc, #60]	@ (8007c2c <xQueueReceive+0x1c0>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	e780      	b.n	8007b00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c00:	f000 f8a6 	bl	8007d50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c04:	f000 fbf4 	bl	80083f0 <xTaskResumeAll>
 8007c08:	e77a      	b.n	8007b00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c0c:	f000 f8a0 	bl	8007d50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c10:	f000 fbee 	bl	80083f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c16:	f000 f8ed 	bl	8007df4 <prvIsQueueEmpty>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f43f af6f 	beq.w	8007b00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3730      	adds	r7, #48	@ 0x30
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10d      	bne.n	8007c6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d14d      	bne.n	8007cf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 ffcc 	bl	8008bf8 <xTaskPriorityDisinherit>
 8007c60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	e043      	b.n	8007cf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d119      	bne.n	8007ca4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6858      	ldr	r0, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	f002 f8c6 	bl	8009e0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c88:	441a      	add	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d32b      	bcc.n	8007cf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	e026      	b.n	8007cf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68d8      	ldr	r0, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	461a      	mov	r2, r3
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	f002 f8ac 	bl	8009e0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cbc:	425b      	negs	r3, r3
 8007cbe:	441a      	add	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	68da      	ldr	r2, [r3, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d207      	bcs.n	8007ce0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd8:	425b      	negs	r3, r3
 8007cda:	441a      	add	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d105      	bne.n	8007cf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cfa:	697b      	ldr	r3, [r7, #20]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d018      	beq.n	8007d48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	441a      	add	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d303      	bcc.n	8007d38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68d9      	ldr	r1, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d40:	461a      	mov	r2, r3
 8007d42:	6838      	ldr	r0, [r7, #0]
 8007d44:	f002 f862 	bl	8009e0c <memcpy>
	}
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d58:	f001 fc9e 	bl	8009698 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d64:	e011      	b.n	8007d8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d012      	beq.n	8007d94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3324      	adds	r3, #36	@ 0x24
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fd5c 	bl	8008830 <xTaskRemoveFromEventList>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d7e:	f000 fe35 	bl	80089ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dce9      	bgt.n	8007d66 <prvUnlockQueue+0x16>
 8007d92:	e000      	b.n	8007d96 <prvUnlockQueue+0x46>
					break;
 8007d94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	22ff      	movs	r2, #255	@ 0xff
 8007d9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d9e:	f001 fcad 	bl	80096fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007da2:	f001 fc79 	bl	8009698 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dae:	e011      	b.n	8007dd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d012      	beq.n	8007dde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3310      	adds	r3, #16
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fd37 	bl	8008830 <xTaskRemoveFromEventList>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007dc8:	f000 fe10 	bl	80089ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dce9      	bgt.n	8007db0 <prvUnlockQueue+0x60>
 8007ddc:	e000      	b.n	8007de0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	22ff      	movs	r2, #255	@ 0xff
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007de8:	f001 fc88 	bl	80096fc <vPortExitCritical>
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dfc:	f001 fc4c 	bl	8009698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e001      	b.n	8007e12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e12:	f001 fc73 	bl	80096fc <vPortExitCritical>

	return xReturn;
 8007e16:	68fb      	ldr	r3, [r7, #12]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e28:	f001 fc36 	bl	8009698 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d102      	bne.n	8007e3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e001      	b.n	8007e42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e42:	f001 fc5b 	bl	80096fc <vPortExitCritical>

	return xReturn;
 8007e46:	68fb      	ldr	r3, [r7, #12]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	e014      	b.n	8007e8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e60:	4a0f      	ldr	r2, [pc, #60]	@ (8007ea0 <vQueueAddToRegistry+0x50>)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10b      	bne.n	8007e84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e6c:	490c      	ldr	r1, [pc, #48]	@ (8007ea0 <vQueueAddToRegistry+0x50>)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e76:	4a0a      	ldr	r2, [pc, #40]	@ (8007ea0 <vQueueAddToRegistry+0x50>)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e82:	e006      	b.n	8007e92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b07      	cmp	r3, #7
 8007e8e:	d9e7      	bls.n	8007e60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e90:	bf00      	nop
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	24000958 	.word	0x24000958

08007ea4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007eb4:	f001 fbf0 	bl	8009698 <vPortEnterCritical>
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ebe:	b25b      	sxtb	r3, r3
 8007ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec4:	d103      	bne.n	8007ece <vQueueWaitForMessageRestricted+0x2a>
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	d103      	bne.n	8007ee4 <vQueueWaitForMessageRestricted+0x40>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ee4:	f001 fc0a 	bl	80096fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d106      	bne.n	8007efe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	3324      	adds	r3, #36	@ 0x24
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fc6d 	bl	80087d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007efe:	6978      	ldr	r0, [r7, #20]
 8007f00:	f7ff ff26 	bl	8007d50 <prvUnlockQueue>
	}
 8007f04:	bf00      	nop
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	@ 0x38
 8007f10:	af04      	add	r7, sp, #16
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10b      	bne.n	8007f38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	623b      	str	r3, [r7, #32]
}
 8007f32:	bf00      	nop
 8007f34:	bf00      	nop
 8007f36:	e7fd      	b.n	8007f34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10b      	bne.n	8007f56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	61fb      	str	r3, [r7, #28]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f56:	23a8      	movs	r3, #168	@ 0xa8
 8007f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8007f5e:	d00b      	beq.n	8007f78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	61bb      	str	r3, [r7, #24]
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	e7fd      	b.n	8007f74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01e      	beq.n	8007fbe <xTaskCreateStatic+0xb2>
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d01b      	beq.n	8007fbe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f98:	2300      	movs	r3, #0
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	9302      	str	r3, [sp, #8]
 8007fa0:	f107 0314 	add.w	r3, r7, #20
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f851 	bl	8008058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fb8:	f000 f8f6 	bl	80081a8 <prvAddNewTaskToReadyList>
 8007fbc:	e001      	b.n	8007fc2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fc2:	697b      	ldr	r3, [r7, #20]
	}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3728      	adds	r7, #40	@ 0x28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08c      	sub	sp, #48	@ 0x30
 8007fd0:	af04      	add	r7, sp, #16
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fc7b 	bl	80098dc <pvPortMalloc>
 8007fe6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00e      	beq.n	800800c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fee:	20a8      	movs	r0, #168	@ 0xa8
 8007ff0:	f001 fc74 	bl	80098dc <pvPortMalloc>
 8007ff4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	631a      	str	r2, [r3, #48]	@ 0x30
 8008002:	e005      	b.n	8008010 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008004:	6978      	ldr	r0, [r7, #20]
 8008006:	f001 fd37 	bl	8009a78 <vPortFree>
 800800a:	e001      	b.n	8008010 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d017      	beq.n	8008046 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	2300      	movs	r3, #0
 8008022:	9303      	str	r3, [sp, #12]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	9302      	str	r3, [sp, #8]
 8008028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f80f 	bl	8008058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800803a:	69f8      	ldr	r0, [r7, #28]
 800803c:	f000 f8b4 	bl	80081a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008040:	2301      	movs	r3, #1
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	e002      	b.n	800804c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008046:	f04f 33ff 	mov.w	r3, #4294967295
 800804a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800804c:	69bb      	ldr	r3, [r7, #24]
	}
 800804e:	4618      	mov	r0, r3
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	461a      	mov	r2, r3
 8008070:	21a5      	movs	r1, #165	@ 0xa5
 8008072:	f001 fe41 	bl	8009cf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800807a:	6879      	ldr	r1, [r7, #4]
 800807c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008080:	440b      	add	r3, r1
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f023 0307 	bic.w	r3, r3, #7
 800808e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	617b      	str	r3, [r7, #20]
}
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	e7fd      	b.n	80080ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01f      	beq.n	80080f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	e012      	b.n	80080e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	7819      	ldrb	r1, [r3, #0]
 80080c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	3334      	adds	r3, #52	@ 0x34
 80080ce:	460a      	mov	r2, r1
 80080d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d006      	beq.n	80080ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3301      	adds	r3, #1
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	2b0f      	cmp	r3, #15
 80080e8:	d9e9      	bls.n	80080be <prvInitialiseNewTask+0x66>
 80080ea:	e000      	b.n	80080ee <prvInitialiseNewTask+0x96>
			{
				break;
 80080ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080f6:	e003      	b.n	8008100 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008102:	2b37      	cmp	r3, #55	@ 0x37
 8008104:	d901      	bls.n	800810a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008106:	2337      	movs	r3, #55	@ 0x37
 8008108:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800810e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008114:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2200      	movs	r2, #0
 800811a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff f965 	bl	80073f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008128:	3318      	adds	r3, #24
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff f960 	bl	80073f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008134:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800813c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008144:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	2200      	movs	r2, #0
 800814a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	2200      	movs	r2, #0
 8008152:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	3354      	adds	r3, #84	@ 0x54
 800815a:	224c      	movs	r2, #76	@ 0x4c
 800815c:	2100      	movs	r1, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fdca 	bl	8009cf8 <memset>
 8008164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008166:	4a0d      	ldr	r2, [pc, #52]	@ (800819c <prvInitialiseNewTask+0x144>)
 8008168:	659a      	str	r2, [r3, #88]	@ 0x58
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	4a0c      	ldr	r2, [pc, #48]	@ (80081a0 <prvInitialiseNewTask+0x148>)
 800816e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008172:	4a0c      	ldr	r2, [pc, #48]	@ (80081a4 <prvInitialiseNewTask+0x14c>)
 8008174:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	68f9      	ldr	r1, [r7, #12]
 800817a:	69b8      	ldr	r0, [r7, #24]
 800817c:	f001 f95a 	bl	8009434 <pxPortInitialiseStack>
 8008180:	4602      	mov	r2, r0
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008190:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008192:	bf00      	nop
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	24004bec 	.word	0x24004bec
 80081a0:	24004c54 	.word	0x24004c54
 80081a4:	24004cbc 	.word	0x24004cbc

080081a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081b0:	f001 fa72 	bl	8009698 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081b4:	4b2d      	ldr	r3, [pc, #180]	@ (800826c <prvAddNewTaskToReadyList+0xc4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3301      	adds	r3, #1
 80081ba:	4a2c      	ldr	r2, [pc, #176]	@ (800826c <prvAddNewTaskToReadyList+0xc4>)
 80081bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081be:	4b2c      	ldr	r3, [pc, #176]	@ (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081c6:	4a2a      	ldr	r2, [pc, #168]	@ (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081cc:	4b27      	ldr	r3, [pc, #156]	@ (800826c <prvAddNewTaskToReadyList+0xc4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d110      	bne.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081d4:	f000 fc2e 	bl	8008a34 <prvInitialiseTaskLists>
 80081d8:	e00d      	b.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081da:	4b26      	ldr	r3, [pc, #152]	@ (8008274 <prvAddNewTaskToReadyList+0xcc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081e2:	4b23      	ldr	r3, [pc, #140]	@ (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d802      	bhi.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081f6:	4b20      	ldr	r3, [pc, #128]	@ (8008278 <prvAddNewTaskToReadyList+0xd0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3301      	adds	r3, #1
 80081fc:	4a1e      	ldr	r2, [pc, #120]	@ (8008278 <prvAddNewTaskToReadyList+0xd0>)
 80081fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008200:	4b1d      	ldr	r3, [pc, #116]	@ (8008278 <prvAddNewTaskToReadyList+0xd0>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820c:	4b1b      	ldr	r3, [pc, #108]	@ (800827c <prvAddNewTaskToReadyList+0xd4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d903      	bls.n	800821c <prvAddNewTaskToReadyList+0x74>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	4a18      	ldr	r2, [pc, #96]	@ (800827c <prvAddNewTaskToReadyList+0xd4>)
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4a15      	ldr	r2, [pc, #84]	@ (8008280 <prvAddNewTaskToReadyList+0xd8>)
 800822a:	441a      	add	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3304      	adds	r3, #4
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f7ff f8e9 	bl	800740a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008238:	f001 fa60 	bl	80096fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800823c:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <prvAddNewTaskToReadyList+0xcc>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00e      	beq.n	8008262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008244:	4b0a      	ldr	r3, [pc, #40]	@ (8008270 <prvAddNewTaskToReadyList+0xc8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824e:	429a      	cmp	r2, r3
 8008250:	d207      	bcs.n	8008262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008252:	4b0c      	ldr	r3, [pc, #48]	@ (8008284 <prvAddNewTaskToReadyList+0xdc>)
 8008254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	24000e6c 	.word	0x24000e6c
 8008270:	24000998 	.word	0x24000998
 8008274:	24000e78 	.word	0x24000e78
 8008278:	24000e88 	.word	0x24000e88
 800827c:	24000e74 	.word	0x24000e74
 8008280:	2400099c 	.word	0x2400099c
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d018      	beq.n	80082cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800829a:	4b14      	ldr	r3, [pc, #80]	@ (80082ec <vTaskDelay+0x64>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00b      	beq.n	80082ba <vTaskDelay+0x32>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60bb      	str	r3, [r7, #8]
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082ba:	f000 f88b 	bl	80083d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082be:	2100      	movs	r1, #0
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fd09 	bl	8008cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082c6:	f000 f893 	bl	80083f0 <xTaskResumeAll>
 80082ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d107      	bne.n	80082e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082d2:	4b07      	ldr	r3, [pc, #28]	@ (80082f0 <vTaskDelay+0x68>)
 80082d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	24000e94 	.word	0x24000e94
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	@ 0x28
 80082f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008302:	463a      	mov	r2, r7
 8008304:	1d39      	adds	r1, r7, #4
 8008306:	f107 0308 	add.w	r3, r7, #8
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff f81c 	bl	8007348 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008310:	6839      	ldr	r1, [r7, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	9202      	str	r2, [sp, #8]
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	2300      	movs	r3, #0
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2300      	movs	r3, #0
 8008320:	460a      	mov	r2, r1
 8008322:	4924      	ldr	r1, [pc, #144]	@ (80083b4 <vTaskStartScheduler+0xc0>)
 8008324:	4824      	ldr	r0, [pc, #144]	@ (80083b8 <vTaskStartScheduler+0xc4>)
 8008326:	f7ff fdf1 	bl	8007f0c <xTaskCreateStatic>
 800832a:	4603      	mov	r3, r0
 800832c:	4a23      	ldr	r2, [pc, #140]	@ (80083bc <vTaskStartScheduler+0xc8>)
 800832e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008330:	4b22      	ldr	r3, [pc, #136]	@ (80083bc <vTaskStartScheduler+0xc8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008338:	2301      	movs	r3, #1
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	e001      	b.n	8008342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d102      	bne.n	800834e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008348:	f000 fd1a 	bl	8008d80 <xTimerCreateTimerTask>
 800834c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d11b      	bne.n	800838c <vTaskStartScheduler+0x98>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	613b      	str	r3, [r7, #16]
}
 8008366:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008368:	4b15      	ldr	r3, [pc, #84]	@ (80083c0 <vTaskStartScheduler+0xcc>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3354      	adds	r3, #84	@ 0x54
 800836e:	4a15      	ldr	r2, [pc, #84]	@ (80083c4 <vTaskStartScheduler+0xd0>)
 8008370:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008372:	4b15      	ldr	r3, [pc, #84]	@ (80083c8 <vTaskStartScheduler+0xd4>)
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800837a:	4b14      	ldr	r3, [pc, #80]	@ (80083cc <vTaskStartScheduler+0xd8>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008380:	4b13      	ldr	r3, [pc, #76]	@ (80083d0 <vTaskStartScheduler+0xdc>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008386:	f001 f8e3 	bl	8009550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800838a:	e00f      	b.n	80083ac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008392:	d10b      	bne.n	80083ac <vTaskStartScheduler+0xb8>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	60fb      	str	r3, [r7, #12]
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	e7fd      	b.n	80083a8 <vTaskStartScheduler+0xb4>
}
 80083ac:	bf00      	nop
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	0800a6e0 	.word	0x0800a6e0
 80083b8:	08008a05 	.word	0x08008a05
 80083bc:	24000e90 	.word	0x24000e90
 80083c0:	24000998 	.word	0x24000998
 80083c4:	24000014 	.word	0x24000014
 80083c8:	24000e8c 	.word	0x24000e8c
 80083cc:	24000e78 	.word	0x24000e78
 80083d0:	24000e70 	.word	0x24000e70

080083d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083d8:	4b04      	ldr	r3, [pc, #16]	@ (80083ec <vTaskSuspendAll+0x18>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3301      	adds	r3, #1
 80083de:	4a03      	ldr	r2, [pc, #12]	@ (80083ec <vTaskSuspendAll+0x18>)
 80083e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083e2:	bf00      	nop
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	24000e94 	.word	0x24000e94

080083f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083fe:	4b42      	ldr	r3, [pc, #264]	@ (8008508 <xTaskResumeAll+0x118>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10b      	bne.n	800841e <xTaskResumeAll+0x2e>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	603b      	str	r3, [r7, #0]
}
 8008418:	bf00      	nop
 800841a:	bf00      	nop
 800841c:	e7fd      	b.n	800841a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800841e:	f001 f93b 	bl	8009698 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008422:	4b39      	ldr	r3, [pc, #228]	@ (8008508 <xTaskResumeAll+0x118>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3b01      	subs	r3, #1
 8008428:	4a37      	ldr	r2, [pc, #220]	@ (8008508 <xTaskResumeAll+0x118>)
 800842a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800842c:	4b36      	ldr	r3, [pc, #216]	@ (8008508 <xTaskResumeAll+0x118>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d162      	bne.n	80084fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008434:	4b35      	ldr	r3, [pc, #212]	@ (800850c <xTaskResumeAll+0x11c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d05e      	beq.n	80084fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800843c:	e02f      	b.n	800849e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800843e:	4b34      	ldr	r3, [pc, #208]	@ (8008510 <xTaskResumeAll+0x120>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3318      	adds	r3, #24
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff f83a 	bl	80074c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3304      	adds	r3, #4
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff f835 	bl	80074c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845e:	4b2d      	ldr	r3, [pc, #180]	@ (8008514 <xTaskResumeAll+0x124>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d903      	bls.n	800846e <xTaskResumeAll+0x7e>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846a:	4a2a      	ldr	r2, [pc, #168]	@ (8008514 <xTaskResumeAll+0x124>)
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4a27      	ldr	r2, [pc, #156]	@ (8008518 <xTaskResumeAll+0x128>)
 800847c:	441a      	add	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7fe ffc0 	bl	800740a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800848e:	4b23      	ldr	r3, [pc, #140]	@ (800851c <xTaskResumeAll+0x12c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008494:	429a      	cmp	r2, r3
 8008496:	d302      	bcc.n	800849e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008498:	4b21      	ldr	r3, [pc, #132]	@ (8008520 <xTaskResumeAll+0x130>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800849e:	4b1c      	ldr	r3, [pc, #112]	@ (8008510 <xTaskResumeAll+0x120>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1cb      	bne.n	800843e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084ac:	f000 fb66 	bl	8008b7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008524 <xTaskResumeAll+0x134>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084bc:	f000 f846 	bl	800854c <xTaskIncrementTick>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084c6:	4b16      	ldr	r3, [pc, #88]	@ (8008520 <xTaskResumeAll+0x130>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f1      	bne.n	80084bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084d8:	4b12      	ldr	r3, [pc, #72]	@ (8008524 <xTaskResumeAll+0x134>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084de:	4b10      	ldr	r3, [pc, #64]	@ (8008520 <xTaskResumeAll+0x130>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008528 <xTaskResumeAll+0x138>)
 80084ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084fa:	f001 f8ff 	bl	80096fc <vPortExitCritical>

	return xAlreadyYielded;
 80084fe:	68bb      	ldr	r3, [r7, #8]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	24000e94 	.word	0x24000e94
 800850c:	24000e6c 	.word	0x24000e6c
 8008510:	24000e2c 	.word	0x24000e2c
 8008514:	24000e74 	.word	0x24000e74
 8008518:	2400099c 	.word	0x2400099c
 800851c:	24000998 	.word	0x24000998
 8008520:	24000e80 	.word	0x24000e80
 8008524:	24000e7c 	.word	0x24000e7c
 8008528:	e000ed04 	.word	0xe000ed04

0800852c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008532:	4b05      	ldr	r3, [pc, #20]	@ (8008548 <xTaskGetTickCount+0x1c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008538:	687b      	ldr	r3, [r7, #4]
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	24000e70 	.word	0x24000e70

0800854c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008556:	4b4f      	ldr	r3, [pc, #316]	@ (8008694 <xTaskIncrementTick+0x148>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	f040 8090 	bne.w	8008680 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008560:	4b4d      	ldr	r3, [pc, #308]	@ (8008698 <xTaskIncrementTick+0x14c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008568:	4a4b      	ldr	r2, [pc, #300]	@ (8008698 <xTaskIncrementTick+0x14c>)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d121      	bne.n	80085b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008574:	4b49      	ldr	r3, [pc, #292]	@ (800869c <xTaskIncrementTick+0x150>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <xTaskIncrementTick+0x4a>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	603b      	str	r3, [r7, #0]
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	e7fd      	b.n	8008592 <xTaskIncrementTick+0x46>
 8008596:	4b41      	ldr	r3, [pc, #260]	@ (800869c <xTaskIncrementTick+0x150>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	4b40      	ldr	r3, [pc, #256]	@ (80086a0 <xTaskIncrementTick+0x154>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a3e      	ldr	r2, [pc, #248]	@ (800869c <xTaskIncrementTick+0x150>)
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	4a3e      	ldr	r2, [pc, #248]	@ (80086a0 <xTaskIncrementTick+0x154>)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	4b3e      	ldr	r3, [pc, #248]	@ (80086a4 <xTaskIncrementTick+0x158>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3301      	adds	r3, #1
 80085b0:	4a3c      	ldr	r2, [pc, #240]	@ (80086a4 <xTaskIncrementTick+0x158>)
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	f000 fae2 	bl	8008b7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085b8:	4b3b      	ldr	r3, [pc, #236]	@ (80086a8 <xTaskIncrementTick+0x15c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d349      	bcc.n	8008656 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c2:	4b36      	ldr	r3, [pc, #216]	@ (800869c <xTaskIncrementTick+0x150>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d104      	bne.n	80085d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085cc:	4b36      	ldr	r3, [pc, #216]	@ (80086a8 <xTaskIncrementTick+0x15c>)
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295
 80085d2:	601a      	str	r2, [r3, #0]
					break;
 80085d4:	e03f      	b.n	8008656 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d6:	4b31      	ldr	r3, [pc, #196]	@ (800869c <xTaskIncrementTick+0x150>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d203      	bcs.n	80085f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085ee:	4a2e      	ldr	r2, [pc, #184]	@ (80086a8 <xTaskIncrementTick+0x15c>)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085f4:	e02f      	b.n	8008656 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe ff62 	bl	80074c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	3318      	adds	r3, #24
 800860c:	4618      	mov	r0, r3
 800860e:	f7fe ff59 	bl	80074c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	4b25      	ldr	r3, [pc, #148]	@ (80086ac <xTaskIncrementTick+0x160>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d903      	bls.n	8008626 <xTaskIncrementTick+0xda>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008622:	4a22      	ldr	r2, [pc, #136]	@ (80086ac <xTaskIncrementTick+0x160>)
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4a1f      	ldr	r2, [pc, #124]	@ (80086b0 <xTaskIncrementTick+0x164>)
 8008634:	441a      	add	r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7fe fee4 	bl	800740a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008646:	4b1b      	ldr	r3, [pc, #108]	@ (80086b4 <xTaskIncrementTick+0x168>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	429a      	cmp	r2, r3
 800864e:	d3b8      	bcc.n	80085c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008654:	e7b5      	b.n	80085c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008656:	4b17      	ldr	r3, [pc, #92]	@ (80086b4 <xTaskIncrementTick+0x168>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800865c:	4914      	ldr	r1, [pc, #80]	@ (80086b0 <xTaskIncrementTick+0x164>)
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d901      	bls.n	8008672 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008672:	4b11      	ldr	r3, [pc, #68]	@ (80086b8 <xTaskIncrementTick+0x16c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800867a:	2301      	movs	r3, #1
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e004      	b.n	800868a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008680:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <xTaskIncrementTick+0x170>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3301      	adds	r3, #1
 8008686:	4a0d      	ldr	r2, [pc, #52]	@ (80086bc <xTaskIncrementTick+0x170>)
 8008688:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800868a:	697b      	ldr	r3, [r7, #20]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	24000e94 	.word	0x24000e94
 8008698:	24000e70 	.word	0x24000e70
 800869c:	24000e24 	.word	0x24000e24
 80086a0:	24000e28 	.word	0x24000e28
 80086a4:	24000e84 	.word	0x24000e84
 80086a8:	24000e8c 	.word	0x24000e8c
 80086ac:	24000e74 	.word	0x24000e74
 80086b0:	2400099c 	.word	0x2400099c
 80086b4:	24000998 	.word	0x24000998
 80086b8:	24000e80 	.word	0x24000e80
 80086bc:	24000e7c 	.word	0x24000e7c

080086c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008774 <vTaskSwitchContext+0xb4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008778 <vTaskSwitchContext+0xb8>)
 80086d0:	2201      	movs	r2, #1
 80086d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086d4:	e047      	b.n	8008766 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80086d6:	4b28      	ldr	r3, [pc, #160]	@ (8008778 <vTaskSwitchContext+0xb8>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086dc:	4b27      	ldr	r3, [pc, #156]	@ (800877c <vTaskSwitchContext+0xbc>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	e011      	b.n	8008708 <vTaskSwitchContext+0x48>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10b      	bne.n	8008702 <vTaskSwitchContext+0x42>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <vTaskSwitchContext+0x3e>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3b01      	subs	r3, #1
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	491d      	ldr	r1, [pc, #116]	@ (8008780 <vTaskSwitchContext+0xc0>)
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0e3      	beq.n	80086e4 <vTaskSwitchContext+0x24>
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4a16      	ldr	r2, [pc, #88]	@ (8008780 <vTaskSwitchContext+0xc0>)
 8008728:	4413      	add	r3, r2
 800872a:	60bb      	str	r3, [r7, #8]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	605a      	str	r2, [r3, #4]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	3308      	adds	r3, #8
 800873e:	429a      	cmp	r2, r3
 8008740:	d104      	bne.n	800874c <vTaskSwitchContext+0x8c>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	605a      	str	r2, [r3, #4]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	4a0c      	ldr	r2, [pc, #48]	@ (8008784 <vTaskSwitchContext+0xc4>)
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	4a09      	ldr	r2, [pc, #36]	@ (800877c <vTaskSwitchContext+0xbc>)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800875c:	4b09      	ldr	r3, [pc, #36]	@ (8008784 <vTaskSwitchContext+0xc4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3354      	adds	r3, #84	@ 0x54
 8008762:	4a09      	ldr	r2, [pc, #36]	@ (8008788 <vTaskSwitchContext+0xc8>)
 8008764:	6013      	str	r3, [r2, #0]
}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	24000e94 	.word	0x24000e94
 8008778:	24000e80 	.word	0x24000e80
 800877c:	24000e74 	.word	0x24000e74
 8008780:	2400099c 	.word	0x2400099c
 8008784:	24000998 	.word	0x24000998
 8008788:	24000014 	.word	0x24000014

0800878c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10b      	bne.n	80087b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	60fb      	str	r3, [r7, #12]
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	e7fd      	b.n	80087b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087b4:	4b07      	ldr	r3, [pc, #28]	@ (80087d4 <vTaskPlaceOnEventList+0x48>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3318      	adds	r3, #24
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7fe fe48 	bl	8007452 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087c2:	2101      	movs	r1, #1
 80087c4:	6838      	ldr	r0, [r7, #0]
 80087c6:	f000 fa87 	bl	8008cd8 <prvAddCurrentTaskToDelayedList>
}
 80087ca:	bf00      	nop
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	24000998 	.word	0x24000998

080087d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b086      	sub	sp, #24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	617b      	str	r3, [r7, #20]
}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	e7fd      	b.n	80087fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008802:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <vTaskPlaceOnEventListRestricted+0x54>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3318      	adds	r3, #24
 8008808:	4619      	mov	r1, r3
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7fe fdfd 	bl	800740a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008816:	f04f 33ff 	mov.w	r3, #4294967295
 800881a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	68b8      	ldr	r0, [r7, #8]
 8008820:	f000 fa5a 	bl	8008cd8 <prvAddCurrentTaskToDelayedList>
	}
 8008824:	bf00      	nop
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	24000998 	.word	0x24000998

08008830 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	60fb      	str	r3, [r7, #12]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	3318      	adds	r3, #24
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fe2e 	bl	80074c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008868:	4b1d      	ldr	r3, [pc, #116]	@ (80088e0 <xTaskRemoveFromEventList+0xb0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d11d      	bne.n	80088ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fe25 	bl	80074c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887e:	4b19      	ldr	r3, [pc, #100]	@ (80088e4 <xTaskRemoveFromEventList+0xb4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d903      	bls.n	800888e <xTaskRemoveFromEventList+0x5e>
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888a:	4a16      	ldr	r2, [pc, #88]	@ (80088e4 <xTaskRemoveFromEventList+0xb4>)
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4a13      	ldr	r2, [pc, #76]	@ (80088e8 <xTaskRemoveFromEventList+0xb8>)
 800889c:	441a      	add	r2, r3
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7fe fdb0 	bl	800740a <vListInsertEnd>
 80088aa:	e005      	b.n	80088b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	3318      	adds	r3, #24
 80088b0:	4619      	mov	r1, r3
 80088b2:	480e      	ldr	r0, [pc, #56]	@ (80088ec <xTaskRemoveFromEventList+0xbc>)
 80088b4:	f7fe fda9 	bl	800740a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088bc:	4b0c      	ldr	r3, [pc, #48]	@ (80088f0 <xTaskRemoveFromEventList+0xc0>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d905      	bls.n	80088d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088c6:	2301      	movs	r3, #1
 80088c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088ca:	4b0a      	ldr	r3, [pc, #40]	@ (80088f4 <xTaskRemoveFromEventList+0xc4>)
 80088cc:	2201      	movs	r2, #1
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	e001      	b.n	80088d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088d6:	697b      	ldr	r3, [r7, #20]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3718      	adds	r7, #24
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	24000e94 	.word	0x24000e94
 80088e4:	24000e74 	.word	0x24000e74
 80088e8:	2400099c 	.word	0x2400099c
 80088ec:	24000e2c 	.word	0x24000e2c
 80088f0:	24000998 	.word	0x24000998
 80088f4:	24000e80 	.word	0x24000e80

080088f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008900:	4b06      	ldr	r3, [pc, #24]	@ (800891c <vTaskInternalSetTimeOutState+0x24>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008908:	4b05      	ldr	r3, [pc, #20]	@ (8008920 <vTaskInternalSetTimeOutState+0x28>)
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	605a      	str	r2, [r3, #4]
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	24000e84 	.word	0x24000e84
 8008920:	24000e70 	.word	0x24000e70

08008924 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b088      	sub	sp, #32
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10b      	bne.n	800894c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	613b      	str	r3, [r7, #16]
}
 8008946:	bf00      	nop
 8008948:	bf00      	nop
 800894a:	e7fd      	b.n	8008948 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10b      	bne.n	800896a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	60fb      	str	r3, [r7, #12]
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	e7fd      	b.n	8008966 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800896a:	f000 fe95 	bl	8009698 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800896e:	4b1d      	ldr	r3, [pc, #116]	@ (80089e4 <xTaskCheckForTimeOut+0xc0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d102      	bne.n	800898e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008988:	2300      	movs	r3, #0
 800898a:	61fb      	str	r3, [r7, #28]
 800898c:	e023      	b.n	80089d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4b15      	ldr	r3, [pc, #84]	@ (80089e8 <xTaskCheckForTimeOut+0xc4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d007      	beq.n	80089aa <xTaskCheckForTimeOut+0x86>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d302      	bcc.n	80089aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
 80089a8:	e015      	b.n	80089d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d20b      	bcs.n	80089cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	1ad2      	subs	r2, r2, r3
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff ff99 	bl	80088f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089c6:	2300      	movs	r3, #0
 80089c8:	61fb      	str	r3, [r7, #28]
 80089ca:	e004      	b.n	80089d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089d2:	2301      	movs	r3, #1
 80089d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089d6:	f000 fe91 	bl	80096fc <vPortExitCritical>

	return xReturn;
 80089da:	69fb      	ldr	r3, [r7, #28]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3720      	adds	r7, #32
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	24000e70 	.word	0x24000e70
 80089e8:	24000e84 	.word	0x24000e84

080089ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089f0:	4b03      	ldr	r3, [pc, #12]	@ (8008a00 <vTaskMissedYield+0x14>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	601a      	str	r2, [r3, #0]
}
 80089f6:	bf00      	nop
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	24000e80 	.word	0x24000e80

08008a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a0c:	f000 f852 	bl	8008ab4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a10:	4b06      	ldr	r3, [pc, #24]	@ (8008a2c <prvIdleTask+0x28>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d9f9      	bls.n	8008a0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a18:	4b05      	ldr	r3, [pc, #20]	@ (8008a30 <prvIdleTask+0x2c>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a28:	e7f0      	b.n	8008a0c <prvIdleTask+0x8>
 8008a2a:	bf00      	nop
 8008a2c:	2400099c 	.word	0x2400099c
 8008a30:	e000ed04 	.word	0xe000ed04

08008a34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	607b      	str	r3, [r7, #4]
 8008a3e:	e00c      	b.n	8008a5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4a12      	ldr	r2, [pc, #72]	@ (8008a94 <prvInitialiseTaskLists+0x60>)
 8008a4c:	4413      	add	r3, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fcae 	bl	80073b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3301      	adds	r3, #1
 8008a58:	607b      	str	r3, [r7, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b37      	cmp	r3, #55	@ 0x37
 8008a5e:	d9ef      	bls.n	8008a40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a60:	480d      	ldr	r0, [pc, #52]	@ (8008a98 <prvInitialiseTaskLists+0x64>)
 8008a62:	f7fe fca5 	bl	80073b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a66:	480d      	ldr	r0, [pc, #52]	@ (8008a9c <prvInitialiseTaskLists+0x68>)
 8008a68:	f7fe fca2 	bl	80073b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a6c:	480c      	ldr	r0, [pc, #48]	@ (8008aa0 <prvInitialiseTaskLists+0x6c>)
 8008a6e:	f7fe fc9f 	bl	80073b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a72:	480c      	ldr	r0, [pc, #48]	@ (8008aa4 <prvInitialiseTaskLists+0x70>)
 8008a74:	f7fe fc9c 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a78:	480b      	ldr	r0, [pc, #44]	@ (8008aa8 <prvInitialiseTaskLists+0x74>)
 8008a7a:	f7fe fc99 	bl	80073b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008aac <prvInitialiseTaskLists+0x78>)
 8008a80:	4a05      	ldr	r2, [pc, #20]	@ (8008a98 <prvInitialiseTaskLists+0x64>)
 8008a82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a84:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab0 <prvInitialiseTaskLists+0x7c>)
 8008a86:	4a05      	ldr	r2, [pc, #20]	@ (8008a9c <prvInitialiseTaskLists+0x68>)
 8008a88:	601a      	str	r2, [r3, #0]
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	2400099c 	.word	0x2400099c
 8008a98:	24000dfc 	.word	0x24000dfc
 8008a9c:	24000e10 	.word	0x24000e10
 8008aa0:	24000e2c 	.word	0x24000e2c
 8008aa4:	24000e40 	.word	0x24000e40
 8008aa8:	24000e58 	.word	0x24000e58
 8008aac:	24000e24 	.word	0x24000e24
 8008ab0:	24000e28 	.word	0x24000e28

08008ab4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aba:	e019      	b.n	8008af0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008abc:	f000 fdec 	bl	8009698 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ac0:	4b10      	ldr	r3, [pc, #64]	@ (8008b04 <prvCheckTasksWaitingTermination+0x50>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3304      	adds	r3, #4
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fcf9 	bl	80074c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <prvCheckTasksWaitingTermination+0x54>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8008b08 <prvCheckTasksWaitingTermination+0x54>)
 8008ada:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008adc:	4b0b      	ldr	r3, [pc, #44]	@ (8008b0c <prvCheckTasksWaitingTermination+0x58>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8008b0c <prvCheckTasksWaitingTermination+0x58>)
 8008ae4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ae6:	f000 fe09 	bl	80096fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f810 	bl	8008b10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008af0:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <prvCheckTasksWaitingTermination+0x58>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e1      	bne.n	8008abc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	24000e40 	.word	0x24000e40
 8008b08:	24000e6c 	.word	0x24000e6c
 8008b0c:	24000e54 	.word	0x24000e54

08008b10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3354      	adds	r3, #84	@ 0x54
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f001 f8f3 	bl	8009d08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d108      	bne.n	8008b3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 ffa1 	bl	8009a78 <vPortFree>
				vPortFree( pxTCB );
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 ff9e 	bl	8009a78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b3c:	e019      	b.n	8008b72 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d103      	bne.n	8008b50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 ff95 	bl	8009a78 <vPortFree>
	}
 8008b4e:	e010      	b.n	8008b72 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d00b      	beq.n	8008b72 <prvDeleteTCB+0x62>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	60fb      	str	r3, [r7, #12]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <prvDeleteTCB+0x5e>
	}
 8008b72:	bf00      	nop
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b82:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb4 <prvResetNextTaskUnblockTime+0x38>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8008b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b94:	e008      	b.n	8008ba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b96:	4b07      	ldr	r3, [pc, #28]	@ (8008bb4 <prvResetNextTaskUnblockTime+0x38>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4a04      	ldr	r2, [pc, #16]	@ (8008bb8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ba6:	6013      	str	r3, [r2, #0]
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	24000e24 	.word	0x24000e24
 8008bb8:	24000e8c 	.word	0x24000e8c

08008bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8008bf0 <xTaskGetSchedulerState+0x34>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d102      	bne.n	8008bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	607b      	str	r3, [r7, #4]
 8008bce:	e008      	b.n	8008be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd0:	4b08      	ldr	r3, [pc, #32]	@ (8008bf4 <xTaskGetSchedulerState+0x38>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d102      	bne.n	8008bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	607b      	str	r3, [r7, #4]
 8008bdc:	e001      	b.n	8008be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008be2:	687b      	ldr	r3, [r7, #4]
	}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	24000e78 	.word	0x24000e78
 8008bf4:	24000e94 	.word	0x24000e94

08008bf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d058      	beq.n	8008cc0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8008ccc <xTaskPriorityDisinherit+0xd4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d00b      	beq.n	8008c30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	60fb      	str	r3, [r7, #12]
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10b      	bne.n	8008c50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	60bb      	str	r3, [r7, #8]
}
 8008c4a:	bf00      	nop
 8008c4c:	bf00      	nop
 8008c4e:	e7fd      	b.n	8008c4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c54:	1e5a      	subs	r2, r3, #1
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d02c      	beq.n	8008cc0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d128      	bne.n	8008cc0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3304      	adds	r3, #4
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fc26 	bl	80074c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c90:	4b0f      	ldr	r3, [pc, #60]	@ (8008cd0 <xTaskPriorityDisinherit+0xd8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d903      	bls.n	8008ca0 <xTaskPriorityDisinherit+0xa8>
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8008cd0 <xTaskPriorityDisinherit+0xd8>)
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4a09      	ldr	r2, [pc, #36]	@ (8008cd4 <xTaskPriorityDisinherit+0xdc>)
 8008cae:	441a      	add	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	f7fe fba7 	bl	800740a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cc0:	697b      	ldr	r3, [r7, #20]
	}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	24000998 	.word	0x24000998
 8008cd0:	24000e74 	.word	0x24000e74
 8008cd4:	2400099c 	.word	0x2400099c

08008cd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ce2:	4b21      	ldr	r3, [pc, #132]	@ (8008d68 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce8:	4b20      	ldr	r3, [pc, #128]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fbe8 	bl	80074c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfa:	d10a      	bne.n	8008d12 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d007      	beq.n	8008d12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d02:	4b1a      	ldr	r3, [pc, #104]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3304      	adds	r3, #4
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4819      	ldr	r0, [pc, #100]	@ (8008d70 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d0c:	f7fe fb7d 	bl	800740a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d10:	e026      	b.n	8008d60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4413      	add	r3, r2
 8008d18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d1a:	4b14      	ldr	r3, [pc, #80]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d209      	bcs.n	8008d3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2a:	4b12      	ldr	r3, [pc, #72]	@ (8008d74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f7fe fb8b 	bl	8007452 <vListInsert>
}
 8008d3c:	e010      	b.n	8008d60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b0a      	ldr	r3, [pc, #40]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f7fe fb81 	bl	8007452 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d50:	4b0a      	ldr	r3, [pc, #40]	@ (8008d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d202      	bcs.n	8008d60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d5a:	4a08      	ldr	r2, [pc, #32]	@ (8008d7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6013      	str	r3, [r2, #0]
}
 8008d60:	bf00      	nop
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	24000e70 	.word	0x24000e70
 8008d6c:	24000998 	.word	0x24000998
 8008d70:	24000e58 	.word	0x24000e58
 8008d74:	24000e28 	.word	0x24000e28
 8008d78:	24000e24 	.word	0x24000e24
 8008d7c:	24000e8c 	.word	0x24000e8c

08008d80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08a      	sub	sp, #40	@ 0x28
 8008d84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d8a:	f000 fb13 	bl	80093b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8008e04 <xTimerCreateTimerTask+0x84>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d021      	beq.n	8008dda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d9e:	1d3a      	adds	r2, r7, #4
 8008da0:	f107 0108 	add.w	r1, r7, #8
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fae7 	bl	800737c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	9202      	str	r2, [sp, #8]
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	2302      	movs	r3, #2
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	460a      	mov	r2, r1
 8008dc0:	4911      	ldr	r1, [pc, #68]	@ (8008e08 <xTimerCreateTimerTask+0x88>)
 8008dc2:	4812      	ldr	r0, [pc, #72]	@ (8008e0c <xTimerCreateTimerTask+0x8c>)
 8008dc4:	f7ff f8a2 	bl	8007f0c <xTaskCreateStatic>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	4a11      	ldr	r2, [pc, #68]	@ (8008e10 <xTimerCreateTimerTask+0x90>)
 8008dcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dce:	4b10      	ldr	r3, [pc, #64]	@ (8008e10 <xTimerCreateTimerTask+0x90>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10b      	bne.n	8008df8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
}
 8008df2:	bf00      	nop
 8008df4:	bf00      	nop
 8008df6:	e7fd      	b.n	8008df4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008df8:	697b      	ldr	r3, [r7, #20]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	24000ec8 	.word	0x24000ec8
 8008e08:	0800a6e8 	.word	0x0800a6e8
 8008e0c:	08008f4d 	.word	0x08008f4d
 8008e10:	24000ecc 	.word	0x24000ecc

08008e14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	@ 0x28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
 8008e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10b      	bne.n	8008e44 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	623b      	str	r3, [r7, #32]
}
 8008e3e:	bf00      	nop
 8008e40:	bf00      	nop
 8008e42:	e7fd      	b.n	8008e40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e44:	4b19      	ldr	r3, [pc, #100]	@ (8008eac <xTimerGenericCommand+0x98>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d02a      	beq.n	8008ea2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b05      	cmp	r3, #5
 8008e5c:	dc18      	bgt.n	8008e90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e5e:	f7ff fead 	bl	8008bbc <xTaskGetSchedulerState>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d109      	bne.n	8008e7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e68:	4b10      	ldr	r3, [pc, #64]	@ (8008eac <xTimerGenericCommand+0x98>)
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	f107 0110 	add.w	r1, r7, #16
 8008e70:	2300      	movs	r3, #0
 8008e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e74:	f7fe fc5a 	bl	800772c <xQueueGenericSend>
 8008e78:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e7a:	e012      	b.n	8008ea2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008eac <xTimerGenericCommand+0x98>)
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	f107 0110 	add.w	r1, r7, #16
 8008e84:	2300      	movs	r3, #0
 8008e86:	2200      	movs	r2, #0
 8008e88:	f7fe fc50 	bl	800772c <xQueueGenericSend>
 8008e8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e8e:	e008      	b.n	8008ea2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e90:	4b06      	ldr	r3, [pc, #24]	@ (8008eac <xTimerGenericCommand+0x98>)
 8008e92:	6818      	ldr	r0, [r3, #0]
 8008e94:	f107 0110 	add.w	r1, r7, #16
 8008e98:	2300      	movs	r3, #0
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	f7fe fd48 	bl	8007930 <xQueueGenericSendFromISR>
 8008ea0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3728      	adds	r7, #40	@ 0x28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	24000ec8 	.word	0x24000ec8

08008eb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af02      	add	r7, sp, #8
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eba:	4b23      	ldr	r3, [pc, #140]	@ (8008f48 <prvProcessExpiredTimer+0x98>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fafb 	bl	80074c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d023      	beq.n	8008f24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	699a      	ldr	r2, [r3, #24]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	18d1      	adds	r1, r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	6978      	ldr	r0, [r7, #20]
 8008eea:	f000 f8d5 	bl	8009098 <prvInsertTimerInActiveList>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d020      	beq.n	8008f36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	2100      	movs	r1, #0
 8008efe:	6978      	ldr	r0, [r7, #20]
 8008f00:	f7ff ff88 	bl	8008e14 <xTimerGenericCommand>
 8008f04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d114      	bne.n	8008f36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	60fb      	str	r3, [r7, #12]
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	6978      	ldr	r0, [r7, #20]
 8008f3c:	4798      	blx	r3
}
 8008f3e:	bf00      	nop
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	24000ec0 	.word	0x24000ec0

08008f4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 f859 	bl	8009010 <prvGetNextExpireTime>
 8008f5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4619      	mov	r1, r3
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f805 	bl	8008f74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f6a:	f000 f8d7 	bl	800911c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f6e:	bf00      	nop
 8008f70:	e7f0      	b.n	8008f54 <prvTimerTask+0x8>
	...

08008f74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f7e:	f7ff fa29 	bl	80083d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f866 	bl	8009058 <prvSampleTimeNow>
 8008f8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d130      	bne.n	8008ff6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10a      	bne.n	8008fb0 <prvProcessTimerOrBlockTask+0x3c>
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d806      	bhi.n	8008fb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fa2:	f7ff fa25 	bl	80083f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ff81 	bl	8008eb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008fae:	e024      	b.n	8008ffa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d008      	beq.n	8008fc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fb6:	4b13      	ldr	r3, [pc, #76]	@ (8009004 <prvProcessTimerOrBlockTask+0x90>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <prvProcessTimerOrBlockTask+0x50>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <prvProcessTimerOrBlockTask+0x52>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <prvProcessTimerOrBlockTask+0x94>)
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f7fe ff65 	bl	8007ea4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fda:	f7ff fa09 	bl	80083f0 <xTaskResumeAll>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fe4:	4b09      	ldr	r3, [pc, #36]	@ (800900c <prvProcessTimerOrBlockTask+0x98>)
 8008fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	f3bf 8f6f 	isb	sy
}
 8008ff4:	e001      	b.n	8008ffa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ff6:	f7ff f9fb 	bl	80083f0 <xTaskResumeAll>
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	24000ec4 	.word	0x24000ec4
 8009008:	24000ec8 	.word	0x24000ec8
 800900c:	e000ed04 	.word	0xe000ed04

08009010 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009018:	4b0e      	ldr	r3, [pc, #56]	@ (8009054 <prvGetNextExpireTime+0x44>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <prvGetNextExpireTime+0x16>
 8009022:	2201      	movs	r2, #1
 8009024:	e000      	b.n	8009028 <prvGetNextExpireTime+0x18>
 8009026:	2200      	movs	r2, #0
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d105      	bne.n	8009040 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009034:	4b07      	ldr	r3, [pc, #28]	@ (8009054 <prvGetNextExpireTime+0x44>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	e001      	b.n	8009044 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009040:	2300      	movs	r3, #0
 8009042:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009044:	68fb      	ldr	r3, [r7, #12]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	24000ec0 	.word	0x24000ec0

08009058 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009060:	f7ff fa64 	bl	800852c <xTaskGetTickCount>
 8009064:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009066:	4b0b      	ldr	r3, [pc, #44]	@ (8009094 <prvSampleTimeNow+0x3c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	429a      	cmp	r2, r3
 800906e:	d205      	bcs.n	800907c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009070:	f000 f93a 	bl	80092e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	e002      	b.n	8009082 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009082:	4a04      	ldr	r2, [pc, #16]	@ (8009094 <prvSampleTimeNow+0x3c>)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009088:	68fb      	ldr	r3, [r7, #12]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	24000ed0 	.word	0x24000ed0

08009098 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
 80090a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d812      	bhi.n	80090e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	1ad2      	subs	r2, r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d302      	bcc.n	80090d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	617b      	str	r3, [r7, #20]
 80090d0:	e01b      	b.n	800910a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090d2:	4b10      	ldr	r3, [pc, #64]	@ (8009114 <prvInsertTimerInActiveList+0x7c>)
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3304      	adds	r3, #4
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f7fe f9b8 	bl	8007452 <vListInsert>
 80090e2:	e012      	b.n	800910a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d206      	bcs.n	80090fa <prvInsertTimerInActiveList+0x62>
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d302      	bcc.n	80090fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090f4:	2301      	movs	r3, #1
 80090f6:	617b      	str	r3, [r7, #20]
 80090f8:	e007      	b.n	800910a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090fa:	4b07      	ldr	r3, [pc, #28]	@ (8009118 <prvInsertTimerInActiveList+0x80>)
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3304      	adds	r3, #4
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f7fe f9a4 	bl	8007452 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800910a:	697b      	ldr	r3, [r7, #20]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	24000ec4 	.word	0x24000ec4
 8009118:	24000ec0 	.word	0x24000ec0

0800911c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08e      	sub	sp, #56	@ 0x38
 8009120:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009122:	e0ce      	b.n	80092c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	da19      	bge.n	800915e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800912a:	1d3b      	adds	r3, r7, #4
 800912c:	3304      	adds	r3, #4
 800912e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10b      	bne.n	800914e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	61fb      	str	r3, [r7, #28]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800914e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009154:	6850      	ldr	r0, [r2, #4]
 8009156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009158:	6892      	ldr	r2, [r2, #8]
 800915a:	4611      	mov	r1, r2
 800915c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	f2c0 80ae 	blt.w	80092c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800916a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009174:	3304      	adds	r3, #4
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe f9a4 	bl	80074c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800917c:	463b      	mov	r3, r7
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff ff6a 	bl	8009058 <prvSampleTimeNow>
 8009184:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b09      	cmp	r3, #9
 800918a:	f200 8097 	bhi.w	80092bc <prvProcessReceivedCommands+0x1a0>
 800918e:	a201      	add	r2, pc, #4	@ (adr r2, 8009194 <prvProcessReceivedCommands+0x78>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091bd 	.word	0x080091bd
 8009198:	080091bd 	.word	0x080091bd
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	08009233 	.word	0x08009233
 80091a4:	08009247 	.word	0x08009247
 80091a8:	08009293 	.word	0x08009293
 80091ac:	080091bd 	.word	0x080091bd
 80091b0:	080091bd 	.word	0x080091bd
 80091b4:	08009233 	.word	0x08009233
 80091b8:	08009247 	.word	0x08009247
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091c2:	f043 0301 	orr.w	r3, r3, #1
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	18d1      	adds	r1, r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091dc:	f7ff ff5c 	bl	8009098 <prvInsertTimerInActiveList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d06c      	beq.n	80092c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d061      	beq.n	80092c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	441a      	add	r2, r3
 8009204:	2300      	movs	r3, #0
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	2300      	movs	r3, #0
 800920a:	2100      	movs	r1, #0
 800920c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800920e:	f7ff fe01 	bl	8008e14 <xTimerGenericCommand>
 8009212:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d152      	bne.n	80092c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800921a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921e:	f383 8811 	msr	BASEPRI, r3
 8009222:	f3bf 8f6f 	isb	sy
 8009226:	f3bf 8f4f 	dsb	sy
 800922a:	61bb      	str	r3, [r7, #24]
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	e7fd      	b.n	800922e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009238:	f023 0301 	bic.w	r3, r3, #1
 800923c:	b2da      	uxtb	r2, r3
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009244:	e03d      	b.n	80092c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800924c:	f043 0301 	orr.w	r3, r3, #1
 8009250:	b2da      	uxtb	r2, r3
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800925e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10b      	bne.n	800927e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	617b      	str	r3, [r7, #20]
}
 8009278:	bf00      	nop
 800927a:	bf00      	nop
 800927c:	e7fd      	b.n	800927a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	18d1      	adds	r1, r2, r3
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800928a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800928c:	f7ff ff04 	bl	8009098 <prvInsertTimerInActiveList>
					break;
 8009290:	e017      	b.n	80092c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009294:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d103      	bne.n	80092a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80092a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092a2:	f000 fbe9 	bl	8009a78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092a6:	e00c      	b.n	80092c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092ae:	f023 0301 	bic.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092ba:	e002      	b.n	80092c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80092bc:	bf00      	nop
 80092be:	e000      	b.n	80092c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80092c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092c2:	4b08      	ldr	r3, [pc, #32]	@ (80092e4 <prvProcessReceivedCommands+0x1c8>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	1d39      	adds	r1, r7, #4
 80092c8:	2200      	movs	r2, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe fbce 	bl	8007a6c <xQueueReceive>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f47f af26 	bne.w	8009124 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	3730      	adds	r7, #48	@ 0x30
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	24000ec8 	.word	0x24000ec8

080092e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092ee:	e049      	b.n	8009384 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092f0:	4b2e      	ldr	r3, [pc, #184]	@ (80093ac <prvSwitchTimerLists+0xc4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092fa:	4b2c      	ldr	r3, [pc, #176]	@ (80093ac <prvSwitchTimerLists+0xc4>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3304      	adds	r3, #4
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe f8db 	bl	80074c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02f      	beq.n	8009384 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	4413      	add	r3, r2
 800932c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	429a      	cmp	r2, r3
 8009334:	d90e      	bls.n	8009354 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009342:	4b1a      	ldr	r3, [pc, #104]	@ (80093ac <prvSwitchTimerLists+0xc4>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe f880 	bl	8007452 <vListInsert>
 8009352:	e017      	b.n	8009384 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009354:	2300      	movs	r3, #0
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	2100      	movs	r1, #0
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f7ff fd58 	bl	8008e14 <xTimerGenericCommand>
 8009364:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10b      	bne.n	8009384 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	603b      	str	r3, [r7, #0]
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	e7fd      	b.n	8009380 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009384:	4b09      	ldr	r3, [pc, #36]	@ (80093ac <prvSwitchTimerLists+0xc4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1b0      	bne.n	80092f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800938e:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <prvSwitchTimerLists+0xc4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009394:	4b06      	ldr	r3, [pc, #24]	@ (80093b0 <prvSwitchTimerLists+0xc8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a04      	ldr	r2, [pc, #16]	@ (80093ac <prvSwitchTimerLists+0xc4>)
 800939a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800939c:	4a04      	ldr	r2, [pc, #16]	@ (80093b0 <prvSwitchTimerLists+0xc8>)
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	6013      	str	r3, [r2, #0]
}
 80093a2:	bf00      	nop
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	24000ec0 	.word	0x24000ec0
 80093b0:	24000ec4 	.word	0x24000ec4

080093b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093ba:	f000 f96d 	bl	8009698 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093be:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <prvCheckForValidListAndQueue+0x60>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d120      	bne.n	8009408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093c6:	4814      	ldr	r0, [pc, #80]	@ (8009418 <prvCheckForValidListAndQueue+0x64>)
 80093c8:	f7fd fff2 	bl	80073b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093cc:	4813      	ldr	r0, [pc, #76]	@ (800941c <prvCheckForValidListAndQueue+0x68>)
 80093ce:	f7fd ffef 	bl	80073b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093d2:	4b13      	ldr	r3, [pc, #76]	@ (8009420 <prvCheckForValidListAndQueue+0x6c>)
 80093d4:	4a10      	ldr	r2, [pc, #64]	@ (8009418 <prvCheckForValidListAndQueue+0x64>)
 80093d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093d8:	4b12      	ldr	r3, [pc, #72]	@ (8009424 <prvCheckForValidListAndQueue+0x70>)
 80093da:	4a10      	ldr	r2, [pc, #64]	@ (800941c <prvCheckForValidListAndQueue+0x68>)
 80093dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093de:	2300      	movs	r3, #0
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	4b11      	ldr	r3, [pc, #68]	@ (8009428 <prvCheckForValidListAndQueue+0x74>)
 80093e4:	4a11      	ldr	r2, [pc, #68]	@ (800942c <prvCheckForValidListAndQueue+0x78>)
 80093e6:	2110      	movs	r1, #16
 80093e8:	200a      	movs	r0, #10
 80093ea:	f7fe f8ff 	bl	80075ec <xQueueGenericCreateStatic>
 80093ee:	4603      	mov	r3, r0
 80093f0:	4a08      	ldr	r2, [pc, #32]	@ (8009414 <prvCheckForValidListAndQueue+0x60>)
 80093f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093f4:	4b07      	ldr	r3, [pc, #28]	@ (8009414 <prvCheckForValidListAndQueue+0x60>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d005      	beq.n	8009408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093fc:	4b05      	ldr	r3, [pc, #20]	@ (8009414 <prvCheckForValidListAndQueue+0x60>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	490b      	ldr	r1, [pc, #44]	@ (8009430 <prvCheckForValidListAndQueue+0x7c>)
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fd24 	bl	8007e50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009408:	f000 f978 	bl	80096fc <vPortExitCritical>
}
 800940c:	bf00      	nop
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	24000ec8 	.word	0x24000ec8
 8009418:	24000e98 	.word	0x24000e98
 800941c:	24000eac 	.word	0x24000eac
 8009420:	24000ec0 	.word	0x24000ec0
 8009424:	24000ec4 	.word	0x24000ec4
 8009428:	24000f74 	.word	0x24000f74
 800942c:	24000ed4 	.word	0x24000ed4
 8009430:	0800a6f0 	.word	0x0800a6f0

08009434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3b04      	subs	r3, #4
 8009444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800944c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3b04      	subs	r3, #4
 8009452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f023 0201 	bic.w	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	3b04      	subs	r3, #4
 8009462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009464:	4a0c      	ldr	r2, [pc, #48]	@ (8009498 <pxPortInitialiseStack+0x64>)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3b14      	subs	r3, #20
 800946e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3b04      	subs	r3, #4
 800947a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f06f 0202 	mvn.w	r2, #2
 8009482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3b20      	subs	r3, #32
 8009488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800948a:	68fb      	ldr	r3, [r7, #12]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	0800949d 	.word	0x0800949d

0800949c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094a6:	4b13      	ldr	r3, [pc, #76]	@ (80094f4 <prvTaskExitError+0x58>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d00b      	beq.n	80094c8 <prvTaskExitError+0x2c>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	60fb      	str	r3, [r7, #12]
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	e7fd      	b.n	80094c4 <prvTaskExitError+0x28>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	60bb      	str	r3, [r7, #8]
}
 80094da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094dc:	bf00      	nop
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d0fc      	beq.n	80094de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	24000010 	.word	0x24000010
	...

08009500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009500:	4b07      	ldr	r3, [pc, #28]	@ (8009520 <pxCurrentTCBConst2>)
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	6808      	ldr	r0, [r1, #0]
 8009506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950a:	f380 8809 	msr	PSP, r0
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f04f 0000 	mov.w	r0, #0
 8009516:	f380 8811 	msr	BASEPRI, r0
 800951a:	4770      	bx	lr
 800951c:	f3af 8000 	nop.w

08009520 <pxCurrentTCBConst2>:
 8009520:	24000998 	.word	0x24000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop

08009528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009528:	4808      	ldr	r0, [pc, #32]	@ (800954c <prvPortStartFirstTask+0x24>)
 800952a:	6800      	ldr	r0, [r0, #0]
 800952c:	6800      	ldr	r0, [r0, #0]
 800952e:	f380 8808 	msr	MSP, r0
 8009532:	f04f 0000 	mov.w	r0, #0
 8009536:	f380 8814 	msr	CONTROL, r0
 800953a:	b662      	cpsie	i
 800953c:	b661      	cpsie	f
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	df00      	svc	0
 8009548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800954a:	bf00      	nop
 800954c:	e000ed08 	.word	0xe000ed08

08009550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009556:	4b47      	ldr	r3, [pc, #284]	@ (8009674 <xPortStartScheduler+0x124>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a47      	ldr	r2, [pc, #284]	@ (8009678 <xPortStartScheduler+0x128>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d10b      	bne.n	8009578 <xPortStartScheduler+0x28>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009578:	4b3e      	ldr	r3, [pc, #248]	@ (8009674 <xPortStartScheduler+0x124>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a3f      	ldr	r2, [pc, #252]	@ (800967c <xPortStartScheduler+0x12c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d10b      	bne.n	800959a <xPortStartScheduler+0x4a>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	60fb      	str	r3, [r7, #12]
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop
 8009598:	e7fd      	b.n	8009596 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800959a:	4b39      	ldr	r3, [pc, #228]	@ (8009680 <xPortStartScheduler+0x130>)
 800959c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	22ff      	movs	r2, #255	@ 0xff
 80095aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	4b31      	ldr	r3, [pc, #196]	@ (8009684 <xPortStartScheduler+0x134>)
 80095c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095c2:	4b31      	ldr	r3, [pc, #196]	@ (8009688 <xPortStartScheduler+0x138>)
 80095c4:	2207      	movs	r2, #7
 80095c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095c8:	e009      	b.n	80095de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009688 <xPortStartScheduler+0x138>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	4a2d      	ldr	r2, [pc, #180]	@ (8009688 <xPortStartScheduler+0x138>)
 80095d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	005b      	lsls	r3, r3, #1
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095e6:	2b80      	cmp	r3, #128	@ 0x80
 80095e8:	d0ef      	beq.n	80095ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095ea:	4b27      	ldr	r3, [pc, #156]	@ (8009688 <xPortStartScheduler+0x138>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f1c3 0307 	rsb	r3, r3, #7
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	d00b      	beq.n	800960e <xPortStartScheduler+0xbe>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	60bb      	str	r3, [r7, #8]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800960e:	4b1e      	ldr	r3, [pc, #120]	@ (8009688 <xPortStartScheduler+0x138>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	4a1c      	ldr	r2, [pc, #112]	@ (8009688 <xPortStartScheduler+0x138>)
 8009616:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009618:	4b1b      	ldr	r3, [pc, #108]	@ (8009688 <xPortStartScheduler+0x138>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009620:	4a19      	ldr	r2, [pc, #100]	@ (8009688 <xPortStartScheduler+0x138>)
 8009622:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	b2da      	uxtb	r2, r3
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800962c:	4b17      	ldr	r3, [pc, #92]	@ (800968c <xPortStartScheduler+0x13c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a16      	ldr	r2, [pc, #88]	@ (800968c <xPortStartScheduler+0x13c>)
 8009632:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009636:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009638:	4b14      	ldr	r3, [pc, #80]	@ (800968c <xPortStartScheduler+0x13c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a13      	ldr	r2, [pc, #76]	@ (800968c <xPortStartScheduler+0x13c>)
 800963e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009642:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009644:	f000 f8da 	bl	80097fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009648:	4b11      	ldr	r3, [pc, #68]	@ (8009690 <xPortStartScheduler+0x140>)
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800964e:	f000 f8f9 	bl	8009844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009652:	4b10      	ldr	r3, [pc, #64]	@ (8009694 <xPortStartScheduler+0x144>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a0f      	ldr	r2, [pc, #60]	@ (8009694 <xPortStartScheduler+0x144>)
 8009658:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800965c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800965e:	f7ff ff63 	bl	8009528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009662:	f7ff f82d 	bl	80086c0 <vTaskSwitchContext>
	prvTaskExitError();
 8009666:	f7ff ff19 	bl	800949c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	e000ed00 	.word	0xe000ed00
 8009678:	410fc271 	.word	0x410fc271
 800967c:	410fc270 	.word	0x410fc270
 8009680:	e000e400 	.word	0xe000e400
 8009684:	24000fc4 	.word	0x24000fc4
 8009688:	24000fc8 	.word	0x24000fc8
 800968c:	e000ed20 	.word	0xe000ed20
 8009690:	24000010 	.word	0x24000010
 8009694:	e000ef34 	.word	0xe000ef34

08009698 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	607b      	str	r3, [r7, #4]
}
 80096b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096b2:	4b10      	ldr	r3, [pc, #64]	@ (80096f4 <vPortEnterCritical+0x5c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	4a0e      	ldr	r2, [pc, #56]	@ (80096f4 <vPortEnterCritical+0x5c>)
 80096ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096bc:	4b0d      	ldr	r3, [pc, #52]	@ (80096f4 <vPortEnterCritical+0x5c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d110      	bne.n	80096e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096c4:	4b0c      	ldr	r3, [pc, #48]	@ (80096f8 <vPortEnterCritical+0x60>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00b      	beq.n	80096e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80096ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	603b      	str	r3, [r7, #0]
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	e7fd      	b.n	80096e2 <vPortEnterCritical+0x4a>
	}
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	24000010 	.word	0x24000010
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009702:	4b12      	ldr	r3, [pc, #72]	@ (800974c <vPortExitCritical+0x50>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d10b      	bne.n	8009722 <vPortExitCritical+0x26>
	__asm volatile
 800970a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	607b      	str	r3, [r7, #4]
}
 800971c:	bf00      	nop
 800971e:	bf00      	nop
 8009720:	e7fd      	b.n	800971e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009722:	4b0a      	ldr	r3, [pc, #40]	@ (800974c <vPortExitCritical+0x50>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3b01      	subs	r3, #1
 8009728:	4a08      	ldr	r2, [pc, #32]	@ (800974c <vPortExitCritical+0x50>)
 800972a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800972c:	4b07      	ldr	r3, [pc, #28]	@ (800974c <vPortExitCritical+0x50>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d105      	bne.n	8009740 <vPortExitCritical+0x44>
 8009734:	2300      	movs	r3, #0
 8009736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	f383 8811 	msr	BASEPRI, r3
}
 800973e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	24000010 	.word	0x24000010

08009750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009750:	f3ef 8009 	mrs	r0, PSP
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	4b15      	ldr	r3, [pc, #84]	@ (80097b0 <pxCurrentTCBConst>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	f01e 0f10 	tst.w	lr, #16
 8009760:	bf08      	it	eq
 8009762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	6010      	str	r0, [r2, #0]
 800976c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009770:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009774:	f380 8811 	msr	BASEPRI, r0
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f7fe ff9e 	bl	80086c0 <vTaskSwitchContext>
 8009784:	f04f 0000 	mov.w	r0, #0
 8009788:	f380 8811 	msr	BASEPRI, r0
 800978c:	bc09      	pop	{r0, r3}
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	6808      	ldr	r0, [r1, #0]
 8009792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009796:	f01e 0f10 	tst.w	lr, #16
 800979a:	bf08      	it	eq
 800979c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097a0:	f380 8809 	msr	PSP, r0
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst>:
 80097b0:	24000998 	.word	0x24000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	607b      	str	r3, [r7, #4]
}
 80097d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097d2:	f7fe febb 	bl	800854c <xTaskIncrementTick>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097dc:	4b06      	ldr	r3, [pc, #24]	@ (80097f8 <xPortSysTickHandler+0x40>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	2300      	movs	r3, #0
 80097e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	f383 8811 	msr	BASEPRI, r3
}
 80097ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	e000ed04 	.word	0xe000ed04

080097fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009800:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <vPortSetupTimerInterrupt+0x34>)
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009806:	4b0b      	ldr	r3, [pc, #44]	@ (8009834 <vPortSetupTimerInterrupt+0x38>)
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800980c:	4b0a      	ldr	r3, [pc, #40]	@ (8009838 <vPortSetupTimerInterrupt+0x3c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0a      	ldr	r2, [pc, #40]	@ (800983c <vPortSetupTimerInterrupt+0x40>)
 8009812:	fba2 2303 	umull	r2, r3, r2, r3
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	4a09      	ldr	r2, [pc, #36]	@ (8009840 <vPortSetupTimerInterrupt+0x44>)
 800981a:	3b01      	subs	r3, #1
 800981c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800981e:	4b04      	ldr	r3, [pc, #16]	@ (8009830 <vPortSetupTimerInterrupt+0x34>)
 8009820:	2207      	movs	r2, #7
 8009822:	601a      	str	r2, [r3, #0]
}
 8009824:	bf00      	nop
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	e000e010 	.word	0xe000e010
 8009834:	e000e018 	.word	0xe000e018
 8009838:	24000000 	.word	0x24000000
 800983c:	10624dd3 	.word	0x10624dd3
 8009840:	e000e014 	.word	0xe000e014

08009844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009844:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009854 <vPortEnableVFP+0x10>
 8009848:	6801      	ldr	r1, [r0, #0]
 800984a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800984e:	6001      	str	r1, [r0, #0]
 8009850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009852:	bf00      	nop
 8009854:	e000ed88 	.word	0xe000ed88

08009858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800985e:	f3ef 8305 	mrs	r3, IPSR
 8009862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b0f      	cmp	r3, #15
 8009868:	d915      	bls.n	8009896 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800986a:	4a18      	ldr	r2, [pc, #96]	@ (80098cc <vPortValidateInterruptPriority+0x74>)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009874:	4b16      	ldr	r3, [pc, #88]	@ (80098d0 <vPortValidateInterruptPriority+0x78>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	7afa      	ldrb	r2, [r7, #11]
 800987a:	429a      	cmp	r2, r3
 800987c:	d20b      	bcs.n	8009896 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
 8009892:	bf00      	nop
 8009894:	e7fd      	b.n	8009892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009896:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <vPortValidateInterruptPriority+0x7c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800989e:	4b0e      	ldr	r3, [pc, #56]	@ (80098d8 <vPortValidateInterruptPriority+0x80>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d90b      	bls.n	80098be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	603b      	str	r3, [r7, #0]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <vPortValidateInterruptPriority+0x62>
	}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	e000e3f0 	.word	0xe000e3f0
 80098d0:	24000fc4 	.word	0x24000fc4
 80098d4:	e000ed0c 	.word	0xe000ed0c
 80098d8:	24000fc8 	.word	0x24000fc8

080098dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08a      	sub	sp, #40	@ 0x28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098e8:	f7fe fd74 	bl	80083d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009a60 <pvPortMalloc+0x184>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098f4:	f000 f924 	bl	8009b40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a64 <pvPortMalloc+0x188>)
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4013      	ands	r3, r2
 8009900:	2b00      	cmp	r3, #0
 8009902:	f040 8095 	bne.w	8009a30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d01e      	beq.n	800994a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800990c:	2208      	movs	r2, #8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4413      	add	r3, r2
 8009912:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f003 0307 	and.w	r3, r3, #7
 800991a:	2b00      	cmp	r3, #0
 800991c:	d015      	beq.n	800994a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f023 0307 	bic.w	r3, r3, #7
 8009924:	3308      	adds	r3, #8
 8009926:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00b      	beq.n	800994a <pvPortMalloc+0x6e>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	617b      	str	r3, [r7, #20]
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop
 8009948:	e7fd      	b.n	8009946 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d06f      	beq.n	8009a30 <pvPortMalloc+0x154>
 8009950:	4b45      	ldr	r3, [pc, #276]	@ (8009a68 <pvPortMalloc+0x18c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	429a      	cmp	r2, r3
 8009958:	d86a      	bhi.n	8009a30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800995a:	4b44      	ldr	r3, [pc, #272]	@ (8009a6c <pvPortMalloc+0x190>)
 800995c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800995e:	4b43      	ldr	r3, [pc, #268]	@ (8009a6c <pvPortMalloc+0x190>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009964:	e004      	b.n	8009970 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	429a      	cmp	r2, r3
 8009978:	d903      	bls.n	8009982 <pvPortMalloc+0xa6>
 800997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f1      	bne.n	8009966 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009982:	4b37      	ldr	r3, [pc, #220]	@ (8009a60 <pvPortMalloc+0x184>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009988:	429a      	cmp	r2, r3
 800998a:	d051      	beq.n	8009a30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2208      	movs	r2, #8
 8009992:	4413      	add	r3, r2
 8009994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	6a3b      	ldr	r3, [r7, #32]
 800999c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800999e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	1ad2      	subs	r2, r2, r3
 80099a6:	2308      	movs	r3, #8
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d920      	bls.n	80099f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4413      	add	r3, r2
 80099b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <pvPortMalloc+0xfc>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099ea:	69b8      	ldr	r0, [r7, #24]
 80099ec:	f000 f90a 	bl	8009c04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a68 <pvPortMalloc+0x18c>)
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009a68 <pvPortMalloc+0x18c>)
 80099fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009a68 <pvPortMalloc+0x18c>)
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	4b1b      	ldr	r3, [pc, #108]	@ (8009a70 <pvPortMalloc+0x194>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d203      	bcs.n	8009a12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a0a:	4b17      	ldr	r3, [pc, #92]	@ (8009a68 <pvPortMalloc+0x18c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a18      	ldr	r2, [pc, #96]	@ (8009a70 <pvPortMalloc+0x194>)
 8009a10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <pvPortMalloc+0x188>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a26:	4b13      	ldr	r3, [pc, #76]	@ (8009a74 <pvPortMalloc+0x198>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	4a11      	ldr	r2, [pc, #68]	@ (8009a74 <pvPortMalloc+0x198>)
 8009a2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a30:	f7fe fcde 	bl	80083f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	f003 0307 	and.w	r3, r3, #7
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00b      	beq.n	8009a56 <pvPortMalloc+0x17a>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	60fb      	str	r3, [r7, #12]
}
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	e7fd      	b.n	8009a52 <pvPortMalloc+0x176>
	return pvReturn;
 8009a56:	69fb      	ldr	r3, [r7, #28]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3728      	adds	r7, #40	@ 0x28
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	24004bd4 	.word	0x24004bd4
 8009a64:	24004be8 	.word	0x24004be8
 8009a68:	24004bd8 	.word	0x24004bd8
 8009a6c:	24004bcc 	.word	0x24004bcc
 8009a70:	24004bdc 	.word	0x24004bdc
 8009a74:	24004be0 	.word	0x24004be0

08009a78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b086      	sub	sp, #24
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d04f      	beq.n	8009b2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	425b      	negs	r3, r3
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	4413      	add	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	4b25      	ldr	r3, [pc, #148]	@ (8009b34 <vPortFree+0xbc>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10b      	bne.n	8009abe <vPortFree+0x46>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	60fb      	str	r3, [r7, #12]
}
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	e7fd      	b.n	8009aba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00b      	beq.n	8009ade <vPortFree+0x66>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aca:	f383 8811 	msr	BASEPRI, r3
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	f3bf 8f4f 	dsb	sy
 8009ad6:	60bb      	str	r3, [r7, #8]
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	e7fd      	b.n	8009ada <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	4b14      	ldr	r3, [pc, #80]	@ (8009b34 <vPortFree+0xbc>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01e      	beq.n	8009b2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d11a      	bne.n	8009b2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b34 <vPortFree+0xbc>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	43db      	mvns	r3, r3
 8009afe:	401a      	ands	r2, r3
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b04:	f7fe fc66 	bl	80083d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <vPortFree+0xc0>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4413      	add	r3, r2
 8009b12:	4a09      	ldr	r2, [pc, #36]	@ (8009b38 <vPortFree+0xc0>)
 8009b14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b16:	6938      	ldr	r0, [r7, #16]
 8009b18:	f000 f874 	bl	8009c04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b1c:	4b07      	ldr	r3, [pc, #28]	@ (8009b3c <vPortFree+0xc4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3301      	adds	r3, #1
 8009b22:	4a06      	ldr	r2, [pc, #24]	@ (8009b3c <vPortFree+0xc4>)
 8009b24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b26:	f7fe fc63 	bl	80083f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b2a:	bf00      	nop
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	24004be8 	.word	0x24004be8
 8009b38:	24004bd8 	.word	0x24004bd8
 8009b3c:	24004be4 	.word	0x24004be4

08009b40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b4c:	4b27      	ldr	r3, [pc, #156]	@ (8009bec <prvHeapInit+0xac>)
 8009b4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00c      	beq.n	8009b74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	3307      	adds	r3, #7
 8009b5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f023 0307 	bic.w	r3, r3, #7
 8009b66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bec <prvHeapInit+0xac>)
 8009b70:	4413      	add	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b78:	4a1d      	ldr	r2, [pc, #116]	@ (8009bf0 <prvHeapInit+0xb0>)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8009bf0 <prvHeapInit+0xb0>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	4413      	add	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b8c:	2208      	movs	r2, #8
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	1a9b      	subs	r3, r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0307 	bic.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4a15      	ldr	r2, [pc, #84]	@ (8009bf4 <prvHeapInit+0xb4>)
 8009ba0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ba2:	4b14      	ldr	r3, [pc, #80]	@ (8009bf4 <prvHeapInit+0xb4>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009baa:	4b12      	ldr	r3, [pc, #72]	@ (8009bf4 <prvHeapInit+0xb4>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf4 <prvHeapInit+0xb4>)
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8009bf8 <prvHeapInit+0xb8>)
 8009bce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	4a09      	ldr	r2, [pc, #36]	@ (8009bfc <prvHeapInit+0xbc>)
 8009bd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bd8:	4b09      	ldr	r3, [pc, #36]	@ (8009c00 <prvHeapInit+0xc0>)
 8009bda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bde:	601a      	str	r2, [r3, #0]
}
 8009be0:	bf00      	nop
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	24000fcc 	.word	0x24000fcc
 8009bf0:	24004bcc 	.word	0x24004bcc
 8009bf4:	24004bd4 	.word	0x24004bd4
 8009bf8:	24004bdc 	.word	0x24004bdc
 8009bfc:	24004bd8 	.word	0x24004bd8
 8009c00:	24004be8 	.word	0x24004be8

08009c04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c0c:	4b28      	ldr	r3, [pc, #160]	@ (8009cb0 <prvInsertBlockIntoFreeList+0xac>)
 8009c0e:	60fb      	str	r3, [r7, #12]
 8009c10:	e002      	b.n	8009c18 <prvInsertBlockIntoFreeList+0x14>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d8f7      	bhi.n	8009c12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d108      	bne.n	8009c46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	441a      	add	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	441a      	add	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d118      	bne.n	8009c8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	4b15      	ldr	r3, [pc, #84]	@ (8009cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d00d      	beq.n	8009c82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	441a      	add	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	e008      	b.n	8009c94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c82:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	e003      	b.n	8009c94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d002      	beq.n	8009ca2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ca2:	bf00      	nop
 8009ca4:	3714      	adds	r7, #20
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	24004bcc 	.word	0x24004bcc
 8009cb4:	24004bd4 	.word	0x24004bd4

08009cb8 <siprintf>:
 8009cb8:	b40e      	push	{r1, r2, r3}
 8009cba:	b500      	push	{lr}
 8009cbc:	b09c      	sub	sp, #112	@ 0x70
 8009cbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009cc0:	9002      	str	r0, [sp, #8]
 8009cc2:	9006      	str	r0, [sp, #24]
 8009cc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009cc8:	4809      	ldr	r0, [pc, #36]	@ (8009cf0 <siprintf+0x38>)
 8009cca:	9107      	str	r1, [sp, #28]
 8009ccc:	9104      	str	r1, [sp, #16]
 8009cce:	4909      	ldr	r1, [pc, #36]	@ (8009cf4 <siprintf+0x3c>)
 8009cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd4:	9105      	str	r1, [sp, #20]
 8009cd6:	6800      	ldr	r0, [r0, #0]
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	a902      	add	r1, sp, #8
 8009cdc:	f000 f9f8 	bl	800a0d0 <_svfiprintf_r>
 8009ce0:	9b02      	ldr	r3, [sp, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	b01c      	add	sp, #112	@ 0x70
 8009ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cec:	b003      	add	sp, #12
 8009cee:	4770      	bx	lr
 8009cf0:	24000014 	.word	0x24000014
 8009cf4:	ffff0208 	.word	0xffff0208

08009cf8 <memset>:
 8009cf8:	4402      	add	r2, r0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d100      	bne.n	8009d02 <memset+0xa>
 8009d00:	4770      	bx	lr
 8009d02:	f803 1b01 	strb.w	r1, [r3], #1
 8009d06:	e7f9      	b.n	8009cfc <memset+0x4>

08009d08 <_reclaim_reent>:
 8009d08:	4b29      	ldr	r3, [pc, #164]	@ (8009db0 <_reclaim_reent+0xa8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	b570      	push	{r4, r5, r6, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	d04b      	beq.n	8009dac <_reclaim_reent+0xa4>
 8009d14:	69c3      	ldr	r3, [r0, #28]
 8009d16:	b1ab      	cbz	r3, 8009d44 <_reclaim_reent+0x3c>
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	b16b      	cbz	r3, 8009d38 <_reclaim_reent+0x30>
 8009d1c:	2500      	movs	r5, #0
 8009d1e:	69e3      	ldr	r3, [r4, #28]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	5959      	ldr	r1, [r3, r5]
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d13b      	bne.n	8009da0 <_reclaim_reent+0x98>
 8009d28:	3504      	adds	r5, #4
 8009d2a:	2d80      	cmp	r5, #128	@ 0x80
 8009d2c:	d1f7      	bne.n	8009d1e <_reclaim_reent+0x16>
 8009d2e:	69e3      	ldr	r3, [r4, #28]
 8009d30:	4620      	mov	r0, r4
 8009d32:	68d9      	ldr	r1, [r3, #12]
 8009d34:	f000 f878 	bl	8009e28 <_free_r>
 8009d38:	69e3      	ldr	r3, [r4, #28]
 8009d3a:	6819      	ldr	r1, [r3, #0]
 8009d3c:	b111      	cbz	r1, 8009d44 <_reclaim_reent+0x3c>
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 f872 	bl	8009e28 <_free_r>
 8009d44:	6961      	ldr	r1, [r4, #20]
 8009d46:	b111      	cbz	r1, 8009d4e <_reclaim_reent+0x46>
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f000 f86d 	bl	8009e28 <_free_r>
 8009d4e:	69e1      	ldr	r1, [r4, #28]
 8009d50:	b111      	cbz	r1, 8009d58 <_reclaim_reent+0x50>
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 f868 	bl	8009e28 <_free_r>
 8009d58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d5a:	b111      	cbz	r1, 8009d62 <_reclaim_reent+0x5a>
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f000 f863 	bl	8009e28 <_free_r>
 8009d62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d64:	b111      	cbz	r1, 8009d6c <_reclaim_reent+0x64>
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 f85e 	bl	8009e28 <_free_r>
 8009d6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d6e:	b111      	cbz	r1, 8009d76 <_reclaim_reent+0x6e>
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 f859 	bl	8009e28 <_free_r>
 8009d76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d78:	b111      	cbz	r1, 8009d80 <_reclaim_reent+0x78>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 f854 	bl	8009e28 <_free_r>
 8009d80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d82:	b111      	cbz	r1, 8009d8a <_reclaim_reent+0x82>
 8009d84:	4620      	mov	r0, r4
 8009d86:	f000 f84f 	bl	8009e28 <_free_r>
 8009d8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d8c:	b111      	cbz	r1, 8009d94 <_reclaim_reent+0x8c>
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 f84a 	bl	8009e28 <_free_r>
 8009d94:	6a23      	ldr	r3, [r4, #32]
 8009d96:	b14b      	cbz	r3, 8009dac <_reclaim_reent+0xa4>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d9e:	4718      	bx	r3
 8009da0:	680e      	ldr	r6, [r1, #0]
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 f840 	bl	8009e28 <_free_r>
 8009da8:	4631      	mov	r1, r6
 8009daa:	e7bb      	b.n	8009d24 <_reclaim_reent+0x1c>
 8009dac:	bd70      	pop	{r4, r5, r6, pc}
 8009dae:	bf00      	nop
 8009db0:	24000014 	.word	0x24000014

08009db4 <__errno>:
 8009db4:	4b01      	ldr	r3, [pc, #4]	@ (8009dbc <__errno+0x8>)
 8009db6:	6818      	ldr	r0, [r3, #0]
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	24000014 	.word	0x24000014

08009dc0 <__libc_init_array>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8009df8 <__libc_init_array+0x38>)
 8009dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8009dfc <__libc_init_array+0x3c>)
 8009dc6:	1b64      	subs	r4, r4, r5
 8009dc8:	10a4      	asrs	r4, r4, #2
 8009dca:	2600      	movs	r6, #0
 8009dcc:	42a6      	cmp	r6, r4
 8009dce:	d109      	bne.n	8009de4 <__libc_init_array+0x24>
 8009dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8009e00 <__libc_init_array+0x40>)
 8009dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8009e04 <__libc_init_array+0x44>)
 8009dd4:	f000 fc66 	bl	800a6a4 <_init>
 8009dd8:	1b64      	subs	r4, r4, r5
 8009dda:	10a4      	asrs	r4, r4, #2
 8009ddc:	2600      	movs	r6, #0
 8009dde:	42a6      	cmp	r6, r4
 8009de0:	d105      	bne.n	8009dee <__libc_init_array+0x2e>
 8009de2:	bd70      	pop	{r4, r5, r6, pc}
 8009de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de8:	4798      	blx	r3
 8009dea:	3601      	adds	r6, #1
 8009dec:	e7ee      	b.n	8009dcc <__libc_init_array+0xc>
 8009dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df2:	4798      	blx	r3
 8009df4:	3601      	adds	r6, #1
 8009df6:	e7f2      	b.n	8009dde <__libc_init_array+0x1e>
 8009df8:	0800a790 	.word	0x0800a790
 8009dfc:	0800a790 	.word	0x0800a790
 8009e00:	0800a790 	.word	0x0800a790
 8009e04:	0800a794 	.word	0x0800a794

08009e08 <__retarget_lock_acquire_recursive>:
 8009e08:	4770      	bx	lr

08009e0a <__retarget_lock_release_recursive>:
 8009e0a:	4770      	bx	lr

08009e0c <memcpy>:
 8009e0c:	440a      	add	r2, r1
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e14:	d100      	bne.n	8009e18 <memcpy+0xc>
 8009e16:	4770      	bx	lr
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e22:	4291      	cmp	r1, r2
 8009e24:	d1f9      	bne.n	8009e1a <memcpy+0xe>
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <_free_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	d041      	beq.n	8009eb4 <_free_r+0x8c>
 8009e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e34:	1f0c      	subs	r4, r1, #4
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	bfb8      	it	lt
 8009e3a:	18e4      	addlt	r4, r4, r3
 8009e3c:	f000 f8e0 	bl	800a000 <__malloc_lock>
 8009e40:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb8 <_free_r+0x90>)
 8009e42:	6813      	ldr	r3, [r2, #0]
 8009e44:	b933      	cbnz	r3, 8009e54 <_free_r+0x2c>
 8009e46:	6063      	str	r3, [r4, #4]
 8009e48:	6014      	str	r4, [r2, #0]
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e50:	f000 b8dc 	b.w	800a00c <__malloc_unlock>
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	d908      	bls.n	8009e6a <_free_r+0x42>
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	1821      	adds	r1, r4, r0
 8009e5c:	428b      	cmp	r3, r1
 8009e5e:	bf01      	itttt	eq
 8009e60:	6819      	ldreq	r1, [r3, #0]
 8009e62:	685b      	ldreq	r3, [r3, #4]
 8009e64:	1809      	addeq	r1, r1, r0
 8009e66:	6021      	streq	r1, [r4, #0]
 8009e68:	e7ed      	b.n	8009e46 <_free_r+0x1e>
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	b10b      	cbz	r3, 8009e74 <_free_r+0x4c>
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	d9fa      	bls.n	8009e6a <_free_r+0x42>
 8009e74:	6811      	ldr	r1, [r2, #0]
 8009e76:	1850      	adds	r0, r2, r1
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d10b      	bne.n	8009e94 <_free_r+0x6c>
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	4401      	add	r1, r0
 8009e80:	1850      	adds	r0, r2, r1
 8009e82:	4283      	cmp	r3, r0
 8009e84:	6011      	str	r1, [r2, #0]
 8009e86:	d1e0      	bne.n	8009e4a <_free_r+0x22>
 8009e88:	6818      	ldr	r0, [r3, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	6053      	str	r3, [r2, #4]
 8009e8e:	4408      	add	r0, r1
 8009e90:	6010      	str	r0, [r2, #0]
 8009e92:	e7da      	b.n	8009e4a <_free_r+0x22>
 8009e94:	d902      	bls.n	8009e9c <_free_r+0x74>
 8009e96:	230c      	movs	r3, #12
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	e7d6      	b.n	8009e4a <_free_r+0x22>
 8009e9c:	6820      	ldr	r0, [r4, #0]
 8009e9e:	1821      	adds	r1, r4, r0
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	bf04      	itt	eq
 8009ea4:	6819      	ldreq	r1, [r3, #0]
 8009ea6:	685b      	ldreq	r3, [r3, #4]
 8009ea8:	6063      	str	r3, [r4, #4]
 8009eaa:	bf04      	itt	eq
 8009eac:	1809      	addeq	r1, r1, r0
 8009eae:	6021      	streq	r1, [r4, #0]
 8009eb0:	6054      	str	r4, [r2, #4]
 8009eb2:	e7ca      	b.n	8009e4a <_free_r+0x22>
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
 8009eb6:	bf00      	nop
 8009eb8:	24004d30 	.word	0x24004d30

08009ebc <sbrk_aligned>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	4e0f      	ldr	r6, [pc, #60]	@ (8009efc <sbrk_aligned+0x40>)
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	6831      	ldr	r1, [r6, #0]
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	b911      	cbnz	r1, 8009ece <sbrk_aligned+0x12>
 8009ec8:	f000 fba6 	bl	800a618 <_sbrk_r>
 8009ecc:	6030      	str	r0, [r6, #0]
 8009ece:	4621      	mov	r1, r4
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f000 fba1 	bl	800a618 <_sbrk_r>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d103      	bne.n	8009ee2 <sbrk_aligned+0x26>
 8009eda:	f04f 34ff 	mov.w	r4, #4294967295
 8009ede:	4620      	mov	r0, r4
 8009ee0:	bd70      	pop	{r4, r5, r6, pc}
 8009ee2:	1cc4      	adds	r4, r0, #3
 8009ee4:	f024 0403 	bic.w	r4, r4, #3
 8009ee8:	42a0      	cmp	r0, r4
 8009eea:	d0f8      	beq.n	8009ede <sbrk_aligned+0x22>
 8009eec:	1a21      	subs	r1, r4, r0
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f000 fb92 	bl	800a618 <_sbrk_r>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d1f2      	bne.n	8009ede <sbrk_aligned+0x22>
 8009ef8:	e7ef      	b.n	8009eda <sbrk_aligned+0x1e>
 8009efa:	bf00      	nop
 8009efc:	24004d2c 	.word	0x24004d2c

08009f00 <_malloc_r>:
 8009f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f04:	1ccd      	adds	r5, r1, #3
 8009f06:	f025 0503 	bic.w	r5, r5, #3
 8009f0a:	3508      	adds	r5, #8
 8009f0c:	2d0c      	cmp	r5, #12
 8009f0e:	bf38      	it	cc
 8009f10:	250c      	movcc	r5, #12
 8009f12:	2d00      	cmp	r5, #0
 8009f14:	4606      	mov	r6, r0
 8009f16:	db01      	blt.n	8009f1c <_malloc_r+0x1c>
 8009f18:	42a9      	cmp	r1, r5
 8009f1a:	d904      	bls.n	8009f26 <_malloc_r+0x26>
 8009f1c:	230c      	movs	r3, #12
 8009f1e:	6033      	str	r3, [r6, #0]
 8009f20:	2000      	movs	r0, #0
 8009f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ffc <_malloc_r+0xfc>
 8009f2a:	f000 f869 	bl	800a000 <__malloc_lock>
 8009f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f32:	461c      	mov	r4, r3
 8009f34:	bb44      	cbnz	r4, 8009f88 <_malloc_r+0x88>
 8009f36:	4629      	mov	r1, r5
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff ffbf 	bl	8009ebc <sbrk_aligned>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	4604      	mov	r4, r0
 8009f42:	d158      	bne.n	8009ff6 <_malloc_r+0xf6>
 8009f44:	f8d8 4000 	ldr.w	r4, [r8]
 8009f48:	4627      	mov	r7, r4
 8009f4a:	2f00      	cmp	r7, #0
 8009f4c:	d143      	bne.n	8009fd6 <_malloc_r+0xd6>
 8009f4e:	2c00      	cmp	r4, #0
 8009f50:	d04b      	beq.n	8009fea <_malloc_r+0xea>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	4639      	mov	r1, r7
 8009f56:	4630      	mov	r0, r6
 8009f58:	eb04 0903 	add.w	r9, r4, r3
 8009f5c:	f000 fb5c 	bl	800a618 <_sbrk_r>
 8009f60:	4581      	cmp	r9, r0
 8009f62:	d142      	bne.n	8009fea <_malloc_r+0xea>
 8009f64:	6821      	ldr	r1, [r4, #0]
 8009f66:	1a6d      	subs	r5, r5, r1
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7ff ffa6 	bl	8009ebc <sbrk_aligned>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d03a      	beq.n	8009fea <_malloc_r+0xea>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	442b      	add	r3, r5
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	bb62      	cbnz	r2, 8009fdc <_malloc_r+0xdc>
 8009f82:	f8c8 7000 	str.w	r7, [r8]
 8009f86:	e00f      	b.n	8009fa8 <_malloc_r+0xa8>
 8009f88:	6822      	ldr	r2, [r4, #0]
 8009f8a:	1b52      	subs	r2, r2, r5
 8009f8c:	d420      	bmi.n	8009fd0 <_malloc_r+0xd0>
 8009f8e:	2a0b      	cmp	r2, #11
 8009f90:	d917      	bls.n	8009fc2 <_malloc_r+0xc2>
 8009f92:	1961      	adds	r1, r4, r5
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	6025      	str	r5, [r4, #0]
 8009f98:	bf18      	it	ne
 8009f9a:	6059      	strne	r1, [r3, #4]
 8009f9c:	6863      	ldr	r3, [r4, #4]
 8009f9e:	bf08      	it	eq
 8009fa0:	f8c8 1000 	streq.w	r1, [r8]
 8009fa4:	5162      	str	r2, [r4, r5]
 8009fa6:	604b      	str	r3, [r1, #4]
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f000 f82f 	bl	800a00c <__malloc_unlock>
 8009fae:	f104 000b 	add.w	r0, r4, #11
 8009fb2:	1d23      	adds	r3, r4, #4
 8009fb4:	f020 0007 	bic.w	r0, r0, #7
 8009fb8:	1ac2      	subs	r2, r0, r3
 8009fba:	bf1c      	itt	ne
 8009fbc:	1a1b      	subne	r3, r3, r0
 8009fbe:	50a3      	strne	r3, [r4, r2]
 8009fc0:	e7af      	b.n	8009f22 <_malloc_r+0x22>
 8009fc2:	6862      	ldr	r2, [r4, #4]
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	bf0c      	ite	eq
 8009fc8:	f8c8 2000 	streq.w	r2, [r8]
 8009fcc:	605a      	strne	r2, [r3, #4]
 8009fce:	e7eb      	b.n	8009fa8 <_malloc_r+0xa8>
 8009fd0:	4623      	mov	r3, r4
 8009fd2:	6864      	ldr	r4, [r4, #4]
 8009fd4:	e7ae      	b.n	8009f34 <_malloc_r+0x34>
 8009fd6:	463c      	mov	r4, r7
 8009fd8:	687f      	ldr	r7, [r7, #4]
 8009fda:	e7b6      	b.n	8009f4a <_malloc_r+0x4a>
 8009fdc:	461a      	mov	r2, r3
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	42a3      	cmp	r3, r4
 8009fe2:	d1fb      	bne.n	8009fdc <_malloc_r+0xdc>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	6053      	str	r3, [r2, #4]
 8009fe8:	e7de      	b.n	8009fa8 <_malloc_r+0xa8>
 8009fea:	230c      	movs	r3, #12
 8009fec:	6033      	str	r3, [r6, #0]
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f000 f80c 	bl	800a00c <__malloc_unlock>
 8009ff4:	e794      	b.n	8009f20 <_malloc_r+0x20>
 8009ff6:	6005      	str	r5, [r0, #0]
 8009ff8:	e7d6      	b.n	8009fa8 <_malloc_r+0xa8>
 8009ffa:	bf00      	nop
 8009ffc:	24004d30 	.word	0x24004d30

0800a000 <__malloc_lock>:
 800a000:	4801      	ldr	r0, [pc, #4]	@ (800a008 <__malloc_lock+0x8>)
 800a002:	f7ff bf01 	b.w	8009e08 <__retarget_lock_acquire_recursive>
 800a006:	bf00      	nop
 800a008:	24004d28 	.word	0x24004d28

0800a00c <__malloc_unlock>:
 800a00c:	4801      	ldr	r0, [pc, #4]	@ (800a014 <__malloc_unlock+0x8>)
 800a00e:	f7ff befc 	b.w	8009e0a <__retarget_lock_release_recursive>
 800a012:	bf00      	nop
 800a014:	24004d28 	.word	0x24004d28

0800a018 <__ssputs_r>:
 800a018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a01c:	688e      	ldr	r6, [r1, #8]
 800a01e:	461f      	mov	r7, r3
 800a020:	42be      	cmp	r6, r7
 800a022:	680b      	ldr	r3, [r1, #0]
 800a024:	4682      	mov	sl, r0
 800a026:	460c      	mov	r4, r1
 800a028:	4690      	mov	r8, r2
 800a02a:	d82d      	bhi.n	800a088 <__ssputs_r+0x70>
 800a02c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a034:	d026      	beq.n	800a084 <__ssputs_r+0x6c>
 800a036:	6965      	ldr	r5, [r4, #20]
 800a038:	6909      	ldr	r1, [r1, #16]
 800a03a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a03e:	eba3 0901 	sub.w	r9, r3, r1
 800a042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a046:	1c7b      	adds	r3, r7, #1
 800a048:	444b      	add	r3, r9
 800a04a:	106d      	asrs	r5, r5, #1
 800a04c:	429d      	cmp	r5, r3
 800a04e:	bf38      	it	cc
 800a050:	461d      	movcc	r5, r3
 800a052:	0553      	lsls	r3, r2, #21
 800a054:	d527      	bpl.n	800a0a6 <__ssputs_r+0x8e>
 800a056:	4629      	mov	r1, r5
 800a058:	f7ff ff52 	bl	8009f00 <_malloc_r>
 800a05c:	4606      	mov	r6, r0
 800a05e:	b360      	cbz	r0, 800a0ba <__ssputs_r+0xa2>
 800a060:	6921      	ldr	r1, [r4, #16]
 800a062:	464a      	mov	r2, r9
 800a064:	f7ff fed2 	bl	8009e0c <memcpy>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	6126      	str	r6, [r4, #16]
 800a076:	6165      	str	r5, [r4, #20]
 800a078:	444e      	add	r6, r9
 800a07a:	eba5 0509 	sub.w	r5, r5, r9
 800a07e:	6026      	str	r6, [r4, #0]
 800a080:	60a5      	str	r5, [r4, #8]
 800a082:	463e      	mov	r6, r7
 800a084:	42be      	cmp	r6, r7
 800a086:	d900      	bls.n	800a08a <__ssputs_r+0x72>
 800a088:	463e      	mov	r6, r7
 800a08a:	6820      	ldr	r0, [r4, #0]
 800a08c:	4632      	mov	r2, r6
 800a08e:	4641      	mov	r1, r8
 800a090:	f000 faa8 	bl	800a5e4 <memmove>
 800a094:	68a3      	ldr	r3, [r4, #8]
 800a096:	1b9b      	subs	r3, r3, r6
 800a098:	60a3      	str	r3, [r4, #8]
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	4433      	add	r3, r6
 800a09e:	6023      	str	r3, [r4, #0]
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	f000 fac6 	bl	800a638 <_realloc_r>
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d1e0      	bne.n	800a074 <__ssputs_r+0x5c>
 800a0b2:	6921      	ldr	r1, [r4, #16]
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	f7ff feb7 	bl	8009e28 <_free_r>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	f8ca 3000 	str.w	r3, [sl]
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	e7e9      	b.n	800a0a2 <__ssputs_r+0x8a>
	...

0800a0d0 <_svfiprintf_r>:
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	4698      	mov	r8, r3
 800a0d6:	898b      	ldrh	r3, [r1, #12]
 800a0d8:	061b      	lsls	r3, r3, #24
 800a0da:	b09d      	sub	sp, #116	@ 0x74
 800a0dc:	4607      	mov	r7, r0
 800a0de:	460d      	mov	r5, r1
 800a0e0:	4614      	mov	r4, r2
 800a0e2:	d510      	bpl.n	800a106 <_svfiprintf_r+0x36>
 800a0e4:	690b      	ldr	r3, [r1, #16]
 800a0e6:	b973      	cbnz	r3, 800a106 <_svfiprintf_r+0x36>
 800a0e8:	2140      	movs	r1, #64	@ 0x40
 800a0ea:	f7ff ff09 	bl	8009f00 <_malloc_r>
 800a0ee:	6028      	str	r0, [r5, #0]
 800a0f0:	6128      	str	r0, [r5, #16]
 800a0f2:	b930      	cbnz	r0, 800a102 <_svfiprintf_r+0x32>
 800a0f4:	230c      	movs	r3, #12
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fc:	b01d      	add	sp, #116	@ 0x74
 800a0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a102:	2340      	movs	r3, #64	@ 0x40
 800a104:	616b      	str	r3, [r5, #20]
 800a106:	2300      	movs	r3, #0
 800a108:	9309      	str	r3, [sp, #36]	@ 0x24
 800a10a:	2320      	movs	r3, #32
 800a10c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a110:	f8cd 800c 	str.w	r8, [sp, #12]
 800a114:	2330      	movs	r3, #48	@ 0x30
 800a116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2b4 <_svfiprintf_r+0x1e4>
 800a11a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a11e:	f04f 0901 	mov.w	r9, #1
 800a122:	4623      	mov	r3, r4
 800a124:	469a      	mov	sl, r3
 800a126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a12a:	b10a      	cbz	r2, 800a130 <_svfiprintf_r+0x60>
 800a12c:	2a25      	cmp	r2, #37	@ 0x25
 800a12e:	d1f9      	bne.n	800a124 <_svfiprintf_r+0x54>
 800a130:	ebba 0b04 	subs.w	fp, sl, r4
 800a134:	d00b      	beq.n	800a14e <_svfiprintf_r+0x7e>
 800a136:	465b      	mov	r3, fp
 800a138:	4622      	mov	r2, r4
 800a13a:	4629      	mov	r1, r5
 800a13c:	4638      	mov	r0, r7
 800a13e:	f7ff ff6b 	bl	800a018 <__ssputs_r>
 800a142:	3001      	adds	r0, #1
 800a144:	f000 80a7 	beq.w	800a296 <_svfiprintf_r+0x1c6>
 800a148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a14a:	445a      	add	r2, fp
 800a14c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a14e:	f89a 3000 	ldrb.w	r3, [sl]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 809f 	beq.w	800a296 <_svfiprintf_r+0x1c6>
 800a158:	2300      	movs	r3, #0
 800a15a:	f04f 32ff 	mov.w	r2, #4294967295
 800a15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a162:	f10a 0a01 	add.w	sl, sl, #1
 800a166:	9304      	str	r3, [sp, #16]
 800a168:	9307      	str	r3, [sp, #28]
 800a16a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a16e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a170:	4654      	mov	r4, sl
 800a172:	2205      	movs	r2, #5
 800a174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a178:	484e      	ldr	r0, [pc, #312]	@ (800a2b4 <_svfiprintf_r+0x1e4>)
 800a17a:	f7f6 f8d1 	bl	8000320 <memchr>
 800a17e:	9a04      	ldr	r2, [sp, #16]
 800a180:	b9d8      	cbnz	r0, 800a1ba <_svfiprintf_r+0xea>
 800a182:	06d0      	lsls	r0, r2, #27
 800a184:	bf44      	itt	mi
 800a186:	2320      	movmi	r3, #32
 800a188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a18c:	0711      	lsls	r1, r2, #28
 800a18e:	bf44      	itt	mi
 800a190:	232b      	movmi	r3, #43	@ 0x2b
 800a192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a196:	f89a 3000 	ldrb.w	r3, [sl]
 800a19a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a19c:	d015      	beq.n	800a1ca <_svfiprintf_r+0xfa>
 800a19e:	9a07      	ldr	r2, [sp, #28]
 800a1a0:	4654      	mov	r4, sl
 800a1a2:	2000      	movs	r0, #0
 800a1a4:	f04f 0c0a 	mov.w	ip, #10
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ae:	3b30      	subs	r3, #48	@ 0x30
 800a1b0:	2b09      	cmp	r3, #9
 800a1b2:	d94b      	bls.n	800a24c <_svfiprintf_r+0x17c>
 800a1b4:	b1b0      	cbz	r0, 800a1e4 <_svfiprintf_r+0x114>
 800a1b6:	9207      	str	r2, [sp, #28]
 800a1b8:	e014      	b.n	800a1e4 <_svfiprintf_r+0x114>
 800a1ba:	eba0 0308 	sub.w	r3, r0, r8
 800a1be:	fa09 f303 	lsl.w	r3, r9, r3
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	9304      	str	r3, [sp, #16]
 800a1c6:	46a2      	mov	sl, r4
 800a1c8:	e7d2      	b.n	800a170 <_svfiprintf_r+0xa0>
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	1d19      	adds	r1, r3, #4
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	9103      	str	r1, [sp, #12]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	bfbb      	ittet	lt
 800a1d6:	425b      	neglt	r3, r3
 800a1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a1dc:	9307      	strge	r3, [sp, #28]
 800a1de:	9307      	strlt	r3, [sp, #28]
 800a1e0:	bfb8      	it	lt
 800a1e2:	9204      	strlt	r2, [sp, #16]
 800a1e4:	7823      	ldrb	r3, [r4, #0]
 800a1e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1e8:	d10a      	bne.n	800a200 <_svfiprintf_r+0x130>
 800a1ea:	7863      	ldrb	r3, [r4, #1]
 800a1ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ee:	d132      	bne.n	800a256 <_svfiprintf_r+0x186>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	1d1a      	adds	r2, r3, #4
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	9203      	str	r2, [sp, #12]
 800a1f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1fc:	3402      	adds	r4, #2
 800a1fe:	9305      	str	r3, [sp, #20]
 800a200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2c4 <_svfiprintf_r+0x1f4>
 800a204:	7821      	ldrb	r1, [r4, #0]
 800a206:	2203      	movs	r2, #3
 800a208:	4650      	mov	r0, sl
 800a20a:	f7f6 f889 	bl	8000320 <memchr>
 800a20e:	b138      	cbz	r0, 800a220 <_svfiprintf_r+0x150>
 800a210:	9b04      	ldr	r3, [sp, #16]
 800a212:	eba0 000a 	sub.w	r0, r0, sl
 800a216:	2240      	movs	r2, #64	@ 0x40
 800a218:	4082      	lsls	r2, r0
 800a21a:	4313      	orrs	r3, r2
 800a21c:	3401      	adds	r4, #1
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a224:	4824      	ldr	r0, [pc, #144]	@ (800a2b8 <_svfiprintf_r+0x1e8>)
 800a226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a22a:	2206      	movs	r2, #6
 800a22c:	f7f6 f878 	bl	8000320 <memchr>
 800a230:	2800      	cmp	r0, #0
 800a232:	d036      	beq.n	800a2a2 <_svfiprintf_r+0x1d2>
 800a234:	4b21      	ldr	r3, [pc, #132]	@ (800a2bc <_svfiprintf_r+0x1ec>)
 800a236:	bb1b      	cbnz	r3, 800a280 <_svfiprintf_r+0x1b0>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	3307      	adds	r3, #7
 800a23c:	f023 0307 	bic.w	r3, r3, #7
 800a240:	3308      	adds	r3, #8
 800a242:	9303      	str	r3, [sp, #12]
 800a244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a246:	4433      	add	r3, r6
 800a248:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24a:	e76a      	b.n	800a122 <_svfiprintf_r+0x52>
 800a24c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a250:	460c      	mov	r4, r1
 800a252:	2001      	movs	r0, #1
 800a254:	e7a8      	b.n	800a1a8 <_svfiprintf_r+0xd8>
 800a256:	2300      	movs	r3, #0
 800a258:	3401      	adds	r4, #1
 800a25a:	9305      	str	r3, [sp, #20]
 800a25c:	4619      	mov	r1, r3
 800a25e:	f04f 0c0a 	mov.w	ip, #10
 800a262:	4620      	mov	r0, r4
 800a264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a268:	3a30      	subs	r2, #48	@ 0x30
 800a26a:	2a09      	cmp	r2, #9
 800a26c:	d903      	bls.n	800a276 <_svfiprintf_r+0x1a6>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0c6      	beq.n	800a200 <_svfiprintf_r+0x130>
 800a272:	9105      	str	r1, [sp, #20]
 800a274:	e7c4      	b.n	800a200 <_svfiprintf_r+0x130>
 800a276:	fb0c 2101 	mla	r1, ip, r1, r2
 800a27a:	4604      	mov	r4, r0
 800a27c:	2301      	movs	r3, #1
 800a27e:	e7f0      	b.n	800a262 <_svfiprintf_r+0x192>
 800a280:	ab03      	add	r3, sp, #12
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	462a      	mov	r2, r5
 800a286:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c0 <_svfiprintf_r+0x1f0>)
 800a288:	a904      	add	r1, sp, #16
 800a28a:	4638      	mov	r0, r7
 800a28c:	f3af 8000 	nop.w
 800a290:	1c42      	adds	r2, r0, #1
 800a292:	4606      	mov	r6, r0
 800a294:	d1d6      	bne.n	800a244 <_svfiprintf_r+0x174>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	065b      	lsls	r3, r3, #25
 800a29a:	f53f af2d 	bmi.w	800a0f8 <_svfiprintf_r+0x28>
 800a29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2a0:	e72c      	b.n	800a0fc <_svfiprintf_r+0x2c>
 800a2a2:	ab03      	add	r3, sp, #12
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	462a      	mov	r2, r5
 800a2a8:	4b05      	ldr	r3, [pc, #20]	@ (800a2c0 <_svfiprintf_r+0x1f0>)
 800a2aa:	a904      	add	r1, sp, #16
 800a2ac:	4638      	mov	r0, r7
 800a2ae:	f000 f879 	bl	800a3a4 <_printf_i>
 800a2b2:	e7ed      	b.n	800a290 <_svfiprintf_r+0x1c0>
 800a2b4:	0800a754 	.word	0x0800a754
 800a2b8:	0800a75e 	.word	0x0800a75e
 800a2bc:	00000000 	.word	0x00000000
 800a2c0:	0800a019 	.word	0x0800a019
 800a2c4:	0800a75a 	.word	0x0800a75a

0800a2c8 <_printf_common>:
 800a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	4616      	mov	r6, r2
 800a2ce:	4698      	mov	r8, r3
 800a2d0:	688a      	ldr	r2, [r1, #8]
 800a2d2:	690b      	ldr	r3, [r1, #16]
 800a2d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bfb8      	it	lt
 800a2dc:	4613      	movlt	r3, r2
 800a2de:	6033      	str	r3, [r6, #0]
 800a2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	b10a      	cbz	r2, 800a2ee <_printf_common+0x26>
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	6033      	str	r3, [r6, #0]
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	0699      	lsls	r1, r3, #26
 800a2f2:	bf42      	ittt	mi
 800a2f4:	6833      	ldrmi	r3, [r6, #0]
 800a2f6:	3302      	addmi	r3, #2
 800a2f8:	6033      	strmi	r3, [r6, #0]
 800a2fa:	6825      	ldr	r5, [r4, #0]
 800a2fc:	f015 0506 	ands.w	r5, r5, #6
 800a300:	d106      	bne.n	800a310 <_printf_common+0x48>
 800a302:	f104 0a19 	add.w	sl, r4, #25
 800a306:	68e3      	ldr	r3, [r4, #12]
 800a308:	6832      	ldr	r2, [r6, #0]
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dc26      	bgt.n	800a35e <_printf_common+0x96>
 800a310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a314:	6822      	ldr	r2, [r4, #0]
 800a316:	3b00      	subs	r3, #0
 800a318:	bf18      	it	ne
 800a31a:	2301      	movne	r3, #1
 800a31c:	0692      	lsls	r2, r2, #26
 800a31e:	d42b      	bmi.n	800a378 <_printf_common+0xb0>
 800a320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a324:	4641      	mov	r1, r8
 800a326:	4638      	mov	r0, r7
 800a328:	47c8      	blx	r9
 800a32a:	3001      	adds	r0, #1
 800a32c:	d01e      	beq.n	800a36c <_printf_common+0xa4>
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	6922      	ldr	r2, [r4, #16]
 800a332:	f003 0306 	and.w	r3, r3, #6
 800a336:	2b04      	cmp	r3, #4
 800a338:	bf02      	ittt	eq
 800a33a:	68e5      	ldreq	r5, [r4, #12]
 800a33c:	6833      	ldreq	r3, [r6, #0]
 800a33e:	1aed      	subeq	r5, r5, r3
 800a340:	68a3      	ldr	r3, [r4, #8]
 800a342:	bf0c      	ite	eq
 800a344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a348:	2500      	movne	r5, #0
 800a34a:	4293      	cmp	r3, r2
 800a34c:	bfc4      	itt	gt
 800a34e:	1a9b      	subgt	r3, r3, r2
 800a350:	18ed      	addgt	r5, r5, r3
 800a352:	2600      	movs	r6, #0
 800a354:	341a      	adds	r4, #26
 800a356:	42b5      	cmp	r5, r6
 800a358:	d11a      	bne.n	800a390 <_printf_common+0xc8>
 800a35a:	2000      	movs	r0, #0
 800a35c:	e008      	b.n	800a370 <_printf_common+0xa8>
 800a35e:	2301      	movs	r3, #1
 800a360:	4652      	mov	r2, sl
 800a362:	4641      	mov	r1, r8
 800a364:	4638      	mov	r0, r7
 800a366:	47c8      	blx	r9
 800a368:	3001      	adds	r0, #1
 800a36a:	d103      	bne.n	800a374 <_printf_common+0xac>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	3501      	adds	r5, #1
 800a376:	e7c6      	b.n	800a306 <_printf_common+0x3e>
 800a378:	18e1      	adds	r1, r4, r3
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	2030      	movs	r0, #48	@ 0x30
 800a37e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a382:	4422      	add	r2, r4
 800a384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a38c:	3302      	adds	r3, #2
 800a38e:	e7c7      	b.n	800a320 <_printf_common+0x58>
 800a390:	2301      	movs	r3, #1
 800a392:	4622      	mov	r2, r4
 800a394:	4641      	mov	r1, r8
 800a396:	4638      	mov	r0, r7
 800a398:	47c8      	blx	r9
 800a39a:	3001      	adds	r0, #1
 800a39c:	d0e6      	beq.n	800a36c <_printf_common+0xa4>
 800a39e:	3601      	adds	r6, #1
 800a3a0:	e7d9      	b.n	800a356 <_printf_common+0x8e>
	...

0800a3a4 <_printf_i>:
 800a3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a8:	7e0f      	ldrb	r7, [r1, #24]
 800a3aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3ac:	2f78      	cmp	r7, #120	@ 0x78
 800a3ae:	4691      	mov	r9, r2
 800a3b0:	4680      	mov	r8, r0
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	469a      	mov	sl, r3
 800a3b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3ba:	d807      	bhi.n	800a3cc <_printf_i+0x28>
 800a3bc:	2f62      	cmp	r7, #98	@ 0x62
 800a3be:	d80a      	bhi.n	800a3d6 <_printf_i+0x32>
 800a3c0:	2f00      	cmp	r7, #0
 800a3c2:	f000 80d2 	beq.w	800a56a <_printf_i+0x1c6>
 800a3c6:	2f58      	cmp	r7, #88	@ 0x58
 800a3c8:	f000 80b9 	beq.w	800a53e <_printf_i+0x19a>
 800a3cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3d4:	e03a      	b.n	800a44c <_printf_i+0xa8>
 800a3d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3da:	2b15      	cmp	r3, #21
 800a3dc:	d8f6      	bhi.n	800a3cc <_printf_i+0x28>
 800a3de:	a101      	add	r1, pc, #4	@ (adr r1, 800a3e4 <_printf_i+0x40>)
 800a3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e4:	0800a43d 	.word	0x0800a43d
 800a3e8:	0800a451 	.word	0x0800a451
 800a3ec:	0800a3cd 	.word	0x0800a3cd
 800a3f0:	0800a3cd 	.word	0x0800a3cd
 800a3f4:	0800a3cd 	.word	0x0800a3cd
 800a3f8:	0800a3cd 	.word	0x0800a3cd
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a3cd 	.word	0x0800a3cd
 800a404:	0800a3cd 	.word	0x0800a3cd
 800a408:	0800a3cd 	.word	0x0800a3cd
 800a40c:	0800a3cd 	.word	0x0800a3cd
 800a410:	0800a551 	.word	0x0800a551
 800a414:	0800a47b 	.word	0x0800a47b
 800a418:	0800a50b 	.word	0x0800a50b
 800a41c:	0800a3cd 	.word	0x0800a3cd
 800a420:	0800a3cd 	.word	0x0800a3cd
 800a424:	0800a573 	.word	0x0800a573
 800a428:	0800a3cd 	.word	0x0800a3cd
 800a42c:	0800a47b 	.word	0x0800a47b
 800a430:	0800a3cd 	.word	0x0800a3cd
 800a434:	0800a3cd 	.word	0x0800a3cd
 800a438:	0800a513 	.word	0x0800a513
 800a43c:	6833      	ldr	r3, [r6, #0]
 800a43e:	1d1a      	adds	r2, r3, #4
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6032      	str	r2, [r6, #0]
 800a444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a44c:	2301      	movs	r3, #1
 800a44e:	e09d      	b.n	800a58c <_printf_i+0x1e8>
 800a450:	6833      	ldr	r3, [r6, #0]
 800a452:	6820      	ldr	r0, [r4, #0]
 800a454:	1d19      	adds	r1, r3, #4
 800a456:	6031      	str	r1, [r6, #0]
 800a458:	0606      	lsls	r6, r0, #24
 800a45a:	d501      	bpl.n	800a460 <_printf_i+0xbc>
 800a45c:	681d      	ldr	r5, [r3, #0]
 800a45e:	e003      	b.n	800a468 <_printf_i+0xc4>
 800a460:	0645      	lsls	r5, r0, #25
 800a462:	d5fb      	bpl.n	800a45c <_printf_i+0xb8>
 800a464:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a468:	2d00      	cmp	r5, #0
 800a46a:	da03      	bge.n	800a474 <_printf_i+0xd0>
 800a46c:	232d      	movs	r3, #45	@ 0x2d
 800a46e:	426d      	negs	r5, r5
 800a470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a474:	4859      	ldr	r0, [pc, #356]	@ (800a5dc <_printf_i+0x238>)
 800a476:	230a      	movs	r3, #10
 800a478:	e011      	b.n	800a49e <_printf_i+0xfa>
 800a47a:	6821      	ldr	r1, [r4, #0]
 800a47c:	6833      	ldr	r3, [r6, #0]
 800a47e:	0608      	lsls	r0, r1, #24
 800a480:	f853 5b04 	ldr.w	r5, [r3], #4
 800a484:	d402      	bmi.n	800a48c <_printf_i+0xe8>
 800a486:	0649      	lsls	r1, r1, #25
 800a488:	bf48      	it	mi
 800a48a:	b2ad      	uxthmi	r5, r5
 800a48c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a48e:	4853      	ldr	r0, [pc, #332]	@ (800a5dc <_printf_i+0x238>)
 800a490:	6033      	str	r3, [r6, #0]
 800a492:	bf14      	ite	ne
 800a494:	230a      	movne	r3, #10
 800a496:	2308      	moveq	r3, #8
 800a498:	2100      	movs	r1, #0
 800a49a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a49e:	6866      	ldr	r6, [r4, #4]
 800a4a0:	60a6      	str	r6, [r4, #8]
 800a4a2:	2e00      	cmp	r6, #0
 800a4a4:	bfa2      	ittt	ge
 800a4a6:	6821      	ldrge	r1, [r4, #0]
 800a4a8:	f021 0104 	bicge.w	r1, r1, #4
 800a4ac:	6021      	strge	r1, [r4, #0]
 800a4ae:	b90d      	cbnz	r5, 800a4b4 <_printf_i+0x110>
 800a4b0:	2e00      	cmp	r6, #0
 800a4b2:	d04b      	beq.n	800a54c <_printf_i+0x1a8>
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a4be:	5dc7      	ldrb	r7, [r0, r7]
 800a4c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4c4:	462f      	mov	r7, r5
 800a4c6:	42bb      	cmp	r3, r7
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	d9f4      	bls.n	800a4b6 <_printf_i+0x112>
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d10b      	bne.n	800a4e8 <_printf_i+0x144>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	07df      	lsls	r7, r3, #31
 800a4d4:	d508      	bpl.n	800a4e8 <_printf_i+0x144>
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	bfde      	ittt	le
 800a4de:	2330      	movle	r3, #48	@ 0x30
 800a4e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4e8:	1b92      	subs	r2, r2, r6
 800a4ea:	6122      	str	r2, [r4, #16]
 800a4ec:	f8cd a000 	str.w	sl, [sp]
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	aa03      	add	r2, sp, #12
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f7ff fee6 	bl	800a2c8 <_printf_common>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d14a      	bne.n	800a596 <_printf_i+0x1f2>
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	b004      	add	sp, #16
 800a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	f043 0320 	orr.w	r3, r3, #32
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	4833      	ldr	r0, [pc, #204]	@ (800a5e0 <_printf_i+0x23c>)
 800a514:	2778      	movs	r7, #120	@ 0x78
 800a516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	6831      	ldr	r1, [r6, #0]
 800a51e:	061f      	lsls	r7, r3, #24
 800a520:	f851 5b04 	ldr.w	r5, [r1], #4
 800a524:	d402      	bmi.n	800a52c <_printf_i+0x188>
 800a526:	065f      	lsls	r7, r3, #25
 800a528:	bf48      	it	mi
 800a52a:	b2ad      	uxthmi	r5, r5
 800a52c:	6031      	str	r1, [r6, #0]
 800a52e:	07d9      	lsls	r1, r3, #31
 800a530:	bf44      	itt	mi
 800a532:	f043 0320 	orrmi.w	r3, r3, #32
 800a536:	6023      	strmi	r3, [r4, #0]
 800a538:	b11d      	cbz	r5, 800a542 <_printf_i+0x19e>
 800a53a:	2310      	movs	r3, #16
 800a53c:	e7ac      	b.n	800a498 <_printf_i+0xf4>
 800a53e:	4827      	ldr	r0, [pc, #156]	@ (800a5dc <_printf_i+0x238>)
 800a540:	e7e9      	b.n	800a516 <_printf_i+0x172>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	f023 0320 	bic.w	r3, r3, #32
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	e7f6      	b.n	800a53a <_printf_i+0x196>
 800a54c:	4616      	mov	r6, r2
 800a54e:	e7bd      	b.n	800a4cc <_printf_i+0x128>
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	6825      	ldr	r5, [r4, #0]
 800a554:	6961      	ldr	r1, [r4, #20]
 800a556:	1d18      	adds	r0, r3, #4
 800a558:	6030      	str	r0, [r6, #0]
 800a55a:	062e      	lsls	r6, r5, #24
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	d501      	bpl.n	800a564 <_printf_i+0x1c0>
 800a560:	6019      	str	r1, [r3, #0]
 800a562:	e002      	b.n	800a56a <_printf_i+0x1c6>
 800a564:	0668      	lsls	r0, r5, #25
 800a566:	d5fb      	bpl.n	800a560 <_printf_i+0x1bc>
 800a568:	8019      	strh	r1, [r3, #0]
 800a56a:	2300      	movs	r3, #0
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	4616      	mov	r6, r2
 800a570:	e7bc      	b.n	800a4ec <_printf_i+0x148>
 800a572:	6833      	ldr	r3, [r6, #0]
 800a574:	1d1a      	adds	r2, r3, #4
 800a576:	6032      	str	r2, [r6, #0]
 800a578:	681e      	ldr	r6, [r3, #0]
 800a57a:	6862      	ldr	r2, [r4, #4]
 800a57c:	2100      	movs	r1, #0
 800a57e:	4630      	mov	r0, r6
 800a580:	f7f5 fece 	bl	8000320 <memchr>
 800a584:	b108      	cbz	r0, 800a58a <_printf_i+0x1e6>
 800a586:	1b80      	subs	r0, r0, r6
 800a588:	6060      	str	r0, [r4, #4]
 800a58a:	6863      	ldr	r3, [r4, #4]
 800a58c:	6123      	str	r3, [r4, #16]
 800a58e:	2300      	movs	r3, #0
 800a590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a594:	e7aa      	b.n	800a4ec <_printf_i+0x148>
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	4632      	mov	r2, r6
 800a59a:	4649      	mov	r1, r9
 800a59c:	4640      	mov	r0, r8
 800a59e:	47d0      	blx	sl
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d0ad      	beq.n	800a500 <_printf_i+0x15c>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	079b      	lsls	r3, r3, #30
 800a5a8:	d413      	bmi.n	800a5d2 <_printf_i+0x22e>
 800a5aa:	68e0      	ldr	r0, [r4, #12]
 800a5ac:	9b03      	ldr	r3, [sp, #12]
 800a5ae:	4298      	cmp	r0, r3
 800a5b0:	bfb8      	it	lt
 800a5b2:	4618      	movlt	r0, r3
 800a5b4:	e7a6      	b.n	800a504 <_printf_i+0x160>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4632      	mov	r2, r6
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4640      	mov	r0, r8
 800a5be:	47d0      	blx	sl
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d09d      	beq.n	800a500 <_printf_i+0x15c>
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	9903      	ldr	r1, [sp, #12]
 800a5ca:	1a5b      	subs	r3, r3, r1
 800a5cc:	42ab      	cmp	r3, r5
 800a5ce:	dcf2      	bgt.n	800a5b6 <_printf_i+0x212>
 800a5d0:	e7eb      	b.n	800a5aa <_printf_i+0x206>
 800a5d2:	2500      	movs	r5, #0
 800a5d4:	f104 0619 	add.w	r6, r4, #25
 800a5d8:	e7f5      	b.n	800a5c6 <_printf_i+0x222>
 800a5da:	bf00      	nop
 800a5dc:	0800a765 	.word	0x0800a765
 800a5e0:	0800a776 	.word	0x0800a776

0800a5e4 <memmove>:
 800a5e4:	4288      	cmp	r0, r1
 800a5e6:	b510      	push	{r4, lr}
 800a5e8:	eb01 0402 	add.w	r4, r1, r2
 800a5ec:	d902      	bls.n	800a5f4 <memmove+0x10>
 800a5ee:	4284      	cmp	r4, r0
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	d807      	bhi.n	800a604 <memmove+0x20>
 800a5f4:	1e43      	subs	r3, r0, #1
 800a5f6:	42a1      	cmp	r1, r4
 800a5f8:	d008      	beq.n	800a60c <memmove+0x28>
 800a5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a602:	e7f8      	b.n	800a5f6 <memmove+0x12>
 800a604:	4402      	add	r2, r0
 800a606:	4601      	mov	r1, r0
 800a608:	428a      	cmp	r2, r1
 800a60a:	d100      	bne.n	800a60e <memmove+0x2a>
 800a60c:	bd10      	pop	{r4, pc}
 800a60e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a616:	e7f7      	b.n	800a608 <memmove+0x24>

0800a618 <_sbrk_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d06      	ldr	r5, [pc, #24]	@ (800a634 <_sbrk_r+0x1c>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f6 fbe2 	bl	8000dec <_sbrk>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_sbrk_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_sbrk_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	24004d24 	.word	0x24004d24

0800a638 <_realloc_r>:
 800a638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63c:	4680      	mov	r8, r0
 800a63e:	4615      	mov	r5, r2
 800a640:	460c      	mov	r4, r1
 800a642:	b921      	cbnz	r1, 800a64e <_realloc_r+0x16>
 800a644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a648:	4611      	mov	r1, r2
 800a64a:	f7ff bc59 	b.w	8009f00 <_malloc_r>
 800a64e:	b92a      	cbnz	r2, 800a65c <_realloc_r+0x24>
 800a650:	f7ff fbea 	bl	8009e28 <_free_r>
 800a654:	2400      	movs	r4, #0
 800a656:	4620      	mov	r0, r4
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	f000 f81a 	bl	800a694 <_malloc_usable_size_r>
 800a660:	4285      	cmp	r5, r0
 800a662:	4606      	mov	r6, r0
 800a664:	d802      	bhi.n	800a66c <_realloc_r+0x34>
 800a666:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a66a:	d8f4      	bhi.n	800a656 <_realloc_r+0x1e>
 800a66c:	4629      	mov	r1, r5
 800a66e:	4640      	mov	r0, r8
 800a670:	f7ff fc46 	bl	8009f00 <_malloc_r>
 800a674:	4607      	mov	r7, r0
 800a676:	2800      	cmp	r0, #0
 800a678:	d0ec      	beq.n	800a654 <_realloc_r+0x1c>
 800a67a:	42b5      	cmp	r5, r6
 800a67c:	462a      	mov	r2, r5
 800a67e:	4621      	mov	r1, r4
 800a680:	bf28      	it	cs
 800a682:	4632      	movcs	r2, r6
 800a684:	f7ff fbc2 	bl	8009e0c <memcpy>
 800a688:	4621      	mov	r1, r4
 800a68a:	4640      	mov	r0, r8
 800a68c:	f7ff fbcc 	bl	8009e28 <_free_r>
 800a690:	463c      	mov	r4, r7
 800a692:	e7e0      	b.n	800a656 <_realloc_r+0x1e>

0800a694 <_malloc_usable_size_r>:
 800a694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a698:	1f18      	subs	r0, r3, #4
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	bfbc      	itt	lt
 800a69e:	580b      	ldrlt	r3, [r1, r0]
 800a6a0:	18c0      	addlt	r0, r0, r3
 800a6a2:	4770      	bx	lr

0800a6a4 <_init>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	bf00      	nop
 800a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6aa:	bc08      	pop	{r3}
 800a6ac:	469e      	mov	lr, r3
 800a6ae:	4770      	bx	lr

0800a6b0 <_fini>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr
