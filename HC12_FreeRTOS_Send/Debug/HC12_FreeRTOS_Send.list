
HC12_FreeRTOS_Send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3dc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a6ac  0800a6ac  0000b6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a79c  0800a79c  0000b79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a7a4  0800a7a4  0000b7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a7a8  0800a7a8  0000b7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a7ac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cd0  24000064  0800a810  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004d34  0800a810  0000cd34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002148f  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003dd5  00000000  00000000  0002d521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018e0  00000000  00000000  000312f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001361  00000000  00000000  00032bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000049b5  00000000  00000000  00033f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001fe95  00000000  00000000  000388ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001584ff  00000000  00000000  00058783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b0c82  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ea8  00000000  00000000  001b0cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000084  00000000  00000000  001b7b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a694 	.word	0x0800a694

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	0800a694 	.word	0x0800a694

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fa09 	bl	8000aca <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fce4 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f828 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f92e 	bl	8000920 <MX_GPIO_Init>
  MX_UART7_Init();
 80006c4:	f000 f894 	bl	80007f0 <MX_UART7_Init>
  MX_USART3_UART_Init();
 80006c8:	f000 f8de 	bl	8000888 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006cc:	f006 fd3c 	bl	8007148 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d0:	4a09      	ldr	r2, [pc, #36]	@ (80006f8 <main+0x48>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <main+0x4c>)
 80006d6:	f006 fd81 	bl	80071dc <osThreadNew>
 80006da:	4603      	mov	r3, r0
 80006dc:	4a08      	ldr	r2, [pc, #32]	@ (8000700 <main+0x50>)
 80006de:	6013      	str	r3, [r2, #0]

  /* creation of HC12SendTask */
  HC12SendTaskHandle = osThreadNew(StartHC12SendTask, NULL, &HC12SendTask_attributes);
 80006e0:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <main+0x54>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4808      	ldr	r0, [pc, #32]	@ (8000708 <main+0x58>)
 80006e6:	f006 fd79 	bl	80071dc <osThreadNew>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a07      	ldr	r2, [pc, #28]	@ (800070c <main+0x5c>)
 80006ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f0:	f006 fd4e 	bl	8007190 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <main+0x44>
 80006f8:	0800a6e8 	.word	0x0800a6e8
 80006fc:	08000a95 	.word	0x08000a95
 8000700:	240001a8 	.word	0x240001a8
 8000704:	0800a70c 	.word	0x0800a70c
 8000708:	08000aa5 	.word	0x08000aa5
 800070c:	240001ac 	.word	0x240001ac

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	@ 0x70
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071a:	224c      	movs	r2, #76	@ 0x4c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f009 fae2 	bl	8009ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f009 fadc 	bl	8009ce8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000730:	2002      	movs	r0, #2
 8000732:	f001 fd81 	bl	8002238 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <SystemClock_Config+0xdc>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000742:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <SystemClock_Config+0xdc>)
 8000744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <SystemClock_Config+0xdc>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000756:	bf00      	nop
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <SystemClock_Config+0xdc>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000760:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000764:	d1f8      	bne.n	8000758 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800076a:	2301      	movs	r3, #1
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800076e:	2340      	movs	r3, #64	@ 0x40
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000776:	2300      	movs	r3, #0
 8000778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077a:	2304      	movs	r3, #4
 800077c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800077e:	230c      	movs	r3, #12
 8000780:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000786:	2304      	movs	r3, #4
 8000788:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800078e:	230c      	movs	r3, #12
 8000790:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000792:	2300      	movs	r3, #0
 8000794:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fd84 	bl	80022ac <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007aa:	f000 f9cd 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	233f      	movs	r3, #63	@ 0x3f
 80007b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2303      	movs	r3, #3
 80007b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ba:	2308      	movs	r3, #8
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007be:	2340      	movs	r3, #64	@ 0x40
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c2:	2340      	movs	r3, #64	@ 0x40
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f943 	bl	8002a60 <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007e0:	f000 f9b2 	bl	8000b48 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3770      	adds	r7, #112	@ 0x70
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58024800 	.word	0x58024800

080007f0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_UART7_Init+0x90>)
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <MX_UART7_Init+0x94>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_UART7_Init+0x90>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_UART7_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_UART7_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_UART7_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_UART7_Init+0x90>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_UART7_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_UART7_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_UART7_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_UART7_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_UART7_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000838:	4811      	ldr	r0, [pc, #68]	@ (8000880 <MX_UART7_Init+0x90>)
 800083a:	f004 fd83 	bl	8005344 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f980 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_UART7_Init+0x90>)
 800084c:	f006 fb6e 	bl	8006f2c <HAL_UARTEx_SetTxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 f977 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4808      	ldr	r0, [pc, #32]	@ (8000880 <MX_UART7_Init+0x90>)
 800085e:	f006 fba3 	bl	8006fa8 <HAL_UARTEx_SetRxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 f96e 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_UART7_Init+0x90>)
 800086e:	f006 fb24 	bl	8006eba <HAL_UARTEx_DisableFifoMode>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f966 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000080 	.word	0x24000080
 8000884:	40007800 	.word	0x40007800

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <MX_USART3_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008d2:	f004 fd37 	bl	8005344 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f934 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008e4:	f006 fb22 	bl	8006f2c <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f92b 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008f6:	f006 fb57 	bl	8006fa8 <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f922 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 8000906:	f006 fad8 	bl	8006eba <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f91a 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	24000114 	.word	0x24000114
 800091c:	40004800 	.word	0x40004800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b42      	ldr	r3, [pc, #264]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	4a40      	ldr	r2, [pc, #256]	@ (8000a40 <MX_GPIO_Init+0x120>)
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000946:	4b3e      	ldr	r3, [pc, #248]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095a:	4a39      	ldr	r2, [pc, #228]	@ (8000a40 <MX_GPIO_Init+0x120>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000964:	4b36      	ldr	r3, [pc, #216]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a31      	ldr	r2, [pc, #196]	@ (8000a40 <MX_GPIO_Init+0x120>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000996:	4a2a      	ldr	r2, [pc, #168]	@ (8000a40 <MX_GPIO_Init+0x120>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <MX_GPIO_Init+0x120>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <MX_GPIO_Init+0x120>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <MX_GPIO_Init+0x120>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <MX_GPIO_Init+0x120>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009d2:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <MX_GPIO_Init+0x124>)
 80009d4:	f001 fc16 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2102      	movs	r1, #2
 80009dc:	481a      	ldr	r0, [pc, #104]	@ (8000a48 <MX_GPIO_Init+0x128>)
 80009de:	f001 fc11 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4815      	ldr	r0, [pc, #84]	@ (8000a4c <MX_GPIO_Init+0x12c>)
 80009f8:	f001 fa5c 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009fc:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	480b      	ldr	r0, [pc, #44]	@ (8000a44 <MX_GPIO_Init+0x124>)
 8000a16:	f001 fa4d 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_GPIO_Init+0x128>)
 8000a32:	f001 fa3f 	bl	8001eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	@ 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	58024400 	.word	0x58024400
 8000a44:	58020400 	.word	0x58020400
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	58020800 	.word	0x58020800

08000a50 <sendData>:

/* USER CODE BEGIN 4 */
void sendData(int cnt)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	char txBuffer[20];
	sprintf(txBuffer, "%d\r\n", cnt);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	490b      	ldr	r1, [pc, #44]	@ (8000a8c <sendData+0x3c>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f009 f921 	bl	8009ca8 <siprintf>
	HAL_UART_Transmit(&huart7, (uint8_t*)txBuffer, strlen(txBuffer), HAL_MAX_DELAY);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fc50 	bl	8000310 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f107 010c 	add.w	r1, r7, #12
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <sendData+0x40>)
 8000a7e:	f004 fcb1 	bl	80053e4 <HAL_UART_Transmit>
}
 8000a82:	bf00      	nop
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	0800a6c8 	.word	0x0800a6c8
 8000a90:	24000080 	.word	0x24000080

08000a94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f006 fc2f 	bl	8007300 <osDelay>
 8000aa2:	e7fb      	b.n	8000a9c <StartDefaultTask+0x8>

08000aa4 <StartHC12SendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHC12SendTask */
void StartHC12SendTask(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHC12SendTask */
  /* Infinite loop */
	uint32_t count=0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  sendData(count);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffcc 	bl	8000a50 <sendData>
	  ++count;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3301      	adds	r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
    osDelay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac2:	f006 fc1d 	bl	8007300 <osDelay>
	  sendData(count);
 8000ac6:	bf00      	nop
 8000ac8:	e7f2      	b.n	8000ab0 <StartHC12SendTask+0xc>

08000aca <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b084      	sub	sp, #16
 8000ace:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000adc:	f000 fc0e 	bl	80012fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aec:	231f      	movs	r3, #31
 8000aee:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000af0:	2387      	movs	r3, #135	@ 0x87
 8000af2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000af8:	2300      	movs	r3, #0
 8000afa:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b00:	2301      	movs	r3, #1
 8000b02:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fc2c 	bl	800136c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f000 fc09 	bl	800132c <HAL_MPU_Enable>

}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b36:	f000 fae1 	bl	80010fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40000800 	.word	0x40000800

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <HAL_MspInit+0x38>)
 8000b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_MspInit+0x38>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_MspInit+0x38>)
 8000b6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	f06f 0001 	mvn.w	r0, #1
 8000b80:	f000 fb94 	bl	80012ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	58024400 	.word	0x58024400

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0ba      	sub	sp, #232	@ 0xe8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	22b8      	movs	r2, #184	@ 0xb8
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f009 f899 	bl	8009ce8 <memset>
  if(huart->Instance==UART7)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a55      	ldr	r2, [pc, #340]	@ (8000d10 <HAL_UART_MspInit+0x180>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d14e      	bne.n	8000c5e <HAL_UART_MspInit+0xce>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000bc0:	f04f 0202 	mov.w	r2, #2
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0318 	add.w	r3, r7, #24
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fb10 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000be2:	f7ff ffb1 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000be6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000be8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bec:	4a49      	ldr	r2, [pc, #292]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000bee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000bf2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bf6:	4b47      	ldr	r3, [pc, #284]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bfc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	4b43      	ldr	r3, [pc, #268]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0a:	4a42      	ldr	r2, [pc, #264]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c14:	4b3f      	ldr	r3, [pc, #252]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> UART7_RX
    PB4(NJTRST)     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c22:	2318      	movs	r3, #24
 8000c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c44:	4619      	mov	r1, r3
 8000c46:	4834      	ldr	r0, [pc, #208]	@ (8000d18 <HAL_UART_MspInit+0x188>)
 8000c48:	f001 f934 	bl	8001eb4 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2105      	movs	r1, #5
 8000c50:	2052      	movs	r0, #82	@ 0x52
 8000c52:	f000 fb2b 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000c56:	2052      	movs	r0, #82	@ 0x52
 8000c58:	f000 fb42 	bl	80012e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c5c:	e053      	b.n	8000d06 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a2e      	ldr	r2, [pc, #184]	@ (8000d1c <HAL_UART_MspInit+0x18c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d14e      	bne.n	8000d06 <HAL_UART_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c68:	f04f 0202 	mov.w	r2, #2
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7a:	f107 0318 	add.w	r3, r7, #24
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fabc 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8000c8a:	f7ff ff5d 	bl	8000b48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c94:	4a1f      	ldr	r2, [pc, #124]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	4a18      	ldr	r2, [pc, #96]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cbc:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_UART_MspInit+0x184>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480b      	ldr	r0, [pc, #44]	@ (8000d20 <HAL_UART_MspInit+0x190>)
 8000cf2:	f001 f8df 	bl	8001eb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	2027      	movs	r0, #39	@ 0x27
 8000cfc:	f000 fad6 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d00:	2027      	movs	r0, #39	@ 0x27
 8000d02:	f000 faed 	bl	80012e0 <HAL_NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	37e8      	adds	r7, #232	@ 0xe8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40007800 	.word	0x40007800
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020400 	.word	0x58020400
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	58020c00 	.word	0x58020c00

08000d24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	@ 0x40
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d827      	bhi.n	8000d82 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	201e      	movs	r0, #30
 8000d38:	f000 fab8 	bl	80012ac <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d3c:	201e      	movs	r0, #30
 8000d3e:	f000 facf 	bl	80012e0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d42:	4a29      	ldr	r2, [pc, #164]	@ (8000de8 <HAL_InitTick+0xc4>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000d48:	4b28      	ldr	r3, [pc, #160]	@ (8000dec <HAL_InitTick+0xc8>)
 8000d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d4e:	4a27      	ldr	r2, [pc, #156]	@ (8000dec <HAL_InitTick+0xc8>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <HAL_InitTick+0xc8>)
 8000d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d66:	f107 0210 	add.w	r2, r7, #16
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fa01 	bl	8003178 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d78:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d106      	bne.n	8000d8e <HAL_InitTick+0x6a>
 8000d80:	e001      	b.n	8000d86 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e02b      	b.n	8000dde <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d86:	f002 f9cb 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8000d8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d8c:	e004      	b.n	8000d98 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d8e:	f002 f9c7 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8000d92:	4603      	mov	r3, r0
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d9a:	4a15      	ldr	r2, [pc, #84]	@ (8000df0 <HAL_InitTick+0xcc>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	0c9b      	lsrs	r3, r3, #18
 8000da2:	3b01      	subs	r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000da8:	4a13      	ldr	r2, [pc, #76]	@ (8000df8 <HAL_InitTick+0xd4>)
 8000daa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000db2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000db4:	4a0f      	ldr	r2, [pc, #60]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000db8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000dc6:	480b      	ldr	r0, [pc, #44]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dc8:	f003 ffda 	bl	8004d80 <HAL_TIM_Base_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d104      	bne.n	8000ddc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000dd2:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <HAL_InitTick+0xd0>)
 8000dd4:	f004 f836 	bl	8004e44 <HAL_TIM_Base_Start_IT>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	e000      	b.n	8000dde <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3740      	adds	r7, #64	@ 0x40
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000008 	.word	0x24000008
 8000dec:	58024400 	.word	0x58024400
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	240001b0 	.word	0x240001b0
 8000df8:	40000800 	.word	0x40000800

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <NMI_Handler+0x4>

08000e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <MemManage_Handler+0x4>

08000e14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <TIM4_IRQHandler+0x10>)
 8000e3a:	f004 f889 	bl	8004f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	240001b0 	.word	0x240001b0

08000e48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <USART3_IRQHandler+0x10>)
 8000e4e:	f004 fb57 	bl	8005500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	24000114 	.word	0x24000114

08000e5c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <UART7_IRQHandler+0x10>)
 8000e62:	f004 fb4d 	bl	8005500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	24000080 	.word	0x24000080

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f008 ff80 	bl	8009da4 <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24050000 	.word	0x24050000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	240001fc 	.word	0x240001fc
 8000ed8:	24004d38 	.word	0x24004d38

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fdc <SystemInit+0x100>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fdc <SystemInit+0x100>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <SystemInit+0x104>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	2b06      	cmp	r3, #6
 8000efa:	d807      	bhi.n	8000f0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000efc:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <SystemInit+0x104>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f023 030f 	bic.w	r3, r3, #15
 8000f04:	4a36      	ldr	r2, [pc, #216]	@ (8000fe0 <SystemInit+0x104>)
 8000f06:	f043 0307 	orr.w	r3, r3, #7
 8000f0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f0c:	4b35      	ldr	r3, [pc, #212]	@ (8000fe4 <SystemInit+0x108>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a34      	ldr	r2, [pc, #208]	@ (8000fe4 <SystemInit+0x108>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f18:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <SystemInit+0x108>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f1e:	4b31      	ldr	r3, [pc, #196]	@ (8000fe4 <SystemInit+0x108>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4930      	ldr	r1, [pc, #192]	@ (8000fe4 <SystemInit+0x108>)
 8000f24:	4b30      	ldr	r3, [pc, #192]	@ (8000fe8 <SystemInit+0x10c>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <SystemInit+0x104>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <SystemInit+0x104>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 030f 	bic.w	r3, r3, #15
 8000f3e:	4a28      	ldr	r2, [pc, #160]	@ (8000fe0 <SystemInit+0x104>)
 8000f40:	f043 0307 	orr.w	r3, r3, #7
 8000f44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f46:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <SystemInit+0x108>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <SystemInit+0x108>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f52:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <SystemInit+0x108>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <SystemInit+0x108>)
 8000f5a:	4a24      	ldr	r2, [pc, #144]	@ (8000fec <SystemInit+0x110>)
 8000f5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <SystemInit+0x108>)
 8000f60:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <SystemInit+0x114>)
 8000f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <SystemInit+0x108>)
 8000f66:	4a23      	ldr	r2, [pc, #140]	@ (8000ff4 <SystemInit+0x118>)
 8000f68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <SystemInit+0x108>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <SystemInit+0x108>)
 8000f72:	4a20      	ldr	r2, [pc, #128]	@ (8000ff4 <SystemInit+0x118>)
 8000f74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <SystemInit+0x108>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <SystemInit+0x108>)
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff4 <SystemInit+0x118>)
 8000f80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <SystemInit+0x108>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <SystemInit+0x108>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <SystemInit+0x108>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <SystemInit+0x108>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <SystemInit+0x108>)
 8000f9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d113      	bne.n	8000fd0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <SystemInit+0x108>)
 8000faa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fae:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <SystemInit+0x108>)
 8000fb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fb4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <SystemInit+0x11c>)
 8000fba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fbe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <SystemInit+0x108>)
 8000fc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fc6:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <SystemInit+0x108>)
 8000fc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000fcc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00
 8000fe0:	52002000 	.word	0x52002000
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fec:	02020200 	.word	0x02020200
 8000ff0:	01ff0000 	.word	0x01ff0000
 8000ff4:	01010280 	.word	0x01010280
 8000ff8:	52004000 	.word	0x52004000

08000ffc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <ExitRun0Mode+0x2c>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <ExitRun0Mode+0x2c>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800100c:	bf00      	nop
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <ExitRun0Mode+0x2c>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f9      	beq.n	800100e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	58024800 	.word	0x58024800

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001068 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001030:	f7ff ffe4 	bl	8000ffc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001034:	f7ff ff52 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	@ (8001070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	@ (800107c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f008 fea7 	bl	8009db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fb25 	bl	80006b0 <main>
  bx  lr
 8001066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800106c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001070:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001074:	0800a7ac 	.word	0x0800a7ac
  ldr r2, =_sbss
 8001078:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800107c:	24004d34 	.word	0x24004d34

08001080 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC3_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
 800108c:	f000 f903 	bl	8001296 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001090:	f001 fe9c 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8001094:	4602      	mov	r2, r0
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_Init+0x68>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	4913      	ldr	r1, [pc, #76]	@ (80010f0 <HAL_Init+0x6c>)
 80010a2:	5ccb      	ldrb	r3, [r1, r3]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <HAL_Init+0x68>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <HAL_Init+0x6c>)
 80010b8:	5cd3      	ldrb	r3, [r2, r3]
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_Init+0x70>)
 80010c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c8:	4a0b      	ldr	r2, [pc, #44]	@ (80010f8 <HAL_Init+0x74>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ce:	200f      	movs	r0, #15
 80010d0:	f7ff fe28 	bl	8000d24 <HAL_InitTick>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e002      	b.n	80010e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010de:	f7ff fd39 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	58024400 	.word	0x58024400
 80010f0:	0800a730 	.word	0x0800a730
 80010f4:	24000004 	.word	0x24000004
 80010f8:	24000000 	.word	0x24000000

080010fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2400000c 	.word	0x2400000c
 8001120:	24000200 	.word	0x24000200

08001124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	24000200 	.word	0x24000200

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	4313      	orrs	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	@ (800117c <__NVIC_SetPriorityGrouping+0x40>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00
 8001180:	05fa0000 	.word	0x05fa0000

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	@ (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	@ (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	@ (800122c <__NVIC_SetPriority+0x50>)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff4c 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ba:	f7ff ff63 	bl	8001184 <__NVIC_GetPriorityGrouping>
 80012be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	6978      	ldr	r0, [r7, #20]
 80012c6:	f7ff ffb3 	bl	8001230 <NVIC_EncodePriority>
 80012ca:	4602      	mov	r2, r0
 80012cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff82 	bl	80011dc <__NVIC_SetPriority>
}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff56 	bl	80011a0 <__NVIC_EnableIRQ>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001300:	f3bf 8f5f 	dmb	sy
}
 8001304:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <HAL_MPU_Disable+0x28>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130a:	4a06      	ldr	r2, [pc, #24]	@ (8001324 <HAL_MPU_Disable+0x28>)
 800130c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001310:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001312:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <HAL_MPU_Disable+0x2c>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	e000ed90 	.word	0xe000ed90

0800132c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_MPU_Enable+0x38>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_MPU_Enable+0x3c>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001342:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_MPU_Enable+0x3c>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001348:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800134a:	f3bf 8f4f 	dsb	sy
}
 800134e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001350:	f3bf 8f6f 	isb	sy
}
 8001354:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed90 	.word	0xe000ed90
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	785a      	ldrb	r2, [r3, #1]
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 800137a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001388:	4a17      	ldr	r2, [pc, #92]	@ (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7b1b      	ldrb	r3, [r3, #12]
 8001394:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7adb      	ldrb	r3, [r3, #11]
 800139a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800139c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7a9b      	ldrb	r3, [r3, #10]
 80013a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7b5b      	ldrb	r3, [r3, #13]
 80013aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7b9b      	ldrb	r3, [r3, #14]
 80013b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7bdb      	ldrb	r3, [r3, #15]
 80013ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7a5b      	ldrb	r3, [r3, #9]
 80013c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7a1b      	ldrb	r3, [r3, #8]
 80013ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d8:	6113      	str	r3, [r2, #16]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed90 	.word	0xe000ed90

080013ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fe96 	bl	8001124 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e2dc      	b.n	80019be <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e2cd      	b.n	80019be <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a76      	ldr	r2, [pc, #472]	@ (8001600 <HAL_DMA_Abort+0x214>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d04a      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a74      	ldr	r2, [pc, #464]	@ (8001604 <HAL_DMA_Abort+0x218>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d045      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a73      	ldr	r2, [pc, #460]	@ (8001608 <HAL_DMA_Abort+0x21c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d040      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a71      	ldr	r2, [pc, #452]	@ (800160c <HAL_DMA_Abort+0x220>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d03b      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a70      	ldr	r2, [pc, #448]	@ (8001610 <HAL_DMA_Abort+0x224>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d036      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a6e      	ldr	r2, [pc, #440]	@ (8001614 <HAL_DMA_Abort+0x228>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d031      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6d      	ldr	r2, [pc, #436]	@ (8001618 <HAL_DMA_Abort+0x22c>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d02c      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6b      	ldr	r2, [pc, #428]	@ (800161c <HAL_DMA_Abort+0x230>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d027      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6a      	ldr	r2, [pc, #424]	@ (8001620 <HAL_DMA_Abort+0x234>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d022      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a68      	ldr	r2, [pc, #416]	@ (8001624 <HAL_DMA_Abort+0x238>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01d      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a67      	ldr	r2, [pc, #412]	@ (8001628 <HAL_DMA_Abort+0x23c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d018      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a65      	ldr	r2, [pc, #404]	@ (800162c <HAL_DMA_Abort+0x240>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a64      	ldr	r2, [pc, #400]	@ (8001630 <HAL_DMA_Abort+0x244>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00e      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a62      	ldr	r2, [pc, #392]	@ (8001634 <HAL_DMA_Abort+0x248>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d009      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a61      	ldr	r2, [pc, #388]	@ (8001638 <HAL_DMA_Abort+0x24c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d004      	beq.n	80014c2 <HAL_DMA_Abort+0xd6>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5f      	ldr	r2, [pc, #380]	@ (800163c <HAL_DMA_Abort+0x250>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_DMA_Abort+0xda>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_DMA_Abort+0xdc>
 80014c6:	2300      	movs	r3, #0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 021e 	bic.w	r2, r2, #30
 80014da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695a      	ldr	r2, [r3, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e00a      	b.n	800150a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 020e 	bic.w	r2, r2, #14
 8001502:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a3c      	ldr	r2, [pc, #240]	@ (8001600 <HAL_DMA_Abort+0x214>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d072      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <HAL_DMA_Abort+0x218>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d06d      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a39      	ldr	r2, [pc, #228]	@ (8001608 <HAL_DMA_Abort+0x21c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d068      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a37      	ldr	r2, [pc, #220]	@ (800160c <HAL_DMA_Abort+0x220>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d063      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a36      	ldr	r2, [pc, #216]	@ (8001610 <HAL_DMA_Abort+0x224>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d05e      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a34      	ldr	r2, [pc, #208]	@ (8001614 <HAL_DMA_Abort+0x228>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d059      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a33      	ldr	r2, [pc, #204]	@ (8001618 <HAL_DMA_Abort+0x22c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d054      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a31      	ldr	r2, [pc, #196]	@ (800161c <HAL_DMA_Abort+0x230>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d04f      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a30      	ldr	r2, [pc, #192]	@ (8001620 <HAL_DMA_Abort+0x234>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d04a      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2e      	ldr	r2, [pc, #184]	@ (8001624 <HAL_DMA_Abort+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d045      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2d      	ldr	r2, [pc, #180]	@ (8001628 <HAL_DMA_Abort+0x23c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d040      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2b      	ldr	r2, [pc, #172]	@ (800162c <HAL_DMA_Abort+0x240>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d03b      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2a      	ldr	r2, [pc, #168]	@ (8001630 <HAL_DMA_Abort+0x244>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d036      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a28      	ldr	r2, [pc, #160]	@ (8001634 <HAL_DMA_Abort+0x248>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d031      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <HAL_DMA_Abort+0x24c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d02c      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a25      	ldr	r2, [pc, #148]	@ (800163c <HAL_DMA_Abort+0x250>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d027      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a24      	ldr	r2, [pc, #144]	@ (8001640 <HAL_DMA_Abort+0x254>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d022      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <HAL_DMA_Abort+0x258>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01d      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a21      	ldr	r2, [pc, #132]	@ (8001648 <HAL_DMA_Abort+0x25c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d018      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	@ (800164c <HAL_DMA_Abort+0x260>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <HAL_DMA_Abort+0x264>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00e      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <HAL_DMA_Abort+0x268>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d009      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <HAL_DMA_Abort+0x26c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d004      	beq.n	80015fa <HAL_DMA_Abort+0x20e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	@ (800165c <HAL_DMA_Abort+0x270>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d132      	bne.n	8001660 <HAL_DMA_Abort+0x274>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e031      	b.n	8001662 <HAL_DMA_Abort+0x276>
 80015fe:	bf00      	nop
 8001600:	40020010 	.word	0x40020010
 8001604:	40020028 	.word	0x40020028
 8001608:	40020040 	.word	0x40020040
 800160c:	40020058 	.word	0x40020058
 8001610:	40020070 	.word	0x40020070
 8001614:	40020088 	.word	0x40020088
 8001618:	400200a0 	.word	0x400200a0
 800161c:	400200b8 	.word	0x400200b8
 8001620:	40020410 	.word	0x40020410
 8001624:	40020428 	.word	0x40020428
 8001628:	40020440 	.word	0x40020440
 800162c:	40020458 	.word	0x40020458
 8001630:	40020470 	.word	0x40020470
 8001634:	40020488 	.word	0x40020488
 8001638:	400204a0 	.word	0x400204a0
 800163c:	400204b8 	.word	0x400204b8
 8001640:	58025408 	.word	0x58025408
 8001644:	5802541c 	.word	0x5802541c
 8001648:	58025430 	.word	0x58025430
 800164c:	58025444 	.word	0x58025444
 8001650:	58025458 	.word	0x58025458
 8001654:	5802546c 	.word	0x5802546c
 8001658:	58025480 	.word	0x58025480
 800165c:	58025494 	.word	0x58025494
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001674:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6d      	ldr	r2, [pc, #436]	@ (8001830 <HAL_DMA_Abort+0x444>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d04a      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6b      	ldr	r2, [pc, #428]	@ (8001834 <HAL_DMA_Abort+0x448>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d045      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6a      	ldr	r2, [pc, #424]	@ (8001838 <HAL_DMA_Abort+0x44c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d040      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a68      	ldr	r2, [pc, #416]	@ (800183c <HAL_DMA_Abort+0x450>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d03b      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a67      	ldr	r2, [pc, #412]	@ (8001840 <HAL_DMA_Abort+0x454>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d036      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a65      	ldr	r2, [pc, #404]	@ (8001844 <HAL_DMA_Abort+0x458>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d031      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a64      	ldr	r2, [pc, #400]	@ (8001848 <HAL_DMA_Abort+0x45c>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d02c      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a62      	ldr	r2, [pc, #392]	@ (800184c <HAL_DMA_Abort+0x460>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d027      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a61      	ldr	r2, [pc, #388]	@ (8001850 <HAL_DMA_Abort+0x464>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d022      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a5f      	ldr	r2, [pc, #380]	@ (8001854 <HAL_DMA_Abort+0x468>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01d      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5e      	ldr	r2, [pc, #376]	@ (8001858 <HAL_DMA_Abort+0x46c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d018      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5c      	ldr	r2, [pc, #368]	@ (800185c <HAL_DMA_Abort+0x470>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001860 <HAL_DMA_Abort+0x474>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00e      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a59      	ldr	r2, [pc, #356]	@ (8001864 <HAL_DMA_Abort+0x478>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d009      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a58      	ldr	r2, [pc, #352]	@ (8001868 <HAL_DMA_Abort+0x47c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d004      	beq.n	8001716 <HAL_DMA_Abort+0x32a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a56      	ldr	r2, [pc, #344]	@ (800186c <HAL_DMA_Abort+0x480>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d108      	bne.n	8001728 <HAL_DMA_Abort+0x33c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_DMA_Abort+0x34c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001738:	e013      	b.n	8001762 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173a:	f7ff fcf3 	bl	8001124 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b05      	cmp	r3, #5
 8001746:	d90c      	bls.n	8001762 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e12d      	b.n	80019be <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e5      	bne.n	800173a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2f      	ldr	r2, [pc, #188]	@ (8001830 <HAL_DMA_Abort+0x444>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d04a      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2d      	ldr	r2, [pc, #180]	@ (8001834 <HAL_DMA_Abort+0x448>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d045      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2c      	ldr	r2, [pc, #176]	@ (8001838 <HAL_DMA_Abort+0x44c>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d040      	beq.n	800180e <HAL_DMA_Abort+0x422>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <HAL_DMA_Abort+0x450>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d03b      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a29      	ldr	r2, [pc, #164]	@ (8001840 <HAL_DMA_Abort+0x454>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d036      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a27      	ldr	r2, [pc, #156]	@ (8001844 <HAL_DMA_Abort+0x458>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d031      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a26      	ldr	r2, [pc, #152]	@ (8001848 <HAL_DMA_Abort+0x45c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d02c      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a24      	ldr	r2, [pc, #144]	@ (800184c <HAL_DMA_Abort+0x460>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d027      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a23      	ldr	r2, [pc, #140]	@ (8001850 <HAL_DMA_Abort+0x464>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a21      	ldr	r2, [pc, #132]	@ (8001854 <HAL_DMA_Abort+0x468>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01d      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a20      	ldr	r2, [pc, #128]	@ (8001858 <HAL_DMA_Abort+0x46c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d018      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1e      	ldr	r2, [pc, #120]	@ (800185c <HAL_DMA_Abort+0x470>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_DMA_Abort+0x474>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <HAL_DMA_Abort+0x478>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d009      	beq.n	800180e <HAL_DMA_Abort+0x422>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_DMA_Abort+0x47c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d004      	beq.n	800180e <HAL_DMA_Abort+0x422>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a18      	ldr	r2, [pc, #96]	@ (800186c <HAL_DMA_Abort+0x480>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Abort+0x426>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_DMA_Abort+0x428>
 8001812:	2300      	movs	r3, #0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d02b      	beq.n	8001870 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	223f      	movs	r2, #63	@ 0x3f
 8001828:	409a      	lsls	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	e02a      	b.n	8001886 <HAL_DMA_Abort+0x49a>
 8001830:	40020010 	.word	0x40020010
 8001834:	40020028 	.word	0x40020028
 8001838:	40020040 	.word	0x40020040
 800183c:	40020058 	.word	0x40020058
 8001840:	40020070 	.word	0x40020070
 8001844:	40020088 	.word	0x40020088
 8001848:	400200a0 	.word	0x400200a0
 800184c:	400200b8 	.word	0x400200b8
 8001850:	40020410 	.word	0x40020410
 8001854:	40020428 	.word	0x40020428
 8001858:	40020440 	.word	0x40020440
 800185c:	40020458 	.word	0x40020458
 8001860:	40020470 	.word	0x40020470
 8001864:	40020488 	.word	0x40020488
 8001868:	400204a0 	.word	0x400204a0
 800186c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001874:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2201      	movs	r2, #1
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a4f      	ldr	r2, [pc, #316]	@ (80019c8 <HAL_DMA_Abort+0x5dc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d072      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a4d      	ldr	r2, [pc, #308]	@ (80019cc <HAL_DMA_Abort+0x5e0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d06d      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <HAL_DMA_Abort+0x5e4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d068      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4a      	ldr	r2, [pc, #296]	@ (80019d4 <HAL_DMA_Abort+0x5e8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d063      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a49      	ldr	r2, [pc, #292]	@ (80019d8 <HAL_DMA_Abort+0x5ec>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d05e      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a47      	ldr	r2, [pc, #284]	@ (80019dc <HAL_DMA_Abort+0x5f0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d059      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a46      	ldr	r2, [pc, #280]	@ (80019e0 <HAL_DMA_Abort+0x5f4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d054      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a44      	ldr	r2, [pc, #272]	@ (80019e4 <HAL_DMA_Abort+0x5f8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d04f      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a43      	ldr	r2, [pc, #268]	@ (80019e8 <HAL_DMA_Abort+0x5fc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04a      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a41      	ldr	r2, [pc, #260]	@ (80019ec <HAL_DMA_Abort+0x600>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d045      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a40      	ldr	r2, [pc, #256]	@ (80019f0 <HAL_DMA_Abort+0x604>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d040      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3e      	ldr	r2, [pc, #248]	@ (80019f4 <HAL_DMA_Abort+0x608>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d03b      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a3d      	ldr	r2, [pc, #244]	@ (80019f8 <HAL_DMA_Abort+0x60c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d036      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a3b      	ldr	r2, [pc, #236]	@ (80019fc <HAL_DMA_Abort+0x610>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d031      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <HAL_DMA_Abort+0x614>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d02c      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a38      	ldr	r2, [pc, #224]	@ (8001a04 <HAL_DMA_Abort+0x618>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d027      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a37      	ldr	r2, [pc, #220]	@ (8001a08 <HAL_DMA_Abort+0x61c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a35      	ldr	r2, [pc, #212]	@ (8001a0c <HAL_DMA_Abort+0x620>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01d      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a34      	ldr	r2, [pc, #208]	@ (8001a10 <HAL_DMA_Abort+0x624>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d018      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a32      	ldr	r2, [pc, #200]	@ (8001a14 <HAL_DMA_Abort+0x628>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a31      	ldr	r2, [pc, #196]	@ (8001a18 <HAL_DMA_Abort+0x62c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00e      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a1c <HAL_DMA_Abort+0x630>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d009      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2e      	ldr	r2, [pc, #184]	@ (8001a20 <HAL_DMA_Abort+0x634>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_DMA_Abort+0x58a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2c      	ldr	r2, [pc, #176]	@ (8001a24 <HAL_DMA_Abort+0x638>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_DMA_Abort+0x58e>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_DMA_Abort+0x590>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001988:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00c      	beq.n	80019ac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800199c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019a0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80019aa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40020010 	.word	0x40020010
 80019cc:	40020028 	.word	0x40020028
 80019d0:	40020040 	.word	0x40020040
 80019d4:	40020058 	.word	0x40020058
 80019d8:	40020070 	.word	0x40020070
 80019dc:	40020088 	.word	0x40020088
 80019e0:	400200a0 	.word	0x400200a0
 80019e4:	400200b8 	.word	0x400200b8
 80019e8:	40020410 	.word	0x40020410
 80019ec:	40020428 	.word	0x40020428
 80019f0:	40020440 	.word	0x40020440
 80019f4:	40020458 	.word	0x40020458
 80019f8:	40020470 	.word	0x40020470
 80019fc:	40020488 	.word	0x40020488
 8001a00:	400204a0 	.word	0x400204a0
 8001a04:	400204b8 	.word	0x400204b8
 8001a08:	58025408 	.word	0x58025408
 8001a0c:	5802541c 	.word	0x5802541c
 8001a10:	58025430 	.word	0x58025430
 8001a14:	58025444 	.word	0x58025444
 8001a18:	58025458 	.word	0x58025458
 8001a1c:	5802546c 	.word	0x5802546c
 8001a20:	58025480 	.word	0x58025480
 8001a24:	58025494 	.word	0x58025494

08001a28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e237      	b.n	8001eaa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d004      	beq.n	8001a50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e22c      	b.n	8001eaa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d04a      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bcc <HAL_DMA_Abort_IT+0x1a4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d045      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a59      	ldr	r2, [pc, #356]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1a8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d040      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a58      	ldr	r2, [pc, #352]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1ac>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d03b      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a56      	ldr	r2, [pc, #344]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1b0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d036      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a55      	ldr	r2, [pc, #340]	@ (8001bdc <HAL_DMA_Abort_IT+0x1b4>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d031      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a53      	ldr	r2, [pc, #332]	@ (8001be0 <HAL_DMA_Abort_IT+0x1b8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02c      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a52      	ldr	r2, [pc, #328]	@ (8001be4 <HAL_DMA_Abort_IT+0x1bc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d027      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	@ (8001be8 <HAL_DMA_Abort_IT+0x1c0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d022      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4f      	ldr	r2, [pc, #316]	@ (8001bec <HAL_DMA_Abort_IT+0x1c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d01d      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_DMA_Abort_IT+0x1c8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d018      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1cc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1d0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00e      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a49      	ldr	r2, [pc, #292]	@ (8001bfc <HAL_DMA_Abort_IT+0x1d4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d009      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <HAL_DMA_Abort_IT+0x1d8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d004      	beq.n	8001af0 <HAL_DMA_Abort_IT+0xc8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a46      	ldr	r2, [pc, #280]	@ (8001c04 <HAL_DMA_Abort_IT+0x1dc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d101      	bne.n	8001af4 <HAL_DMA_Abort_IT+0xcc>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_DMA_Abort_IT+0xce>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8086 	beq.w	8001c08 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2204      	movs	r2, #4
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2f      	ldr	r2, [pc, #188]	@ (8001bc8 <HAL_DMA_Abort_IT+0x1a0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d04a      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2e      	ldr	r2, [pc, #184]	@ (8001bcc <HAL_DMA_Abort_IT+0x1a4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d045      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd0 <HAL_DMA_Abort_IT+0x1a8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d040      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd4 <HAL_DMA_Abort_IT+0x1ac>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d03b      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a29      	ldr	r2, [pc, #164]	@ (8001bd8 <HAL_DMA_Abort_IT+0x1b0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d036      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a28      	ldr	r2, [pc, #160]	@ (8001bdc <HAL_DMA_Abort_IT+0x1b4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d031      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a26      	ldr	r2, [pc, #152]	@ (8001be0 <HAL_DMA_Abort_IT+0x1b8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02c      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a25      	ldr	r2, [pc, #148]	@ (8001be4 <HAL_DMA_Abort_IT+0x1bc>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d027      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a23      	ldr	r2, [pc, #140]	@ (8001be8 <HAL_DMA_Abort_IT+0x1c0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d022      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a22      	ldr	r2, [pc, #136]	@ (8001bec <HAL_DMA_Abort_IT+0x1c4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01d      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <HAL_DMA_Abort_IT+0x1c8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d018      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1cc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1d0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00e      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_DMA_Abort_IT+0x1d4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d009      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1a      	ldr	r2, [pc, #104]	@ (8001c00 <HAL_DMA_Abort_IT+0x1d8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d004      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x17c>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_DMA_Abort_IT+0x1dc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d108      	bne.n	8001bb6 <HAL_DMA_Abort_IT+0x18e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e178      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x480>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e16f      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x480>
 8001bc8:	40020010 	.word	0x40020010
 8001bcc:	40020028 	.word	0x40020028
 8001bd0:	40020040 	.word	0x40020040
 8001bd4:	40020058 	.word	0x40020058
 8001bd8:	40020070 	.word	0x40020070
 8001bdc:	40020088 	.word	0x40020088
 8001be0:	400200a0 	.word	0x400200a0
 8001be4:	400200b8 	.word	0x400200b8
 8001be8:	40020410 	.word	0x40020410
 8001bec:	40020428 	.word	0x40020428
 8001bf0:	40020440 	.word	0x40020440
 8001bf4:	40020458 	.word	0x40020458
 8001bf8:	40020470 	.word	0x40020470
 8001bfc:	40020488 	.word	0x40020488
 8001c00:	400204a0 	.word	0x400204a0
 8001c04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 020e 	bic.w	r2, r2, #14
 8001c16:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6c      	ldr	r2, [pc, #432]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3a8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d04a      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6b      	ldr	r2, [pc, #428]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3ac>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d045      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a69      	ldr	r2, [pc, #420]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3b0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d040      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a68      	ldr	r2, [pc, #416]	@ (8001ddc <HAL_DMA_Abort_IT+0x3b4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d03b      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a66      	ldr	r2, [pc, #408]	@ (8001de0 <HAL_DMA_Abort_IT+0x3b8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d036      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_DMA_Abort_IT+0x3bc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d031      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a63      	ldr	r2, [pc, #396]	@ (8001de8 <HAL_DMA_Abort_IT+0x3c0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d02c      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a62      	ldr	r2, [pc, #392]	@ (8001dec <HAL_DMA_Abort_IT+0x3c4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d027      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a60      	ldr	r2, [pc, #384]	@ (8001df0 <HAL_DMA_Abort_IT+0x3c8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d022      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a5f      	ldr	r2, [pc, #380]	@ (8001df4 <HAL_DMA_Abort_IT+0x3cc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d01d      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a5d      	ldr	r2, [pc, #372]	@ (8001df8 <HAL_DMA_Abort_IT+0x3d0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dfc <HAL_DMA_Abort_IT+0x3d4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5a      	ldr	r2, [pc, #360]	@ (8001e00 <HAL_DMA_Abort_IT+0x3d8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a59      	ldr	r2, [pc, #356]	@ (8001e04 <HAL_DMA_Abort_IT+0x3dc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a57      	ldr	r2, [pc, #348]	@ (8001e08 <HAL_DMA_Abort_IT+0x3e0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x290>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a56      	ldr	r2, [pc, #344]	@ (8001e0c <HAL_DMA_Abort_IT+0x3e4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d108      	bne.n	8001cca <HAL_DMA_Abort_IT+0x2a2>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e007      	b.n	8001cda <HAL_DMA_Abort_IT+0x2b2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0201 	bic.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd0 <HAL_DMA_Abort_IT+0x3a8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d072      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <HAL_DMA_Abort_IT+0x3ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d06d      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a39      	ldr	r2, [pc, #228]	@ (8001dd8 <HAL_DMA_Abort_IT+0x3b0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d068      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a37      	ldr	r2, [pc, #220]	@ (8001ddc <HAL_DMA_Abort_IT+0x3b4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d063      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a36      	ldr	r2, [pc, #216]	@ (8001de0 <HAL_DMA_Abort_IT+0x3b8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d05e      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a34      	ldr	r2, [pc, #208]	@ (8001de4 <HAL_DMA_Abort_IT+0x3bc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d059      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a33      	ldr	r2, [pc, #204]	@ (8001de8 <HAL_DMA_Abort_IT+0x3c0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d054      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a31      	ldr	r2, [pc, #196]	@ (8001dec <HAL_DMA_Abort_IT+0x3c4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04f      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <HAL_DMA_Abort_IT+0x3c8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d04a      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2e      	ldr	r2, [pc, #184]	@ (8001df4 <HAL_DMA_Abort_IT+0x3cc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d045      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2d      	ldr	r2, [pc, #180]	@ (8001df8 <HAL_DMA_Abort_IT+0x3d0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d040      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001dfc <HAL_DMA_Abort_IT+0x3d4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d03b      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <HAL_DMA_Abort_IT+0x3d8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d036      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a28      	ldr	r2, [pc, #160]	@ (8001e04 <HAL_DMA_Abort_IT+0x3dc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d031      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a27      	ldr	r2, [pc, #156]	@ (8001e08 <HAL_DMA_Abort_IT+0x3e0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d02c      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a25      	ldr	r2, [pc, #148]	@ (8001e0c <HAL_DMA_Abort_IT+0x3e4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d027      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a24      	ldr	r2, [pc, #144]	@ (8001e10 <HAL_DMA_Abort_IT+0x3e8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <HAL_DMA_Abort_IT+0x3ec>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01d      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <HAL_DMA_Abort_IT+0x3f0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d018      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <HAL_DMA_Abort_IT+0x3f4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <HAL_DMA_Abort_IT+0x3f8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00e      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <HAL_DMA_Abort_IT+0x3fc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d009      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <HAL_DMA_Abort_IT+0x400>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_DMA_Abort_IT+0x3a2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <HAL_DMA_Abort_IT+0x404>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d132      	bne.n	8001e30 <HAL_DMA_Abort_IT+0x408>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e031      	b.n	8001e32 <HAL_DMA_Abort_IT+0x40a>
 8001dce:	bf00      	nop
 8001dd0:	40020010 	.word	0x40020010
 8001dd4:	40020028 	.word	0x40020028
 8001dd8:	40020040 	.word	0x40020040
 8001ddc:	40020058 	.word	0x40020058
 8001de0:	40020070 	.word	0x40020070
 8001de4:	40020088 	.word	0x40020088
 8001de8:	400200a0 	.word	0x400200a0
 8001dec:	400200b8 	.word	0x400200b8
 8001df0:	40020410 	.word	0x40020410
 8001df4:	40020428 	.word	0x40020428
 8001df8:	40020440 	.word	0x40020440
 8001dfc:	40020458 	.word	0x40020458
 8001e00:	40020470 	.word	0x40020470
 8001e04:	40020488 	.word	0x40020488
 8001e08:	400204a0 	.word	0x400204a0
 8001e0c:	400204b8 	.word	0x400204b8
 8001e10:	58025408 	.word	0x58025408
 8001e14:	5802541c 	.word	0x5802541c
 8001e18:	58025430 	.word	0x58025430
 8001e1c:	58025444 	.word	0x58025444
 8001e20:	58025458 	.word	0x58025458
 8001e24:	5802546c 	.word	0x5802546c
 8001e28:	58025480 	.word	0x58025480
 8001e2c:	58025494 	.word	0x58025494
 8001e30:	2300      	movs	r3, #0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d028      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2201      	movs	r2, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00c      	beq.n	8001e88 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ec2:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <HAL_GPIO_Init+0x228>)
 8001ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ec6:	e18c      	b.n	80021e2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 817e 	beq.w	80021dc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d005      	beq.n	8001ef8 <HAL_GPIO_Init+0x44>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d130      	bne.n	8001f5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 0201 	and.w	r2, r3, #1
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d017      	beq.n	8001f96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d123      	bne.n	8001fea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	69b9      	ldr	r1, [r7, #24]
 8001fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0203 	and.w	r2, r3, #3
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80d8 	beq.w	80021dc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202c:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <HAL_GPIO_Init+0x22c>)
 800202e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002032:	4a2b      	ldr	r2, [pc, #172]	@ (80020e0 <HAL_GPIO_Init+0x22c>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800203c:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <HAL_GPIO_Init+0x22c>)
 800203e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204a:	4a26      	ldr	r2, [pc, #152]	@ (80020e4 <HAL_GPIO_Init+0x230>)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_GPIO_Init+0x234>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d04a      	beq.n	800210c <HAL_GPIO_Init+0x258>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1c      	ldr	r2, [pc, #112]	@ (80020ec <HAL_GPIO_Init+0x238>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1b      	ldr	r2, [pc, #108]	@ (80020f0 <HAL_GPIO_Init+0x23c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	@ (80020f4 <HAL_GPIO_Init+0x240>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a19      	ldr	r2, [pc, #100]	@ (80020f8 <HAL_GPIO_Init+0x244>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <HAL_GPIO_Init+0x248>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_GPIO_Init+0x24c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <HAL_GPIO_Init+0x250>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x20a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a15      	ldr	r2, [pc, #84]	@ (8002108 <HAL_GPIO_Init+0x254>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x206>
 80020b6:	2309      	movs	r3, #9
 80020b8:	e029      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020ba:	230a      	movs	r3, #10
 80020bc:	e027      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020be:	2307      	movs	r3, #7
 80020c0:	e025      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e023      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e021      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e01f      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e01d      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e01b      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e019      	b.n	800210e <HAL_GPIO_Init+0x25a>
 80020da:	bf00      	nop
 80020dc:	58000080 	.word	0x58000080
 80020e0:	58024400 	.word	0x58024400
 80020e4:	58000400 	.word	0x58000400
 80020e8:	58020000 	.word	0x58020000
 80020ec:	58020400 	.word	0x58020400
 80020f0:	58020800 	.word	0x58020800
 80020f4:	58020c00 	.word	0x58020c00
 80020f8:	58021000 	.word	0x58021000
 80020fc:	58021400 	.word	0x58021400
 8002100:	58021800 	.word	0x58021800
 8002104:	58021c00 	.word	0x58021c00
 8002108:	58022400 	.word	0x58022400
 800210c:	2300      	movs	r3, #0
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	f002 0203 	and.w	r2, r2, #3
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	4093      	lsls	r3, r2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211e:	4938      	ldr	r1, [pc, #224]	@ (8002200 <HAL_GPIO_Init+0x34c>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002180:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3301      	adds	r3, #1
 80021e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f47f ae6b 	bne.w	8001ec8 <HAL_GPIO_Init+0x14>
  }
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	3724      	adds	r7, #36	@ 0x24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	58000400 	.word	0x58000400

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002220:	e003      	b.n	800222a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002222:	887b      	ldrh	r3, [r7, #2]
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	619a      	str	r2, [r3, #24]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002240:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b04      	cmp	r3, #4
 800224a:	d00a      	beq.n	8002262 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800224c:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <HAL_PWREx_ConfigSupply+0x70>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	d001      	beq.n	800225e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01f      	b.n	800229e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e01d      	b.n	800229e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	490f      	ldr	r1, [pc, #60]	@ (80022a8 <HAL_PWREx_ConfigSupply+0x70>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4313      	orrs	r3, r2
 8002270:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002272:	f7fe ff57 	bl	8001124 <HAL_GetTick>
 8002276:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002278:	e009      	b.n	800228e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800227a:	f7fe ff53 	bl	8001124 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002288:	d901      	bls.n	800228e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e007      	b.n	800229e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_PWREx_ConfigSupply+0x70>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800229a:	d1ee      	bne.n	800227a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	58024800 	.word	0x58024800

080022ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e3c8      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8087 	beq.w	80023da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022cc:	4b88      	ldr	r3, [pc, #544]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d6:	4b86      	ldr	r3, [pc, #536]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d007      	beq.n	80022f2 <HAL_RCC_OscConfig+0x46>
 80022e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e4:	2b18      	cmp	r3, #24
 80022e6:	d110      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
 80022e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d10b      	bne.n	800230a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f2:	4b7f      	ldr	r3, [pc, #508]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d06c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x12c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d168      	bne.n	80023d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e3a2      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x76>
 8002314:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a75      	ldr	r2, [pc, #468]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	e02e      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x98>
 800232a:	4b71      	ldr	r3, [pc, #452]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a70      	ldr	r2, [pc, #448]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b6e      	ldr	r3, [pc, #440]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a6d      	ldr	r2, [pc, #436]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800233c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e01d      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0xbc>
 800234e:	4b68      	ldr	r3, [pc, #416]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a67      	ldr	r2, [pc, #412]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b65      	ldr	r3, [pc, #404]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a64      	ldr	r2, [pc, #400]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0xd4>
 8002368:	4b61      	ldr	r3, [pc, #388]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a60      	ldr	r2, [pc, #384]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b5e      	ldr	r3, [pc, #376]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5d      	ldr	r2, [pc, #372]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800237e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7fe fecc 	bl	8001124 <HAL_GetTick>
 800238c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7fe fec8 	bl	8001124 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e356      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023a2:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0xe4>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe feb8 	bl	8001124 <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7fe feb4 	bl	8001124 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	@ 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e342      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ca:	4b49      	ldr	r3, [pc, #292]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x10c>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 808c 	beq.w	8002500 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e8:	4b41      	ldr	r3, [pc, #260]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023f2:	4b3f      	ldr	r3, [pc, #252]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_RCC_OscConfig+0x162>
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2b18      	cmp	r3, #24
 8002402:	d137      	bne.n	8002474 <HAL_RCC_OscConfig+0x1c8>
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d132      	bne.n	8002474 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240e:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x17a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e314      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002426:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0219 	bic.w	r2, r3, #25
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	492f      	ldr	r1, [pc, #188]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fe74 	bl	8001124 <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe fe70 	bl	8001124 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e2fe      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002452:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	061b      	lsls	r3, r3, #24
 800246c:	4920      	ldr	r1, [pc, #128]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002472:	e045      	b.n	8002500 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d026      	beq.n	80024ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800247c:	4b1c      	ldr	r3, [pc, #112]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 0219 	bic.w	r2, r3, #25
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4919      	ldr	r1, [pc, #100]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fe49 	bl	8001124 <HAL_GetTick>
 8002492:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002496:	f7fe fe45 	bl	8001124 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e2d3      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b0e      	ldr	r3, [pc, #56]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	061b      	lsls	r3, r3, #24
 80024c2:	490b      	ldr	r1, [pc, #44]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
 80024c8:	e01a      	b.n	8002500 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a08      	ldr	r2, [pc, #32]	@ (80024f0 <HAL_RCC_OscConfig+0x244>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe fe25 	bl	8001124 <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe fe21 	bl	8001124 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d903      	bls.n	80024f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e2af      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
 80024f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f4:	4b96      	ldr	r3, [pc, #600]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ee      	bne.n	80024de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	d06a      	beq.n	80025e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250c:	4b90      	ldr	r3, [pc, #576]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002514:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002516:	4b8e      	ldr	r3, [pc, #568]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d007      	beq.n	8002532 <HAL_RCC_OscConfig+0x286>
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	2b18      	cmp	r3, #24
 8002526:	d11b      	bne.n	8002560 <HAL_RCC_OscConfig+0x2b4>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002532:	4b87      	ldr	r3, [pc, #540]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x29e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b80      	cmp	r3, #128	@ 0x80
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e282      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800254a:	4b81      	ldr	r3, [pc, #516]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	497d      	ldr	r1, [pc, #500]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800255e:	e040      	b.n	80025e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d023      	beq.n	80025b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002568:	4b79      	ldr	r3, [pc, #484]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a78      	ldr	r2, [pc, #480]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800256e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fdd6 	bl	8001124 <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800257c:	f7fe fdd2 	bl	8001124 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e260      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800258e:	4b70      	ldr	r3, [pc, #448]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800259a:	4b6d      	ldr	r3, [pc, #436]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	061b      	lsls	r3, r3, #24
 80025a8:	4969      	ldr	r1, [pc, #420]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60cb      	str	r3, [r1, #12]
 80025ae:	e018      	b.n	80025e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025b0:	4b67      	ldr	r3, [pc, #412]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a66      	ldr	r2, [pc, #408]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80025b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe fdb2 	bl	8001124 <HAL_GetTick>
 80025c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025c4:	f7fe fdae 	bl	8001124 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e23c      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d036      	beq.n	800265c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d019      	beq.n	800262a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f6:	4b56      	ldr	r3, [pc, #344]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fa:	4a55      	ldr	r2, [pc, #340]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fd8f 	bl	8001124 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260a:	f7fe fd8b 	bl	8001124 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e219      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800261c:	4b4c      	ldr	r3, [pc, #304]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x35e>
 8002628:	e018      	b.n	800265c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800262c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262e:	4a48      	ldr	r2, [pc, #288]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002636:	f7fe fd75 	bl	8001124 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263e:	f7fe fd71 	bl	8001124 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e1ff      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002650:	4b3f      	ldr	r3, [pc, #252]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1f0      	bne.n	800263e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d036      	beq.n	80026d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d019      	beq.n	80026a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002670:	4b37      	ldr	r3, [pc, #220]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a36      	ldr	r2, [pc, #216]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002676:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800267a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800267c:	f7fe fd52 	bl	8001124 <HAL_GetTick>
 8002680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002684:	f7fe fd4e 	bl	8001124 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1dc      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002696:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x3d8>
 80026a2:	e018      	b.n	80026d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a29      	ldr	r2, [pc, #164]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80026aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026b0:	f7fe fd38 	bl	8001124 <HAL_GetTick>
 80026b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b8:	f7fe fd34 	bl	8001124 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1c2      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026ca:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 8086 	beq.w	80027f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <HAL_RCC_OscConfig+0x4a8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002754 <HAL_RCC_OscConfig+0x4a8>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026f0:	f7fe fd18 	bl	8001124 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f8:	f7fe fd14 	bl	8001124 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1a2      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800270a:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_RCC_OscConfig+0x4a8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x480>
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	4a0b      	ldr	r2, [pc, #44]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	@ 0x70
 800272a:	e032      	b.n	8002792 <HAL_RCC_OscConfig+0x4e6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_RCC_OscConfig+0x4ac>
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a05      	ldr	r2, [pc, #20]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a02      	ldr	r2, [pc, #8]	@ (8002750 <HAL_RCC_OscConfig+0x4a4>)
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
 800274c:	e021      	b.n	8002792 <HAL_RCC_OscConfig+0x4e6>
 800274e:	bf00      	nop
 8002750:	58024400 	.word	0x58024400
 8002754:	58024800 	.word	0x58024800
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x4ce>
 8002760:	4b83      	ldr	r3, [pc, #524]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a82      	ldr	r2, [pc, #520]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	4b80      	ldr	r3, [pc, #512]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a7f      	ldr	r2, [pc, #508]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x4e6>
 800277a:	4b7d      	ldr	r3, [pc, #500]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	4a7c      	ldr	r2, [pc, #496]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6713      	str	r3, [r2, #112]	@ 0x70
 8002786:	4b7a      	ldr	r3, [pc, #488]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	4a79      	ldr	r2, [pc, #484]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fcc3 	bl	8001124 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fcbf 	bl	8001124 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e14b      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ee      	beq.n	80027a2 <HAL_RCC_OscConfig+0x4f6>
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fcad 	bl	8001124 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fca9 	bl	8001124 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e135      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027e4:	4b62      	ldr	r3, [pc, #392]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 812a 	beq.w	8002a4e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002802:	2b18      	cmp	r3, #24
 8002804:	f000 80ba 	beq.w	800297c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	2b02      	cmp	r3, #2
 800280e:	f040 8095 	bne.w	800293c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002812:	4b57      	ldr	r3, [pc, #348]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a56      	ldr	r2, [pc, #344]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002818:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800281c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fc81 	bl	8001124 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fc7d 	bl	8001124 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e10b      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002838:	4b4d      	ldr	r3, [pc, #308]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002846:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002848:	4b4a      	ldr	r3, [pc, #296]	@ (8002974 <HAL_RCC_OscConfig+0x6c8>)
 800284a:	4013      	ands	r3, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	430a      	orrs	r2, r1
 8002858:	4945      	ldr	r1, [pc, #276]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	628b      	str	r3, [r1, #40]	@ 0x28
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	3b01      	subs	r3, #1
 8002864:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	3b01      	subs	r3, #1
 800286e:	025b      	lsls	r3, r3, #9
 8002870:	b29b      	uxth	r3, r3
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002878:	3b01      	subs	r3, #1
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002886:	3b01      	subs	r3, #1
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800288e:	4938      	ldr	r1, [pc, #224]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002894:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	4a35      	ldr	r2, [pc, #212]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028a0:	4b33      	ldr	r3, [pc, #204]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a4:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_OscConfig+0x6cc>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028ac:	00d2      	lsls	r2, r2, #3
 80028ae:	4930      	ldr	r1, [pc, #192]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	f023 020c 	bic.w	r2, r3, #12
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	492b      	ldr	r1, [pc, #172]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	f023 0202 	bic.w	r2, r3, #2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	4927      	ldr	r1, [pc, #156]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	4a24      	ldr	r2, [pc, #144]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e4:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	4a21      	ldr	r2, [pc, #132]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a18      	ldr	r2, [pc, #96]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fc06 	bl	8001124 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fc02 	bl	8001124 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e090      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x670>
 800293a:	e088      	b.n	8002a4e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0b      	ldr	r2, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fbec 	bl	8001124 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fbe8 	bl	8001124 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e076      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002962:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <HAL_RCC_OscConfig+0x6c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x6a4>
 800296e:	e06e      	b.n	8002a4e <HAL_RCC_OscConfig+0x7a2>
 8002970:	58024400 	.word	0x58024400
 8002974:	fffffc0c 	.word	0xfffffc0c
 8002978:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800297c:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002982:	4b35      	ldr	r3, [pc, #212]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	2b01      	cmp	r3, #1
 800298e:	d031      	beq.n	80029f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f003 0203 	and.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d12a      	bne.n	80029f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d122      	bne.n	80029f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d11a      	bne.n	80029f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	0a5b      	lsrs	r3, r3, #9
 80029c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d111      	bne.n	80029f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	0c1b      	lsrs	r3, r3, #16
 80029d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d108      	bne.n	80029f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0e1b      	lsrs	r3, r3, #24
 80029e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e02b      	b.n	8002a50 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 80029fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fc:	08db      	lsrs	r3, r3, #3
 80029fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d01f      	beq.n	8002a4e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a0e:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a1a:	f7fe fb83 	bl	8001124 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a20:	bf00      	nop
 8002a22:	f7fe fb7f 	bl	8001124 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d0f9      	beq.n	8002a22 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 8002a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_RCC_OscConfig+0x7b0>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a3a:	00d2      	lsls	r2, r2, #3
 8002a3c:	4906      	ldr	r1, [pc, #24]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <HAL_RCC_OscConfig+0x7ac>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3730      	adds	r7, #48	@ 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	58024400 	.word	0x58024400
 8002a5c:	ffff0007 	.word	0xffff0007

08002a60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e19c      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b8a      	ldr	r3, [pc, #552]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b87      	ldr	r3, [pc, #540]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	4985      	ldr	r1, [pc, #532]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b83      	ldr	r3, [pc, #524]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e184      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d010      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d908      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ac0:	4b78      	ldr	r3, [pc, #480]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4975      	ldr	r1, [pc, #468]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	4b70      	ldr	r3, [pc, #448]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d908      	bls.n	8002b00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aee:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	496a      	ldr	r1, [pc, #424]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699a      	ldr	r2, [r3, #24]
 8002b10:	4b64      	ldr	r3, [pc, #400]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d908      	bls.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b1c:	4b61      	ldr	r3, [pc, #388]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	495e      	ldr	r1, [pc, #376]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d010      	beq.n	8002b5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d908      	bls.n	8002b5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b4a:	4b56      	ldr	r3, [pc, #344]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4953      	ldr	r1, [pc, #332]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d908      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f023 020f 	bic.w	r2, r3, #15
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4947      	ldr	r1, [pc, #284]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d055      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b96:	4b43      	ldr	r3, [pc, #268]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4940      	ldr	r1, [pc, #256]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d121      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0f6      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bc8:	4b36      	ldr	r3, [pc, #216]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d115      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0ea      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002be0:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d109      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0de      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0d6      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c00:	4b28      	ldr	r3, [pc, #160]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f023 0207 	bic.w	r2, r3, #7
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4925      	ldr	r1, [pc, #148]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c12:	f7fe fa87 	bl	8001124 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1a:	f7fe fa83 	bl	8001124 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e0be      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d1eb      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d208      	bcs.n	8002c70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f023 020f 	bic.w	r2, r3, #15
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	490e      	ldr	r1, [pc, #56]	@ (8002ca4 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d214      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 020f 	bic.w	r2, r3, #15
 8002c86:	4906      	ldr	r1, [pc, #24]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <HAL_RCC_ClockConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e086      	b.n	8002dae <HAL_RCC_ClockConfig+0x34e>
 8002ca0:	52002000 	.word	0x52002000
 8002ca4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d208      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4939      	ldr	r1, [pc, #228]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	4b34      	ldr	r3, [pc, #208]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d208      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cf2:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	492e      	ldr	r1, [pc, #184]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	4b28      	ldr	r3, [pc, #160]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d208      	bcs.n	8002d32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d20:	4b25      	ldr	r3, [pc, #148]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	4922      	ldr	r1, [pc, #136]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d208      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4917      	ldr	r1, [pc, #92]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d60:	f000 f834 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	4912      	ldr	r1, [pc, #72]	@ (8002dbc <HAL_RCC_ClockConfig+0x35c>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002db8 <HAL_RCC_ClockConfig+0x358>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <HAL_RCC_ClockConfig+0x35c>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
 8002d94:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <HAL_RCC_ClockConfig+0x360>)
 8002d96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d98:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc4 <HAL_RCC_ClockConfig+0x364>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <HAL_RCC_ClockConfig+0x368>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd ffbe 	bl	8000d24 <HAL_InitTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	0800a730 	.word	0x0800a730
 8002dc0:	24000004 	.word	0x24000004
 8002dc4:	24000000 	.word	0x24000000
 8002dc8:	24000008 	.word	0x24000008

08002dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	@ 0x24
 8002dd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd2:	4bb3      	ldr	r3, [pc, #716]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dda:	2b18      	cmp	r3, #24
 8002ddc:	f200 8155 	bhi.w	800308a <HAL_RCC_GetSysClockFreq+0x2be>
 8002de0:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002e4d 	.word	0x08002e4d
 8002dec:	0800308b 	.word	0x0800308b
 8002df0:	0800308b 	.word	0x0800308b
 8002df4:	0800308b 	.word	0x0800308b
 8002df8:	0800308b 	.word	0x0800308b
 8002dfc:	0800308b 	.word	0x0800308b
 8002e00:	0800308b 	.word	0x0800308b
 8002e04:	0800308b 	.word	0x0800308b
 8002e08:	08002e73 	.word	0x08002e73
 8002e0c:	0800308b 	.word	0x0800308b
 8002e10:	0800308b 	.word	0x0800308b
 8002e14:	0800308b 	.word	0x0800308b
 8002e18:	0800308b 	.word	0x0800308b
 8002e1c:	0800308b 	.word	0x0800308b
 8002e20:	0800308b 	.word	0x0800308b
 8002e24:	0800308b 	.word	0x0800308b
 8002e28:	08002e79 	.word	0x08002e79
 8002e2c:	0800308b 	.word	0x0800308b
 8002e30:	0800308b 	.word	0x0800308b
 8002e34:	0800308b 	.word	0x0800308b
 8002e38:	0800308b 	.word	0x0800308b
 8002e3c:	0800308b 	.word	0x0800308b
 8002e40:	0800308b 	.word	0x0800308b
 8002e44:	0800308b 	.word	0x0800308b
 8002e48:	08002e7f 	.word	0x08002e7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e4c:	4b94      	ldr	r3, [pc, #592]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e58:	4b91      	ldr	r3, [pc, #580]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	08db      	lsrs	r3, r3, #3
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	4a90      	ldr	r2, [pc, #576]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e6a:	e111      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e6c:	4b8d      	ldr	r3, [pc, #564]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e6e:	61bb      	str	r3, [r7, #24]
      break;
 8002e70:	e10e      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e72:	4b8d      	ldr	r3, [pc, #564]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e74:	61bb      	str	r3, [r7, #24]
      break;
 8002e76:	e10b      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e78:	4b8c      	ldr	r3, [pc, #560]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e7a:	61bb      	str	r3, [r7, #24]
      break;
 8002e7c:	e108      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e7e:	4b88      	ldr	r3, [pc, #544]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e88:	4b85      	ldr	r3, [pc, #532]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e94:	4b82      	ldr	r3, [pc, #520]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e9e:	4b80      	ldr	r3, [pc, #512]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80e1 	beq.w	8003084 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	f000 8083 	beq.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x204>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	f200 80a1 	bhi.w	8003014 <HAL_RCC_GetSysClockFreq+0x248>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d056      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ede:	e099      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d02d      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eec:	4b6c      	ldr	r3, [pc, #432]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	4a6b      	ldr	r2, [pc, #428]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f16:	4b62      	ldr	r3, [pc, #392]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f46:	e087      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f52:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5a:	4b51      	ldr	r3, [pc, #324]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f8a:	e065      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80030b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9e:	4b40      	ldr	r3, [pc, #256]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fce:	e043      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fda:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80030bc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003012:	e021      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80030b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003026:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003036:	ed97 6a02 	vldr	s12, [r7, #8]
 800303a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800304a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003056:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305c:	0a5b      	lsrs	r3, r3, #9
 800305e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003062:	3301      	adds	r3, #1
 8003064:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003070:	edd7 6a07 	vldr	s13, [r7, #28]
 8003074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800307c:	ee17 3a90 	vmov	r3, s15
 8003080:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003082:	e005      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
      break;
 8003088:	e002      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800308c:	61bb      	str	r3, [r7, #24]
      break;
 800308e:	bf00      	nop
  }

  return sysclockfreq;
 8003090:	69bb      	ldr	r3, [r7, #24]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	@ 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	58024400 	.word	0x58024400
 80030a4:	03d09000 	.word	0x03d09000
 80030a8:	003d0900 	.word	0x003d0900
 80030ac:	007a1200 	.word	0x007a1200
 80030b0:	46000000 	.word	0x46000000
 80030b4:	4c742400 	.word	0x4c742400
 80030b8:	4a742400 	.word	0x4a742400
 80030bc:	4af42400 	.word	0x4af42400

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030c6:	f7ff fe81 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b10      	ldr	r3, [pc, #64]	@ (8003110 <HAL_RCC_GetHCLKFreq+0x50>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490f      	ldr	r1, [pc, #60]	@ (8003114 <HAL_RCC_GetHCLKFreq+0x54>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	fa22 f303 	lsr.w	r3, r2, r3
 80030e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_RCC_GetHCLKFreq+0x50>)
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	4a09      	ldr	r2, [pc, #36]	@ (8003114 <HAL_RCC_GetHCLKFreq+0x54>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a07      	ldr	r2, [pc, #28]	@ (8003118 <HAL_RCC_GetHCLKFreq+0x58>)
 80030fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030fe:	4a07      	ldr	r2, [pc, #28]	@ (800311c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003104:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <HAL_RCC_GetHCLKFreq+0x58>)
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	58024400 	.word	0x58024400
 8003114:	0800a730 	.word	0x0800a730
 8003118:	24000004 	.word	0x24000004
 800311c:	24000000 	.word	0x24000000

08003120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003124:	f7ff ffcc 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b06      	ldr	r3, [pc, #24]	@ (8003144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4904      	ldr	r1, [pc, #16]	@ (8003148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	58024400 	.word	0x58024400
 8003148:	0800a730 	.word	0x0800a730

0800314c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003150:	f7ff ffb6 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003154:	4602      	mov	r2, r0
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4904      	ldr	r1, [pc, #16]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003162:	5ccb      	ldrb	r3, [r1, r3]
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	58024400 	.word	0x58024400
 8003174:	0800a730 	.word	0x0800a730

08003178 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	223f      	movs	r2, #63	@ 0x3f
 8003186:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003188:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <HAL_RCC_GetClockConfig+0x7c>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0207 	and.w	r2, r3, #7
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003194:	4b17      	ldr	r3, [pc, #92]	@ (80031f4 <HAL_RCC_GetClockConfig+0x7c>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80031a0:	4b14      	ldr	r3, [pc, #80]	@ (80031f4 <HAL_RCC_GetClockConfig+0x7c>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCC_GetClockConfig+0x7c>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80031b8:	4b0e      	ldr	r3, [pc, #56]	@ (80031f4 <HAL_RCC_GetClockConfig+0x7c>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_GetClockConfig+0x7c>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80031d0:	4b08      	ldr	r3, [pc, #32]	@ (80031f4 <HAL_RCC_GetClockConfig+0x7c>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_RCC_GetClockConfig+0x80>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	58024400 	.word	0x58024400
 80031f8:	52002000 	.word	0x52002000

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003200:	b0c6      	sub	sp, #280	@ 0x118
 8003202:	af00      	add	r7, sp, #0
 8003204:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003208:	2300      	movs	r3, #0
 800320a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800320e:	2300      	movs	r3, #0
 8003210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003220:	2500      	movs	r5, #0
 8003222:	ea54 0305 	orrs.w	r3, r4, r5
 8003226:	d049      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800322c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800322e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003232:	d02f      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003238:	d828      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800323a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800323e:	d01a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003244:	d822      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800324e:	d007      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003250:	e01c      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003252:	4bab      	ldr	r3, [pc, #684]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003256:	4aaa      	ldr	r2, [pc, #680]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800325c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800325e:	e01a      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003264:	3308      	adds	r3, #8
 8003266:	2102      	movs	r1, #2
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fc25 	bl	8004ab8 <RCCEx_PLL2_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003274:	e00f      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327a:	3328      	adds	r3, #40	@ 0x28
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fccc 	bl	8004c1c <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800328a:	e004      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800329e:	4b98      	ldr	r3, [pc, #608]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ac:	4a94      	ldr	r2, [pc, #592]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032c8:	f04f 0900 	mov.w	r9, #0
 80032cc:	ea58 0309 	orrs.w	r3, r8, r9
 80032d0:	d047      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d82a      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032dc:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f9 	.word	0x080032f9
 80032e8:	08003307 	.word	0x08003307
 80032ec:	0800331d 	.word	0x0800331d
 80032f0:	0800333b 	.word	0x0800333b
 80032f4:	0800333b 	.word	0x0800333b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f8:	4b81      	ldr	r3, [pc, #516]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	4a80      	ldr	r2, [pc, #512]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003304:	e01a      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800330a:	3308      	adds	r3, #8
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fbd2 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800331a:	e00f      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800331c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003320:	3328      	adds	r3, #40	@ 0x28
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fc79 	bl	8004c1c <RCCEx_PLL3_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003330:	e004      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003338:	e000      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800333a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800333c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10a      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003344:	4b6e      	ldr	r3, [pc, #440]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003348:	f023 0107 	bic.w	r1, r3, #7
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	4a6b      	ldr	r2, [pc, #428]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003354:	430b      	orrs	r3, r1
 8003356:	6513      	str	r3, [r2, #80]	@ 0x50
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800335e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800336e:	f04f 0b00 	mov.w	fp, #0
 8003372:	ea5a 030b 	orrs.w	r3, sl, fp
 8003376:	d05b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800337c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003380:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003384:	d03b      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003386:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800338a:	d834      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800338c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003390:	d037      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003396:	d82e      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003398:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800339c:	d033      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800339e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033a2:	d828      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a8:	d01a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ae:	d822      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80033b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033b8:	d007      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80033ba:	e01c      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033bc:	4b50      	ldr	r3, [pc, #320]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033c8:	e01e      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ce:	3308      	adds	r3, #8
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 fb70 	bl	8004ab8 <RCCEx_PLL2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033de:	e013      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033e4:	3328      	adds	r3, #40	@ 0x28
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fc17 	bl	8004c1c <RCCEx_PLL3_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f4:	e008      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003410:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003420:	4a37      	ldr	r2, [pc, #220]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003422:	430b      	orrs	r3, r1
 8003424:	6593      	str	r3, [r2, #88]	@ 0x58
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800342c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800343c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800344a:	460b      	mov	r3, r1
 800344c:	4313      	orrs	r3, r2
 800344e:	d05d      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003458:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800345c:	d03b      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800345e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003462:	d834      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003464:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003468:	d037      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800346a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800346e:	d82e      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003470:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003474:	d033      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003476:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800347a:	d828      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800347c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003480:	d01a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003486:	d822      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003490:	d007      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003492:	e01c      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003494:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800349a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a0:	e01e      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a6:	3308      	adds	r3, #8
 80034a8:	2100      	movs	r1, #0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fb04 	bl	8004ab8 <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034b6:	e013      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034bc:	3328      	adds	r3, #40	@ 0x28
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fbab 	bl	8004c1c <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034cc:	e008      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034d4:	e004      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80034d6:	bf00      	nop
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80034de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80034f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034f8:	4a01      	ldr	r2, [pc, #4]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fe:	e005      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800350c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003518:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003522:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003526:	460b      	mov	r3, r1
 8003528:	4313      	orrs	r3, r2
 800352a:	d03a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800352c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	2b30      	cmp	r3, #48	@ 0x30
 8003534:	d01f      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003536:	2b30      	cmp	r3, #48	@ 0x30
 8003538:	d819      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800353a:	2b20      	cmp	r3, #32
 800353c:	d00c      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800353e:	2b20      	cmp	r3, #32
 8003540:	d815      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003546:	2b10      	cmp	r3, #16
 8003548:	d111      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354a:	4baa      	ldr	r3, [pc, #680]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	4aa9      	ldr	r2, [pc, #676]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003556:	e011      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800355c:	3308      	adds	r3, #8
 800355e:	2102      	movs	r1, #2
 8003560:	4618      	mov	r0, r3
 8003562:	f001 faa9 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800356c:	e006      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003574:	e002      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003576:	bf00      	nop
 8003578:	e000      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800357a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003584:	4b9b      	ldr	r3, [pc, #620]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003588:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800358c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003592:	4a98      	ldr	r2, [pc, #608]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003594:	430b      	orrs	r3, r1
 8003596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800359a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800359e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80035ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80035b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80035bc:	460b      	mov	r3, r1
 80035be:	4313      	orrs	r3, r2
 80035c0:	d051      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80035c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035cc:	d035      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d2:	d82e      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035d8:	d031      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80035da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035de:	d828      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e4:	d01a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ea:	d822      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f4:	d007      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80035f6:	e01c      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f8:	4b7e      	ldr	r3, [pc, #504]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	4a7d      	ldr	r2, [pc, #500]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003604:	e01c      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800360a:	3308      	adds	r3, #8
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fa52 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003614:	4603      	mov	r3, r0
 8003616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800361c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003620:	3328      	adds	r3, #40	@ 0x28
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f001 faf9 	bl	8004c1c <RCCEx_PLL3_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003630:	e006      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003648:	4b6a      	ldr	r3, [pc, #424]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800364a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	4a67      	ldr	r2, [pc, #412]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6513      	str	r3, [r2, #80]	@ 0x50
 800365c:	e003      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003662:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003672:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003676:	2300      	movs	r3, #0
 8003678:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800367c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003680:	460b      	mov	r3, r1
 8003682:	4313      	orrs	r3, r2
 8003684:	d053      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003690:	d033      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003692:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003696:	d82c      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003698:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800369c:	d02f      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800369e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036a2:	d826      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036a8:	d02b      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036ae:	d820      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036b4:	d012      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80036b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ba:	d81a      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d022      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c4:	d115      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ca:	3308      	adds	r3, #8
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f9f2 	bl	8004ab8 <RCCEx_PLL2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036da:	e015      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036e0:	3328      	adds	r3, #40	@ 0x28
 80036e2:	2101      	movs	r1, #1
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fa99 	bl	8004c1c <RCCEx_PLL3_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036f0:	e00a      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80036fa:	bf00      	nop
 80036fc:	e004      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80036fe:	bf00      	nop
 8003700:	e002      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003702:	bf00      	nop
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003710:	4b38      	ldr	r3, [pc, #224]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003714:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800371c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371e:	4a35      	ldr	r2, [pc, #212]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003720:	430b      	orrs	r3, r1
 8003722:	6513      	str	r3, [r2, #80]	@ 0x50
 8003724:	e003      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800372a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800372e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800373a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003744:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d058      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800374e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800375a:	d033      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003760:	d82c      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003766:	d02f      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800376c:	d826      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800376e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003772:	d02b      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003774:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003778:	d820      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800377e:	d012      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003784:	d81a      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d022      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800378a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800378e:	d115      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003794:	3308      	adds	r3, #8
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f001 f98d 	bl	8004ab8 <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037a4:	e015      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037aa:	3328      	adds	r3, #40	@ 0x28
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fa34 	bl	8004c1c <RCCEx_PLL3_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037ba:	e00a      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037c2:	e006      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037c4:	bf00      	nop
 80037c6:	e004      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037c8:	bf00      	nop
 80037ca:	e002      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037cc:	bf00      	nop
 80037ce:	e000      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10e      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037ea:	4a02      	ldr	r2, [pc, #8]	@ (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80037f2:	bf00      	nop
 80037f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800380c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003816:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800381a:	460b      	mov	r3, r1
 800381c:	4313      	orrs	r3, r2
 800381e:	d037      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382a:	d00e      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003830:	d816      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d018      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800383a:	d111      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383c:	4bc4      	ldr	r3, [pc, #784]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	4ac3      	ldr	r2, [pc, #780]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003848:	e00f      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800384a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800384e:	3308      	adds	r3, #8
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f930 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800385e:	e004      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10a      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003872:	4bb7      	ldr	r3, [pc, #732]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003876:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800387a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003880:	4ab3      	ldr	r2, [pc, #716]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003882:	430b      	orrs	r3, r1
 8003884:	6513      	str	r3, [r2, #80]	@ 0x50
 8003886:	e003      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800388c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800389c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d039      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d81c      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80038ba:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038fd 	.word	0x080038fd
 80038c4:	080038d1 	.word	0x080038d1
 80038c8:	080038df 	.word	0x080038df
 80038cc:	080038fd 	.word	0x080038fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d0:	4b9f      	ldr	r3, [pc, #636]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	4a9e      	ldr	r2, [pc, #632]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038dc:	e00f      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e2:	3308      	adds	r3, #8
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f8e6 	bl	8004ab8 <RCCEx_PLL2_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80038fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003906:	4b92      	ldr	r3, [pc, #584]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390a:	f023 0103 	bic.w	r1, r3, #3
 800390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003914:	4a8e      	ldr	r2, [pc, #568]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003916:	430b      	orrs	r3, r1
 8003918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800391a:	e003      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800393a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800393e:	460b      	mov	r3, r1
 8003940:	4313      	orrs	r3, r2
 8003942:	f000 8099 	beq.w	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003946:	4b83      	ldr	r3, [pc, #524]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a82      	ldr	r2, [pc, #520]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003952:	f7fd fbe7 	bl	8001124 <HAL_GetTick>
 8003956:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800395a:	e00b      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395c:	f7fd fbe2 	bl	8001124 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b64      	cmp	r3, #100	@ 0x64
 800396a:	d903      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003972:	e005      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003974:	4b77      	ldr	r3, [pc, #476]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ed      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003984:	2b00      	cmp	r3, #0
 8003986:	d173      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003988:	4b71      	ldr	r3, [pc, #452]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800398a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003994:	4053      	eors	r3, r2
 8003996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800399a:	2b00      	cmp	r3, #0
 800399c:	d015      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800399e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039aa:	4b69      	ldr	r3, [pc, #420]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	4a68      	ldr	r2, [pc, #416]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039b6:	4b66      	ldr	r3, [pc, #408]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	4a65      	ldr	r2, [pc, #404]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039c2:	4a63      	ldr	r2, [pc, #396]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d6:	d118      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fba4 	bl	8001124 <HAL_GetTick>
 80039dc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039e0:	e00d      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fd fb9f 	bl	8001124 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80039ec:	1ad2      	subs	r2, r2, r3
 80039ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d903      	bls.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80039fc:	e005      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039fe:	4b54      	ldr	r3, [pc, #336]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0eb      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d129      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a22:	d10e      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003a24:	4b4a      	ldr	r3, [pc, #296]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a34:	091a      	lsrs	r2, r3, #4
 8003a36:	4b48      	ldr	r3, [pc, #288]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	4a45      	ldr	r2, [pc, #276]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6113      	str	r3, [r2, #16]
 8003a40:	e005      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003a42:	4b43      	ldr	r3, [pc, #268]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	4a42      	ldr	r2, [pc, #264]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a4c:	6113      	str	r3, [r2, #16]
 8003a4e:	4b40      	ldr	r3, [pc, #256]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a64:	e008      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	f002 0301 	and.w	r3, r2, #1
 8003a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a92:	460b      	mov	r3, r1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f000 808f 	beq.w	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa0:	2b28      	cmp	r3, #40	@ 0x28
 8003aa2:	d871      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003b91 	.word	0x08003b91
 8003ab0:	08003b89 	.word	0x08003b89
 8003ab4:	08003b89 	.word	0x08003b89
 8003ab8:	08003b89 	.word	0x08003b89
 8003abc:	08003b89 	.word	0x08003b89
 8003ac0:	08003b89 	.word	0x08003b89
 8003ac4:	08003b89 	.word	0x08003b89
 8003ac8:	08003b89 	.word	0x08003b89
 8003acc:	08003b5d 	.word	0x08003b5d
 8003ad0:	08003b89 	.word	0x08003b89
 8003ad4:	08003b89 	.word	0x08003b89
 8003ad8:	08003b89 	.word	0x08003b89
 8003adc:	08003b89 	.word	0x08003b89
 8003ae0:	08003b89 	.word	0x08003b89
 8003ae4:	08003b89 	.word	0x08003b89
 8003ae8:	08003b89 	.word	0x08003b89
 8003aec:	08003b73 	.word	0x08003b73
 8003af0:	08003b89 	.word	0x08003b89
 8003af4:	08003b89 	.word	0x08003b89
 8003af8:	08003b89 	.word	0x08003b89
 8003afc:	08003b89 	.word	0x08003b89
 8003b00:	08003b89 	.word	0x08003b89
 8003b04:	08003b89 	.word	0x08003b89
 8003b08:	08003b89 	.word	0x08003b89
 8003b0c:	08003b91 	.word	0x08003b91
 8003b10:	08003b89 	.word	0x08003b89
 8003b14:	08003b89 	.word	0x08003b89
 8003b18:	08003b89 	.word	0x08003b89
 8003b1c:	08003b89 	.word	0x08003b89
 8003b20:	08003b89 	.word	0x08003b89
 8003b24:	08003b89 	.word	0x08003b89
 8003b28:	08003b89 	.word	0x08003b89
 8003b2c:	08003b91 	.word	0x08003b91
 8003b30:	08003b89 	.word	0x08003b89
 8003b34:	08003b89 	.word	0x08003b89
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003b89 	.word	0x08003b89
 8003b40:	08003b89 	.word	0x08003b89
 8003b44:	08003b89 	.word	0x08003b89
 8003b48:	08003b89 	.word	0x08003b89
 8003b4c:	08003b91 	.word	0x08003b91
 8003b50:	58024400 	.word	0x58024400
 8003b54:	58024800 	.word	0x58024800
 8003b58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b60:	3308      	adds	r3, #8
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 ffa7 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b70:	e00f      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b76:	3328      	adds	r3, #40	@ 0x28
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f001 f84e 	bl	8004c1c <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b86:	e004      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b9a:	4bbf      	ldr	r3, [pc, #764]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba8:	4abb      	ldr	r2, [pc, #748]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bae:	e003      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f002 0302 	and.w	r3, r2, #2
 8003bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	d041      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d824      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003be2:	a201      	add	r2, pc, #4	@ (adr r2, 8003be8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c35 	.word	0x08003c35
 8003bec:	08003c01 	.word	0x08003c01
 8003bf0:	08003c17 	.word	0x08003c17
 8003bf4:	08003c35 	.word	0x08003c35
 8003bf8:	08003c35 	.word	0x08003c35
 8003bfc:	08003c35 	.word	0x08003c35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c04:	3308      	adds	r3, #8
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 ff55 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c14:	e00f      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c1a:	3328      	adds	r3, #40	@ 0x28
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fffc 	bl	8004c1c <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c2a:	e004      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c3e:	4b96      	ldr	r3, [pc, #600]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c42:	f023 0107 	bic.w	r1, r3, #7
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4c:	4a92      	ldr	r2, [pc, #584]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f002 0304 	and.w	r3, r2, #4
 8003c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c76:	460b      	mov	r3, r1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d044      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c84:	2b05      	cmp	r3, #5
 8003c86:	d825      	bhi.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003c88:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cdd 	.word	0x08003cdd
 8003c94:	08003ca9 	.word	0x08003ca9
 8003c98:	08003cbf 	.word	0x08003cbf
 8003c9c:	08003cdd 	.word	0x08003cdd
 8003ca0:	08003cdd 	.word	0x08003cdd
 8003ca4:	08003cdd 	.word	0x08003cdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cac:	3308      	adds	r3, #8
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 ff01 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e00f      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc2:	3328      	adds	r3, #40	@ 0x28
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 ffa8 	bl	8004c1c <RCCEx_PLL3_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cd2:	e004      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10b      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	f023 0107 	bic.w	r1, r3, #7
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	4a68      	ldr	r2, [pc, #416]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfc:	e003      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f002 0320 	and.w	r3, r2, #32
 8003d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4313      	orrs	r3, r2
 8003d24:	d055      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d32:	d033      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d38:	d82c      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3e:	d02f      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d44:	d826      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d4a:	d02b      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003d4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d50:	d820      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d56:	d012      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d5c:	d81a      	bhi.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d022      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d66:	d115      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	2100      	movs	r1, #0
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fea1 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d7c:	e015      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d82:	3328      	adds	r3, #40	@ 0x28
 8003d84:	2102      	movs	r1, #2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 ff48 	bl	8004c1c <RCCEx_PLL3_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d92:	e00a      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d9a:	e006      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d9c:	bf00      	nop
 8003d9e:	e004      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003da0:	bf00      	nop
 8003da2:	e002      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003db2:	4b39      	ldr	r3, [pc, #228]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dc2:	4a35      	ldr	r2, [pc, #212]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dc8:	e003      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003dde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003de8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d058      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dfa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003dfe:	d033      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003e00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e04:	d82c      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e0a:	d02f      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e10:	d826      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e16:	d02b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e1c:	d820      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e22:	d012      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e28:	d81a      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d022      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e32:	d115      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e38:	3308      	adds	r3, #8
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fe3b 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e48:	e015      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4e:	3328      	adds	r3, #40	@ 0x28
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fee2 	bl	8004c1c <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e66:	e006      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e68:	bf00      	nop
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e6c:	bf00      	nop
 8003e6e:	e002      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10e      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e7e:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e82:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e8e:	4a02      	ldr	r2, [pc, #8]	@ (8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003e96:	bf00      	nop
 8003e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	d055      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ecc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ed0:	d033      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003ed2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ed6:	d82c      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003edc:	d02f      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee2:	d826      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ee4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ee8:	d02b      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003eea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003eee:	d820      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ef4:	d012      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003ef6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003efa:	d81a      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d022      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f04:	d115      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f0a:	3308      	adds	r3, #8
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fdd2 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f1a:	e015      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f20:	3328      	adds	r3, #40	@ 0x28
 8003f22:	2102      	movs	r1, #2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fe79 	bl	8004c1c <RCCEx_PLL3_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f30:	e00a      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f50:	4ba0      	ldr	r3, [pc, #640]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f60:	4a9c      	ldr	r2, [pc, #624]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f66:	e003      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f002 0308 	and.w	r3, r2, #8
 8003f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	d01e      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa2:	3328      	adds	r3, #40	@ 0x28
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fe38 	bl	8004c1c <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003fb8:	4b86      	ldr	r3, [pc, #536]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc8:	4a82      	ldr	r2, [pc, #520]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f002 0310 	and.w	r3, r2, #16
 8003fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fe4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d01e      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004000:	3328      	adds	r3, #40	@ 0x28
 8004002:	2102      	movs	r1, #2
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fe09 	bl	8004c1c <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004016:	4b6f      	ldr	r3, [pc, #444]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800401e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004026:	4a6b      	ldr	r2, [pc, #428]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800403a:	2300      	movs	r3, #0
 800403c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800403e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d03e      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004054:	d022      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800405a:	d81b      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004064:	d00b      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004066:	e015      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406c:	3308      	adds	r3, #8
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fd21 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fdc8 	bl	8004c1c <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a6:	4b4b      	ldr	r3, [pc, #300]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040b6:	4a47      	ldr	r2, [pc, #284]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80040d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80040d4:	2300      	movs	r3, #0
 80040d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80040d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d03b      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80040e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040ee:	d01f      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80040f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040f4:	d818      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040fa:	d003      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80040fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004100:	d007      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004102:	e011      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4b33      	ldr	r3, [pc, #204]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	4a32      	ldr	r2, [pc, #200]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004110:	e00f      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004116:	3328      	adds	r3, #40	@ 0x28
 8004118:	2101      	movs	r1, #1
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fd7e 	bl	8004c1c <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004126:	e004      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800413a:	4b26      	ldr	r3, [pc, #152]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800414a:	4a22      	ldr	r2, [pc, #136]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800415a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004168:	2300      	movs	r3, #0
 800416a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800416c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d034      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004184:	d007      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004186:	e011      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4a11      	ldr	r2, [pc, #68]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004194:	e00e      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419a:	3308      	adds	r3, #8
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fc8a 	bl	8004ab8 <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041aa:	e003      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041bc:	4b05      	ldr	r3, [pc, #20]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ca:	4a02      	ldr	r2, [pc, #8]	@ (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041d0:	e006      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80041d2:	bf00      	nop
 80041d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80041ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ee:	2300      	movs	r3, #0
 80041f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80041f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d00c      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	3328      	adds	r3, #40	@ 0x28
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fd09 	bl	8004c1c <RCCEx_PLL3_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004222:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004224:	2300      	movs	r3, #0
 8004226:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004228:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d036      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004238:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800423c:	d018      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800423e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004242:	d811      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004248:	d014      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800424a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800424e:	d80b      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d011      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004258:	d106      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425a:	4bb7      	ldr	r3, [pc, #732]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	4ab6      	ldr	r2, [pc, #728]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004266:	e008      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800426e:	e004      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004270:	bf00      	nop
 8004272:	e002      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004282:	4bad      	ldr	r3, [pc, #692]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004286:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800428a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004290:	4aa9      	ldr	r2, [pc, #676]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004292:	430b      	orrs	r3, r1
 8004294:	6553      	str	r3, [r2, #84]	@ 0x54
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800429c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80042ae:	2300      	movs	r3, #0
 80042b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042bc:	4b9e      	ldr	r3, [pc, #632]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80042c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ca:	4a9b      	ldr	r2, [pc, #620]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80042dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042de:	2300      	movs	r3, #0
 80042e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80042e6:	460b      	mov	r3, r1
 80042e8:	4313      	orrs	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ec:	4b92      	ldr	r3, [pc, #584]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80042f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042fa:	4a8f      	ldr	r2, [pc, #572]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800430c:	643b      	str	r3, [r7, #64]	@ 0x40
 800430e:	2300      	movs	r3, #0
 8004310:	647b      	str	r3, [r7, #68]	@ 0x44
 8004312:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d00e      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800431c:	4b86      	ldr	r3, [pc, #536]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	4a85      	ldr	r2, [pc, #532]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004322:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004326:	6113      	str	r3, [r2, #16]
 8004328:	4b83      	ldr	r3, [pc, #524]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800432a:	6919      	ldr	r1, [r3, #16]
 800432c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004334:	4a80      	ldr	r2, [pc, #512]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004336:	430b      	orrs	r3, r1
 8004338:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800433a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004348:	2300      	movs	r3, #0
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004356:	4b78      	ldr	r3, [pc, #480]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004364:	4a74      	ldr	r2, [pc, #464]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004366:	430b      	orrs	r3, r1
 8004368:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800436a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004376:	633b      	str	r3, [r7, #48]	@ 0x30
 8004378:	2300      	movs	r3, #0
 800437a:	637b      	str	r3, [r7, #52]	@ 0x34
 800437c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004386:	4b6c      	ldr	r3, [pc, #432]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	4a68      	ldr	r2, [pc, #416]	@ (8004538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	2100      	movs	r1, #0
 80043a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d011      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043bc:	3308      	adds	r3, #8
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb79 	bl	8004ab8 <RCCEx_PLL2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	2100      	movs	r1, #0
 80043e6:	6239      	str	r1, [r7, #32]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d011      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	3308      	adds	r3, #8
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fb59 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800440c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	2100      	movs	r1, #0
 8004426:	61b9      	str	r1, [r7, #24]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d011      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443c:	3308      	adds	r3, #8
 800443e:	2102      	movs	r1, #2
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fb39 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800444c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	2100      	movs	r1, #0
 8004466:	6139      	str	r1, [r7, #16]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d011      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447c:	3328      	adds	r3, #40	@ 0x28
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fbcb 	bl	8004c1c <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800448c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	2100      	movs	r1, #0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d011      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044bc:	3328      	adds	r3, #40	@ 0x28
 80044be:	2101      	movs	r1, #1
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fbab 	bl	8004c1c <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	2100      	movs	r1, #0
 80044e6:	6039      	str	r1, [r7, #0]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044f2:	460b      	mov	r3, r1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d011      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fc:	3328      	adds	r3, #40	@ 0x28
 80044fe:	2102      	movs	r1, #2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fb8b 	bl	8004c1c <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800450c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800451c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
}
 800452a:	4618      	mov	r0, r3
 800452c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400

0800453c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004540:	f7fe fdbe 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4904      	ldr	r1, [pc, #16]	@ (8004564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	58024400 	.word	0x58024400
 8004564:	0800a730 	.word	0x0800a730

08004568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	@ 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004570:	4ba1      	ldr	r3, [pc, #644]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800457a:	4b9f      	ldr	r3, [pc, #636]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	0b1b      	lsrs	r3, r3, #12
 8004580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004586:	4b9c      	ldr	r3, [pc, #624]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004592:	4b99      	ldr	r3, [pc, #612]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8111 	beq.w	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f000 8083 	beq.w	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	f200 80a1 	bhi.w	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d056      	beq.n	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045d2:	e099      	b.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d4:	4b88      	ldr	r3, [pc, #544]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02d      	beq.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045e0:	4b85      	ldr	r3, [pc, #532]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	4a84      	ldr	r2, [pc, #528]	@ (80047fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b7b      	ldr	r3, [pc, #492]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a03 	vldr	s12, [r7, #12]
 800461e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800463a:	e087      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b6a      	ldr	r3, [pc, #424]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004662:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800467e:	e065      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b59      	ldr	r3, [pc, #356]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c2:	e043      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800480c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b48      	ldr	r3, [pc, #288]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004706:	e021      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b37      	ldr	r3, [pc, #220]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800474a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800474c:	4b2a      	ldr	r3, [pc, #168]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004766:	edd7 6a07 	vldr	s13, [r7, #28]
 800476a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004772:	ee17 2a90 	vmov	r2, s15
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800477a:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004794:	edd7 6a07 	vldr	s13, [r7, #28]
 8004798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a0:	ee17 2a90 	vmov	r2, s15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80047a8:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	0e1b      	lsrs	r3, r3, #24
 80047ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ce:	ee17 2a90 	vmov	r2, s15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	3724      	adds	r7, #36	@ 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	03d09000 	.word	0x03d09000
 8004800:	46000000 	.word	0x46000000
 8004804:	4c742400 	.word	0x4c742400
 8004808:	4a742400 	.word	0x4a742400
 800480c:	4af42400 	.word	0x4af42400

08004810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	@ 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004818:	4ba1      	ldr	r3, [pc, #644]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004822:	4b9f      	ldr	r3, [pc, #636]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	0d1b      	lsrs	r3, r3, #20
 8004828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800482c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800482e:	4b9c      	ldr	r3, [pc, #624]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800483a:	4b99      	ldr	r3, [pc, #612]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483e:	08db      	lsrs	r3, r3, #3
 8004840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8111 	beq.w	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f000 8083 	beq.w	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	f200 80a1 	bhi.w	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d056      	beq.n	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800487a:	e099      	b.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487c:	4b88      	ldr	r3, [pc, #544]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02d      	beq.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004888:	4b85      	ldr	r3, [pc, #532]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	4a84      	ldr	r2, [pc, #528]	@ (8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b7b      	ldr	r3, [pc, #492]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048e2:	e087      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004926:	e065      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b59      	ldr	r3, [pc, #356]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	e043      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497e:	4b48      	ldr	r3, [pc, #288]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ae:	e021      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b37      	ldr	r3, [pc, #220]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049f4:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	0a5b      	lsrs	r3, r3, #9
 80049fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1a:	ee17 2a90 	vmov	r2, s15
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a22:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 2a90 	vmov	r2, s15
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a50:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a76:	ee17 2a90 	vmov	r2, s15
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
}
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	@ 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	03d09000 	.word	0x03d09000
 8004aa8:	46000000 	.word	0x46000000
 8004aac:	4c742400 	.word	0x4c742400
 8004ab0:	4a742400 	.word	0x4a742400
 8004ab4:	4af42400 	.word	0x4af42400

08004ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ac6:	4b53      	ldr	r3, [pc, #332]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d101      	bne.n	8004ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e099      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a4e      	ldr	r2, [pc, #312]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc fb1f 	bl	8001124 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aea:	f7fc fb1b 	bl	8001124 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e086      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004afc:	4b45      	ldr	r3, [pc, #276]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b08:	4b42      	ldr	r3, [pc, #264]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	493f      	ldr	r1, [pc, #252]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b4c:	4931      	ldr	r1, [pc, #196]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b52:	4b30      	ldr	r3, [pc, #192]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	492d      	ldr	r1, [pc, #180]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b64:	4b2b      	ldr	r3, [pc, #172]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b68:	f023 0220 	bic.w	r2, r3, #32
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	4928      	ldr	r1, [pc, #160]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b76:	4b27      	ldr	r3, [pc, #156]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	4a26      	ldr	r2, [pc, #152]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b82:	4b24      	ldr	r3, [pc, #144]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b86:	4b24      	ldr	r3, [pc, #144]	@ (8004c18 <RCCEx_PLL2_Config+0x160>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	69d2      	ldr	r2, [r2, #28]
 8004b8e:	00d2      	lsls	r2, r2, #3
 8004b90:	4920      	ldr	r1, [pc, #128]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b96:	4b1f      	ldr	r3, [pc, #124]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f043 0310 	orr.w	r3, r3, #16
 8004ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bb4:	e00f      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bbc:	4b15      	ldr	r3, [pc, #84]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc0:	4a14      	ldr	r2, [pc, #80]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bc8:	e005      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bca:	4b12      	ldr	r3, [pc, #72]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	4a11      	ldr	r2, [pc, #68]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be2:	f7fc fa9f 	bl	8001124 <HAL_GetTick>
 8004be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bea:	f7fc fa9b 	bl	8001124 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
 8004c18:	ffff0007 	.word	0xffff0007

08004c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c2a:	4b53      	ldr	r3, [pc, #332]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d101      	bne.n	8004c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e099      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fc fa6d 	bl	8001124 <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c4e:	f7fc fa69 	bl	8001124 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e086      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c60:	4b45      	ldr	r3, [pc, #276]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c6c:	4b42      	ldr	r3, [pc, #264]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	051b      	lsls	r3, r3, #20
 8004c7a:	493f      	ldr	r1, [pc, #252]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	025b      	lsls	r3, r3, #9
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cb0:	4931      	ldr	r1, [pc, #196]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cb6:	4b30      	ldr	r3, [pc, #192]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	492d      	ldr	r1, [pc, #180]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4928      	ldr	r1, [pc, #160]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cda:	4b27      	ldr	r3, [pc, #156]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cde:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ce6:	4b24      	ldr	r3, [pc, #144]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cea:	4b24      	ldr	r3, [pc, #144]	@ (8004d7c <RCCEx_PLL3_Config+0x160>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	69d2      	ldr	r2, [r2, #28]
 8004cf2:	00d2      	lsls	r2, r2, #3
 8004cf4:	4920      	ldr	r1, [pc, #128]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	4a19      	ldr	r2, [pc, #100]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d18:	e00f      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d20:	4b15      	ldr	r3, [pc, #84]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	4a14      	ldr	r2, [pc, #80]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d2c:	e005      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d2e:	4b12      	ldr	r3, [pc, #72]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	4a11      	ldr	r2, [pc, #68]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fc f9ed 	bl	8001124 <HAL_GetTick>
 8004d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d4e:	f7fc f9e9 	bl	8001124 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d60:	4b05      	ldr	r3, [pc, #20]	@ (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	ffff0007 	.word	0xffff0007

08004d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e049      	b.n	8004e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f841 	bl	8004e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 f9f6 	bl	80051b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d001      	beq.n	8004e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e05e      	b.n	8004f1a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2b      	ldr	r2, [pc, #172]	@ (8004f28 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02c      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d027      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	@ (8004f2c <HAL_TIM_Base_Start_IT+0xe8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d022      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a26      	ldr	r2, [pc, #152]	@ (8004f30 <HAL_TIM_Base_Start_IT+0xec>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d01d      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	@ (8004f34 <HAL_TIM_Base_Start_IT+0xf0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d018      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <HAL_TIM_Base_Start_IT+0xf4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d013      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xf8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00e      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a20      	ldr	r2, [pc, #128]	@ (8004f40 <HAL_TIM_Base_Start_IT+0xfc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d009      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f44 <HAL_TIM_Base_Start_IT+0x100>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_TIM_Base_Start_IT+0x94>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f48 <HAL_TIM_Base_Start_IT+0x104>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d115      	bne.n	8004f04 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <HAL_TIM_Base_Start_IT+0x108>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b06      	cmp	r3, #6
 8004ee8:	d015      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0xd2>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef0:	d011      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	e008      	b.n	8004f16 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e000      	b.n	8004f18 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40000c00 	.word	0x40000c00
 8004f38:	40010400 	.word	0x40010400
 8004f3c:	40001800 	.word	0x40001800
 8004f40:	40014000 	.word	0x40014000
 8004f44:	4000e000 	.word	0x4000e000
 8004f48:	4000e400 	.word	0x4000e400
 8004f4c:	00010007 	.word	0x00010007

08004f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d020      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01b      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0202 	mvn.w	r2, #2
 8004f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f8e9 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8db 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f8ec 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d020      	beq.n	8005000 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01b      	beq.n	8005000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0204 	mvn.w	r2, #4
 8004fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f8c3 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8004fec:	e005      	b.n	8004ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8b5 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8c6 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d020      	beq.n	800504c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01b      	beq.n	800504c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0208 	mvn.w	r2, #8
 800501c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2204      	movs	r2, #4
 8005022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f89d 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88f 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f8a0 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d020      	beq.n	8005098 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01b      	beq.n	8005098 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0210 	mvn.w	r2, #16
 8005068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2208      	movs	r2, #8
 800506e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f877 	bl	8005172 <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f869 	bl	800515e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f87a 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d007      	beq.n	80050bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0201 	mvn.w	r2, #1
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fb fd34 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00c      	beq.n	80050ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f919 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00c      	beq.n	800510e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f911 	bl	8005330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00c      	beq.n	8005132 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800512a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f834 	bl	800519a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0220 	mvn.w	r2, #32
 800514e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f8d9 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a47      	ldr	r2, [pc, #284]	@ (80052e0 <TIM_Base_SetConfig+0x130>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d013      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ce:	d00f      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a44      	ldr	r2, [pc, #272]	@ (80052e4 <TIM_Base_SetConfig+0x134>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a43      	ldr	r2, [pc, #268]	@ (80052e8 <TIM_Base_SetConfig+0x138>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a42      	ldr	r2, [pc, #264]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a41      	ldr	r2, [pc, #260]	@ (80052f0 <TIM_Base_SetConfig+0x140>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a36      	ldr	r2, [pc, #216]	@ (80052e0 <TIM_Base_SetConfig+0x130>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d027      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005210:	d023      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <TIM_Base_SetConfig+0x134>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d01f      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a32      	ldr	r2, [pc, #200]	@ (80052e8 <TIM_Base_SetConfig+0x138>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01b      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a31      	ldr	r2, [pc, #196]	@ (80052ec <TIM_Base_SetConfig+0x13c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d017      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a30      	ldr	r2, [pc, #192]	@ (80052f0 <TIM_Base_SetConfig+0x140>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2f      	ldr	r2, [pc, #188]	@ (80052f4 <TIM_Base_SetConfig+0x144>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00f      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2e      	ldr	r2, [pc, #184]	@ (80052f8 <TIM_Base_SetConfig+0x148>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00b      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2d      	ldr	r2, [pc, #180]	@ (80052fc <TIM_Base_SetConfig+0x14c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d007      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a2c      	ldr	r2, [pc, #176]	@ (8005300 <TIM_Base_SetConfig+0x150>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d003      	beq.n	800525a <TIM_Base_SetConfig+0xaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2b      	ldr	r2, [pc, #172]	@ (8005304 <TIM_Base_SetConfig+0x154>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d108      	bne.n	800526c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a14      	ldr	r2, [pc, #80]	@ (80052e0 <TIM_Base_SetConfig+0x130>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00f      	beq.n	80052b2 <TIM_Base_SetConfig+0x102>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <TIM_Base_SetConfig+0x140>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00b      	beq.n	80052b2 <TIM_Base_SetConfig+0x102>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <TIM_Base_SetConfig+0x144>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d007      	beq.n	80052b2 <TIM_Base_SetConfig+0x102>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a14      	ldr	r2, [pc, #80]	@ (80052f8 <TIM_Base_SetConfig+0x148>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_Base_SetConfig+0x102>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a13      	ldr	r2, [pc, #76]	@ (80052fc <TIM_Base_SetConfig+0x14c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d103      	bne.n	80052ba <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	601a      	str	r2, [r3, #0]
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40014000 	.word	0x40014000
 80052f8:	40014400 	.word	0x40014400
 80052fc:	40014800 	.word	0x40014800
 8005300:	4000e000 	.word	0x4000e000
 8005304:	4000e400 	.word	0x4000e400

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e042      	b.n	80053dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fb fc11 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2224      	movs	r2, #36	@ 0x24
 8005372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f001 fb18 	bl	80069c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fca9 	bl	8005cec <UART_SetConfig>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e01b      	b.n	80053dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 fb97 	bl	8006b08 <UART_CheckIdleState>
 80053da:	4603      	mov	r3, r0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	@ 0x28
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4613      	mov	r3, r2
 80053f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d17b      	bne.n	80054f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_UART_Transmit+0x26>
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e074      	b.n	80054f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2221      	movs	r2, #33	@ 0x21
 800541a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800541e:	f7fb fe81 	bl	8001124 <HAL_GetTick>
 8005422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	88fa      	ldrh	r2, [r7, #6]
 8005430:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800543c:	d108      	bne.n	8005450 <HAL_UART_Transmit+0x6c>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e003      	b.n	8005458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005458:	e030      	b.n	80054bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	2180      	movs	r1, #128	@ 0x80
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f001 fbf9 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e03d      	b.n	80054f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10b      	bne.n	800549a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005490:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	3302      	adds	r3, #2
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e007      	b.n	80054aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	781a      	ldrb	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3301      	adds	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1c8      	bne.n	800545a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2140      	movs	r1, #64	@ 0x40
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f001 fbc2 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e006      	b.n	80054f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e000      	b.n	80054f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054f6:	2302      	movs	r3, #2
  }
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b0ba      	sub	sp, #232	@ 0xe8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005526:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800552a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800552e:	4013      	ands	r3, r2
 8005530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11b      	bne.n	8005574 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8393 	beq.w	8005c90 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
      }
      return;
 8005572:	e38d      	b.n	8005c90 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8123 	beq.w	80057c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800557e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005582:	4b8d      	ldr	r3, [pc, #564]	@ (80057b8 <HAL_UART_IRQHandler+0x2b8>)
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800558a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800558e:	4b8b      	ldr	r3, [pc, #556]	@ (80057bc <HAL_UART_IRQHandler+0x2bc>)
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8116 	beq.w	80057c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d011      	beq.n	80055c8 <HAL_UART_IRQHandler+0xc8>
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	f043 0201 	orr.w	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d011      	beq.n	80055f8 <HAL_UART_IRQHandler+0xf8>
 80055d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2202      	movs	r2, #2
 80055e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d011      	beq.n	8005628 <HAL_UART_IRQHandler+0x128>
 8005604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00b      	beq.n	8005628 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2204      	movs	r2, #4
 8005616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561e:	f043 0202 	orr.w	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d017      	beq.n	8005664 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005640:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005644:	4b5c      	ldr	r3, [pc, #368]	@ (80057b8 <HAL_UART_IRQHandler+0x2b8>)
 8005646:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565a:	f043 0208 	orr.w	r2, r3, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566c:	2b00      	cmp	r3, #0
 800566e:	d012      	beq.n	8005696 <HAL_UART_IRQHandler+0x196>
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 82f9 	beq.w	8005c94 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d013      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ea:	2b40      	cmp	r3, #64	@ 0x40
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d054      	beq.n	80057a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 fb1c 	bl	8006d38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d146      	bne.n	800579c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800572c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800573a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800573e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1d9      	bne.n	800570e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576a:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <HAL_UART_IRQHandler+0x2c0>)
 800576c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005774:	4618      	mov	r0, r3
 8005776:	f7fc f957 	bl	8001a28 <HAL_DMA_Abort_IT>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d019      	beq.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800578e:	4610      	mov	r0, r2
 8005790:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005792:	e00f      	b.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fa93 	bl	8005cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579a:	e00b      	b.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fa8f 	bl	8005cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a2:	e007      	b.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa8b 	bl	8005cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80057b2:	e26f      	b.n	8005c94 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	bf00      	nop
    return;
 80057b6:	e26d      	b.n	8005c94 <HAL_UART_IRQHandler+0x794>
 80057b8:	10000001 	.word	0x10000001
 80057bc:	04000120 	.word	0x04000120
 80057c0:	08006e05 	.word	0x08006e05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f040 8203 	bne.w	8005bd4 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 81fc 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 81f5 	beq.w	8005bd4 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2210      	movs	r2, #16
 80057f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b40      	cmp	r3, #64	@ 0x40
 80057fe:	f040 816d 	bne.w	8005adc <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4aa4      	ldr	r2, [pc, #656]	@ (8005a9c <HAL_UART_IRQHandler+0x59c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d068      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4aa1      	ldr	r2, [pc, #644]	@ (8005aa0 <HAL_UART_IRQHandler+0x5a0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d061      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a9f      	ldr	r2, [pc, #636]	@ (8005aa4 <HAL_UART_IRQHandler+0x5a4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d05a      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a9c      	ldr	r2, [pc, #624]	@ (8005aa8 <HAL_UART_IRQHandler+0x5a8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d053      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a9a      	ldr	r2, [pc, #616]	@ (8005aac <HAL_UART_IRQHandler+0x5ac>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d04c      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a97      	ldr	r2, [pc, #604]	@ (8005ab0 <HAL_UART_IRQHandler+0x5b0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d045      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a95      	ldr	r2, [pc, #596]	@ (8005ab4 <HAL_UART_IRQHandler+0x5b4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d03e      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a92      	ldr	r2, [pc, #584]	@ (8005ab8 <HAL_UART_IRQHandler+0x5b8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d037      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a90      	ldr	r2, [pc, #576]	@ (8005abc <HAL_UART_IRQHandler+0x5bc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d030      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a8d      	ldr	r2, [pc, #564]	@ (8005ac0 <HAL_UART_IRQHandler+0x5c0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d029      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a8b      	ldr	r2, [pc, #556]	@ (8005ac4 <HAL_UART_IRQHandler+0x5c4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d022      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a88      	ldr	r2, [pc, #544]	@ (8005ac8 <HAL_UART_IRQHandler+0x5c8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a86      	ldr	r2, [pc, #536]	@ (8005acc <HAL_UART_IRQHandler+0x5cc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d014      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a83      	ldr	r2, [pc, #524]	@ (8005ad0 <HAL_UART_IRQHandler+0x5d0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00d      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a81      	ldr	r2, [pc, #516]	@ (8005ad4 <HAL_UART_IRQHandler+0x5d4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d006      	beq.n	80058e2 <HAL_UART_IRQHandler+0x3e2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a7e      	ldr	r2, [pc, #504]	@ (8005ad8 <HAL_UART_IRQHandler+0x5d8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d106      	bne.n	80058f0 <HAL_UART_IRQHandler+0x3f0>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	e005      	b.n	80058fc <HAL_UART_IRQHandler+0x3fc>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005900:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80ad 	beq.w	8005a64 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005910:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005914:	429a      	cmp	r2, r3
 8005916:	f080 80a5 	bcs.w	8005a64 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005920:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005930:	f000 8087 	beq.w	8005a42 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800594c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800595e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005962:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800596a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1da      	bne.n	8005934 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800598e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3308      	adds	r3, #8
 800599e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e1      	bne.n	800597e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e3      	bne.n	80059ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a10:	f023 0310 	bic.w	r3, r3, #16
 8005a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e4      	bne.n	8005a00 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fb fcd5 	bl	80013ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f939 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a62:	e119      	b.n	8005c98 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	f040 8112 	bne.w	8005c98 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a80:	f040 810a 	bne.w	8005c98 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f91e 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
      return;
 8005a98:	e0fe      	b.n	8005c98 <HAL_UART_IRQHandler+0x798>
 8005a9a:	bf00      	nop
 8005a9c:	40020010 	.word	0x40020010
 8005aa0:	40020028 	.word	0x40020028
 8005aa4:	40020040 	.word	0x40020040
 8005aa8:	40020058 	.word	0x40020058
 8005aac:	40020070 	.word	0x40020070
 8005ab0:	40020088 	.word	0x40020088
 8005ab4:	400200a0 	.word	0x400200a0
 8005ab8:	400200b8 	.word	0x400200b8
 8005abc:	40020410 	.word	0x40020410
 8005ac0:	40020428 	.word	0x40020428
 8005ac4:	40020440 	.word	0x40020440
 8005ac8:	40020458 	.word	0x40020458
 8005acc:	40020470 	.word	0x40020470
 8005ad0:	40020488 	.word	0x40020488
 8005ad4:	400204a0 	.word	0x400204a0
 8005ad8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80cf 	beq.w	8005c9c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 80ca 	beq.w	8005c9c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b2c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e4      	bne.n	8005b08 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	4b55      	ldr	r3, [pc, #340]	@ (8005ca8 <HAL_UART_IRQHandler+0x7a8>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e3      	bne.n	8005b3e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0310 	bic.w	r3, r3, #16
 8005b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	69b9      	ldr	r1, [r7, #24]
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e4      	bne.n	8005b8a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f881 	bl	8005cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bd2:	e063      	b.n	8005c9c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <HAL_UART_IRQHandler+0x6fe>
 8005be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005be4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 f941 	bl	8006e7e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bfc:	e051      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d014      	beq.n	8005c34 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d105      	bne.n	8005c22 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d03a      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
    }
    return;
 8005c32:	e035      	b.n	8005ca0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <HAL_UART_IRQHandler+0x754>
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 f8eb 	bl	8006e28 <UART_EndTransmit_IT>
    return;
 8005c52:	e026      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d009      	beq.n	8005c74 <HAL_UART_IRQHandler+0x774>
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c64:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f91a 	bl	8006ea6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c72:	e016      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d010      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
 8005c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	da0c      	bge.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 f902 	bl	8006e92 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c8e:	e008      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c90:	bf00      	nop
 8005c92:	e006      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005c94:	bf00      	nop
 8005c96:	e004      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c98:	bf00      	nop
 8005c9a:	e002      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c9c:	bf00      	nop
 8005c9e:	e000      	b.n	8005ca2 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005ca0:	bf00      	nop
  }
}
 8005ca2:	37e8      	adds	r7, #232	@ 0xe8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	effffffe 	.word	0xeffffffe

08005cac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf0:	b092      	sub	sp, #72	@ 0x48
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	431a      	orrs	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4bbe      	ldr	r3, [pc, #760]	@ (8006014 <UART_SetConfig+0x328>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4ab3      	ldr	r2, [pc, #716]	@ (8006018 <UART_SetConfig+0x32c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d54:	4313      	orrs	r3, r2
 8005d56:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	4baf      	ldr	r3, [pc, #700]	@ (800601c <UART_SetConfig+0x330>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	f023 010f 	bic.w	r1, r3, #15
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4aa6      	ldr	r2, [pc, #664]	@ (8006020 <UART_SetConfig+0x334>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d177      	bne.n	8005e7c <UART_SetConfig+0x190>
 8005d8c:	4ba5      	ldr	r3, [pc, #660]	@ (8006024 <UART_SetConfig+0x338>)
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d94:	2b28      	cmp	r3, #40	@ 0x28
 8005d96:	d86d      	bhi.n	8005e74 <UART_SetConfig+0x188>
 8005d98:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <UART_SetConfig+0xb4>)
 8005d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9e:	bf00      	nop
 8005da0:	08005e45 	.word	0x08005e45
 8005da4:	08005e75 	.word	0x08005e75
 8005da8:	08005e75 	.word	0x08005e75
 8005dac:	08005e75 	.word	0x08005e75
 8005db0:	08005e75 	.word	0x08005e75
 8005db4:	08005e75 	.word	0x08005e75
 8005db8:	08005e75 	.word	0x08005e75
 8005dbc:	08005e75 	.word	0x08005e75
 8005dc0:	08005e4d 	.word	0x08005e4d
 8005dc4:	08005e75 	.word	0x08005e75
 8005dc8:	08005e75 	.word	0x08005e75
 8005dcc:	08005e75 	.word	0x08005e75
 8005dd0:	08005e75 	.word	0x08005e75
 8005dd4:	08005e75 	.word	0x08005e75
 8005dd8:	08005e75 	.word	0x08005e75
 8005ddc:	08005e75 	.word	0x08005e75
 8005de0:	08005e55 	.word	0x08005e55
 8005de4:	08005e75 	.word	0x08005e75
 8005de8:	08005e75 	.word	0x08005e75
 8005dec:	08005e75 	.word	0x08005e75
 8005df0:	08005e75 	.word	0x08005e75
 8005df4:	08005e75 	.word	0x08005e75
 8005df8:	08005e75 	.word	0x08005e75
 8005dfc:	08005e75 	.word	0x08005e75
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005e75 	.word	0x08005e75
 8005e08:	08005e75 	.word	0x08005e75
 8005e0c:	08005e75 	.word	0x08005e75
 8005e10:	08005e75 	.word	0x08005e75
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e75 	.word	0x08005e75
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e65 	.word	0x08005e65
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e75 	.word	0x08005e75
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e326      	b.n	800649a <UART_SetConfig+0x7ae>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e322      	b.n	800649a <UART_SetConfig+0x7ae>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e31e      	b.n	800649a <UART_SetConfig+0x7ae>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e31a      	b.n	800649a <UART_SetConfig+0x7ae>
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e316      	b.n	800649a <UART_SetConfig+0x7ae>
 8005e6c:	2340      	movs	r3, #64	@ 0x40
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e312      	b.n	800649a <UART_SetConfig+0x7ae>
 8005e74:	2380      	movs	r3, #128	@ 0x80
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e30e      	b.n	800649a <UART_SetConfig+0x7ae>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a69      	ldr	r2, [pc, #420]	@ (8006028 <UART_SetConfig+0x33c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d130      	bne.n	8005ee8 <UART_SetConfig+0x1fc>
 8005e86:	4b67      	ldr	r3, [pc, #412]	@ (8006024 <UART_SetConfig+0x338>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d826      	bhi.n	8005ee0 <UART_SetConfig+0x1f4>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <UART_SetConfig+0x1ac>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005eb1 	.word	0x08005eb1
 8005e9c:	08005eb9 	.word	0x08005eb9
 8005ea0:	08005ec1 	.word	0x08005ec1
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e2f0      	b.n	800649a <UART_SetConfig+0x7ae>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e2ec      	b.n	800649a <UART_SetConfig+0x7ae>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e2e8      	b.n	800649a <UART_SetConfig+0x7ae>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e2e4      	b.n	800649a <UART_SetConfig+0x7ae>
 8005ed0:	2320      	movs	r3, #32
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e2e0      	b.n	800649a <UART_SetConfig+0x7ae>
 8005ed8:	2340      	movs	r3, #64	@ 0x40
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e2dc      	b.n	800649a <UART_SetConfig+0x7ae>
 8005ee0:	2380      	movs	r3, #128	@ 0x80
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e2d8      	b.n	800649a <UART_SetConfig+0x7ae>
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a4f      	ldr	r2, [pc, #316]	@ (800602c <UART_SetConfig+0x340>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d130      	bne.n	8005f54 <UART_SetConfig+0x268>
 8005ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8006024 <UART_SetConfig+0x338>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b05      	cmp	r3, #5
 8005efc:	d826      	bhi.n	8005f4c <UART_SetConfig+0x260>
 8005efe:	a201      	add	r2, pc, #4	@ (adr r2, 8005f04 <UART_SetConfig+0x218>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005f1d 	.word	0x08005f1d
 8005f08:	08005f25 	.word	0x08005f25
 8005f0c:	08005f2d 	.word	0x08005f2d
 8005f10:	08005f35 	.word	0x08005f35
 8005f14:	08005f3d 	.word	0x08005f3d
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e2ba      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e2b6      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e2b2      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e2ae      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e2aa      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f44:	2340      	movs	r3, #64	@ 0x40
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e2a6      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f4c:	2380      	movs	r3, #128	@ 0x80
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e2a2      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a35      	ldr	r2, [pc, #212]	@ (8006030 <UART_SetConfig+0x344>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d130      	bne.n	8005fc0 <UART_SetConfig+0x2d4>
 8005f5e:	4b31      	ldr	r3, [pc, #196]	@ (8006024 <UART_SetConfig+0x338>)
 8005f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d826      	bhi.n	8005fb8 <UART_SetConfig+0x2cc>
 8005f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f70 <UART_SetConfig+0x284>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e284      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e280      	b.n	800649a <UART_SetConfig+0x7ae>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e27c      	b.n	800649a <UART_SetConfig+0x7ae>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e278      	b.n	800649a <UART_SetConfig+0x7ae>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e274      	b.n	800649a <UART_SetConfig+0x7ae>
 8005fb0:	2340      	movs	r3, #64	@ 0x40
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e270      	b.n	800649a <UART_SetConfig+0x7ae>
 8005fb8:	2380      	movs	r3, #128	@ 0x80
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e26c      	b.n	800649a <UART_SetConfig+0x7ae>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006034 <UART_SetConfig+0x348>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d142      	bne.n	8006050 <UART_SetConfig+0x364>
 8005fca:	4b16      	ldr	r3, [pc, #88]	@ (8006024 <UART_SetConfig+0x338>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d838      	bhi.n	8006048 <UART_SetConfig+0x35c>
 8005fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <UART_SetConfig+0x2f0>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005ff5 	.word	0x08005ff5
 8005fe0:	08005ffd 	.word	0x08005ffd
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006039 	.word	0x08006039
 8005ff0:	08006041 	.word	0x08006041
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e24e      	b.n	800649a <UART_SetConfig+0x7ae>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e24a      	b.n	800649a <UART_SetConfig+0x7ae>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600a:	e246      	b.n	800649a <UART_SetConfig+0x7ae>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006012:	e242      	b.n	800649a <UART_SetConfig+0x7ae>
 8006014:	cfff69f3 	.word	0xcfff69f3
 8006018:	58000c00 	.word	0x58000c00
 800601c:	11fff4ff 	.word	0x11fff4ff
 8006020:	40011000 	.word	0x40011000
 8006024:	58024400 	.word	0x58024400
 8006028:	40004400 	.word	0x40004400
 800602c:	40004800 	.word	0x40004800
 8006030:	40004c00 	.word	0x40004c00
 8006034:	40005000 	.word	0x40005000
 8006038:	2320      	movs	r3, #32
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603e:	e22c      	b.n	800649a <UART_SetConfig+0x7ae>
 8006040:	2340      	movs	r3, #64	@ 0x40
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e228      	b.n	800649a <UART_SetConfig+0x7ae>
 8006048:	2380      	movs	r3, #128	@ 0x80
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e224      	b.n	800649a <UART_SetConfig+0x7ae>
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4ab1      	ldr	r2, [pc, #708]	@ (800631c <UART_SetConfig+0x630>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d176      	bne.n	8006148 <UART_SetConfig+0x45c>
 800605a:	4bb1      	ldr	r3, [pc, #708]	@ (8006320 <UART_SetConfig+0x634>)
 800605c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006062:	2b28      	cmp	r3, #40	@ 0x28
 8006064:	d86c      	bhi.n	8006140 <UART_SetConfig+0x454>
 8006066:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <UART_SetConfig+0x380>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006111 	.word	0x08006111
 8006070:	08006141 	.word	0x08006141
 8006074:	08006141 	.word	0x08006141
 8006078:	08006141 	.word	0x08006141
 800607c:	08006141 	.word	0x08006141
 8006080:	08006141 	.word	0x08006141
 8006084:	08006141 	.word	0x08006141
 8006088:	08006141 	.word	0x08006141
 800608c:	08006119 	.word	0x08006119
 8006090:	08006141 	.word	0x08006141
 8006094:	08006141 	.word	0x08006141
 8006098:	08006141 	.word	0x08006141
 800609c:	08006141 	.word	0x08006141
 80060a0:	08006141 	.word	0x08006141
 80060a4:	08006141 	.word	0x08006141
 80060a8:	08006141 	.word	0x08006141
 80060ac:	08006121 	.word	0x08006121
 80060b0:	08006141 	.word	0x08006141
 80060b4:	08006141 	.word	0x08006141
 80060b8:	08006141 	.word	0x08006141
 80060bc:	08006141 	.word	0x08006141
 80060c0:	08006141 	.word	0x08006141
 80060c4:	08006141 	.word	0x08006141
 80060c8:	08006141 	.word	0x08006141
 80060cc:	08006129 	.word	0x08006129
 80060d0:	08006141 	.word	0x08006141
 80060d4:	08006141 	.word	0x08006141
 80060d8:	08006141 	.word	0x08006141
 80060dc:	08006141 	.word	0x08006141
 80060e0:	08006141 	.word	0x08006141
 80060e4:	08006141 	.word	0x08006141
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006131 	.word	0x08006131
 80060f0:	08006141 	.word	0x08006141
 80060f4:	08006141 	.word	0x08006141
 80060f8:	08006141 	.word	0x08006141
 80060fc:	08006141 	.word	0x08006141
 8006100:	08006141 	.word	0x08006141
 8006104:	08006141 	.word	0x08006141
 8006108:	08006141 	.word	0x08006141
 800610c:	08006139 	.word	0x08006139
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e1c0      	b.n	800649a <UART_SetConfig+0x7ae>
 8006118:	2304      	movs	r3, #4
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e1bc      	b.n	800649a <UART_SetConfig+0x7ae>
 8006120:	2308      	movs	r3, #8
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006126:	e1b8      	b.n	800649a <UART_SetConfig+0x7ae>
 8006128:	2310      	movs	r3, #16
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612e:	e1b4      	b.n	800649a <UART_SetConfig+0x7ae>
 8006130:	2320      	movs	r3, #32
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e1b0      	b.n	800649a <UART_SetConfig+0x7ae>
 8006138:	2340      	movs	r3, #64	@ 0x40
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e1ac      	b.n	800649a <UART_SetConfig+0x7ae>
 8006140:	2380      	movs	r3, #128	@ 0x80
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e1a8      	b.n	800649a <UART_SetConfig+0x7ae>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a75      	ldr	r2, [pc, #468]	@ (8006324 <UART_SetConfig+0x638>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d130      	bne.n	80061b4 <UART_SetConfig+0x4c8>
 8006152:	4b73      	ldr	r3, [pc, #460]	@ (8006320 <UART_SetConfig+0x634>)
 8006154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	2b05      	cmp	r3, #5
 800615c:	d826      	bhi.n	80061ac <UART_SetConfig+0x4c0>
 800615e:	a201      	add	r2, pc, #4	@ (adr r2, 8006164 <UART_SetConfig+0x478>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	0800617d 	.word	0x0800617d
 8006168:	08006185 	.word	0x08006185
 800616c:	0800618d 	.word	0x0800618d
 8006170:	08006195 	.word	0x08006195
 8006174:	0800619d 	.word	0x0800619d
 8006178:	080061a5 	.word	0x080061a5
 800617c:	2300      	movs	r3, #0
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e18a      	b.n	800649a <UART_SetConfig+0x7ae>
 8006184:	2304      	movs	r3, #4
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e186      	b.n	800649a <UART_SetConfig+0x7ae>
 800618c:	2308      	movs	r3, #8
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006192:	e182      	b.n	800649a <UART_SetConfig+0x7ae>
 8006194:	2310      	movs	r3, #16
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619a:	e17e      	b.n	800649a <UART_SetConfig+0x7ae>
 800619c:	2320      	movs	r3, #32
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e17a      	b.n	800649a <UART_SetConfig+0x7ae>
 80061a4:	2340      	movs	r3, #64	@ 0x40
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e176      	b.n	800649a <UART_SetConfig+0x7ae>
 80061ac:	2380      	movs	r3, #128	@ 0x80
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e172      	b.n	800649a <UART_SetConfig+0x7ae>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5b      	ldr	r2, [pc, #364]	@ (8006328 <UART_SetConfig+0x63c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d130      	bne.n	8006220 <UART_SetConfig+0x534>
 80061be:	4b58      	ldr	r3, [pc, #352]	@ (8006320 <UART_SetConfig+0x634>)
 80061c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	2b05      	cmp	r3, #5
 80061c8:	d826      	bhi.n	8006218 <UART_SetConfig+0x52c>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <UART_SetConfig+0x4e4>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061e9 	.word	0x080061e9
 80061d4:	080061f1 	.word	0x080061f1
 80061d8:	080061f9 	.word	0x080061f9
 80061dc:	08006201 	.word	0x08006201
 80061e0:	08006209 	.word	0x08006209
 80061e4:	08006211 	.word	0x08006211
 80061e8:	2300      	movs	r3, #0
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e154      	b.n	800649a <UART_SetConfig+0x7ae>
 80061f0:	2304      	movs	r3, #4
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e150      	b.n	800649a <UART_SetConfig+0x7ae>
 80061f8:	2308      	movs	r3, #8
 80061fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fe:	e14c      	b.n	800649a <UART_SetConfig+0x7ae>
 8006200:	2310      	movs	r3, #16
 8006202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006206:	e148      	b.n	800649a <UART_SetConfig+0x7ae>
 8006208:	2320      	movs	r3, #32
 800620a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800620e:	e144      	b.n	800649a <UART_SetConfig+0x7ae>
 8006210:	2340      	movs	r3, #64	@ 0x40
 8006212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006216:	e140      	b.n	800649a <UART_SetConfig+0x7ae>
 8006218:	2380      	movs	r3, #128	@ 0x80
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e13c      	b.n	800649a <UART_SetConfig+0x7ae>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a41      	ldr	r2, [pc, #260]	@ (800632c <UART_SetConfig+0x640>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f040 8082 	bne.w	8006330 <UART_SetConfig+0x644>
 800622c:	4b3c      	ldr	r3, [pc, #240]	@ (8006320 <UART_SetConfig+0x634>)
 800622e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006230:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006234:	2b28      	cmp	r3, #40	@ 0x28
 8006236:	d86d      	bhi.n	8006314 <UART_SetConfig+0x628>
 8006238:	a201      	add	r2, pc, #4	@ (adr r2, 8006240 <UART_SetConfig+0x554>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	080062e5 	.word	0x080062e5
 8006244:	08006315 	.word	0x08006315
 8006248:	08006315 	.word	0x08006315
 800624c:	08006315 	.word	0x08006315
 8006250:	08006315 	.word	0x08006315
 8006254:	08006315 	.word	0x08006315
 8006258:	08006315 	.word	0x08006315
 800625c:	08006315 	.word	0x08006315
 8006260:	080062ed 	.word	0x080062ed
 8006264:	08006315 	.word	0x08006315
 8006268:	08006315 	.word	0x08006315
 800626c:	08006315 	.word	0x08006315
 8006270:	08006315 	.word	0x08006315
 8006274:	08006315 	.word	0x08006315
 8006278:	08006315 	.word	0x08006315
 800627c:	08006315 	.word	0x08006315
 8006280:	080062f5 	.word	0x080062f5
 8006284:	08006315 	.word	0x08006315
 8006288:	08006315 	.word	0x08006315
 800628c:	08006315 	.word	0x08006315
 8006290:	08006315 	.word	0x08006315
 8006294:	08006315 	.word	0x08006315
 8006298:	08006315 	.word	0x08006315
 800629c:	08006315 	.word	0x08006315
 80062a0:	080062fd 	.word	0x080062fd
 80062a4:	08006315 	.word	0x08006315
 80062a8:	08006315 	.word	0x08006315
 80062ac:	08006315 	.word	0x08006315
 80062b0:	08006315 	.word	0x08006315
 80062b4:	08006315 	.word	0x08006315
 80062b8:	08006315 	.word	0x08006315
 80062bc:	08006315 	.word	0x08006315
 80062c0:	08006305 	.word	0x08006305
 80062c4:	08006315 	.word	0x08006315
 80062c8:	08006315 	.word	0x08006315
 80062cc:	08006315 	.word	0x08006315
 80062d0:	08006315 	.word	0x08006315
 80062d4:	08006315 	.word	0x08006315
 80062d8:	08006315 	.word	0x08006315
 80062dc:	08006315 	.word	0x08006315
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ea:	e0d6      	b.n	800649a <UART_SetConfig+0x7ae>
 80062ec:	2304      	movs	r3, #4
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f2:	e0d2      	b.n	800649a <UART_SetConfig+0x7ae>
 80062f4:	2308      	movs	r3, #8
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fa:	e0ce      	b.n	800649a <UART_SetConfig+0x7ae>
 80062fc:	2310      	movs	r3, #16
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006302:	e0ca      	b.n	800649a <UART_SetConfig+0x7ae>
 8006304:	2320      	movs	r3, #32
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630a:	e0c6      	b.n	800649a <UART_SetConfig+0x7ae>
 800630c:	2340      	movs	r3, #64	@ 0x40
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006312:	e0c2      	b.n	800649a <UART_SetConfig+0x7ae>
 8006314:	2380      	movs	r3, #128	@ 0x80
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631a:	e0be      	b.n	800649a <UART_SetConfig+0x7ae>
 800631c:	40011400 	.word	0x40011400
 8006320:	58024400 	.word	0x58024400
 8006324:	40007800 	.word	0x40007800
 8006328:	40007c00 	.word	0x40007c00
 800632c:	40011800 	.word	0x40011800
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4aad      	ldr	r2, [pc, #692]	@ (80065ec <UART_SetConfig+0x900>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d176      	bne.n	8006428 <UART_SetConfig+0x73c>
 800633a:	4bad      	ldr	r3, [pc, #692]	@ (80065f0 <UART_SetConfig+0x904>)
 800633c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800633e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006342:	2b28      	cmp	r3, #40	@ 0x28
 8006344:	d86c      	bhi.n	8006420 <UART_SetConfig+0x734>
 8006346:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <UART_SetConfig+0x660>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	080063f1 	.word	0x080063f1
 8006350:	08006421 	.word	0x08006421
 8006354:	08006421 	.word	0x08006421
 8006358:	08006421 	.word	0x08006421
 800635c:	08006421 	.word	0x08006421
 8006360:	08006421 	.word	0x08006421
 8006364:	08006421 	.word	0x08006421
 8006368:	08006421 	.word	0x08006421
 800636c:	080063f9 	.word	0x080063f9
 8006370:	08006421 	.word	0x08006421
 8006374:	08006421 	.word	0x08006421
 8006378:	08006421 	.word	0x08006421
 800637c:	08006421 	.word	0x08006421
 8006380:	08006421 	.word	0x08006421
 8006384:	08006421 	.word	0x08006421
 8006388:	08006421 	.word	0x08006421
 800638c:	08006401 	.word	0x08006401
 8006390:	08006421 	.word	0x08006421
 8006394:	08006421 	.word	0x08006421
 8006398:	08006421 	.word	0x08006421
 800639c:	08006421 	.word	0x08006421
 80063a0:	08006421 	.word	0x08006421
 80063a4:	08006421 	.word	0x08006421
 80063a8:	08006421 	.word	0x08006421
 80063ac:	08006409 	.word	0x08006409
 80063b0:	08006421 	.word	0x08006421
 80063b4:	08006421 	.word	0x08006421
 80063b8:	08006421 	.word	0x08006421
 80063bc:	08006421 	.word	0x08006421
 80063c0:	08006421 	.word	0x08006421
 80063c4:	08006421 	.word	0x08006421
 80063c8:	08006421 	.word	0x08006421
 80063cc:	08006411 	.word	0x08006411
 80063d0:	08006421 	.word	0x08006421
 80063d4:	08006421 	.word	0x08006421
 80063d8:	08006421 	.word	0x08006421
 80063dc:	08006421 	.word	0x08006421
 80063e0:	08006421 	.word	0x08006421
 80063e4:	08006421 	.word	0x08006421
 80063e8:	08006421 	.word	0x08006421
 80063ec:	08006419 	.word	0x08006419
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e050      	b.n	800649a <UART_SetConfig+0x7ae>
 80063f8:	2304      	movs	r3, #4
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063fe:	e04c      	b.n	800649a <UART_SetConfig+0x7ae>
 8006400:	2308      	movs	r3, #8
 8006402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006406:	e048      	b.n	800649a <UART_SetConfig+0x7ae>
 8006408:	2310      	movs	r3, #16
 800640a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800640e:	e044      	b.n	800649a <UART_SetConfig+0x7ae>
 8006410:	2320      	movs	r3, #32
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e040      	b.n	800649a <UART_SetConfig+0x7ae>
 8006418:	2340      	movs	r3, #64	@ 0x40
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e03c      	b.n	800649a <UART_SetConfig+0x7ae>
 8006420:	2380      	movs	r3, #128	@ 0x80
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e038      	b.n	800649a <UART_SetConfig+0x7ae>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a71      	ldr	r2, [pc, #452]	@ (80065f4 <UART_SetConfig+0x908>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d130      	bne.n	8006494 <UART_SetConfig+0x7a8>
 8006432:	4b6f      	ldr	r3, [pc, #444]	@ (80065f0 <UART_SetConfig+0x904>)
 8006434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006436:	f003 0307 	and.w	r3, r3, #7
 800643a:	2b05      	cmp	r3, #5
 800643c:	d826      	bhi.n	800648c <UART_SetConfig+0x7a0>
 800643e:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <UART_SetConfig+0x758>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	0800645d 	.word	0x0800645d
 8006448:	08006465 	.word	0x08006465
 800644c:	0800646d 	.word	0x0800646d
 8006450:	08006475 	.word	0x08006475
 8006454:	0800647d 	.word	0x0800647d
 8006458:	08006485 	.word	0x08006485
 800645c:	2302      	movs	r3, #2
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006462:	e01a      	b.n	800649a <UART_SetConfig+0x7ae>
 8006464:	2304      	movs	r3, #4
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800646a:	e016      	b.n	800649a <UART_SetConfig+0x7ae>
 800646c:	2308      	movs	r3, #8
 800646e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006472:	e012      	b.n	800649a <UART_SetConfig+0x7ae>
 8006474:	2310      	movs	r3, #16
 8006476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647a:	e00e      	b.n	800649a <UART_SetConfig+0x7ae>
 800647c:	2320      	movs	r3, #32
 800647e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006482:	e00a      	b.n	800649a <UART_SetConfig+0x7ae>
 8006484:	2340      	movs	r3, #64	@ 0x40
 8006486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648a:	e006      	b.n	800649a <UART_SetConfig+0x7ae>
 800648c:	2380      	movs	r3, #128	@ 0x80
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006492:	e002      	b.n	800649a <UART_SetConfig+0x7ae>
 8006494:	2380      	movs	r3, #128	@ 0x80
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a55      	ldr	r2, [pc, #340]	@ (80065f4 <UART_SetConfig+0x908>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	f040 80f8 	bne.w	8006696 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	dc46      	bgt.n	800653c <UART_SetConfig+0x850>
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	db75      	blt.n	800659e <UART_SetConfig+0x8b2>
 80064b2:	3b02      	subs	r3, #2
 80064b4:	2b1e      	cmp	r3, #30
 80064b6:	d872      	bhi.n	800659e <UART_SetConfig+0x8b2>
 80064b8:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <UART_SetConfig+0x7d4>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	08006543 	.word	0x08006543
 80064c4:	0800659f 	.word	0x0800659f
 80064c8:	0800654b 	.word	0x0800654b
 80064cc:	0800659f 	.word	0x0800659f
 80064d0:	0800659f 	.word	0x0800659f
 80064d4:	0800659f 	.word	0x0800659f
 80064d8:	0800655b 	.word	0x0800655b
 80064dc:	0800659f 	.word	0x0800659f
 80064e0:	0800659f 	.word	0x0800659f
 80064e4:	0800659f 	.word	0x0800659f
 80064e8:	0800659f 	.word	0x0800659f
 80064ec:	0800659f 	.word	0x0800659f
 80064f0:	0800659f 	.word	0x0800659f
 80064f4:	0800659f 	.word	0x0800659f
 80064f8:	0800656b 	.word	0x0800656b
 80064fc:	0800659f 	.word	0x0800659f
 8006500:	0800659f 	.word	0x0800659f
 8006504:	0800659f 	.word	0x0800659f
 8006508:	0800659f 	.word	0x0800659f
 800650c:	0800659f 	.word	0x0800659f
 8006510:	0800659f 	.word	0x0800659f
 8006514:	0800659f 	.word	0x0800659f
 8006518:	0800659f 	.word	0x0800659f
 800651c:	0800659f 	.word	0x0800659f
 8006520:	0800659f 	.word	0x0800659f
 8006524:	0800659f 	.word	0x0800659f
 8006528:	0800659f 	.word	0x0800659f
 800652c:	0800659f 	.word	0x0800659f
 8006530:	0800659f 	.word	0x0800659f
 8006534:	0800659f 	.word	0x0800659f
 8006538:	08006591 	.word	0x08006591
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	d02a      	beq.n	8006596 <UART_SetConfig+0x8aa>
 8006540:	e02d      	b.n	800659e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006542:	f7fd fffb 	bl	800453c <HAL_RCCEx_GetD3PCLK1Freq>
 8006546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006548:	e02f      	b.n	80065aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800654a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe f80a 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006558:	e027      	b.n	80065aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800655a:	f107 0318 	add.w	r3, r7, #24
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe f956 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006568:	e01f      	b.n	80065aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800656a:	4b21      	ldr	r3, [pc, #132]	@ (80065f0 <UART_SetConfig+0x904>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006576:	4b1e      	ldr	r3, [pc, #120]	@ (80065f0 <UART_SetConfig+0x904>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	4a1d      	ldr	r2, [pc, #116]	@ (80065f8 <UART_SetConfig+0x90c>)
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006588:	e00f      	b.n	80065aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800658a:	4b1b      	ldr	r3, [pc, #108]	@ (80065f8 <UART_SetConfig+0x90c>)
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800658e:	e00c      	b.n	80065aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006590:	4b1a      	ldr	r3, [pc, #104]	@ (80065fc <UART_SetConfig+0x910>)
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006594:	e009      	b.n	80065aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800659c:	e005      	b.n	80065aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 81ee 	beq.w	800698e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	4a12      	ldr	r2, [pc, #72]	@ (8006600 <UART_SetConfig+0x914>)
 80065b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065bc:	461a      	mov	r2, r3
 80065be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065c4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	4413      	add	r3, r2
 80065d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d305      	bcc.n	80065e2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065de:	429a      	cmp	r2, r3
 80065e0:	d910      	bls.n	8006604 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065e8:	e1d1      	b.n	800698e <UART_SetConfig+0xca2>
 80065ea:	bf00      	nop
 80065ec:	40011c00 	.word	0x40011c00
 80065f0:	58024400 	.word	0x58024400
 80065f4:	58000c00 	.word	0x58000c00
 80065f8:	03d09000 	.word	0x03d09000
 80065fc:	003d0900 	.word	0x003d0900
 8006600:	0800a740 	.word	0x0800a740
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006606:	2200      	movs	r2, #0
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	60fa      	str	r2, [r7, #12]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	4ac0      	ldr	r2, [pc, #768]	@ (8006914 <UART_SetConfig+0xc28>)
 8006612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006616:	b29b      	uxth	r3, r3
 8006618:	2200      	movs	r2, #0
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	607a      	str	r2, [r7, #4]
 800661e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006626:	f7f9 fecb 	bl	80003c0 <__aeabi_uldivmod>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	020b      	lsls	r3, r1, #8
 800663c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006640:	0202      	lsls	r2, r0, #8
 8006642:	6979      	ldr	r1, [r7, #20]
 8006644:	6849      	ldr	r1, [r1, #4]
 8006646:	0849      	lsrs	r1, r1, #1
 8006648:	2000      	movs	r0, #0
 800664a:	460c      	mov	r4, r1
 800664c:	4605      	mov	r5, r0
 800664e:	eb12 0804 	adds.w	r8, r2, r4
 8006652:	eb43 0905 	adc.w	r9, r3, r5
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	469a      	mov	sl, r3
 800665e:	4693      	mov	fp, r2
 8006660:	4652      	mov	r2, sl
 8006662:	465b      	mov	r3, fp
 8006664:	4640      	mov	r0, r8
 8006666:	4649      	mov	r1, r9
 8006668:	f7f9 feaa 	bl	80003c0 <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4613      	mov	r3, r2
 8006672:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006676:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800667a:	d308      	bcc.n	800668e <UART_SetConfig+0x9a2>
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006682:	d204      	bcs.n	800668e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800668a:	60da      	str	r2, [r3, #12]
 800668c:	e17f      	b.n	800698e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006694:	e17b      	b.n	800698e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800669e:	f040 80bd 	bne.w	800681c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80066a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	dc48      	bgt.n	800673c <UART_SetConfig+0xa50>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	db7b      	blt.n	80067a6 <UART_SetConfig+0xaba>
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d879      	bhi.n	80067a6 <UART_SetConfig+0xaba>
 80066b2:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <UART_SetConfig+0x9cc>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	08006743 	.word	0x08006743
 80066bc:	0800674b 	.word	0x0800674b
 80066c0:	080067a7 	.word	0x080067a7
 80066c4:	080067a7 	.word	0x080067a7
 80066c8:	08006753 	.word	0x08006753
 80066cc:	080067a7 	.word	0x080067a7
 80066d0:	080067a7 	.word	0x080067a7
 80066d4:	080067a7 	.word	0x080067a7
 80066d8:	08006763 	.word	0x08006763
 80066dc:	080067a7 	.word	0x080067a7
 80066e0:	080067a7 	.word	0x080067a7
 80066e4:	080067a7 	.word	0x080067a7
 80066e8:	080067a7 	.word	0x080067a7
 80066ec:	080067a7 	.word	0x080067a7
 80066f0:	080067a7 	.word	0x080067a7
 80066f4:	080067a7 	.word	0x080067a7
 80066f8:	08006773 	.word	0x08006773
 80066fc:	080067a7 	.word	0x080067a7
 8006700:	080067a7 	.word	0x080067a7
 8006704:	080067a7 	.word	0x080067a7
 8006708:	080067a7 	.word	0x080067a7
 800670c:	080067a7 	.word	0x080067a7
 8006710:	080067a7 	.word	0x080067a7
 8006714:	080067a7 	.word	0x080067a7
 8006718:	080067a7 	.word	0x080067a7
 800671c:	080067a7 	.word	0x080067a7
 8006720:	080067a7 	.word	0x080067a7
 8006724:	080067a7 	.word	0x080067a7
 8006728:	080067a7 	.word	0x080067a7
 800672c:	080067a7 	.word	0x080067a7
 8006730:	080067a7 	.word	0x080067a7
 8006734:	080067a7 	.word	0x080067a7
 8006738:	08006799 	.word	0x08006799
 800673c:	2b40      	cmp	r3, #64	@ 0x40
 800673e:	d02e      	beq.n	800679e <UART_SetConfig+0xab2>
 8006740:	e031      	b.n	80067a6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006742:	f7fc fced 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 8006746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006748:	e033      	b.n	80067b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674a:	f7fc fcff 	bl	800314c <HAL_RCC_GetPCLK2Freq>
 800674e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006750:	e02f      	b.n	80067b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006756:	4618      	mov	r0, r3
 8006758:	f7fd ff06 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006760:	e027      	b.n	80067b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006762:	f107 0318 	add.w	r3, r7, #24
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe f852 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006770:	e01f      	b.n	80067b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006772:	4b69      	ldr	r3, [pc, #420]	@ (8006918 <UART_SetConfig+0xc2c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800677e:	4b66      	ldr	r3, [pc, #408]	@ (8006918 <UART_SetConfig+0xc2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	08db      	lsrs	r3, r3, #3
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	4a64      	ldr	r2, [pc, #400]	@ (800691c <UART_SetConfig+0xc30>)
 800678a:	fa22 f303 	lsr.w	r3, r2, r3
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006790:	e00f      	b.n	80067b2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006792:	4b62      	ldr	r3, [pc, #392]	@ (800691c <UART_SetConfig+0xc30>)
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006796:	e00c      	b.n	80067b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006798:	4b61      	ldr	r3, [pc, #388]	@ (8006920 <UART_SetConfig+0xc34>)
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800679c:	e009      	b.n	80067b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a4:	e005      	b.n	80067b2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80067b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80ea 	beq.w	800698e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	4a55      	ldr	r2, [pc, #340]	@ (8006914 <UART_SetConfig+0xc28>)
 80067c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067cc:	005a      	lsls	r2, r3, #1
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	441a      	add	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	fbb2 f3f3 	udiv	r3, r2, r3
 80067de:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d916      	bls.n	8006814 <UART_SetConfig+0xb28>
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ec:	d212      	bcs.n	8006814 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f023 030f 	bic.w	r3, r3, #15
 80067f6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	b29a      	uxth	r2, r3
 8006804:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006806:	4313      	orrs	r3, r2
 8006808:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006810:	60da      	str	r2, [r3, #12]
 8006812:	e0bc      	b.n	800698e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800681a:	e0b8      	b.n	800698e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800681c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006820:	2b20      	cmp	r3, #32
 8006822:	dc4b      	bgt.n	80068bc <UART_SetConfig+0xbd0>
 8006824:	2b00      	cmp	r3, #0
 8006826:	f2c0 8087 	blt.w	8006938 <UART_SetConfig+0xc4c>
 800682a:	2b20      	cmp	r3, #32
 800682c:	f200 8084 	bhi.w	8006938 <UART_SetConfig+0xc4c>
 8006830:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <UART_SetConfig+0xb4c>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	080068c3 	.word	0x080068c3
 800683c:	080068cb 	.word	0x080068cb
 8006840:	08006939 	.word	0x08006939
 8006844:	08006939 	.word	0x08006939
 8006848:	080068d3 	.word	0x080068d3
 800684c:	08006939 	.word	0x08006939
 8006850:	08006939 	.word	0x08006939
 8006854:	08006939 	.word	0x08006939
 8006858:	080068e3 	.word	0x080068e3
 800685c:	08006939 	.word	0x08006939
 8006860:	08006939 	.word	0x08006939
 8006864:	08006939 	.word	0x08006939
 8006868:	08006939 	.word	0x08006939
 800686c:	08006939 	.word	0x08006939
 8006870:	08006939 	.word	0x08006939
 8006874:	08006939 	.word	0x08006939
 8006878:	080068f3 	.word	0x080068f3
 800687c:	08006939 	.word	0x08006939
 8006880:	08006939 	.word	0x08006939
 8006884:	08006939 	.word	0x08006939
 8006888:	08006939 	.word	0x08006939
 800688c:	08006939 	.word	0x08006939
 8006890:	08006939 	.word	0x08006939
 8006894:	08006939 	.word	0x08006939
 8006898:	08006939 	.word	0x08006939
 800689c:	08006939 	.word	0x08006939
 80068a0:	08006939 	.word	0x08006939
 80068a4:	08006939 	.word	0x08006939
 80068a8:	08006939 	.word	0x08006939
 80068ac:	08006939 	.word	0x08006939
 80068b0:	08006939 	.word	0x08006939
 80068b4:	08006939 	.word	0x08006939
 80068b8:	0800692b 	.word	0x0800692b
 80068bc:	2b40      	cmp	r3, #64	@ 0x40
 80068be:	d037      	beq.n	8006930 <UART_SetConfig+0xc44>
 80068c0:	e03a      	b.n	8006938 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c2:	f7fc fc2d 	bl	8003120 <HAL_RCC_GetPCLK1Freq>
 80068c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068c8:	e03c      	b.n	8006944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068ca:	f7fc fc3f 	bl	800314c <HAL_RCC_GetPCLK2Freq>
 80068ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80068d0:	e038      	b.n	8006944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fd fe46 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e0:	e030      	b.n	8006944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e2:	f107 0318 	add.w	r3, r7, #24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fd ff92 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068f0:	e028      	b.n	8006944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068f2:	4b09      	ldr	r3, [pc, #36]	@ (8006918 <UART_SetConfig+0xc2c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0320 	and.w	r3, r3, #32
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d012      	beq.n	8006924 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068fe:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <UART_SetConfig+0xc2c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	08db      	lsrs	r3, r3, #3
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	4a04      	ldr	r2, [pc, #16]	@ (800691c <UART_SetConfig+0xc30>)
 800690a:	fa22 f303 	lsr.w	r3, r2, r3
 800690e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006910:	e018      	b.n	8006944 <UART_SetConfig+0xc58>
 8006912:	bf00      	nop
 8006914:	0800a740 	.word	0x0800a740
 8006918:	58024400 	.word	0x58024400
 800691c:	03d09000 	.word	0x03d09000
 8006920:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006924:	4b24      	ldr	r3, [pc, #144]	@ (80069b8 <UART_SetConfig+0xccc>)
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006928:	e00c      	b.n	8006944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800692a:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <UART_SetConfig+0xcd0>)
 800692c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800692e:	e009      	b.n	8006944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006936:	e005      	b.n	8006944 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006942:	bf00      	nop
    }

    if (pclk != 0U)
 8006944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d021      	beq.n	800698e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	4a1c      	ldr	r2, [pc, #112]	@ (80069c0 <UART_SetConfig+0xcd4>)
 8006950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006954:	461a      	mov	r2, r3
 8006956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006958:	fbb3 f2f2 	udiv	r2, r3, r2
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	441a      	add	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	fbb2 f3f3 	udiv	r3, r2, r3
 800696c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800696e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006970:	2b0f      	cmp	r3, #15
 8006972:	d909      	bls.n	8006988 <UART_SetConfig+0xc9c>
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697a:	d205      	bcs.n	8006988 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	b29a      	uxth	r2, r3
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60da      	str	r2, [r3, #12]
 8006986:	e002      	b.n	800698e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2201      	movs	r2, #1
 8006992:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2201      	movs	r2, #1
 800699a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2200      	movs	r2, #0
 80069a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80069aa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3748      	adds	r7, #72	@ 0x48
 80069b2:	46bd      	mov	sp, r7
 80069b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069b8:	03d09000 	.word	0x03d09000
 80069bc:	003d0900 	.word	0x003d0900
 80069c0:	0800a740 	.word	0x0800a740

080069c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	430a      	orrs	r2, r1
 8006a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01a      	beq.n	8006ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006abe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ac2:	d10a      	bne.n	8006ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b098      	sub	sp, #96	@ 0x60
 8006b0c:	af02      	add	r7, sp, #8
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b18:	f7fa fb04 	bl	8001124 <HAL_GetTick>
 8006b1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d12f      	bne.n	8006b8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b34:	2200      	movs	r2, #0
 8006b36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f88e 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d022      	beq.n	8006b8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b64:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e063      	b.n	8006c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d149      	bne.n	8006c2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f857 	bl	8006c5c <UART_WaitOnFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d03c      	beq.n	8006c2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e6      	bne.n	8006bb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3308      	adds	r3, #8
 8006bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	e853 3f00 	ldrex	r3, [r3]
 8006bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 0301 	bic.w	r3, r3, #1
 8006bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3308      	adds	r3, #8
 8006c04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c06:	61fa      	str	r2, [r7, #28]
 8006c08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	69b9      	ldr	r1, [r7, #24]
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	617b      	str	r3, [r7, #20]
   return(result);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e5      	bne.n	8006be6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e012      	b.n	8006c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3758      	adds	r7, #88	@ 0x58
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6c:	e04f      	b.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d04b      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c76:	f7fa fa55 	bl	8001124 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d302      	bcc.n	8006c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e04e      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d037      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b80      	cmp	r3, #128	@ 0x80
 8006ca2:	d034      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b40      	cmp	r3, #64	@ 0x40
 8006ca8:	d031      	beq.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d110      	bne.n	8006cda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f839 	bl	8006d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e029      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ce8:	d111      	bne.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f81f 	bl	8006d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e00f      	b.n	8006d2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4013      	ands	r3, r2
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	bf0c      	ite	eq
 8006d1e:	2301      	moveq	r3, #1
 8006d20:	2300      	movne	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	79fb      	ldrb	r3, [r7, #7]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d0a0      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
	...

08006d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b095      	sub	sp, #84	@ 0x54
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d48:	e853 3f00 	ldrex	r3, [r3]
 8006d4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e6      	bne.n	8006d40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	4b1e      	ldr	r3, [pc, #120]	@ (8006e00 <UART_EndRxTransfer+0xc8>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3308      	adds	r3, #8
 8006d90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d118      	bne.n	8006de0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f023 0310 	bic.w	r3, r3, #16
 8006dc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6979      	ldr	r1, [r7, #20]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e6      	bne.n	8006dae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006df4:	bf00      	nop
 8006df6:	3754      	adds	r7, #84	@ 0x54
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	effffffe 	.word	0xeffffffe

08006e04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7fe ff50 	bl	8005cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6979      	ldr	r1, [r7, #20]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fe ff1b 	bl	8005cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e76:	bf00      	nop
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e027      	b.n	8006f20 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2224      	movs	r2, #36	@ 0x24
 8006edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006efe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e02d      	b.n	8006fa0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2224      	movs	r2, #36	@ 0x24
 8006f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f84f 	bl	8007024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e02d      	b.n	800701c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2224      	movs	r2, #36	@ 0x24
 8006fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0201 	bic.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f811 	bl	8007024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007030:	2b00      	cmp	r3, #0
 8007032:	d108      	bne.n	8007046 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007044:	e031      	b.n	80070aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007046:	2310      	movs	r3, #16
 8007048:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800704a:	2310      	movs	r3, #16
 800704c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	0e5b      	lsrs	r3, r3, #25
 8007056:	b2db      	uxtb	r3, r3
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	0f5b      	lsrs	r3, r3, #29
 8007066:	b2db      	uxtb	r3, r3
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	7b3a      	ldrb	r2, [r7, #12]
 8007072:	4911      	ldr	r1, [pc, #68]	@ (80070b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007074:	5c8a      	ldrb	r2, [r1, r2]
 8007076:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800707a:	7b3a      	ldrb	r2, [r7, #12]
 800707c:	490f      	ldr	r1, [pc, #60]	@ (80070bc <UARTEx_SetNbDataToProcess+0x98>)
 800707e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007080:	fb93 f3f2 	sdiv	r3, r3, r2
 8007084:	b29a      	uxth	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	7b7a      	ldrb	r2, [r7, #13]
 8007090:	4909      	ldr	r1, [pc, #36]	@ (80070b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007092:	5c8a      	ldrb	r2, [r1, r2]
 8007094:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007098:	7b7a      	ldrb	r2, [r7, #13]
 800709a:	4908      	ldr	r1, [pc, #32]	@ (80070bc <UARTEx_SetNbDataToProcess+0x98>)
 800709c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800709e:	fb93 f3f2 	sdiv	r3, r3, r2
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070aa:	bf00      	nop
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	0800a758 	.word	0x0800a758
 80070bc:	0800a760 	.word	0x0800a760

080070c0 <__NVIC_SetPriority>:
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	db0a      	blt.n	80070ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	490c      	ldr	r1, [pc, #48]	@ (800710c <__NVIC_SetPriority+0x4c>)
 80070da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070de:	0112      	lsls	r2, r2, #4
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	440b      	add	r3, r1
 80070e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80070e8:	e00a      	b.n	8007100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4908      	ldr	r1, [pc, #32]	@ (8007110 <__NVIC_SetPriority+0x50>)
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	3b04      	subs	r3, #4
 80070f8:	0112      	lsls	r2, r2, #4
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	440b      	add	r3, r1
 80070fe:	761a      	strb	r2, [r3, #24]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	e000e100 	.word	0xe000e100
 8007110:	e000ed00 	.word	0xe000ed00

08007114 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007118:	4b05      	ldr	r3, [pc, #20]	@ (8007130 <SysTick_Handler+0x1c>)
 800711a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800711c:	f001 fd46 	bl	8008bac <xTaskGetSchedulerState>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d001      	beq.n	800712a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007126:	f002 fb3f 	bl	80097a8 <xPortSysTickHandler>
  }
}
 800712a:	bf00      	nop
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	e000e010 	.word	0xe000e010

08007134 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007138:	2100      	movs	r1, #0
 800713a:	f06f 0004 	mvn.w	r0, #4
 800713e:	f7ff ffbf 	bl	80070c0 <__NVIC_SetPriority>
#endif
}
 8007142:	bf00      	nop
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	603b      	str	r3, [r7, #0]
  return(result);
 8007154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800715a:	f06f 0305 	mvn.w	r3, #5
 800715e:	607b      	str	r3, [r7, #4]
 8007160:	e00c      	b.n	800717c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007162:	4b0a      	ldr	r3, [pc, #40]	@ (800718c <osKernelInitialize+0x44>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d105      	bne.n	8007176 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800716a:	4b08      	ldr	r3, [pc, #32]	@ (800718c <osKernelInitialize+0x44>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007170:	2300      	movs	r3, #0
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	e002      	b.n	800717c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007176:	f04f 33ff 	mov.w	r3, #4294967295
 800717a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800717c:	687b      	ldr	r3, [r7, #4]
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	24000204 	.word	0x24000204

08007190 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007196:	f3ef 8305 	mrs	r3, IPSR
 800719a:	603b      	str	r3, [r7, #0]
  return(result);
 800719c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80071a2:	f06f 0305 	mvn.w	r3, #5
 80071a6:	607b      	str	r3, [r7, #4]
 80071a8:	e010      	b.n	80071cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071aa:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <osKernelStart+0x48>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d109      	bne.n	80071c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071b2:	f7ff ffbf 	bl	8007134 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071b6:	4b08      	ldr	r3, [pc, #32]	@ (80071d8 <osKernelStart+0x48>)
 80071b8:	2202      	movs	r2, #2
 80071ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071bc:	f001 f892 	bl	80082e4 <vTaskStartScheduler>
      stat = osOK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	e002      	b.n	80071cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071cc:	687b      	ldr	r3, [r7, #4]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	24000204 	.word	0x24000204

080071dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08e      	sub	sp, #56	@ 0x38
 80071e0:	af04      	add	r7, sp, #16
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ec:	f3ef 8305 	mrs	r3, IPSR
 80071f0:	617b      	str	r3, [r7, #20]
  return(result);
 80071f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d17e      	bne.n	80072f6 <osThreadNew+0x11a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d07b      	beq.n	80072f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80071fe:	2380      	movs	r3, #128	@ 0x80
 8007200:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007202:	2318      	movs	r3, #24
 8007204:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800720a:	f04f 33ff 	mov.w	r3, #4294967295
 800720e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d045      	beq.n	80072a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <osThreadNew+0x48>
        name = attr->name;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <osThreadNew+0x6e>
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	2b38      	cmp	r3, #56	@ 0x38
 800723c:	d805      	bhi.n	800724a <osThreadNew+0x6e>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <osThreadNew+0x72>
        return (NULL);
 800724a:	2300      	movs	r3, #0
 800724c:	e054      	b.n	80072f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	089b      	lsrs	r3, r3, #2
 800725c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00e      	beq.n	8007284 <osThreadNew+0xa8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	2ba7      	cmp	r3, #167	@ 0xa7
 800726c:	d90a      	bls.n	8007284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007272:	2b00      	cmp	r3, #0
 8007274:	d006      	beq.n	8007284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <osThreadNew+0xa8>
        mem = 1;
 800727e:	2301      	movs	r3, #1
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e010      	b.n	80072a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10c      	bne.n	80072a6 <osThreadNew+0xca>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d108      	bne.n	80072a6 <osThreadNew+0xca>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <osThreadNew+0xca>
          mem = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	e001      	b.n	80072a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d110      	bne.n	80072ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072b4:	9202      	str	r2, [sp, #8]
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	6a3a      	ldr	r2, [r7, #32]
 80072c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fe1a 	bl	8007efc <xTaskCreateStatic>
 80072c8:	4603      	mov	r3, r0
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	e013      	b.n	80072f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d110      	bne.n	80072f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f107 0310 	add.w	r3, r7, #16
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fe68 	bl	8007fbc <xTaskCreate>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d001      	beq.n	80072f6 <osThreadNew+0x11a>
            hTask = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072f6:	693b      	ldr	r3, [r7, #16]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3728      	adds	r7, #40	@ 0x28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007308:	f3ef 8305 	mrs	r3, IPSR
 800730c:	60bb      	str	r3, [r7, #8]
  return(result);
 800730e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <osDelay+0x1c>
    stat = osErrorISR;
 8007314:	f06f 0305 	mvn.w	r3, #5
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e007      	b.n	800732c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 ffa6 	bl	8008278 <vTaskDelay>
    }
  }

  return (stat);
 800732c:	68fb      	ldr	r3, [r7, #12]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a07      	ldr	r2, [pc, #28]	@ (8007364 <vApplicationGetIdleTaskMemory+0x2c>)
 8007348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	4a06      	ldr	r2, [pc, #24]	@ (8007368 <vApplicationGetIdleTaskMemory+0x30>)
 800734e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2280      	movs	r2, #128	@ 0x80
 8007354:	601a      	str	r2, [r3, #0]
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	24000208 	.word	0x24000208
 8007368:	240002b0 	.word	0x240002b0

0800736c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4a07      	ldr	r2, [pc, #28]	@ (8007398 <vApplicationGetTimerTaskMemory+0x2c>)
 800737c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	4a06      	ldr	r2, [pc, #24]	@ (800739c <vApplicationGetTimerTaskMemory+0x30>)
 8007382:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800738a:	601a      	str	r2, [r3, #0]
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	240004b0 	.word	0x240004b0
 800739c:	24000558 	.word	0x24000558

080073a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f103 0208 	add.w	r2, r3, #8
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295
 80073b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f103 0208 	add.w	r2, r3, #8
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f103 0208 	add.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	601a      	str	r2, [r3, #0]
}
 8007436:	bf00      	nop
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007442:	b480      	push	{r7}
 8007444:	b085      	sub	sp, #20
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007458:	d103      	bne.n	8007462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	e00c      	b.n	800747c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3308      	adds	r3, #8
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	e002      	b.n	8007470 <vListInsert+0x2e>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d2f6      	bcs.n	800746a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]
}
 80074a8:	bf00      	nop
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6892      	ldr	r2, [r2, #8]
 80074ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6852      	ldr	r2, [r2, #4]
 80074d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d103      	bne.n	80074e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	1e5a      	subs	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	e7fd      	b.n	8007530 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007534:	f002 f8a8 	bl	8009688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007540:	68f9      	ldr	r1, [r7, #12]
 8007542:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	441a      	add	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007564:	3b01      	subs	r3, #1
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800756a:	fb01 f303 	mul.w	r3, r1, r3
 800756e:	441a      	add	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	22ff      	movs	r2, #255	@ 0xff
 8007578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	22ff      	movs	r2, #255	@ 0xff
 8007580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d114      	bne.n	80075b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d01a      	beq.n	80075c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3310      	adds	r3, #16
 8007596:	4618      	mov	r0, r3
 8007598:	f001 f942 	bl	8008820 <xTaskRemoveFromEventList>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d012      	beq.n	80075c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075a2:	4b0d      	ldr	r3, [pc, #52]	@ (80075d8 <xQueueGenericReset+0xd0>)
 80075a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	e009      	b.n	80075c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3310      	adds	r3, #16
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fef1 	bl	80073a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3324      	adds	r3, #36	@ 0x24
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7ff feec 	bl	80073a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075c8:	f002 f890 	bl	80096ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075cc:	2301      	movs	r3, #1
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	e000ed04 	.word	0xe000ed04

080075dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08e      	sub	sp, #56	@ 0x38
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10b      	bne.n	8007608 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10b      	bne.n	8007626 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	e7fd      	b.n	8007622 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <xQueueGenericCreateStatic+0x56>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <xQueueGenericCreateStatic+0x5a>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <xQueueGenericCreateStatic+0x5c>
 8007636:	2300      	movs	r3, #0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	623b      	str	r3, [r7, #32]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <xQueueGenericCreateStatic+0x84>
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <xQueueGenericCreateStatic+0x88>
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <xQueueGenericCreateStatic+0x8a>
 8007664:	2300      	movs	r3, #0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	61fb      	str	r3, [r7, #28]
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	e7fd      	b.n	800767e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007682:	2350      	movs	r3, #80	@ 0x50
 8007684:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b50      	cmp	r3, #80	@ 0x50
 800768a:	d00b      	beq.n	80076a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	61bb      	str	r3, [r7, #24]
}
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	e7fd      	b.n	80076a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80076aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00d      	beq.n	80076cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80076bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f805 	bl	80076d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3730      	adds	r7, #48	@ 0x30
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b084      	sub	sp, #16
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d103      	bne.n	80076f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e002      	b.n	80076f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007704:	2101      	movs	r1, #1
 8007706:	69b8      	ldr	r0, [r7, #24]
 8007708:	f7ff fefe 	bl	8007508 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	78fa      	ldrb	r2, [r7, #3]
 8007710:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08e      	sub	sp, #56	@ 0x38
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800772a:	2300      	movs	r3, #0
 800772c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <xQueueGenericSend+0x34>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <xQueueGenericSend+0x42>
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <xQueueGenericSend+0x46>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueGenericSend+0x48>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <xQueueGenericSend+0x64>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d103      	bne.n	800778e <xQueueGenericSend+0x72>
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <xQueueGenericSend+0x76>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericSend+0x78>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10b      	bne.n	80077b0 <xQueueGenericSend+0x94>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	623b      	str	r3, [r7, #32]
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	e7fd      	b.n	80077ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077b0:	f001 f9fc 	bl	8008bac <xTaskGetSchedulerState>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <xQueueGenericSend+0xa4>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <xQueueGenericSend+0xa8>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <xQueueGenericSend+0xaa>
 80077c4:	2300      	movs	r3, #0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	61fb      	str	r3, [r7, #28]
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	e7fd      	b.n	80077de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077e2:	f001 ff51 	bl	8009688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <xQueueGenericSend+0xdc>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d129      	bne.n	800784c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077fe:	f000 fa0f 	bl	8007c20 <prvCopyDataToQueue>
 8007802:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d010      	beq.n	800782e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	3324      	adds	r3, #36	@ 0x24
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f805 	bl	8008820 <xTaskRemoveFromEventList>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800781c:	4b3f      	ldr	r3, [pc, #252]	@ (800791c <xQueueGenericSend+0x200>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	e00a      	b.n	8007844 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800782e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007834:	4b39      	ldr	r3, [pc, #228]	@ (800791c <xQueueGenericSend+0x200>)
 8007836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007844:	f001 ff52 	bl	80096ec <vPortExitCritical>
				return pdPASS;
 8007848:	2301      	movs	r3, #1
 800784a:	e063      	b.n	8007914 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007852:	f001 ff4b 	bl	80096ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007856:	2300      	movs	r3, #0
 8007858:	e05c      	b.n	8007914 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800785a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785c:	2b00      	cmp	r3, #0
 800785e:	d106      	bne.n	800786e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007860:	f107 0314 	add.w	r3, r7, #20
 8007864:	4618      	mov	r0, r3
 8007866:	f001 f83f 	bl	80088e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800786a:	2301      	movs	r3, #1
 800786c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800786e:	f001 ff3d 	bl	80096ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007872:	f000 fda7 	bl	80083c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007876:	f001 ff07 	bl	8009688 <vPortEnterCritical>
 800787a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007880:	b25b      	sxtb	r3, r3
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d103      	bne.n	8007890 <xQueueGenericSend+0x174>
 8007888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007896:	b25b      	sxtb	r3, r3
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d103      	bne.n	80078a6 <xQueueGenericSend+0x18a>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078a6:	f001 ff21 	bl	80096ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078aa:	1d3a      	adds	r2, r7, #4
 80078ac:	f107 0314 	add.w	r3, r7, #20
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f001 f82e 	bl	8008914 <xTaskCheckForTimeOut>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d124      	bne.n	8007908 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078c0:	f000 faa6 	bl	8007e10 <prvIsQueueFull>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d018      	beq.n	80078fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078cc:	3310      	adds	r3, #16
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 ff52 	bl	800877c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078da:	f000 fa31 	bl	8007d40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078de:	f000 fd7f 	bl	80083e0 <xTaskResumeAll>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f af7c 	bne.w	80077e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078ea:	4b0c      	ldr	r3, [pc, #48]	@ (800791c <xQueueGenericSend+0x200>)
 80078ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	e772      	b.n	80077e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078fe:	f000 fa1f 	bl	8007d40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007902:	f000 fd6d 	bl	80083e0 <xTaskResumeAll>
 8007906:	e76c      	b.n	80077e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800790a:	f000 fa19 	bl	8007d40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800790e:	f000 fd67 	bl	80083e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007912:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007914:	4618      	mov	r0, r3
 8007916:	3738      	adds	r7, #56	@ 0x38
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b090      	sub	sp, #64	@ 0x40
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10b      	bne.n	8007950 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	e7fd      	b.n	800794c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d103      	bne.n	800795e <xQueueGenericSendFromISR+0x3e>
 8007956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <xQueueGenericSendFromISR+0x42>
 800795e:	2301      	movs	r3, #1
 8007960:	e000      	b.n	8007964 <xQueueGenericSendFromISR+0x44>
 8007962:	2300      	movs	r3, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d103      	bne.n	800798e <xQueueGenericSendFromISR+0x6e>
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <xQueueGenericSendFromISR+0x72>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <xQueueGenericSendFromISR+0x74>
 8007992:	2300      	movs	r3, #0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10b      	bne.n	80079b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	623b      	str	r3, [r7, #32]
}
 80079aa:	bf00      	nop
 80079ac:	bf00      	nop
 80079ae:	e7fd      	b.n	80079ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079b0:	f001 ff4a 	bl	8009848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079b4:	f3ef 8211 	mrs	r2, BASEPRI
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	61fa      	str	r2, [r7, #28]
 80079ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	429a      	cmp	r2, r3
 80079da:	d302      	bcc.n	80079e2 <xQueueGenericSendFromISR+0xc2>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d12f      	bne.n	8007a42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079f8:	f000 f912 	bl	8007c20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d112      	bne.n	8007a2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d016      	beq.n	8007a3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a10:	3324      	adds	r3, #36	@ 0x24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 ff04 	bl	8008820 <xTaskRemoveFromEventList>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e007      	b.n	8007a3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a30:	3301      	adds	r3, #1
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	b25a      	sxtb	r2, r3
 8007a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a40:	e001      	b.n	8007a46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3740      	adds	r7, #64	@ 0x40
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08c      	sub	sp, #48	@ 0x30
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10b      	bne.n	8007a8e <xQueueReceive+0x32>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	623b      	str	r3, [r7, #32]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d103      	bne.n	8007a9c <xQueueReceive+0x40>
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <xQueueReceive+0x44>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <xQueueReceive+0x46>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10b      	bne.n	8007abe <xQueueReceive+0x62>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	61fb      	str	r3, [r7, #28]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007abe:	f001 f875 	bl	8008bac <xTaskGetSchedulerState>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d102      	bne.n	8007ace <xQueueReceive+0x72>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <xQueueReceive+0x76>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <xQueueReceive+0x78>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10b      	bne.n	8007af0 <xQueueReceive+0x94>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	61bb      	str	r3, [r7, #24]
}
 8007aea:	bf00      	nop
 8007aec:	bf00      	nop
 8007aee:	e7fd      	b.n	8007aec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007af0:	f001 fdca 	bl	8009688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01f      	beq.n	8007b40 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b04:	f000 f8f6 	bl	8007cf4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	1e5a      	subs	r2, r3, #1
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00f      	beq.n	8007b38 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	3310      	adds	r3, #16
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fe7f 	bl	8008820 <xTaskRemoveFromEventList>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d007      	beq.n	8007b38 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b28:	4b3c      	ldr	r3, [pc, #240]	@ (8007c1c <xQueueReceive+0x1c0>)
 8007b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b38:	f001 fdd8 	bl	80096ec <vPortExitCritical>
				return pdPASS;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e069      	b.n	8007c14 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d103      	bne.n	8007b4e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b46:	f001 fdd1 	bl	80096ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e062      	b.n	8007c14 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b54:	f107 0310 	add.w	r3, r7, #16
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fec5 	bl	80088e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b62:	f001 fdc3 	bl	80096ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b66:	f000 fc2d 	bl	80083c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b6a:	f001 fd8d 	bl	8009688 <vPortEnterCritical>
 8007b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d103      	bne.n	8007b84 <xQueueReceive+0x128>
 8007b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b90:	d103      	bne.n	8007b9a <xQueueReceive+0x13e>
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b9a:	f001 fda7 	bl	80096ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b9e:	1d3a      	adds	r2, r7, #4
 8007ba0:	f107 0310 	add.w	r3, r7, #16
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 feb4 	bl	8008914 <xTaskCheckForTimeOut>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d123      	bne.n	8007bfa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb4:	f000 f916 	bl	8007de4 <prvIsQueueEmpty>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d017      	beq.n	8007bee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	3324      	adds	r3, #36	@ 0x24
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fdd8 	bl	800877c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bce:	f000 f8b7 	bl	8007d40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bd2:	f000 fc05 	bl	80083e0 <xTaskResumeAll>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d189      	bne.n	8007af0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8007c1c <xQueueReceive+0x1c0>)
 8007bde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	e780      	b.n	8007af0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bf0:	f000 f8a6 	bl	8007d40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bf4:	f000 fbf4 	bl	80083e0 <xTaskResumeAll>
 8007bf8:	e77a      	b.n	8007af0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bfc:	f000 f8a0 	bl	8007d40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c00:	f000 fbee 	bl	80083e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c06:	f000 f8ed 	bl	8007de4 <prvIsQueueEmpty>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f43f af6f 	beq.w	8007af0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3730      	adds	r7, #48	@ 0x30
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	e000ed04 	.word	0xe000ed04

08007c20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10d      	bne.n	8007c5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d14d      	bne.n	8007ce2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 ffcc 	bl	8008be8 <xTaskPriorityDisinherit>
 8007c50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	609a      	str	r2, [r3, #8]
 8007c58:	e043      	b.n	8007ce2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d119      	bne.n	8007c94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6858      	ldr	r0, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	f002 f8c6 	bl	8009dfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	441a      	add	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d32b      	bcc.n	8007ce2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	e026      	b.n	8007ce2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	68d8      	ldr	r0, [r3, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	f002 f8ac 	bl	8009dfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	425b      	negs	r3, r3
 8007cae:	441a      	add	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d207      	bcs.n	8007cd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc8:	425b      	negs	r3, r3
 8007cca:	441a      	add	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d105      	bne.n	8007ce2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d002      	beq.n	8007ce2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cea:	697b      	ldr	r3, [r7, #20]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0e:	441a      	add	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d303      	bcc.n	8007d28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68d9      	ldr	r1, [r3, #12]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d30:	461a      	mov	r2, r3
 8007d32:	6838      	ldr	r0, [r7, #0]
 8007d34:	f002 f862 	bl	8009dfc <memcpy>
	}
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d48:	f001 fc9e 	bl	8009688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d54:	e011      	b.n	8007d7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d012      	beq.n	8007d84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3324      	adds	r3, #36	@ 0x24
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fd5c 	bl	8008820 <xTaskRemoveFromEventList>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d6e:	f000 fe35 	bl	80089dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dce9      	bgt.n	8007d56 <prvUnlockQueue+0x16>
 8007d82:	e000      	b.n	8007d86 <prvUnlockQueue+0x46>
					break;
 8007d84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	22ff      	movs	r2, #255	@ 0xff
 8007d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d8e:	f001 fcad 	bl	80096ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d92:	f001 fc79 	bl	8009688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d9e:	e011      	b.n	8007dc4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d012      	beq.n	8007dce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3310      	adds	r3, #16
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fd37 	bl	8008820 <xTaskRemoveFromEventList>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007db8:	f000 fe10 	bl	80089dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dce9      	bgt.n	8007da0 <prvUnlockQueue+0x60>
 8007dcc:	e000      	b.n	8007dd0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	22ff      	movs	r2, #255	@ 0xff
 8007dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007dd8:	f001 fc88 	bl	80096ec <vPortExitCritical>
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dec:	f001 fc4c 	bl	8009688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e001      	b.n	8007e02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e02:	f001 fc73 	bl	80096ec <vPortExitCritical>

	return xReturn;
 8007e06:	68fb      	ldr	r3, [r7, #12]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e18:	f001 fc36 	bl	8009688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d102      	bne.n	8007e2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e001      	b.n	8007e32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e32:	f001 fc5b 	bl	80096ec <vPortExitCritical>

	return xReturn;
 8007e36:	68fb      	ldr	r3, [r7, #12]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e014      	b.n	8007e7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e50:	4a0f      	ldr	r2, [pc, #60]	@ (8007e90 <vQueueAddToRegistry+0x50>)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10b      	bne.n	8007e74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e5c:	490c      	ldr	r1, [pc, #48]	@ (8007e90 <vQueueAddToRegistry+0x50>)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e66:	4a0a      	ldr	r2, [pc, #40]	@ (8007e90 <vQueueAddToRegistry+0x50>)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	00db      	lsls	r3, r3, #3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e72:	e006      	b.n	8007e82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b07      	cmp	r3, #7
 8007e7e:	d9e7      	bls.n	8007e50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e80:	bf00      	nop
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	24000958 	.word	0x24000958

08007e94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ea4:	f001 fbf0 	bl	8009688 <vPortEnterCritical>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eae:	b25b      	sxtb	r3, r3
 8007eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb4:	d103      	bne.n	8007ebe <vQueueWaitForMessageRestricted+0x2a>
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec4:	b25b      	sxtb	r3, r3
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d103      	bne.n	8007ed4 <vQueueWaitForMessageRestricted+0x40>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ed4:	f001 fc0a 	bl	80096ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d106      	bne.n	8007eee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3324      	adds	r3, #36	@ 0x24
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fc6d 	bl	80087c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007eee:	6978      	ldr	r0, [r7, #20]
 8007ef0:	f7ff ff26 	bl	8007d40 <prvUnlockQueue>
	}
 8007ef4:	bf00      	nop
 8007ef6:	3718      	adds	r7, #24
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08e      	sub	sp, #56	@ 0x38
 8007f00:	af04      	add	r7, sp, #16
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	623b      	str	r3, [r7, #32]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10b      	bne.n	8007f46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	61fb      	str	r3, [r7, #28]
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	e7fd      	b.n	8007f42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f46:	23a8      	movs	r3, #168	@ 0xa8
 8007f48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2ba8      	cmp	r3, #168	@ 0xa8
 8007f4e:	d00b      	beq.n	8007f68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	61bb      	str	r3, [r7, #24]
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01e      	beq.n	8007fae <xTaskCreateStatic+0xb2>
 8007f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01b      	beq.n	8007fae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	9302      	str	r3, [sp, #8]
 8007f90:	f107 0314 	add.w	r3, r7, #20
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f851 	bl	8008048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fa6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fa8:	f000 f8f6 	bl	8008198 <prvAddNewTaskToReadyList>
 8007fac:	e001      	b.n	8007fb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fb2:	697b      	ldr	r3, [r7, #20]
	}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3728      	adds	r7, #40	@ 0x28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08c      	sub	sp, #48	@ 0x30
 8007fc0:	af04      	add	r7, sp, #16
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fc7b 	bl	80098cc <pvPortMalloc>
 8007fd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00e      	beq.n	8007ffc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fde:	20a8      	movs	r0, #168	@ 0xa8
 8007fe0:	f001 fc74 	bl	80098cc <pvPortMalloc>
 8007fe4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ff2:	e005      	b.n	8008000 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ff4:	6978      	ldr	r0, [r7, #20]
 8007ff6:	f001 fd37 	bl	8009a68 <vPortFree>
 8007ffa:	e001      	b.n	8008000 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d017      	beq.n	8008036 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	2300      	movs	r3, #0
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	9302      	str	r3, [sp, #8]
 8008018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801a:	9301      	str	r3, [sp, #4]
 800801c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f80f 	bl	8008048 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800802a:	69f8      	ldr	r0, [r7, #28]
 800802c:	f000 f8b4 	bl	8008198 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008030:	2301      	movs	r3, #1
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	e002      	b.n	800803c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008036:	f04f 33ff 	mov.w	r3, #4294967295
 800803a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800803c:	69bb      	ldr	r3, [r7, #24]
	}
 800803e:	4618      	mov	r0, r3
 8008040:	3720      	adds	r7, #32
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	461a      	mov	r2, r3
 8008060:	21a5      	movs	r1, #165	@ 0xa5
 8008062:	f001 fe41 	bl	8009ce8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008070:	440b      	add	r3, r1
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	f023 0307 	bic.w	r3, r3, #7
 800807e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00b      	beq.n	80080a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	617b      	str	r3, [r7, #20]
}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	e7fd      	b.n	800809e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01f      	beq.n	80080e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a8:	2300      	movs	r3, #0
 80080aa:	61fb      	str	r3, [r7, #28]
 80080ac:	e012      	b.n	80080d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	7819      	ldrb	r1, [r3, #0]
 80080b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	3334      	adds	r3, #52	@ 0x34
 80080be:	460a      	mov	r2, r1
 80080c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	4413      	add	r3, r2
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d006      	beq.n	80080dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	3301      	adds	r3, #1
 80080d2:	61fb      	str	r3, [r7, #28]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b0f      	cmp	r3, #15
 80080d8:	d9e9      	bls.n	80080ae <prvInitialiseNewTask+0x66>
 80080da:	e000      	b.n	80080de <prvInitialiseNewTask+0x96>
			{
				break;
 80080dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080e6:	e003      	b.n	80080f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f2:	2b37      	cmp	r3, #55	@ 0x37
 80080f4:	d901      	bls.n	80080fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080f6:	2337      	movs	r3, #55	@ 0x37
 80080f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008104:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008108:	2200      	movs	r2, #0
 800810a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800810c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810e:	3304      	adds	r3, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff f965 	bl	80073e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	3318      	adds	r3, #24
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff f960 	bl	80073e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008124:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008128:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800812c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008134:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	2200      	movs	r2, #0
 8008142:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	3354      	adds	r3, #84	@ 0x54
 800814a:	224c      	movs	r2, #76	@ 0x4c
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f001 fdca 	bl	8009ce8 <memset>
 8008154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008156:	4a0d      	ldr	r2, [pc, #52]	@ (800818c <prvInitialiseNewTask+0x144>)
 8008158:	659a      	str	r2, [r3, #88]	@ 0x58
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	4a0c      	ldr	r2, [pc, #48]	@ (8008190 <prvInitialiseNewTask+0x148>)
 800815e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	4a0c      	ldr	r2, [pc, #48]	@ (8008194 <prvInitialiseNewTask+0x14c>)
 8008164:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	69b8      	ldr	r0, [r7, #24]
 800816c:	f001 f95a 	bl	8009424 <pxPortInitialiseStack>
 8008170:	4602      	mov	r2, r0
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008182:	bf00      	nop
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	24004bec 	.word	0x24004bec
 8008190:	24004c54 	.word	0x24004c54
 8008194:	24004cbc 	.word	0x24004cbc

08008198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081a0:	f001 fa72 	bl	8009688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081a4:	4b2d      	ldr	r3, [pc, #180]	@ (800825c <prvAddNewTaskToReadyList+0xc4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	4a2c      	ldr	r2, [pc, #176]	@ (800825c <prvAddNewTaskToReadyList+0xc4>)
 80081ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081bc:	4b27      	ldr	r3, [pc, #156]	@ (800825c <prvAddNewTaskToReadyList+0xc4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d110      	bne.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081c4:	f000 fc2e 	bl	8008a24 <prvInitialiseTaskLists>
 80081c8:	e00d      	b.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081ca:	4b26      	ldr	r3, [pc, #152]	@ (8008264 <prvAddNewTaskToReadyList+0xcc>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d109      	bne.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081d2:	4b23      	ldr	r3, [pc, #140]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081dc:	429a      	cmp	r2, r3
 80081de:	d802      	bhi.n	80081e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081e6:	4b20      	ldr	r3, [pc, #128]	@ (8008268 <prvAddNewTaskToReadyList+0xd0>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3301      	adds	r3, #1
 80081ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008268 <prvAddNewTaskToReadyList+0xd0>)
 80081ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008268 <prvAddNewTaskToReadyList+0xd0>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081fc:	4b1b      	ldr	r3, [pc, #108]	@ (800826c <prvAddNewTaskToReadyList+0xd4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <prvAddNewTaskToReadyList+0x74>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008208:	4a18      	ldr	r2, [pc, #96]	@ (800826c <prvAddNewTaskToReadyList+0xd4>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4a15      	ldr	r2, [pc, #84]	@ (8008270 <prvAddNewTaskToReadyList+0xd8>)
 800821a:	441a      	add	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7ff f8e9 	bl	80073fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008228:	f001 fa60 	bl	80096ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800822c:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <prvAddNewTaskToReadyList+0xcc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00e      	beq.n	8008252 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008234:	4b0a      	ldr	r3, [pc, #40]	@ (8008260 <prvAddNewTaskToReadyList+0xc8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	429a      	cmp	r2, r3
 8008240:	d207      	bcs.n	8008252 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008242:	4b0c      	ldr	r3, [pc, #48]	@ (8008274 <prvAddNewTaskToReadyList+0xdc>)
 8008244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	24000e6c 	.word	0x24000e6c
 8008260:	24000998 	.word	0x24000998
 8008264:	24000e78 	.word	0x24000e78
 8008268:	24000e88 	.word	0x24000e88
 800826c:	24000e74 	.word	0x24000e74
 8008270:	2400099c 	.word	0x2400099c
 8008274:	e000ed04 	.word	0xe000ed04

08008278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d018      	beq.n	80082bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800828a:	4b14      	ldr	r3, [pc, #80]	@ (80082dc <vTaskDelay+0x64>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <vTaskDelay+0x32>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60bb      	str	r3, [r7, #8]
}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	e7fd      	b.n	80082a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082aa:	f000 f88b 	bl	80083c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082ae:	2100      	movs	r1, #0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fd09 	bl	8008cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082b6:	f000 f893 	bl	80083e0 <xTaskResumeAll>
 80082ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d107      	bne.n	80082d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082c2:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <vTaskDelay+0x68>)
 80082c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	24000e94 	.word	0x24000e94
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08a      	sub	sp, #40	@ 0x28
 80082e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082f2:	463a      	mov	r2, r7
 80082f4:	1d39      	adds	r1, r7, #4
 80082f6:	f107 0308 	add.w	r3, r7, #8
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7ff f81c 	bl	8007338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	9202      	str	r2, [sp, #8]
 8008308:	9301      	str	r3, [sp, #4]
 800830a:	2300      	movs	r3, #0
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	2300      	movs	r3, #0
 8008310:	460a      	mov	r2, r1
 8008312:	4924      	ldr	r1, [pc, #144]	@ (80083a4 <vTaskStartScheduler+0xc0>)
 8008314:	4824      	ldr	r0, [pc, #144]	@ (80083a8 <vTaskStartScheduler+0xc4>)
 8008316:	f7ff fdf1 	bl	8007efc <xTaskCreateStatic>
 800831a:	4603      	mov	r3, r0
 800831c:	4a23      	ldr	r2, [pc, #140]	@ (80083ac <vTaskStartScheduler+0xc8>)
 800831e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008320:	4b22      	ldr	r3, [pc, #136]	@ (80083ac <vTaskStartScheduler+0xc8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008328:	2301      	movs	r3, #1
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	e001      	b.n	8008332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800832e:	2300      	movs	r3, #0
 8008330:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d102      	bne.n	800833e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008338:	f000 fd1a 	bl	8008d70 <xTimerCreateTimerTask>
 800833c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d11b      	bne.n	800837c <vTaskStartScheduler+0x98>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	613b      	str	r3, [r7, #16]
}
 8008356:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008358:	4b15      	ldr	r3, [pc, #84]	@ (80083b0 <vTaskStartScheduler+0xcc>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3354      	adds	r3, #84	@ 0x54
 800835e:	4a15      	ldr	r2, [pc, #84]	@ (80083b4 <vTaskStartScheduler+0xd0>)
 8008360:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008362:	4b15      	ldr	r3, [pc, #84]	@ (80083b8 <vTaskStartScheduler+0xd4>)
 8008364:	f04f 32ff 	mov.w	r2, #4294967295
 8008368:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800836a:	4b14      	ldr	r3, [pc, #80]	@ (80083bc <vTaskStartScheduler+0xd8>)
 800836c:	2201      	movs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008370:	4b13      	ldr	r3, [pc, #76]	@ (80083c0 <vTaskStartScheduler+0xdc>)
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008376:	f001 f8e3 	bl	8009540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800837a:	e00f      	b.n	800839c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008382:	d10b      	bne.n	800839c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60fb      	str	r3, [r7, #12]
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <vTaskStartScheduler+0xb4>
}
 800839c:	bf00      	nop
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	0800a6d0 	.word	0x0800a6d0
 80083a8:	080089f5 	.word	0x080089f5
 80083ac:	24000e90 	.word	0x24000e90
 80083b0:	24000998 	.word	0x24000998
 80083b4:	24000014 	.word	0x24000014
 80083b8:	24000e8c 	.word	0x24000e8c
 80083bc:	24000e78 	.word	0x24000e78
 80083c0:	24000e70 	.word	0x24000e70

080083c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083c8:	4b04      	ldr	r3, [pc, #16]	@ (80083dc <vTaskSuspendAll+0x18>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3301      	adds	r3, #1
 80083ce:	4a03      	ldr	r2, [pc, #12]	@ (80083dc <vTaskSuspendAll+0x18>)
 80083d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	24000e94 	.word	0x24000e94

080083e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083ee:	4b42      	ldr	r3, [pc, #264]	@ (80084f8 <xTaskResumeAll+0x118>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <xTaskResumeAll+0x2e>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	603b      	str	r3, [r7, #0]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800840e:	f001 f93b 	bl	8009688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008412:	4b39      	ldr	r3, [pc, #228]	@ (80084f8 <xTaskResumeAll+0x118>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3b01      	subs	r3, #1
 8008418:	4a37      	ldr	r2, [pc, #220]	@ (80084f8 <xTaskResumeAll+0x118>)
 800841a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800841c:	4b36      	ldr	r3, [pc, #216]	@ (80084f8 <xTaskResumeAll+0x118>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d162      	bne.n	80084ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008424:	4b35      	ldr	r3, [pc, #212]	@ (80084fc <xTaskResumeAll+0x11c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d05e      	beq.n	80084ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800842c:	e02f      	b.n	800848e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842e:	4b34      	ldr	r3, [pc, #208]	@ (8008500 <xTaskResumeAll+0x120>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3318      	adds	r3, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff f83a 	bl	80074b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3304      	adds	r3, #4
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff f835 	bl	80074b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844e:	4b2d      	ldr	r3, [pc, #180]	@ (8008504 <xTaskResumeAll+0x124>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d903      	bls.n	800845e <xTaskResumeAll+0x7e>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845a:	4a2a      	ldr	r2, [pc, #168]	@ (8008504 <xTaskResumeAll+0x124>)
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4a27      	ldr	r2, [pc, #156]	@ (8008508 <xTaskResumeAll+0x128>)
 800846c:	441a      	add	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe ffc0 	bl	80073fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847e:	4b23      	ldr	r3, [pc, #140]	@ (800850c <xTaskResumeAll+0x12c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008484:	429a      	cmp	r2, r3
 8008486:	d302      	bcc.n	800848e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008488:	4b21      	ldr	r3, [pc, #132]	@ (8008510 <xTaskResumeAll+0x130>)
 800848a:	2201      	movs	r2, #1
 800848c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800848e:	4b1c      	ldr	r3, [pc, #112]	@ (8008500 <xTaskResumeAll+0x120>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1cb      	bne.n	800842e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800849c:	f000 fb66 	bl	8008b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008514 <xTaskResumeAll+0x134>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d010      	beq.n	80084ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084ac:	f000 f846 	bl	800853c <xTaskIncrementTick>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084b6:	4b16      	ldr	r3, [pc, #88]	@ (8008510 <xTaskResumeAll+0x130>)
 80084b8:	2201      	movs	r2, #1
 80084ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3b01      	subs	r3, #1
 80084c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f1      	bne.n	80084ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084c8:	4b12      	ldr	r3, [pc, #72]	@ (8008514 <xTaskResumeAll+0x134>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084ce:	4b10      	ldr	r3, [pc, #64]	@ (8008510 <xTaskResumeAll+0x130>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084da:	4b0f      	ldr	r3, [pc, #60]	@ (8008518 <xTaskResumeAll+0x138>)
 80084dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ea:	f001 f8ff 	bl	80096ec <vPortExitCritical>

	return xAlreadyYielded;
 80084ee:	68bb      	ldr	r3, [r7, #8]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	24000e94 	.word	0x24000e94
 80084fc:	24000e6c 	.word	0x24000e6c
 8008500:	24000e2c 	.word	0x24000e2c
 8008504:	24000e74 	.word	0x24000e74
 8008508:	2400099c 	.word	0x2400099c
 800850c:	24000998 	.word	0x24000998
 8008510:	24000e80 	.word	0x24000e80
 8008514:	24000e7c 	.word	0x24000e7c
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008522:	4b05      	ldr	r3, [pc, #20]	@ (8008538 <xTaskGetTickCount+0x1c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008528:	687b      	ldr	r3, [r7, #4]
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	24000e70 	.word	0x24000e70

0800853c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008546:	4b4f      	ldr	r3, [pc, #316]	@ (8008684 <xTaskIncrementTick+0x148>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f040 8090 	bne.w	8008670 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008550:	4b4d      	ldr	r3, [pc, #308]	@ (8008688 <xTaskIncrementTick+0x14c>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008558:	4a4b      	ldr	r2, [pc, #300]	@ (8008688 <xTaskIncrementTick+0x14c>)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d121      	bne.n	80085a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008564:	4b49      	ldr	r3, [pc, #292]	@ (800868c <xTaskIncrementTick+0x150>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <xTaskIncrementTick+0x4a>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	603b      	str	r3, [r7, #0]
}
 8008580:	bf00      	nop
 8008582:	bf00      	nop
 8008584:	e7fd      	b.n	8008582 <xTaskIncrementTick+0x46>
 8008586:	4b41      	ldr	r3, [pc, #260]	@ (800868c <xTaskIncrementTick+0x150>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	4b40      	ldr	r3, [pc, #256]	@ (8008690 <xTaskIncrementTick+0x154>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a3e      	ldr	r2, [pc, #248]	@ (800868c <xTaskIncrementTick+0x150>)
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	4a3e      	ldr	r2, [pc, #248]	@ (8008690 <xTaskIncrementTick+0x154>)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	4b3e      	ldr	r3, [pc, #248]	@ (8008694 <xTaskIncrementTick+0x158>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3301      	adds	r3, #1
 80085a0:	4a3c      	ldr	r2, [pc, #240]	@ (8008694 <xTaskIncrementTick+0x158>)
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	f000 fae2 	bl	8008b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008698 <xTaskIncrementTick+0x15c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d349      	bcc.n	8008646 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b2:	4b36      	ldr	r3, [pc, #216]	@ (800868c <xTaskIncrementTick+0x150>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085bc:	4b36      	ldr	r3, [pc, #216]	@ (8008698 <xTaskIncrementTick+0x15c>)
 80085be:	f04f 32ff 	mov.w	r2, #4294967295
 80085c2:	601a      	str	r2, [r3, #0]
					break;
 80085c4:	e03f      	b.n	8008646 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c6:	4b31      	ldr	r3, [pc, #196]	@ (800868c <xTaskIncrementTick+0x150>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d203      	bcs.n	80085e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085de:	4a2e      	ldr	r2, [pc, #184]	@ (8008698 <xTaskIncrementTick+0x15c>)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085e4:	e02f      	b.n	8008646 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe ff62 	bl	80074b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	3318      	adds	r3, #24
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe ff59 	bl	80074b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008606:	4b25      	ldr	r3, [pc, #148]	@ (800869c <xTaskIncrementTick+0x160>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d903      	bls.n	8008616 <xTaskIncrementTick+0xda>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008612:	4a22      	ldr	r2, [pc, #136]	@ (800869c <xTaskIncrementTick+0x160>)
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4a1f      	ldr	r2, [pc, #124]	@ (80086a0 <xTaskIncrementTick+0x164>)
 8008624:	441a      	add	r2, r3
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	3304      	adds	r3, #4
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f7fe fee4 	bl	80073fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008636:	4b1b      	ldr	r3, [pc, #108]	@ (80086a4 <xTaskIncrementTick+0x168>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863c:	429a      	cmp	r2, r3
 800863e:	d3b8      	bcc.n	80085b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008644:	e7b5      	b.n	80085b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008646:	4b17      	ldr	r3, [pc, #92]	@ (80086a4 <xTaskIncrementTick+0x168>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800864c:	4914      	ldr	r1, [pc, #80]	@ (80086a0 <xTaskIncrementTick+0x164>)
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d901      	bls.n	8008662 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800865e:	2301      	movs	r3, #1
 8008660:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008662:	4b11      	ldr	r3, [pc, #68]	@ (80086a8 <xTaskIncrementTick+0x16c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800866a:	2301      	movs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	e004      	b.n	800867a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008670:	4b0e      	ldr	r3, [pc, #56]	@ (80086ac <xTaskIncrementTick+0x170>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	4a0d      	ldr	r2, [pc, #52]	@ (80086ac <xTaskIncrementTick+0x170>)
 8008678:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800867a:	697b      	ldr	r3, [r7, #20]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	24000e94 	.word	0x24000e94
 8008688:	24000e70 	.word	0x24000e70
 800868c:	24000e24 	.word	0x24000e24
 8008690:	24000e28 	.word	0x24000e28
 8008694:	24000e84 	.word	0x24000e84
 8008698:	24000e8c 	.word	0x24000e8c
 800869c:	24000e74 	.word	0x24000e74
 80086a0:	2400099c 	.word	0x2400099c
 80086a4:	24000998 	.word	0x24000998
 80086a8:	24000e80 	.word	0x24000e80
 80086ac:	24000e7c 	.word	0x24000e7c

080086b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086b6:	4b2b      	ldr	r3, [pc, #172]	@ (8008764 <vTaskSwitchContext+0xb4>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086be:	4b2a      	ldr	r3, [pc, #168]	@ (8008768 <vTaskSwitchContext+0xb8>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086c4:	e047      	b.n	8008756 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80086c6:	4b28      	ldr	r3, [pc, #160]	@ (8008768 <vTaskSwitchContext+0xb8>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086cc:	4b27      	ldr	r3, [pc, #156]	@ (800876c <vTaskSwitchContext+0xbc>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e011      	b.n	80086f8 <vTaskSwitchContext+0x48>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	607b      	str	r3, [r7, #4]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <vTaskSwitchContext+0x3e>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	491d      	ldr	r1, [pc, #116]	@ (8008770 <vTaskSwitchContext+0xc0>)
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4613      	mov	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0e3      	beq.n	80086d4 <vTaskSwitchContext+0x24>
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4a16      	ldr	r2, [pc, #88]	@ (8008770 <vTaskSwitchContext+0xc0>)
 8008718:	4413      	add	r3, r2
 800871a:	60bb      	str	r3, [r7, #8]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	605a      	str	r2, [r3, #4]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	3308      	adds	r3, #8
 800872e:	429a      	cmp	r2, r3
 8008730:	d104      	bne.n	800873c <vTaskSwitchContext+0x8c>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	605a      	str	r2, [r3, #4]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	4a0c      	ldr	r2, [pc, #48]	@ (8008774 <vTaskSwitchContext+0xc4>)
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	4a09      	ldr	r2, [pc, #36]	@ (800876c <vTaskSwitchContext+0xbc>)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800874c:	4b09      	ldr	r3, [pc, #36]	@ (8008774 <vTaskSwitchContext+0xc4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3354      	adds	r3, #84	@ 0x54
 8008752:	4a09      	ldr	r2, [pc, #36]	@ (8008778 <vTaskSwitchContext+0xc8>)
 8008754:	6013      	str	r3, [r2, #0]
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	24000e94 	.word	0x24000e94
 8008768:	24000e80 	.word	0x24000e80
 800876c:	24000e74 	.word	0x24000e74
 8008770:	2400099c 	.word	0x2400099c
 8008774:	24000998 	.word	0x24000998
 8008778:	24000014 	.word	0x24000014

0800877c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	60fb      	str	r3, [r7, #12]
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087a4:	4b07      	ldr	r3, [pc, #28]	@ (80087c4 <vTaskPlaceOnEventList+0x48>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3318      	adds	r3, #24
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7fe fe48 	bl	8007442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087b2:	2101      	movs	r1, #1
 80087b4:	6838      	ldr	r0, [r7, #0]
 80087b6:	f000 fa87 	bl	8008cc8 <prvAddCurrentTaskToDelayedList>
}
 80087ba:	bf00      	nop
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	24000998 	.word	0x24000998

080087c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	617b      	str	r3, [r7, #20]
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	e7fd      	b.n	80087ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087f2:	4b0a      	ldr	r3, [pc, #40]	@ (800881c <vTaskPlaceOnEventListRestricted+0x54>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3318      	adds	r3, #24
 80087f8:	4619      	mov	r1, r3
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7fe fdfd 	bl	80073fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008806:	f04f 33ff 	mov.w	r3, #4294967295
 800880a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	68b8      	ldr	r0, [r7, #8]
 8008810:	f000 fa5a 	bl	8008cc8 <prvAddCurrentTaskToDelayedList>
	}
 8008814:	bf00      	nop
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	24000998 	.word	0x24000998

08008820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10b      	bne.n	800884e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	3318      	adds	r3, #24
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe fe2e 	bl	80074b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008858:	4b1d      	ldr	r3, [pc, #116]	@ (80088d0 <xTaskRemoveFromEventList+0xb0>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d11d      	bne.n	800889c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe fe25 	bl	80074b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886e:	4b19      	ldr	r3, [pc, #100]	@ (80088d4 <xTaskRemoveFromEventList+0xb4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d903      	bls.n	800887e <xTaskRemoveFromEventList+0x5e>
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <xTaskRemoveFromEventList+0xb4>)
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4a13      	ldr	r2, [pc, #76]	@ (80088d8 <xTaskRemoveFromEventList+0xb8>)
 800888c:	441a      	add	r2, r3
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	3304      	adds	r3, #4
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f7fe fdb0 	bl	80073fa <vListInsertEnd>
 800889a:	e005      	b.n	80088a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3318      	adds	r3, #24
 80088a0:	4619      	mov	r1, r3
 80088a2:	480e      	ldr	r0, [pc, #56]	@ (80088dc <xTaskRemoveFromEventList+0xbc>)
 80088a4:	f7fe fda9 	bl	80073fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ac:	4b0c      	ldr	r3, [pc, #48]	@ (80088e0 <xTaskRemoveFromEventList+0xc0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d905      	bls.n	80088c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088b6:	2301      	movs	r3, #1
 80088b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088ba:	4b0a      	ldr	r3, [pc, #40]	@ (80088e4 <xTaskRemoveFromEventList+0xc4>)
 80088bc:	2201      	movs	r2, #1
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	e001      	b.n	80088c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088c6:	697b      	ldr	r3, [r7, #20]
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	24000e94 	.word	0x24000e94
 80088d4:	24000e74 	.word	0x24000e74
 80088d8:	2400099c 	.word	0x2400099c
 80088dc:	24000e2c 	.word	0x24000e2c
 80088e0:	24000998 	.word	0x24000998
 80088e4:	24000e80 	.word	0x24000e80

080088e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088f0:	4b06      	ldr	r3, [pc, #24]	@ (800890c <vTaskInternalSetTimeOutState+0x24>)
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <vTaskInternalSetTimeOutState+0x28>)
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	605a      	str	r2, [r3, #4]
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	24000e84 	.word	0x24000e84
 8008910:	24000e70 	.word	0x24000e70

08008914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10b      	bne.n	800893c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	613b      	str	r3, [r7, #16]
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10b      	bne.n	800895a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	60fb      	str	r3, [r7, #12]
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	e7fd      	b.n	8008956 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800895a:	f000 fe95 	bl	8009688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800895e:	4b1d      	ldr	r3, [pc, #116]	@ (80089d4 <xTaskCheckForTimeOut+0xc0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d102      	bne.n	800897e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008978:	2300      	movs	r3, #0
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e023      	b.n	80089c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b15      	ldr	r3, [pc, #84]	@ (80089d8 <xTaskCheckForTimeOut+0xc4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d007      	beq.n	800899a <xTaskCheckForTimeOut+0x86>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	d302      	bcc.n	800899a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008994:	2301      	movs	r3, #1
 8008996:	61fb      	str	r3, [r7, #28]
 8008998:	e015      	b.n	80089c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d20b      	bcs.n	80089bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	1ad2      	subs	r2, r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff99 	bl	80088e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61fb      	str	r3, [r7, #28]
 80089ba:	e004      	b.n	80089c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089c6:	f000 fe91 	bl	80096ec <vPortExitCritical>

	return xReturn;
 80089ca:	69fb      	ldr	r3, [r7, #28]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	24000e70 	.word	0x24000e70
 80089d8:	24000e84 	.word	0x24000e84

080089dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089e0:	4b03      	ldr	r3, [pc, #12]	@ (80089f0 <vTaskMissedYield+0x14>)
 80089e2:	2201      	movs	r2, #1
 80089e4:	601a      	str	r2, [r3, #0]
}
 80089e6:	bf00      	nop
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	24000e80 	.word	0x24000e80

080089f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089fc:	f000 f852 	bl	8008aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a00:	4b06      	ldr	r3, [pc, #24]	@ (8008a1c <prvIdleTask+0x28>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d9f9      	bls.n	80089fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a08:	4b05      	ldr	r3, [pc, #20]	@ (8008a20 <prvIdleTask+0x2c>)
 8008a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a18:	e7f0      	b.n	80089fc <prvIdleTask+0x8>
 8008a1a:	bf00      	nop
 8008a1c:	2400099c 	.word	0x2400099c
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	e00c      	b.n	8008a4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	4613      	mov	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4a12      	ldr	r2, [pc, #72]	@ (8008a84 <prvInitialiseTaskLists+0x60>)
 8008a3c:	4413      	add	r3, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7fe fcae 	bl	80073a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3301      	adds	r3, #1
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b37      	cmp	r3, #55	@ 0x37
 8008a4e:	d9ef      	bls.n	8008a30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a50:	480d      	ldr	r0, [pc, #52]	@ (8008a88 <prvInitialiseTaskLists+0x64>)
 8008a52:	f7fe fca5 	bl	80073a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a56:	480d      	ldr	r0, [pc, #52]	@ (8008a8c <prvInitialiseTaskLists+0x68>)
 8008a58:	f7fe fca2 	bl	80073a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a5c:	480c      	ldr	r0, [pc, #48]	@ (8008a90 <prvInitialiseTaskLists+0x6c>)
 8008a5e:	f7fe fc9f 	bl	80073a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a62:	480c      	ldr	r0, [pc, #48]	@ (8008a94 <prvInitialiseTaskLists+0x70>)
 8008a64:	f7fe fc9c 	bl	80073a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a68:	480b      	ldr	r0, [pc, #44]	@ (8008a98 <prvInitialiseTaskLists+0x74>)
 8008a6a:	f7fe fc99 	bl	80073a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a9c <prvInitialiseTaskLists+0x78>)
 8008a70:	4a05      	ldr	r2, [pc, #20]	@ (8008a88 <prvInitialiseTaskLists+0x64>)
 8008a72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a74:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa0 <prvInitialiseTaskLists+0x7c>)
 8008a76:	4a05      	ldr	r2, [pc, #20]	@ (8008a8c <prvInitialiseTaskLists+0x68>)
 8008a78:	601a      	str	r2, [r3, #0]
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	2400099c 	.word	0x2400099c
 8008a88:	24000dfc 	.word	0x24000dfc
 8008a8c:	24000e10 	.word	0x24000e10
 8008a90:	24000e2c 	.word	0x24000e2c
 8008a94:	24000e40 	.word	0x24000e40
 8008a98:	24000e58 	.word	0x24000e58
 8008a9c:	24000e24 	.word	0x24000e24
 8008aa0:	24000e28 	.word	0x24000e28

08008aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aaa:	e019      	b.n	8008ae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008aac:	f000 fdec 	bl	8009688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab0:	4b10      	ldr	r3, [pc, #64]	@ (8008af4 <prvCheckTasksWaitingTermination+0x50>)
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fcf9 	bl	80074b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8008af8 <prvCheckTasksWaitingTermination+0x54>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8008af8 <prvCheckTasksWaitingTermination+0x54>)
 8008aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008acc:	4b0b      	ldr	r3, [pc, #44]	@ (8008afc <prvCheckTasksWaitingTermination+0x58>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8008afc <prvCheckTasksWaitingTermination+0x58>)
 8008ad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ad6:	f000 fe09 	bl	80096ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f810 	bl	8008b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae0:	4b06      	ldr	r3, [pc, #24]	@ (8008afc <prvCheckTasksWaitingTermination+0x58>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e1      	bne.n	8008aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	24000e40 	.word	0x24000e40
 8008af8:	24000e6c 	.word	0x24000e6c
 8008afc:	24000e54 	.word	0x24000e54

08008b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	3354      	adds	r3, #84	@ 0x54
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f001 f8f3 	bl	8009cf8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d108      	bne.n	8008b2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 ffa1 	bl	8009a68 <vPortFree>
				vPortFree( pxTCB );
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 ff9e 	bl	8009a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b2c:	e019      	b.n	8008b62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d103      	bne.n	8008b40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 ff95 	bl	8009a68 <vPortFree>
	}
 8008b3e:	e010      	b.n	8008b62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d00b      	beq.n	8008b62 <prvDeleteTCB+0x62>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	60fb      	str	r3, [r7, #12]
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	e7fd      	b.n	8008b5e <prvDeleteTCB+0x5e>
	}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba4 <prvResetNextTaskUnblockTime+0x38>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d104      	bne.n	8008b86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b84:	e008      	b.n	8008b98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b86:	4b07      	ldr	r3, [pc, #28]	@ (8008ba4 <prvResetNextTaskUnblockTime+0x38>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4a04      	ldr	r2, [pc, #16]	@ (8008ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8008b96:	6013      	str	r3, [r2, #0]
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	24000e24 	.word	0x24000e24
 8008ba8:	24000e8c 	.word	0x24000e8c

08008bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008be0 <xTaskGetSchedulerState+0x34>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	e008      	b.n	8008bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc0:	4b08      	ldr	r3, [pc, #32]	@ (8008be4 <xTaskGetSchedulerState+0x38>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bc8:	2302      	movs	r3, #2
 8008bca:	607b      	str	r3, [r7, #4]
 8008bcc:	e001      	b.n	8008bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bd2:	687b      	ldr	r3, [r7, #4]
	}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	24000e78 	.word	0x24000e78
 8008be4:	24000e94 	.word	0x24000e94

08008be8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d058      	beq.n	8008cb0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8008cbc <xTaskPriorityDisinherit+0xd4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d00b      	beq.n	8008c20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	60fb      	str	r3, [r7, #12]
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	e7fd      	b.n	8008c1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10b      	bne.n	8008c40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	60bb      	str	r3, [r7, #8]
}
 8008c3a:	bf00      	nop
 8008c3c:	bf00      	nop
 8008c3e:	e7fd      	b.n	8008c3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d02c      	beq.n	8008cb0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d128      	bne.n	8008cb0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fc26 	bl	80074b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c80:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc0 <xTaskPriorityDisinherit+0xd8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d903      	bls.n	8008c90 <xTaskPriorityDisinherit+0xa8>
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc0 <xTaskPriorityDisinherit+0xd8>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4a09      	ldr	r2, [pc, #36]	@ (8008cc4 <xTaskPriorityDisinherit+0xdc>)
 8008c9e:	441a      	add	r2, r3
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4610      	mov	r0, r2
 8008ca8:	f7fe fba7 	bl	80073fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cb0:	697b      	ldr	r3, [r7, #20]
	}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	24000998 	.word	0x24000998
 8008cc0:	24000e74 	.word	0x24000e74
 8008cc4:	2400099c 	.word	0x2400099c

08008cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cd2:	4b21      	ldr	r3, [pc, #132]	@ (8008d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd8:	4b20      	ldr	r3, [pc, #128]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fe fbe8 	bl	80074b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cea:	d10a      	bne.n	8008d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d007      	beq.n	8008d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4819      	ldr	r0, [pc, #100]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8008cfc:	f7fe fb7d 	bl	80073fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d00:	e026      	b.n	8008d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4413      	add	r3, r2
 8008d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d0a:	4b14      	ldr	r3, [pc, #80]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d209      	bcs.n	8008d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d1a:	4b12      	ldr	r3, [pc, #72]	@ (8008d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fe fb8b 	bl	8007442 <vListInsert>
}
 8008d2c:	e010      	b.n	8008d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b0a      	ldr	r3, [pc, #40]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe fb81 	bl	8007442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d40:	4b0a      	ldr	r3, [pc, #40]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d202      	bcs.n	8008d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d4a:	4a08      	ldr	r2, [pc, #32]	@ (8008d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6013      	str	r3, [r2, #0]
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	24000e70 	.word	0x24000e70
 8008d5c:	24000998 	.word	0x24000998
 8008d60:	24000e58 	.word	0x24000e58
 8008d64:	24000e28 	.word	0x24000e28
 8008d68:	24000e24 	.word	0x24000e24
 8008d6c:	24000e8c 	.word	0x24000e8c

08008d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	@ 0x28
 8008d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d7a:	f000 fb13 	bl	80093a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008df4 <xTimerCreateTimerTask+0x84>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d021      	beq.n	8008dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d8e:	1d3a      	adds	r2, r7, #4
 8008d90:	f107 0108 	add.w	r1, r7, #8
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe fae7 	bl	800736c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	9202      	str	r2, [sp, #8]
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	2302      	movs	r3, #2
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	2300      	movs	r3, #0
 8008dae:	460a      	mov	r2, r1
 8008db0:	4911      	ldr	r1, [pc, #68]	@ (8008df8 <xTimerCreateTimerTask+0x88>)
 8008db2:	4812      	ldr	r0, [pc, #72]	@ (8008dfc <xTimerCreateTimerTask+0x8c>)
 8008db4:	f7ff f8a2 	bl	8007efc <xTaskCreateStatic>
 8008db8:	4603      	mov	r3, r0
 8008dba:	4a11      	ldr	r2, [pc, #68]	@ (8008e00 <xTimerCreateTimerTask+0x90>)
 8008dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dbe:	4b10      	ldr	r3, [pc, #64]	@ (8008e00 <xTimerCreateTimerTask+0x90>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	e7fd      	b.n	8008de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008de8:	697b      	ldr	r3, [r7, #20]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3718      	adds	r7, #24
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	24000ec8 	.word	0x24000ec8
 8008df8:	0800a6d8 	.word	0x0800a6d8
 8008dfc:	08008f3d 	.word	0x08008f3d
 8008e00:	24000ecc 	.word	0x24000ecc

08008e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	@ 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	623b      	str	r3, [r7, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	e7fd      	b.n	8008e30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e34:	4b19      	ldr	r3, [pc, #100]	@ (8008e9c <xTimerGenericCommand+0x98>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d02a      	beq.n	8008e92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b05      	cmp	r3, #5
 8008e4c:	dc18      	bgt.n	8008e80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e4e:	f7ff fead 	bl	8008bac <xTaskGetSchedulerState>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d109      	bne.n	8008e6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e58:	4b10      	ldr	r3, [pc, #64]	@ (8008e9c <xTimerGenericCommand+0x98>)
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	f107 0110 	add.w	r1, r7, #16
 8008e60:	2300      	movs	r3, #0
 8008e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e64:	f7fe fc5a 	bl	800771c <xQueueGenericSend>
 8008e68:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e6a:	e012      	b.n	8008e92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e9c <xTimerGenericCommand+0x98>)
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	f107 0110 	add.w	r1, r7, #16
 8008e74:	2300      	movs	r3, #0
 8008e76:	2200      	movs	r2, #0
 8008e78:	f7fe fc50 	bl	800771c <xQueueGenericSend>
 8008e7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e7e:	e008      	b.n	8008e92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e80:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <xTimerGenericCommand+0x98>)
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	f107 0110 	add.w	r1, r7, #16
 8008e88:	2300      	movs	r3, #0
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	f7fe fd48 	bl	8007920 <xQueueGenericSendFromISR>
 8008e90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3728      	adds	r7, #40	@ 0x28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	24000ec8 	.word	0x24000ec8

08008ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eaa:	4b23      	ldr	r3, [pc, #140]	@ (8008f38 <prvProcessExpiredTimer+0x98>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7fe fafb 	bl	80074b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d023      	beq.n	8008f14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	699a      	ldr	r2, [r3, #24]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	18d1      	adds	r1, r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	6978      	ldr	r0, [r7, #20]
 8008eda:	f000 f8d5 	bl	8009088 <prvInsertTimerInActiveList>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d020      	beq.n	8008f26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	2100      	movs	r1, #0
 8008eee:	6978      	ldr	r0, [r7, #20]
 8008ef0:	f7ff ff88 	bl	8008e04 <xTimerGenericCommand>
 8008ef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d114      	bne.n	8008f26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60fb      	str	r3, [r7, #12]
}
 8008f0e:	bf00      	nop
 8008f10:	bf00      	nop
 8008f12:	e7fd      	b.n	8008f10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f1a:	f023 0301 	bic.w	r3, r3, #1
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	4798      	blx	r3
}
 8008f2e:	bf00      	nop
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	24000ec0 	.word	0x24000ec0

08008f3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f44:	f107 0308 	add.w	r3, r7, #8
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f859 	bl	8009000 <prvGetNextExpireTime>
 8008f4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4619      	mov	r1, r3
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f805 	bl	8008f64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f5a:	f000 f8d7 	bl	800910c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f5e:	bf00      	nop
 8008f60:	e7f0      	b.n	8008f44 <prvTimerTask+0x8>
	...

08008f64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f6e:	f7ff fa29 	bl	80083c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 f866 	bl	8009048 <prvSampleTimeNow>
 8008f7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d130      	bne.n	8008fe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <prvProcessTimerOrBlockTask+0x3c>
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d806      	bhi.n	8008fa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f92:	f7ff fa25 	bl	80083e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f96:	68f9      	ldr	r1, [r7, #12]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff ff81 	bl	8008ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f9e:	e024      	b.n	8008fea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d008      	beq.n	8008fb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fa6:	4b13      	ldr	r3, [pc, #76]	@ (8008ff4 <prvProcessTimerOrBlockTask+0x90>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <prvProcessTimerOrBlockTask+0x50>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <prvProcessTimerOrBlockTask+0x52>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff8 <prvProcessTimerOrBlockTask+0x94>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f7fe ff65 	bl	8007e94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fca:	f7ff fa09 	bl	80083e0 <xTaskResumeAll>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10a      	bne.n	8008fea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fd4:	4b09      	ldr	r3, [pc, #36]	@ (8008ffc <prvProcessTimerOrBlockTask+0x98>)
 8008fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	f3bf 8f6f 	isb	sy
}
 8008fe4:	e001      	b.n	8008fea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fe6:	f7ff f9fb 	bl	80083e0 <xTaskResumeAll>
}
 8008fea:	bf00      	nop
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	24000ec4 	.word	0x24000ec4
 8008ff8:	24000ec8 	.word	0x24000ec8
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009008:	4b0e      	ldr	r3, [pc, #56]	@ (8009044 <prvGetNextExpireTime+0x44>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <prvGetNextExpireTime+0x16>
 8009012:	2201      	movs	r2, #1
 8009014:	e000      	b.n	8009018 <prvGetNextExpireTime+0x18>
 8009016:	2200      	movs	r2, #0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d105      	bne.n	8009030 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009024:	4b07      	ldr	r3, [pc, #28]	@ (8009044 <prvGetNextExpireTime+0x44>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60fb      	str	r3, [r7, #12]
 800902e:	e001      	b.n	8009034 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009030:	2300      	movs	r3, #0
 8009032:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009034:	68fb      	ldr	r3, [r7, #12]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	24000ec0 	.word	0x24000ec0

08009048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009050:	f7ff fa64 	bl	800851c <xTaskGetTickCount>
 8009054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009056:	4b0b      	ldr	r3, [pc, #44]	@ (8009084 <prvSampleTimeNow+0x3c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	429a      	cmp	r2, r3
 800905e:	d205      	bcs.n	800906c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009060:	f000 f93a 	bl	80092d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	601a      	str	r2, [r3, #0]
 800906a:	e002      	b.n	8009072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009072:	4a04      	ldr	r2, [pc, #16]	@ (8009084 <prvSampleTimeNow+0x3c>)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009078:	68fb      	ldr	r3, [r7, #12]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	24000ed0 	.word	0x24000ed0

08009088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
 8009094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d812      	bhi.n	80090d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	1ad2      	subs	r2, r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d302      	bcc.n	80090c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090bc:	2301      	movs	r3, #1
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	e01b      	b.n	80090fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090c2:	4b10      	ldr	r3, [pc, #64]	@ (8009104 <prvInsertTimerInActiveList+0x7c>)
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4619      	mov	r1, r3
 80090cc:	4610      	mov	r0, r2
 80090ce:	f7fe f9b8 	bl	8007442 <vListInsert>
 80090d2:	e012      	b.n	80090fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d206      	bcs.n	80090ea <prvInsertTimerInActiveList+0x62>
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d302      	bcc.n	80090ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	e007      	b.n	80090fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ea:	4b07      	ldr	r3, [pc, #28]	@ (8009108 <prvInsertTimerInActiveList+0x80>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7fe f9a4 	bl	8007442 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090fa:	697b      	ldr	r3, [r7, #20]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	24000ec4 	.word	0x24000ec4
 8009108:	24000ec0 	.word	0x24000ec0

0800910c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08e      	sub	sp, #56	@ 0x38
 8009110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009112:	e0ce      	b.n	80092b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	da19      	bge.n	800914e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800911a:	1d3b      	adds	r3, r7, #4
 800911c:	3304      	adds	r3, #4
 800911e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10b      	bne.n	800913e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	61fb      	str	r3, [r7, #28]
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	e7fd      	b.n	800913a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800913e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009144:	6850      	ldr	r0, [r2, #4]
 8009146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009148:	6892      	ldr	r2, [r2, #8]
 800914a:	4611      	mov	r1, r2
 800914c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f2c0 80ae 	blt.w	80092b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800915a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009164:	3304      	adds	r3, #4
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe f9a4 	bl	80074b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800916c:	463b      	mov	r3, r7
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff ff6a 	bl	8009048 <prvSampleTimeNow>
 8009174:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b09      	cmp	r3, #9
 800917a:	f200 8097 	bhi.w	80092ac <prvProcessReceivedCommands+0x1a0>
 800917e:	a201      	add	r2, pc, #4	@ (adr r2, 8009184 <prvProcessReceivedCommands+0x78>)
 8009180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009184:	080091ad 	.word	0x080091ad
 8009188:	080091ad 	.word	0x080091ad
 800918c:	080091ad 	.word	0x080091ad
 8009190:	08009223 	.word	0x08009223
 8009194:	08009237 	.word	0x08009237
 8009198:	08009283 	.word	0x08009283
 800919c:	080091ad 	.word	0x080091ad
 80091a0:	080091ad 	.word	0x080091ad
 80091a4:	08009223 	.word	0x08009223
 80091a8:	08009237 	.word	0x08009237
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	18d1      	adds	r1, r2, r3
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091cc:	f7ff ff5c 	bl	8009088 <prvInsertTimerInActiveList>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d06c      	beq.n	80092b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d061      	beq.n	80092b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	441a      	add	r2, r3
 80091f4:	2300      	movs	r3, #0
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	2100      	movs	r1, #0
 80091fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091fe:	f7ff fe01 	bl	8008e04 <xTimerGenericCommand>
 8009202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d152      	bne.n	80092b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800920a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	61bb      	str	r3, [r7, #24]
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	e7fd      	b.n	800921e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009228:	f023 0301 	bic.w	r3, r3, #1
 800922c:	b2da      	uxtb	r2, r3
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009234:	e03d      	b.n	80092b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800923c:	f043 0301 	orr.w	r3, r3, #1
 8009240:	b2da      	uxtb	r2, r3
 8009242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009244:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10b      	bne.n	800926e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	617b      	str	r3, [r7, #20]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	699a      	ldr	r2, [r3, #24]
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	18d1      	adds	r1, r2, r3
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800927a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800927c:	f7ff ff04 	bl	8009088 <prvInsertTimerInActiveList>
					break;
 8009280:	e017      	b.n	80092b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009292:	f000 fbe9 	bl	8009a68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009296:	e00c      	b.n	80092b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800929e:	f023 0301 	bic.w	r3, r3, #1
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092aa:	e002      	b.n	80092b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80092ac:	bf00      	nop
 80092ae:	e000      	b.n	80092b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80092b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092b2:	4b08      	ldr	r3, [pc, #32]	@ (80092d4 <prvProcessReceivedCommands+0x1c8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	1d39      	adds	r1, r7, #4
 80092b8:	2200      	movs	r2, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fbce 	bl	8007a5c <xQueueReceive>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f47f af26 	bne.w	8009114 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	3730      	adds	r7, #48	@ 0x30
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	24000ec8 	.word	0x24000ec8

080092d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092de:	e049      	b.n	8009374 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092e0:	4b2e      	ldr	r3, [pc, #184]	@ (800939c <prvSwitchTimerLists+0xc4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ea:	4b2c      	ldr	r3, [pc, #176]	@ (800939c <prvSwitchTimerLists+0xc4>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe f8db 	bl	80074b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d02f      	beq.n	8009374 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	4413      	add	r3, r2
 800931c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	429a      	cmp	r2, r3
 8009324:	d90e      	bls.n	8009344 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009332:	4b1a      	ldr	r3, [pc, #104]	@ (800939c <prvSwitchTimerLists+0xc4>)
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3304      	adds	r3, #4
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7fe f880 	bl	8007442 <vListInsert>
 8009342:	e017      	b.n	8009374 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009344:	2300      	movs	r3, #0
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	2300      	movs	r3, #0
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	2100      	movs	r1, #0
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fd58 	bl	8008e04 <xTimerGenericCommand>
 8009354:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10b      	bne.n	8009374 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	603b      	str	r3, [r7, #0]
}
 800936e:	bf00      	nop
 8009370:	bf00      	nop
 8009372:	e7fd      	b.n	8009370 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009374:	4b09      	ldr	r3, [pc, #36]	@ (800939c <prvSwitchTimerLists+0xc4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1b0      	bne.n	80092e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800937e:	4b07      	ldr	r3, [pc, #28]	@ (800939c <prvSwitchTimerLists+0xc4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009384:	4b06      	ldr	r3, [pc, #24]	@ (80093a0 <prvSwitchTimerLists+0xc8>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a04      	ldr	r2, [pc, #16]	@ (800939c <prvSwitchTimerLists+0xc4>)
 800938a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800938c:	4a04      	ldr	r2, [pc, #16]	@ (80093a0 <prvSwitchTimerLists+0xc8>)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	6013      	str	r3, [r2, #0]
}
 8009392:	bf00      	nop
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	24000ec0 	.word	0x24000ec0
 80093a0:	24000ec4 	.word	0x24000ec4

080093a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093aa:	f000 f96d 	bl	8009688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093ae:	4b15      	ldr	r3, [pc, #84]	@ (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d120      	bne.n	80093f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093b6:	4814      	ldr	r0, [pc, #80]	@ (8009408 <prvCheckForValidListAndQueue+0x64>)
 80093b8:	f7fd fff2 	bl	80073a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093bc:	4813      	ldr	r0, [pc, #76]	@ (800940c <prvCheckForValidListAndQueue+0x68>)
 80093be:	f7fd ffef 	bl	80073a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093c2:	4b13      	ldr	r3, [pc, #76]	@ (8009410 <prvCheckForValidListAndQueue+0x6c>)
 80093c4:	4a10      	ldr	r2, [pc, #64]	@ (8009408 <prvCheckForValidListAndQueue+0x64>)
 80093c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093c8:	4b12      	ldr	r3, [pc, #72]	@ (8009414 <prvCheckForValidListAndQueue+0x70>)
 80093ca:	4a10      	ldr	r2, [pc, #64]	@ (800940c <prvCheckForValidListAndQueue+0x68>)
 80093cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093ce:	2300      	movs	r3, #0
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	4b11      	ldr	r3, [pc, #68]	@ (8009418 <prvCheckForValidListAndQueue+0x74>)
 80093d4:	4a11      	ldr	r2, [pc, #68]	@ (800941c <prvCheckForValidListAndQueue+0x78>)
 80093d6:	2110      	movs	r1, #16
 80093d8:	200a      	movs	r0, #10
 80093da:	f7fe f8ff 	bl	80075dc <xQueueGenericCreateStatic>
 80093de:	4603      	mov	r3, r0
 80093e0:	4a08      	ldr	r2, [pc, #32]	@ (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093e4:	4b07      	ldr	r3, [pc, #28]	@ (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093ec:	4b05      	ldr	r3, [pc, #20]	@ (8009404 <prvCheckForValidListAndQueue+0x60>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	490b      	ldr	r1, [pc, #44]	@ (8009420 <prvCheckForValidListAndQueue+0x7c>)
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fd24 	bl	8007e40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093f8:	f000 f978 	bl	80096ec <vPortExitCritical>
}
 80093fc:	bf00      	nop
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	24000ec8 	.word	0x24000ec8
 8009408:	24000e98 	.word	0x24000e98
 800940c:	24000eac 	.word	0x24000eac
 8009410:	24000ec0 	.word	0x24000ec0
 8009414:	24000ec4 	.word	0x24000ec4
 8009418:	24000f74 	.word	0x24000f74
 800941c:	24000ed4 	.word	0x24000ed4
 8009420:	0800a6e0 	.word	0x0800a6e0

08009424 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3b04      	subs	r3, #4
 8009434:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800943c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3b04      	subs	r3, #4
 8009442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f023 0201 	bic.w	r2, r3, #1
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3b04      	subs	r3, #4
 8009452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009454:	4a0c      	ldr	r2, [pc, #48]	@ (8009488 <pxPortInitialiseStack+0x64>)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	3b14      	subs	r3, #20
 800945e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3b04      	subs	r3, #4
 800946a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f06f 0202 	mvn.w	r2, #2
 8009472:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	3b20      	subs	r3, #32
 8009478:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800947a:	68fb      	ldr	r3, [r7, #12]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	0800948d 	.word	0x0800948d

0800948c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009496:	4b13      	ldr	r3, [pc, #76]	@ (80094e4 <prvTaskExitError+0x58>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949e:	d00b      	beq.n	80094b8 <prvTaskExitError+0x2c>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	60fb      	str	r3, [r7, #12]
}
 80094b2:	bf00      	nop
 80094b4:	bf00      	nop
 80094b6:	e7fd      	b.n	80094b4 <prvTaskExitError+0x28>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	60bb      	str	r3, [r7, #8]
}
 80094ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094cc:	bf00      	nop
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0fc      	beq.n	80094ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	24000010 	.word	0x24000010
	...

080094f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094f0:	4b07      	ldr	r3, [pc, #28]	@ (8009510 <pxCurrentTCBConst2>)
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	6808      	ldr	r0, [r1, #0]
 80094f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	f380 8809 	msr	PSP, r0
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8811 	msr	BASEPRI, r0
 800950a:	4770      	bx	lr
 800950c:	f3af 8000 	nop.w

08009510 <pxCurrentTCBConst2>:
 8009510:	24000998 	.word	0x24000998
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009518:	4808      	ldr	r0, [pc, #32]	@ (800953c <prvPortStartFirstTask+0x24>)
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	6800      	ldr	r0, [r0, #0]
 800951e:	f380 8808 	msr	MSP, r0
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f380 8814 	msr	CONTROL, r0
 800952a:	b662      	cpsie	i
 800952c:	b661      	cpsie	f
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	df00      	svc	0
 8009538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800953a:	bf00      	nop
 800953c:	e000ed08 	.word	0xe000ed08

08009540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009546:	4b47      	ldr	r3, [pc, #284]	@ (8009664 <xPortStartScheduler+0x124>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a47      	ldr	r2, [pc, #284]	@ (8009668 <xPortStartScheduler+0x128>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10b      	bne.n	8009568 <xPortStartScheduler+0x28>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	613b      	str	r3, [r7, #16]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009568:	4b3e      	ldr	r3, [pc, #248]	@ (8009664 <xPortStartScheduler+0x124>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a3f      	ldr	r2, [pc, #252]	@ (800966c <xPortStartScheduler+0x12c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d10b      	bne.n	800958a <xPortStartScheduler+0x4a>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60fb      	str	r3, [r7, #12]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800958a:	4b39      	ldr	r3, [pc, #228]	@ (8009670 <xPortStartScheduler+0x130>)
 800958c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	22ff      	movs	r2, #255	@ 0xff
 800959a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	4b31      	ldr	r3, [pc, #196]	@ (8009674 <xPortStartScheduler+0x134>)
 80095b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095b2:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <xPortStartScheduler+0x138>)
 80095b4:	2207      	movs	r2, #7
 80095b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095b8:	e009      	b.n	80095ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009678 <xPortStartScheduler+0x138>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3b01      	subs	r3, #1
 80095c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009678 <xPortStartScheduler+0x138>)
 80095c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d6:	2b80      	cmp	r3, #128	@ 0x80
 80095d8:	d0ef      	beq.n	80095ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095da:	4b27      	ldr	r3, [pc, #156]	@ (8009678 <xPortStartScheduler+0x138>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1c3 0307 	rsb	r3, r3, #7
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d00b      	beq.n	80095fe <xPortStartScheduler+0xbe>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60bb      	str	r3, [r7, #8]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009678 <xPortStartScheduler+0x138>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	4a1c      	ldr	r2, [pc, #112]	@ (8009678 <xPortStartScheduler+0x138>)
 8009606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009608:	4b1b      	ldr	r3, [pc, #108]	@ (8009678 <xPortStartScheduler+0x138>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009610:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <xPortStartScheduler+0x138>)
 8009612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	b2da      	uxtb	r2, r3
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800961c:	4b17      	ldr	r3, [pc, #92]	@ (800967c <xPortStartScheduler+0x13c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a16      	ldr	r2, [pc, #88]	@ (800967c <xPortStartScheduler+0x13c>)
 8009622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009628:	4b14      	ldr	r3, [pc, #80]	@ (800967c <xPortStartScheduler+0x13c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a13      	ldr	r2, [pc, #76]	@ (800967c <xPortStartScheduler+0x13c>)
 800962e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009634:	f000 f8da 	bl	80097ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009638:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <xPortStartScheduler+0x140>)
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800963e:	f000 f8f9 	bl	8009834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009642:	4b10      	ldr	r3, [pc, #64]	@ (8009684 <xPortStartScheduler+0x144>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a0f      	ldr	r2, [pc, #60]	@ (8009684 <xPortStartScheduler+0x144>)
 8009648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800964c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800964e:	f7ff ff63 	bl	8009518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009652:	f7ff f82d 	bl	80086b0 <vTaskSwitchContext>
	prvTaskExitError();
 8009656:	f7ff ff19 	bl	800948c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	e000ed00 	.word	0xe000ed00
 8009668:	410fc271 	.word	0x410fc271
 800966c:	410fc270 	.word	0x410fc270
 8009670:	e000e400 	.word	0xe000e400
 8009674:	24000fc4 	.word	0x24000fc4
 8009678:	24000fc8 	.word	0x24000fc8
 800967c:	e000ed20 	.word	0xe000ed20
 8009680:	24000010 	.word	0x24000010
 8009684:	e000ef34 	.word	0xe000ef34

08009688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	607b      	str	r3, [r7, #4]
}
 80096a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096a2:	4b10      	ldr	r3, [pc, #64]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	4a0e      	ldr	r2, [pc, #56]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096ac:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d110      	bne.n	80096d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096b4:	4b0c      	ldr	r3, [pc, #48]	@ (80096e8 <vPortEnterCritical+0x60>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	603b      	str	r3, [r7, #0]
}
 80096d0:	bf00      	nop
 80096d2:	bf00      	nop
 80096d4:	e7fd      	b.n	80096d2 <vPortEnterCritical+0x4a>
	}
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	24000010 	.word	0x24000010
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096f2:	4b12      	ldr	r3, [pc, #72]	@ (800973c <vPortExitCritical+0x50>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <vPortExitCritical+0x26>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	607b      	str	r3, [r7, #4]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009712:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <vPortExitCritical+0x50>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3b01      	subs	r3, #1
 8009718:	4a08      	ldr	r2, [pc, #32]	@ (800973c <vPortExitCritical+0x50>)
 800971a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <vPortExitCritical+0x50>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d105      	bne.n	8009730 <vPortExitCritical+0x44>
 8009724:	2300      	movs	r3, #0
 8009726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f383 8811 	msr	BASEPRI, r3
}
 800972e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	24000010 	.word	0x24000010

08009740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009740:	f3ef 8009 	mrs	r0, PSP
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4b15      	ldr	r3, [pc, #84]	@ (80097a0 <pxCurrentTCBConst>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	f01e 0f10 	tst.w	lr, #16
 8009750:	bf08      	it	eq
 8009752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	6010      	str	r0, [r2, #0]
 800975c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009764:	f380 8811 	msr	BASEPRI, r0
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f7fe ff9e 	bl	80086b0 <vTaskSwitchContext>
 8009774:	f04f 0000 	mov.w	r0, #0
 8009778:	f380 8811 	msr	BASEPRI, r0
 800977c:	bc09      	pop	{r0, r3}
 800977e:	6819      	ldr	r1, [r3, #0]
 8009780:	6808      	ldr	r0, [r1, #0]
 8009782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009786:	f01e 0f10 	tst.w	lr, #16
 800978a:	bf08      	it	eq
 800978c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009790:	f380 8809 	msr	PSP, r0
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w

080097a0 <pxCurrentTCBConst>:
 80097a0:	24000998 	.word	0x24000998
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097c2:	f7fe febb 	bl	800853c <xTaskIncrementTick>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097cc:	4b06      	ldr	r3, [pc, #24]	@ (80097e8 <xPortSysTickHandler+0x40>)
 80097ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f383 8811 	msr	BASEPRI, r3
}
 80097de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <vPortSetupTimerInterrupt+0x34>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <vPortSetupTimerInterrupt+0x38>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <vPortSetupTimerInterrupt+0x3c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0a      	ldr	r2, [pc, #40]	@ (800982c <vPortSetupTimerInterrupt+0x40>)
 8009802:	fba2 2303 	umull	r2, r3, r2, r3
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	4a09      	ldr	r2, [pc, #36]	@ (8009830 <vPortSetupTimerInterrupt+0x44>)
 800980a:	3b01      	subs	r3, #1
 800980c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800980e:	4b04      	ldr	r3, [pc, #16]	@ (8009820 <vPortSetupTimerInterrupt+0x34>)
 8009810:	2207      	movs	r2, #7
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	e000e010 	.word	0xe000e010
 8009824:	e000e018 	.word	0xe000e018
 8009828:	24000000 	.word	0x24000000
 800982c:	10624dd3 	.word	0x10624dd3
 8009830:	e000e014 	.word	0xe000e014

08009834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009844 <vPortEnableVFP+0x10>
 8009838:	6801      	ldr	r1, [r0, #0]
 800983a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800983e:	6001      	str	r1, [r0, #0]
 8009840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009842:	bf00      	nop
 8009844:	e000ed88 	.word	0xe000ed88

08009848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b0f      	cmp	r3, #15
 8009858:	d915      	bls.n	8009886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800985a:	4a18      	ldr	r2, [pc, #96]	@ (80098bc <vPortValidateInterruptPriority+0x74>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009864:	4b16      	ldr	r3, [pc, #88]	@ (80098c0 <vPortValidateInterruptPriority+0x78>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	7afa      	ldrb	r2, [r7, #11]
 800986a:	429a      	cmp	r2, r3
 800986c:	d20b      	bcs.n	8009886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	607b      	str	r3, [r7, #4]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009886:	4b0f      	ldr	r3, [pc, #60]	@ (80098c4 <vPortValidateInterruptPriority+0x7c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800988e:	4b0e      	ldr	r3, [pc, #56]	@ (80098c8 <vPortValidateInterruptPriority+0x80>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d90b      	bls.n	80098ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	603b      	str	r3, [r7, #0]
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	e7fd      	b.n	80098aa <vPortValidateInterruptPriority+0x62>
	}
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	e000e3f0 	.word	0xe000e3f0
 80098c0:	24000fc4 	.word	0x24000fc4
 80098c4:	e000ed0c 	.word	0xe000ed0c
 80098c8:	24000fc8 	.word	0x24000fc8

080098cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	@ 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098d8:	f7fe fd74 	bl	80083c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009a50 <pvPortMalloc+0x184>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098e4:	f000 f924 	bl	8009b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a54 <pvPortMalloc+0x188>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4013      	ands	r3, r2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f040 8095 	bne.w	8009a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01e      	beq.n	800993a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098fc:	2208      	movs	r2, #8
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4413      	add	r3, r2
 8009902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d015      	beq.n	800993a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f023 0307 	bic.w	r3, r3, #7
 8009914:	3308      	adds	r3, #8
 8009916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <pvPortMalloc+0x6e>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	617b      	str	r3, [r7, #20]
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	e7fd      	b.n	8009936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d06f      	beq.n	8009a20 <pvPortMalloc+0x154>
 8009940:	4b45      	ldr	r3, [pc, #276]	@ (8009a58 <pvPortMalloc+0x18c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	429a      	cmp	r2, r3
 8009948:	d86a      	bhi.n	8009a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800994a:	4b44      	ldr	r3, [pc, #272]	@ (8009a5c <pvPortMalloc+0x190>)
 800994c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800994e:	4b43      	ldr	r3, [pc, #268]	@ (8009a5c <pvPortMalloc+0x190>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009954:	e004      	b.n	8009960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800995a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	429a      	cmp	r2, r3
 8009968:	d903      	bls.n	8009972 <pvPortMalloc+0xa6>
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f1      	bne.n	8009956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009972:	4b37      	ldr	r3, [pc, #220]	@ (8009a50 <pvPortMalloc+0x184>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009978:	429a      	cmp	r2, r3
 800997a:	d051      	beq.n	8009a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2208      	movs	r2, #8
 8009982:	4413      	add	r3, r2
 8009984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	1ad2      	subs	r2, r2, r3
 8009996:	2308      	movs	r3, #8
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	429a      	cmp	r2, r3
 800999c:	d920      	bls.n	80099e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800999e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4413      	add	r3, r2
 80099a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <pvPortMalloc+0xfc>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099da:	69b8      	ldr	r0, [r7, #24]
 80099dc:	f000 f90a 	bl	8009bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a60 <pvPortMalloc+0x194>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d203      	bcs.n	8009a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099fa:	4b17      	ldr	r3, [pc, #92]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a18      	ldr	r2, [pc, #96]	@ (8009a60 <pvPortMalloc+0x194>)
 8009a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <pvPortMalloc+0x188>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a16:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <pvPortMalloc+0x198>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	4a11      	ldr	r2, [pc, #68]	@ (8009a64 <pvPortMalloc+0x198>)
 8009a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a20:	f7fe fcde 	bl	80083e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <pvPortMalloc+0x17a>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60fb      	str	r3, [r7, #12]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <pvPortMalloc+0x176>
	return pvReturn;
 8009a46:	69fb      	ldr	r3, [r7, #28]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3728      	adds	r7, #40	@ 0x28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	24004bd4 	.word	0x24004bd4
 8009a54:	24004be8 	.word	0x24004be8
 8009a58:	24004bd8 	.word	0x24004bd8
 8009a5c:	24004bcc 	.word	0x24004bcc
 8009a60:	24004bdc 	.word	0x24004bdc
 8009a64:	24004be0 	.word	0x24004be0

08009a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d04f      	beq.n	8009b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	425b      	negs	r3, r3
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4413      	add	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	4b25      	ldr	r3, [pc, #148]	@ (8009b24 <vPortFree+0xbc>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <vPortFree+0x46>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	60fb      	str	r3, [r7, #12]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <vPortFree+0x66>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60bb      	str	r3, [r7, #8]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	4b14      	ldr	r3, [pc, #80]	@ (8009b24 <vPortFree+0xbc>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01e      	beq.n	8009b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d11a      	bne.n	8009b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b24 <vPortFree+0xbc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009af4:	f7fe fc66 	bl	80083c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <vPortFree+0xc0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4413      	add	r3, r2
 8009b02:	4a09      	ldr	r2, [pc, #36]	@ (8009b28 <vPortFree+0xc0>)
 8009b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f000 f874 	bl	8009bf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b0c:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <vPortFree+0xc4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3301      	adds	r3, #1
 8009b12:	4a06      	ldr	r2, [pc, #24]	@ (8009b2c <vPortFree+0xc4>)
 8009b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b16:	f7fe fc63 	bl	80083e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b1a:	bf00      	nop
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	24004be8 	.word	0x24004be8
 8009b28:	24004bd8 	.word	0x24004bd8
 8009b2c:	24004be4 	.word	0x24004be4

08009b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b3c:	4b27      	ldr	r3, [pc, #156]	@ (8009bdc <prvHeapInit+0xac>)
 8009b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00c      	beq.n	8009b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3307      	adds	r3, #7
 8009b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <prvHeapInit+0xac>)
 8009b60:	4413      	add	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b68:	4a1d      	ldr	r2, [pc, #116]	@ (8009be0 <prvHeapInit+0xb0>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8009be0 <prvHeapInit+0xb0>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	4413      	add	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b7c:	2208      	movs	r2, #8
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	1a9b      	subs	r3, r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 0307 	bic.w	r3, r3, #7
 8009b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a15      	ldr	r2, [pc, #84]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b92:	4b14      	ldr	r3, [pc, #80]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b9a:	4b12      	ldr	r3, [pc, #72]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	1ad2      	subs	r2, r2, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <prvHeapInit+0xb4>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8009be8 <prvHeapInit+0xb8>)
 8009bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a09      	ldr	r2, [pc, #36]	@ (8009bec <prvHeapInit+0xbc>)
 8009bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bc8:	4b09      	ldr	r3, [pc, #36]	@ (8009bf0 <prvHeapInit+0xc0>)
 8009bca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bce:	601a      	str	r2, [r3, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	24000fcc 	.word	0x24000fcc
 8009be0:	24004bcc 	.word	0x24004bcc
 8009be4:	24004bd4 	.word	0x24004bd4
 8009be8:	24004bdc 	.word	0x24004bdc
 8009bec:	24004bd8 	.word	0x24004bd8
 8009bf0:	24004be8 	.word	0x24004be8

08009bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bfc:	4b28      	ldr	r3, [pc, #160]	@ (8009ca0 <prvInsertBlockIntoFreeList+0xac>)
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e002      	b.n	8009c08 <prvInsertBlockIntoFreeList+0x14>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d8f7      	bhi.n	8009c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d108      	bne.n	8009c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	441a      	add	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d118      	bne.n	8009c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b15      	ldr	r3, [pc, #84]	@ (8009ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d00d      	beq.n	8009c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	441a      	add	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e008      	b.n	8009c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	e003      	b.n	8009c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d002      	beq.n	8009c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c92:	bf00      	nop
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	24004bcc 	.word	0x24004bcc
 8009ca4:	24004bd4 	.word	0x24004bd4

08009ca8 <siprintf>:
 8009ca8:	b40e      	push	{r1, r2, r3}
 8009caa:	b500      	push	{lr}
 8009cac:	b09c      	sub	sp, #112	@ 0x70
 8009cae:	ab1d      	add	r3, sp, #116	@ 0x74
 8009cb0:	9002      	str	r0, [sp, #8]
 8009cb2:	9006      	str	r0, [sp, #24]
 8009cb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009cb8:	4809      	ldr	r0, [pc, #36]	@ (8009ce0 <siprintf+0x38>)
 8009cba:	9107      	str	r1, [sp, #28]
 8009cbc:	9104      	str	r1, [sp, #16]
 8009cbe:	4909      	ldr	r1, [pc, #36]	@ (8009ce4 <siprintf+0x3c>)
 8009cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc4:	9105      	str	r1, [sp, #20]
 8009cc6:	6800      	ldr	r0, [r0, #0]
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	a902      	add	r1, sp, #8
 8009ccc:	f000 f9f8 	bl	800a0c0 <_svfiprintf_r>
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]
 8009cd6:	b01c      	add	sp, #112	@ 0x70
 8009cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cdc:	b003      	add	sp, #12
 8009cde:	4770      	bx	lr
 8009ce0:	24000014 	.word	0x24000014
 8009ce4:	ffff0208 	.word	0xffff0208

08009ce8 <memset>:
 8009ce8:	4402      	add	r2, r0
 8009cea:	4603      	mov	r3, r0
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d100      	bne.n	8009cf2 <memset+0xa>
 8009cf0:	4770      	bx	lr
 8009cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cf6:	e7f9      	b.n	8009cec <memset+0x4>

08009cf8 <_reclaim_reent>:
 8009cf8:	4b29      	ldr	r3, [pc, #164]	@ (8009da0 <_reclaim_reent+0xa8>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4283      	cmp	r3, r0
 8009cfe:	b570      	push	{r4, r5, r6, lr}
 8009d00:	4604      	mov	r4, r0
 8009d02:	d04b      	beq.n	8009d9c <_reclaim_reent+0xa4>
 8009d04:	69c3      	ldr	r3, [r0, #28]
 8009d06:	b1ab      	cbz	r3, 8009d34 <_reclaim_reent+0x3c>
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	b16b      	cbz	r3, 8009d28 <_reclaim_reent+0x30>
 8009d0c:	2500      	movs	r5, #0
 8009d0e:	69e3      	ldr	r3, [r4, #28]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	5959      	ldr	r1, [r3, r5]
 8009d14:	2900      	cmp	r1, #0
 8009d16:	d13b      	bne.n	8009d90 <_reclaim_reent+0x98>
 8009d18:	3504      	adds	r5, #4
 8009d1a:	2d80      	cmp	r5, #128	@ 0x80
 8009d1c:	d1f7      	bne.n	8009d0e <_reclaim_reent+0x16>
 8009d1e:	69e3      	ldr	r3, [r4, #28]
 8009d20:	4620      	mov	r0, r4
 8009d22:	68d9      	ldr	r1, [r3, #12]
 8009d24:	f000 f878 	bl	8009e18 <_free_r>
 8009d28:	69e3      	ldr	r3, [r4, #28]
 8009d2a:	6819      	ldr	r1, [r3, #0]
 8009d2c:	b111      	cbz	r1, 8009d34 <_reclaim_reent+0x3c>
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 f872 	bl	8009e18 <_free_r>
 8009d34:	6961      	ldr	r1, [r4, #20]
 8009d36:	b111      	cbz	r1, 8009d3e <_reclaim_reent+0x46>
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f000 f86d 	bl	8009e18 <_free_r>
 8009d3e:	69e1      	ldr	r1, [r4, #28]
 8009d40:	b111      	cbz	r1, 8009d48 <_reclaim_reent+0x50>
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 f868 	bl	8009e18 <_free_r>
 8009d48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d4a:	b111      	cbz	r1, 8009d52 <_reclaim_reent+0x5a>
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 f863 	bl	8009e18 <_free_r>
 8009d52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d54:	b111      	cbz	r1, 8009d5c <_reclaim_reent+0x64>
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 f85e 	bl	8009e18 <_free_r>
 8009d5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d5e:	b111      	cbz	r1, 8009d66 <_reclaim_reent+0x6e>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 f859 	bl	8009e18 <_free_r>
 8009d66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d68:	b111      	cbz	r1, 8009d70 <_reclaim_reent+0x78>
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 f854 	bl	8009e18 <_free_r>
 8009d70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d72:	b111      	cbz	r1, 8009d7a <_reclaim_reent+0x82>
 8009d74:	4620      	mov	r0, r4
 8009d76:	f000 f84f 	bl	8009e18 <_free_r>
 8009d7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d7c:	b111      	cbz	r1, 8009d84 <_reclaim_reent+0x8c>
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 f84a 	bl	8009e18 <_free_r>
 8009d84:	6a23      	ldr	r3, [r4, #32]
 8009d86:	b14b      	cbz	r3, 8009d9c <_reclaim_reent+0xa4>
 8009d88:	4620      	mov	r0, r4
 8009d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d8e:	4718      	bx	r3
 8009d90:	680e      	ldr	r6, [r1, #0]
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 f840 	bl	8009e18 <_free_r>
 8009d98:	4631      	mov	r1, r6
 8009d9a:	e7bb      	b.n	8009d14 <_reclaim_reent+0x1c>
 8009d9c:	bd70      	pop	{r4, r5, r6, pc}
 8009d9e:	bf00      	nop
 8009da0:	24000014 	.word	0x24000014

08009da4 <__errno>:
 8009da4:	4b01      	ldr	r3, [pc, #4]	@ (8009dac <__errno+0x8>)
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	24000014 	.word	0x24000014

08009db0 <__libc_init_array>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	4d0d      	ldr	r5, [pc, #52]	@ (8009de8 <__libc_init_array+0x38>)
 8009db4:	4c0d      	ldr	r4, [pc, #52]	@ (8009dec <__libc_init_array+0x3c>)
 8009db6:	1b64      	subs	r4, r4, r5
 8009db8:	10a4      	asrs	r4, r4, #2
 8009dba:	2600      	movs	r6, #0
 8009dbc:	42a6      	cmp	r6, r4
 8009dbe:	d109      	bne.n	8009dd4 <__libc_init_array+0x24>
 8009dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8009df0 <__libc_init_array+0x40>)
 8009dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8009df4 <__libc_init_array+0x44>)
 8009dc4:	f000 fc66 	bl	800a694 <_init>
 8009dc8:	1b64      	subs	r4, r4, r5
 8009dca:	10a4      	asrs	r4, r4, #2
 8009dcc:	2600      	movs	r6, #0
 8009dce:	42a6      	cmp	r6, r4
 8009dd0:	d105      	bne.n	8009dde <__libc_init_array+0x2e>
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd8:	4798      	blx	r3
 8009dda:	3601      	adds	r6, #1
 8009ddc:	e7ee      	b.n	8009dbc <__libc_init_array+0xc>
 8009dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de2:	4798      	blx	r3
 8009de4:	3601      	adds	r6, #1
 8009de6:	e7f2      	b.n	8009dce <__libc_init_array+0x1e>
 8009de8:	0800a7a4 	.word	0x0800a7a4
 8009dec:	0800a7a4 	.word	0x0800a7a4
 8009df0:	0800a7a4 	.word	0x0800a7a4
 8009df4:	0800a7a8 	.word	0x0800a7a8

08009df8 <__retarget_lock_acquire_recursive>:
 8009df8:	4770      	bx	lr

08009dfa <__retarget_lock_release_recursive>:
 8009dfa:	4770      	bx	lr

08009dfc <memcpy>:
 8009dfc:	440a      	add	r2, r1
 8009dfe:	4291      	cmp	r1, r2
 8009e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e04:	d100      	bne.n	8009e08 <memcpy+0xc>
 8009e06:	4770      	bx	lr
 8009e08:	b510      	push	{r4, lr}
 8009e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e12:	4291      	cmp	r1, r2
 8009e14:	d1f9      	bne.n	8009e0a <memcpy+0xe>
 8009e16:	bd10      	pop	{r4, pc}

08009e18 <_free_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	2900      	cmp	r1, #0
 8009e1e:	d041      	beq.n	8009ea4 <_free_r+0x8c>
 8009e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e24:	1f0c      	subs	r4, r1, #4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfb8      	it	lt
 8009e2a:	18e4      	addlt	r4, r4, r3
 8009e2c:	f000 f8e0 	bl	8009ff0 <__malloc_lock>
 8009e30:	4a1d      	ldr	r2, [pc, #116]	@ (8009ea8 <_free_r+0x90>)
 8009e32:	6813      	ldr	r3, [r2, #0]
 8009e34:	b933      	cbnz	r3, 8009e44 <_free_r+0x2c>
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	6014      	str	r4, [r2, #0]
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e40:	f000 b8dc 	b.w	8009ffc <__malloc_unlock>
 8009e44:	42a3      	cmp	r3, r4
 8009e46:	d908      	bls.n	8009e5a <_free_r+0x42>
 8009e48:	6820      	ldr	r0, [r4, #0]
 8009e4a:	1821      	adds	r1, r4, r0
 8009e4c:	428b      	cmp	r3, r1
 8009e4e:	bf01      	itttt	eq
 8009e50:	6819      	ldreq	r1, [r3, #0]
 8009e52:	685b      	ldreq	r3, [r3, #4]
 8009e54:	1809      	addeq	r1, r1, r0
 8009e56:	6021      	streq	r1, [r4, #0]
 8009e58:	e7ed      	b.n	8009e36 <_free_r+0x1e>
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	b10b      	cbz	r3, 8009e64 <_free_r+0x4c>
 8009e60:	42a3      	cmp	r3, r4
 8009e62:	d9fa      	bls.n	8009e5a <_free_r+0x42>
 8009e64:	6811      	ldr	r1, [r2, #0]
 8009e66:	1850      	adds	r0, r2, r1
 8009e68:	42a0      	cmp	r0, r4
 8009e6a:	d10b      	bne.n	8009e84 <_free_r+0x6c>
 8009e6c:	6820      	ldr	r0, [r4, #0]
 8009e6e:	4401      	add	r1, r0
 8009e70:	1850      	adds	r0, r2, r1
 8009e72:	4283      	cmp	r3, r0
 8009e74:	6011      	str	r1, [r2, #0]
 8009e76:	d1e0      	bne.n	8009e3a <_free_r+0x22>
 8009e78:	6818      	ldr	r0, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	6053      	str	r3, [r2, #4]
 8009e7e:	4408      	add	r0, r1
 8009e80:	6010      	str	r0, [r2, #0]
 8009e82:	e7da      	b.n	8009e3a <_free_r+0x22>
 8009e84:	d902      	bls.n	8009e8c <_free_r+0x74>
 8009e86:	230c      	movs	r3, #12
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	e7d6      	b.n	8009e3a <_free_r+0x22>
 8009e8c:	6820      	ldr	r0, [r4, #0]
 8009e8e:	1821      	adds	r1, r4, r0
 8009e90:	428b      	cmp	r3, r1
 8009e92:	bf04      	itt	eq
 8009e94:	6819      	ldreq	r1, [r3, #0]
 8009e96:	685b      	ldreq	r3, [r3, #4]
 8009e98:	6063      	str	r3, [r4, #4]
 8009e9a:	bf04      	itt	eq
 8009e9c:	1809      	addeq	r1, r1, r0
 8009e9e:	6021      	streq	r1, [r4, #0]
 8009ea0:	6054      	str	r4, [r2, #4]
 8009ea2:	e7ca      	b.n	8009e3a <_free_r+0x22>
 8009ea4:	bd38      	pop	{r3, r4, r5, pc}
 8009ea6:	bf00      	nop
 8009ea8:	24004d30 	.word	0x24004d30

08009eac <sbrk_aligned>:
 8009eac:	b570      	push	{r4, r5, r6, lr}
 8009eae:	4e0f      	ldr	r6, [pc, #60]	@ (8009eec <sbrk_aligned+0x40>)
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	6831      	ldr	r1, [r6, #0]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	b911      	cbnz	r1, 8009ebe <sbrk_aligned+0x12>
 8009eb8:	f000 fba6 	bl	800a608 <_sbrk_r>
 8009ebc:	6030      	str	r0, [r6, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 fba1 	bl	800a608 <_sbrk_r>
 8009ec6:	1c43      	adds	r3, r0, #1
 8009ec8:	d103      	bne.n	8009ed2 <sbrk_aligned+0x26>
 8009eca:	f04f 34ff 	mov.w	r4, #4294967295
 8009ece:	4620      	mov	r0, r4
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
 8009ed2:	1cc4      	adds	r4, r0, #3
 8009ed4:	f024 0403 	bic.w	r4, r4, #3
 8009ed8:	42a0      	cmp	r0, r4
 8009eda:	d0f8      	beq.n	8009ece <sbrk_aligned+0x22>
 8009edc:	1a21      	subs	r1, r4, r0
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 fb92 	bl	800a608 <_sbrk_r>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d1f2      	bne.n	8009ece <sbrk_aligned+0x22>
 8009ee8:	e7ef      	b.n	8009eca <sbrk_aligned+0x1e>
 8009eea:	bf00      	nop
 8009eec:	24004d2c 	.word	0x24004d2c

08009ef0 <_malloc_r>:
 8009ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef4:	1ccd      	adds	r5, r1, #3
 8009ef6:	f025 0503 	bic.w	r5, r5, #3
 8009efa:	3508      	adds	r5, #8
 8009efc:	2d0c      	cmp	r5, #12
 8009efe:	bf38      	it	cc
 8009f00:	250c      	movcc	r5, #12
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	4606      	mov	r6, r0
 8009f06:	db01      	blt.n	8009f0c <_malloc_r+0x1c>
 8009f08:	42a9      	cmp	r1, r5
 8009f0a:	d904      	bls.n	8009f16 <_malloc_r+0x26>
 8009f0c:	230c      	movs	r3, #12
 8009f0e:	6033      	str	r3, [r6, #0]
 8009f10:	2000      	movs	r0, #0
 8009f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fec <_malloc_r+0xfc>
 8009f1a:	f000 f869 	bl	8009ff0 <__malloc_lock>
 8009f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f22:	461c      	mov	r4, r3
 8009f24:	bb44      	cbnz	r4, 8009f78 <_malloc_r+0x88>
 8009f26:	4629      	mov	r1, r5
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7ff ffbf 	bl	8009eac <sbrk_aligned>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	4604      	mov	r4, r0
 8009f32:	d158      	bne.n	8009fe6 <_malloc_r+0xf6>
 8009f34:	f8d8 4000 	ldr.w	r4, [r8]
 8009f38:	4627      	mov	r7, r4
 8009f3a:	2f00      	cmp	r7, #0
 8009f3c:	d143      	bne.n	8009fc6 <_malloc_r+0xd6>
 8009f3e:	2c00      	cmp	r4, #0
 8009f40:	d04b      	beq.n	8009fda <_malloc_r+0xea>
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	4639      	mov	r1, r7
 8009f46:	4630      	mov	r0, r6
 8009f48:	eb04 0903 	add.w	r9, r4, r3
 8009f4c:	f000 fb5c 	bl	800a608 <_sbrk_r>
 8009f50:	4581      	cmp	r9, r0
 8009f52:	d142      	bne.n	8009fda <_malloc_r+0xea>
 8009f54:	6821      	ldr	r1, [r4, #0]
 8009f56:	1a6d      	subs	r5, r5, r1
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7ff ffa6 	bl	8009eac <sbrk_aligned>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d03a      	beq.n	8009fda <_malloc_r+0xea>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	442b      	add	r3, r5
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	bb62      	cbnz	r2, 8009fcc <_malloc_r+0xdc>
 8009f72:	f8c8 7000 	str.w	r7, [r8]
 8009f76:	e00f      	b.n	8009f98 <_malloc_r+0xa8>
 8009f78:	6822      	ldr	r2, [r4, #0]
 8009f7a:	1b52      	subs	r2, r2, r5
 8009f7c:	d420      	bmi.n	8009fc0 <_malloc_r+0xd0>
 8009f7e:	2a0b      	cmp	r2, #11
 8009f80:	d917      	bls.n	8009fb2 <_malloc_r+0xc2>
 8009f82:	1961      	adds	r1, r4, r5
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	6025      	str	r5, [r4, #0]
 8009f88:	bf18      	it	ne
 8009f8a:	6059      	strne	r1, [r3, #4]
 8009f8c:	6863      	ldr	r3, [r4, #4]
 8009f8e:	bf08      	it	eq
 8009f90:	f8c8 1000 	streq.w	r1, [r8]
 8009f94:	5162      	str	r2, [r4, r5]
 8009f96:	604b      	str	r3, [r1, #4]
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f000 f82f 	bl	8009ffc <__malloc_unlock>
 8009f9e:	f104 000b 	add.w	r0, r4, #11
 8009fa2:	1d23      	adds	r3, r4, #4
 8009fa4:	f020 0007 	bic.w	r0, r0, #7
 8009fa8:	1ac2      	subs	r2, r0, r3
 8009faa:	bf1c      	itt	ne
 8009fac:	1a1b      	subne	r3, r3, r0
 8009fae:	50a3      	strne	r3, [r4, r2]
 8009fb0:	e7af      	b.n	8009f12 <_malloc_r+0x22>
 8009fb2:	6862      	ldr	r2, [r4, #4]
 8009fb4:	42a3      	cmp	r3, r4
 8009fb6:	bf0c      	ite	eq
 8009fb8:	f8c8 2000 	streq.w	r2, [r8]
 8009fbc:	605a      	strne	r2, [r3, #4]
 8009fbe:	e7eb      	b.n	8009f98 <_malloc_r+0xa8>
 8009fc0:	4623      	mov	r3, r4
 8009fc2:	6864      	ldr	r4, [r4, #4]
 8009fc4:	e7ae      	b.n	8009f24 <_malloc_r+0x34>
 8009fc6:	463c      	mov	r4, r7
 8009fc8:	687f      	ldr	r7, [r7, #4]
 8009fca:	e7b6      	b.n	8009f3a <_malloc_r+0x4a>
 8009fcc:	461a      	mov	r2, r3
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	42a3      	cmp	r3, r4
 8009fd2:	d1fb      	bne.n	8009fcc <_malloc_r+0xdc>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	6053      	str	r3, [r2, #4]
 8009fd8:	e7de      	b.n	8009f98 <_malloc_r+0xa8>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f000 f80c 	bl	8009ffc <__malloc_unlock>
 8009fe4:	e794      	b.n	8009f10 <_malloc_r+0x20>
 8009fe6:	6005      	str	r5, [r0, #0]
 8009fe8:	e7d6      	b.n	8009f98 <_malloc_r+0xa8>
 8009fea:	bf00      	nop
 8009fec:	24004d30 	.word	0x24004d30

08009ff0 <__malloc_lock>:
 8009ff0:	4801      	ldr	r0, [pc, #4]	@ (8009ff8 <__malloc_lock+0x8>)
 8009ff2:	f7ff bf01 	b.w	8009df8 <__retarget_lock_acquire_recursive>
 8009ff6:	bf00      	nop
 8009ff8:	24004d28 	.word	0x24004d28

08009ffc <__malloc_unlock>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	@ (800a004 <__malloc_unlock+0x8>)
 8009ffe:	f7ff befc 	b.w	8009dfa <__retarget_lock_release_recursive>
 800a002:	bf00      	nop
 800a004:	24004d28 	.word	0x24004d28

0800a008 <__ssputs_r>:
 800a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	688e      	ldr	r6, [r1, #8]
 800a00e:	461f      	mov	r7, r3
 800a010:	42be      	cmp	r6, r7
 800a012:	680b      	ldr	r3, [r1, #0]
 800a014:	4682      	mov	sl, r0
 800a016:	460c      	mov	r4, r1
 800a018:	4690      	mov	r8, r2
 800a01a:	d82d      	bhi.n	800a078 <__ssputs_r+0x70>
 800a01c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a020:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a024:	d026      	beq.n	800a074 <__ssputs_r+0x6c>
 800a026:	6965      	ldr	r5, [r4, #20]
 800a028:	6909      	ldr	r1, [r1, #16]
 800a02a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a02e:	eba3 0901 	sub.w	r9, r3, r1
 800a032:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a036:	1c7b      	adds	r3, r7, #1
 800a038:	444b      	add	r3, r9
 800a03a:	106d      	asrs	r5, r5, #1
 800a03c:	429d      	cmp	r5, r3
 800a03e:	bf38      	it	cc
 800a040:	461d      	movcc	r5, r3
 800a042:	0553      	lsls	r3, r2, #21
 800a044:	d527      	bpl.n	800a096 <__ssputs_r+0x8e>
 800a046:	4629      	mov	r1, r5
 800a048:	f7ff ff52 	bl	8009ef0 <_malloc_r>
 800a04c:	4606      	mov	r6, r0
 800a04e:	b360      	cbz	r0, 800a0aa <__ssputs_r+0xa2>
 800a050:	6921      	ldr	r1, [r4, #16]
 800a052:	464a      	mov	r2, r9
 800a054:	f7ff fed2 	bl	8009dfc <memcpy>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a05e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	6126      	str	r6, [r4, #16]
 800a066:	6165      	str	r5, [r4, #20]
 800a068:	444e      	add	r6, r9
 800a06a:	eba5 0509 	sub.w	r5, r5, r9
 800a06e:	6026      	str	r6, [r4, #0]
 800a070:	60a5      	str	r5, [r4, #8]
 800a072:	463e      	mov	r6, r7
 800a074:	42be      	cmp	r6, r7
 800a076:	d900      	bls.n	800a07a <__ssputs_r+0x72>
 800a078:	463e      	mov	r6, r7
 800a07a:	6820      	ldr	r0, [r4, #0]
 800a07c:	4632      	mov	r2, r6
 800a07e:	4641      	mov	r1, r8
 800a080:	f000 faa8 	bl	800a5d4 <memmove>
 800a084:	68a3      	ldr	r3, [r4, #8]
 800a086:	1b9b      	subs	r3, r3, r6
 800a088:	60a3      	str	r3, [r4, #8]
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	4433      	add	r3, r6
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	2000      	movs	r0, #0
 800a092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a096:	462a      	mov	r2, r5
 800a098:	f000 fac6 	bl	800a628 <_realloc_r>
 800a09c:	4606      	mov	r6, r0
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d1e0      	bne.n	800a064 <__ssputs_r+0x5c>
 800a0a2:	6921      	ldr	r1, [r4, #16]
 800a0a4:	4650      	mov	r0, sl
 800a0a6:	f7ff feb7 	bl	8009e18 <_free_r>
 800a0aa:	230c      	movs	r3, #12
 800a0ac:	f8ca 3000 	str.w	r3, [sl]
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e7e9      	b.n	800a092 <__ssputs_r+0x8a>
	...

0800a0c0 <_svfiprintf_r>:
 800a0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	4698      	mov	r8, r3
 800a0c6:	898b      	ldrh	r3, [r1, #12]
 800a0c8:	061b      	lsls	r3, r3, #24
 800a0ca:	b09d      	sub	sp, #116	@ 0x74
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	4614      	mov	r4, r2
 800a0d2:	d510      	bpl.n	800a0f6 <_svfiprintf_r+0x36>
 800a0d4:	690b      	ldr	r3, [r1, #16]
 800a0d6:	b973      	cbnz	r3, 800a0f6 <_svfiprintf_r+0x36>
 800a0d8:	2140      	movs	r1, #64	@ 0x40
 800a0da:	f7ff ff09 	bl	8009ef0 <_malloc_r>
 800a0de:	6028      	str	r0, [r5, #0]
 800a0e0:	6128      	str	r0, [r5, #16]
 800a0e2:	b930      	cbnz	r0, 800a0f2 <_svfiprintf_r+0x32>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	b01d      	add	sp, #116	@ 0x74
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	2340      	movs	r3, #64	@ 0x40
 800a0f4:	616b      	str	r3, [r5, #20]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0fa:	2320      	movs	r3, #32
 800a0fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a100:	f8cd 800c 	str.w	r8, [sp, #12]
 800a104:	2330      	movs	r3, #48	@ 0x30
 800a106:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a2a4 <_svfiprintf_r+0x1e4>
 800a10a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a10e:	f04f 0901 	mov.w	r9, #1
 800a112:	4623      	mov	r3, r4
 800a114:	469a      	mov	sl, r3
 800a116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a11a:	b10a      	cbz	r2, 800a120 <_svfiprintf_r+0x60>
 800a11c:	2a25      	cmp	r2, #37	@ 0x25
 800a11e:	d1f9      	bne.n	800a114 <_svfiprintf_r+0x54>
 800a120:	ebba 0b04 	subs.w	fp, sl, r4
 800a124:	d00b      	beq.n	800a13e <_svfiprintf_r+0x7e>
 800a126:	465b      	mov	r3, fp
 800a128:	4622      	mov	r2, r4
 800a12a:	4629      	mov	r1, r5
 800a12c:	4638      	mov	r0, r7
 800a12e:	f7ff ff6b 	bl	800a008 <__ssputs_r>
 800a132:	3001      	adds	r0, #1
 800a134:	f000 80a7 	beq.w	800a286 <_svfiprintf_r+0x1c6>
 800a138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a13a:	445a      	add	r2, fp
 800a13c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a13e:	f89a 3000 	ldrb.w	r3, [sl]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 809f 	beq.w	800a286 <_svfiprintf_r+0x1c6>
 800a148:	2300      	movs	r3, #0
 800a14a:	f04f 32ff 	mov.w	r2, #4294967295
 800a14e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a152:	f10a 0a01 	add.w	sl, sl, #1
 800a156:	9304      	str	r3, [sp, #16]
 800a158:	9307      	str	r3, [sp, #28]
 800a15a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a15e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a160:	4654      	mov	r4, sl
 800a162:	2205      	movs	r2, #5
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	484e      	ldr	r0, [pc, #312]	@ (800a2a4 <_svfiprintf_r+0x1e4>)
 800a16a:	f7f6 f8d9 	bl	8000320 <memchr>
 800a16e:	9a04      	ldr	r2, [sp, #16]
 800a170:	b9d8      	cbnz	r0, 800a1aa <_svfiprintf_r+0xea>
 800a172:	06d0      	lsls	r0, r2, #27
 800a174:	bf44      	itt	mi
 800a176:	2320      	movmi	r3, #32
 800a178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a17c:	0711      	lsls	r1, r2, #28
 800a17e:	bf44      	itt	mi
 800a180:	232b      	movmi	r3, #43	@ 0x2b
 800a182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a186:	f89a 3000 	ldrb.w	r3, [sl]
 800a18a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a18c:	d015      	beq.n	800a1ba <_svfiprintf_r+0xfa>
 800a18e:	9a07      	ldr	r2, [sp, #28]
 800a190:	4654      	mov	r4, sl
 800a192:	2000      	movs	r0, #0
 800a194:	f04f 0c0a 	mov.w	ip, #10
 800a198:	4621      	mov	r1, r4
 800a19a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a19e:	3b30      	subs	r3, #48	@ 0x30
 800a1a0:	2b09      	cmp	r3, #9
 800a1a2:	d94b      	bls.n	800a23c <_svfiprintf_r+0x17c>
 800a1a4:	b1b0      	cbz	r0, 800a1d4 <_svfiprintf_r+0x114>
 800a1a6:	9207      	str	r2, [sp, #28]
 800a1a8:	e014      	b.n	800a1d4 <_svfiprintf_r+0x114>
 800a1aa:	eba0 0308 	sub.w	r3, r0, r8
 800a1ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	9304      	str	r3, [sp, #16]
 800a1b6:	46a2      	mov	sl, r4
 800a1b8:	e7d2      	b.n	800a160 <_svfiprintf_r+0xa0>
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	1d19      	adds	r1, r3, #4
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	9103      	str	r1, [sp, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	bfbb      	ittet	lt
 800a1c6:	425b      	neglt	r3, r3
 800a1c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a1cc:	9307      	strge	r3, [sp, #28]
 800a1ce:	9307      	strlt	r3, [sp, #28]
 800a1d0:	bfb8      	it	lt
 800a1d2:	9204      	strlt	r2, [sp, #16]
 800a1d4:	7823      	ldrb	r3, [r4, #0]
 800a1d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1d8:	d10a      	bne.n	800a1f0 <_svfiprintf_r+0x130>
 800a1da:	7863      	ldrb	r3, [r4, #1]
 800a1dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1de:	d132      	bne.n	800a246 <_svfiprintf_r+0x186>
 800a1e0:	9b03      	ldr	r3, [sp, #12]
 800a1e2:	1d1a      	adds	r2, r3, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	9203      	str	r2, [sp, #12]
 800a1e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1ec:	3402      	adds	r4, #2
 800a1ee:	9305      	str	r3, [sp, #20]
 800a1f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a2b4 <_svfiprintf_r+0x1f4>
 800a1f4:	7821      	ldrb	r1, [r4, #0]
 800a1f6:	2203      	movs	r2, #3
 800a1f8:	4650      	mov	r0, sl
 800a1fa:	f7f6 f891 	bl	8000320 <memchr>
 800a1fe:	b138      	cbz	r0, 800a210 <_svfiprintf_r+0x150>
 800a200:	9b04      	ldr	r3, [sp, #16]
 800a202:	eba0 000a 	sub.w	r0, r0, sl
 800a206:	2240      	movs	r2, #64	@ 0x40
 800a208:	4082      	lsls	r2, r0
 800a20a:	4313      	orrs	r3, r2
 800a20c:	3401      	adds	r4, #1
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a214:	4824      	ldr	r0, [pc, #144]	@ (800a2a8 <_svfiprintf_r+0x1e8>)
 800a216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a21a:	2206      	movs	r2, #6
 800a21c:	f7f6 f880 	bl	8000320 <memchr>
 800a220:	2800      	cmp	r0, #0
 800a222:	d036      	beq.n	800a292 <_svfiprintf_r+0x1d2>
 800a224:	4b21      	ldr	r3, [pc, #132]	@ (800a2ac <_svfiprintf_r+0x1ec>)
 800a226:	bb1b      	cbnz	r3, 800a270 <_svfiprintf_r+0x1b0>
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	3307      	adds	r3, #7
 800a22c:	f023 0307 	bic.w	r3, r3, #7
 800a230:	3308      	adds	r3, #8
 800a232:	9303      	str	r3, [sp, #12]
 800a234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a236:	4433      	add	r3, r6
 800a238:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23a:	e76a      	b.n	800a112 <_svfiprintf_r+0x52>
 800a23c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a240:	460c      	mov	r4, r1
 800a242:	2001      	movs	r0, #1
 800a244:	e7a8      	b.n	800a198 <_svfiprintf_r+0xd8>
 800a246:	2300      	movs	r3, #0
 800a248:	3401      	adds	r4, #1
 800a24a:	9305      	str	r3, [sp, #20]
 800a24c:	4619      	mov	r1, r3
 800a24e:	f04f 0c0a 	mov.w	ip, #10
 800a252:	4620      	mov	r0, r4
 800a254:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a258:	3a30      	subs	r2, #48	@ 0x30
 800a25a:	2a09      	cmp	r2, #9
 800a25c:	d903      	bls.n	800a266 <_svfiprintf_r+0x1a6>
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0c6      	beq.n	800a1f0 <_svfiprintf_r+0x130>
 800a262:	9105      	str	r1, [sp, #20]
 800a264:	e7c4      	b.n	800a1f0 <_svfiprintf_r+0x130>
 800a266:	fb0c 2101 	mla	r1, ip, r1, r2
 800a26a:	4604      	mov	r4, r0
 800a26c:	2301      	movs	r3, #1
 800a26e:	e7f0      	b.n	800a252 <_svfiprintf_r+0x192>
 800a270:	ab03      	add	r3, sp, #12
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	462a      	mov	r2, r5
 800a276:	4b0e      	ldr	r3, [pc, #56]	@ (800a2b0 <_svfiprintf_r+0x1f0>)
 800a278:	a904      	add	r1, sp, #16
 800a27a:	4638      	mov	r0, r7
 800a27c:	f3af 8000 	nop.w
 800a280:	1c42      	adds	r2, r0, #1
 800a282:	4606      	mov	r6, r0
 800a284:	d1d6      	bne.n	800a234 <_svfiprintf_r+0x174>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	065b      	lsls	r3, r3, #25
 800a28a:	f53f af2d 	bmi.w	800a0e8 <_svfiprintf_r+0x28>
 800a28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a290:	e72c      	b.n	800a0ec <_svfiprintf_r+0x2c>
 800a292:	ab03      	add	r3, sp, #12
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	462a      	mov	r2, r5
 800a298:	4b05      	ldr	r3, [pc, #20]	@ (800a2b0 <_svfiprintf_r+0x1f0>)
 800a29a:	a904      	add	r1, sp, #16
 800a29c:	4638      	mov	r0, r7
 800a29e:	f000 f879 	bl	800a394 <_printf_i>
 800a2a2:	e7ed      	b.n	800a280 <_svfiprintf_r+0x1c0>
 800a2a4:	0800a768 	.word	0x0800a768
 800a2a8:	0800a772 	.word	0x0800a772
 800a2ac:	00000000 	.word	0x00000000
 800a2b0:	0800a009 	.word	0x0800a009
 800a2b4:	0800a76e 	.word	0x0800a76e

0800a2b8 <_printf_common>:
 800a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2bc:	4616      	mov	r6, r2
 800a2be:	4698      	mov	r8, r3
 800a2c0:	688a      	ldr	r2, [r1, #8]
 800a2c2:	690b      	ldr	r3, [r1, #16]
 800a2c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	bfb8      	it	lt
 800a2cc:	4613      	movlt	r3, r2
 800a2ce:	6033      	str	r3, [r6, #0]
 800a2d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	b10a      	cbz	r2, 800a2de <_printf_common+0x26>
 800a2da:	3301      	adds	r3, #1
 800a2dc:	6033      	str	r3, [r6, #0]
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	0699      	lsls	r1, r3, #26
 800a2e2:	bf42      	ittt	mi
 800a2e4:	6833      	ldrmi	r3, [r6, #0]
 800a2e6:	3302      	addmi	r3, #2
 800a2e8:	6033      	strmi	r3, [r6, #0]
 800a2ea:	6825      	ldr	r5, [r4, #0]
 800a2ec:	f015 0506 	ands.w	r5, r5, #6
 800a2f0:	d106      	bne.n	800a300 <_printf_common+0x48>
 800a2f2:	f104 0a19 	add.w	sl, r4, #25
 800a2f6:	68e3      	ldr	r3, [r4, #12]
 800a2f8:	6832      	ldr	r2, [r6, #0]
 800a2fa:	1a9b      	subs	r3, r3, r2
 800a2fc:	42ab      	cmp	r3, r5
 800a2fe:	dc26      	bgt.n	800a34e <_printf_common+0x96>
 800a300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	3b00      	subs	r3, #0
 800a308:	bf18      	it	ne
 800a30a:	2301      	movne	r3, #1
 800a30c:	0692      	lsls	r2, r2, #26
 800a30e:	d42b      	bmi.n	800a368 <_printf_common+0xb0>
 800a310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a314:	4641      	mov	r1, r8
 800a316:	4638      	mov	r0, r7
 800a318:	47c8      	blx	r9
 800a31a:	3001      	adds	r0, #1
 800a31c:	d01e      	beq.n	800a35c <_printf_common+0xa4>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	6922      	ldr	r2, [r4, #16]
 800a322:	f003 0306 	and.w	r3, r3, #6
 800a326:	2b04      	cmp	r3, #4
 800a328:	bf02      	ittt	eq
 800a32a:	68e5      	ldreq	r5, [r4, #12]
 800a32c:	6833      	ldreq	r3, [r6, #0]
 800a32e:	1aed      	subeq	r5, r5, r3
 800a330:	68a3      	ldr	r3, [r4, #8]
 800a332:	bf0c      	ite	eq
 800a334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a338:	2500      	movne	r5, #0
 800a33a:	4293      	cmp	r3, r2
 800a33c:	bfc4      	itt	gt
 800a33e:	1a9b      	subgt	r3, r3, r2
 800a340:	18ed      	addgt	r5, r5, r3
 800a342:	2600      	movs	r6, #0
 800a344:	341a      	adds	r4, #26
 800a346:	42b5      	cmp	r5, r6
 800a348:	d11a      	bne.n	800a380 <_printf_common+0xc8>
 800a34a:	2000      	movs	r0, #0
 800a34c:	e008      	b.n	800a360 <_printf_common+0xa8>
 800a34e:	2301      	movs	r3, #1
 800a350:	4652      	mov	r2, sl
 800a352:	4641      	mov	r1, r8
 800a354:	4638      	mov	r0, r7
 800a356:	47c8      	blx	r9
 800a358:	3001      	adds	r0, #1
 800a35a:	d103      	bne.n	800a364 <_printf_common+0xac>
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a364:	3501      	adds	r5, #1
 800a366:	e7c6      	b.n	800a2f6 <_printf_common+0x3e>
 800a368:	18e1      	adds	r1, r4, r3
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	2030      	movs	r0, #48	@ 0x30
 800a36e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a372:	4422      	add	r2, r4
 800a374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a37c:	3302      	adds	r3, #2
 800a37e:	e7c7      	b.n	800a310 <_printf_common+0x58>
 800a380:	2301      	movs	r3, #1
 800a382:	4622      	mov	r2, r4
 800a384:	4641      	mov	r1, r8
 800a386:	4638      	mov	r0, r7
 800a388:	47c8      	blx	r9
 800a38a:	3001      	adds	r0, #1
 800a38c:	d0e6      	beq.n	800a35c <_printf_common+0xa4>
 800a38e:	3601      	adds	r6, #1
 800a390:	e7d9      	b.n	800a346 <_printf_common+0x8e>
	...

0800a394 <_printf_i>:
 800a394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a398:	7e0f      	ldrb	r7, [r1, #24]
 800a39a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a39c:	2f78      	cmp	r7, #120	@ 0x78
 800a39e:	4691      	mov	r9, r2
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	469a      	mov	sl, r3
 800a3a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3aa:	d807      	bhi.n	800a3bc <_printf_i+0x28>
 800a3ac:	2f62      	cmp	r7, #98	@ 0x62
 800a3ae:	d80a      	bhi.n	800a3c6 <_printf_i+0x32>
 800a3b0:	2f00      	cmp	r7, #0
 800a3b2:	f000 80d2 	beq.w	800a55a <_printf_i+0x1c6>
 800a3b6:	2f58      	cmp	r7, #88	@ 0x58
 800a3b8:	f000 80b9 	beq.w	800a52e <_printf_i+0x19a>
 800a3bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3c4:	e03a      	b.n	800a43c <_printf_i+0xa8>
 800a3c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3ca:	2b15      	cmp	r3, #21
 800a3cc:	d8f6      	bhi.n	800a3bc <_printf_i+0x28>
 800a3ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a3d4 <_printf_i+0x40>)
 800a3d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3d4:	0800a42d 	.word	0x0800a42d
 800a3d8:	0800a441 	.word	0x0800a441
 800a3dc:	0800a3bd 	.word	0x0800a3bd
 800a3e0:	0800a3bd 	.word	0x0800a3bd
 800a3e4:	0800a3bd 	.word	0x0800a3bd
 800a3e8:	0800a3bd 	.word	0x0800a3bd
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a3bd 	.word	0x0800a3bd
 800a3f4:	0800a3bd 	.word	0x0800a3bd
 800a3f8:	0800a3bd 	.word	0x0800a3bd
 800a3fc:	0800a3bd 	.word	0x0800a3bd
 800a400:	0800a541 	.word	0x0800a541
 800a404:	0800a46b 	.word	0x0800a46b
 800a408:	0800a4fb 	.word	0x0800a4fb
 800a40c:	0800a3bd 	.word	0x0800a3bd
 800a410:	0800a3bd 	.word	0x0800a3bd
 800a414:	0800a563 	.word	0x0800a563
 800a418:	0800a3bd 	.word	0x0800a3bd
 800a41c:	0800a46b 	.word	0x0800a46b
 800a420:	0800a3bd 	.word	0x0800a3bd
 800a424:	0800a3bd 	.word	0x0800a3bd
 800a428:	0800a503 	.word	0x0800a503
 800a42c:	6833      	ldr	r3, [r6, #0]
 800a42e:	1d1a      	adds	r2, r3, #4
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6032      	str	r2, [r6, #0]
 800a434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a43c:	2301      	movs	r3, #1
 800a43e:	e09d      	b.n	800a57c <_printf_i+0x1e8>
 800a440:	6833      	ldr	r3, [r6, #0]
 800a442:	6820      	ldr	r0, [r4, #0]
 800a444:	1d19      	adds	r1, r3, #4
 800a446:	6031      	str	r1, [r6, #0]
 800a448:	0606      	lsls	r6, r0, #24
 800a44a:	d501      	bpl.n	800a450 <_printf_i+0xbc>
 800a44c:	681d      	ldr	r5, [r3, #0]
 800a44e:	e003      	b.n	800a458 <_printf_i+0xc4>
 800a450:	0645      	lsls	r5, r0, #25
 800a452:	d5fb      	bpl.n	800a44c <_printf_i+0xb8>
 800a454:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a458:	2d00      	cmp	r5, #0
 800a45a:	da03      	bge.n	800a464 <_printf_i+0xd0>
 800a45c:	232d      	movs	r3, #45	@ 0x2d
 800a45e:	426d      	negs	r5, r5
 800a460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a464:	4859      	ldr	r0, [pc, #356]	@ (800a5cc <_printf_i+0x238>)
 800a466:	230a      	movs	r3, #10
 800a468:	e011      	b.n	800a48e <_printf_i+0xfa>
 800a46a:	6821      	ldr	r1, [r4, #0]
 800a46c:	6833      	ldr	r3, [r6, #0]
 800a46e:	0608      	lsls	r0, r1, #24
 800a470:	f853 5b04 	ldr.w	r5, [r3], #4
 800a474:	d402      	bmi.n	800a47c <_printf_i+0xe8>
 800a476:	0649      	lsls	r1, r1, #25
 800a478:	bf48      	it	mi
 800a47a:	b2ad      	uxthmi	r5, r5
 800a47c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a47e:	4853      	ldr	r0, [pc, #332]	@ (800a5cc <_printf_i+0x238>)
 800a480:	6033      	str	r3, [r6, #0]
 800a482:	bf14      	ite	ne
 800a484:	230a      	movne	r3, #10
 800a486:	2308      	moveq	r3, #8
 800a488:	2100      	movs	r1, #0
 800a48a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a48e:	6866      	ldr	r6, [r4, #4]
 800a490:	60a6      	str	r6, [r4, #8]
 800a492:	2e00      	cmp	r6, #0
 800a494:	bfa2      	ittt	ge
 800a496:	6821      	ldrge	r1, [r4, #0]
 800a498:	f021 0104 	bicge.w	r1, r1, #4
 800a49c:	6021      	strge	r1, [r4, #0]
 800a49e:	b90d      	cbnz	r5, 800a4a4 <_printf_i+0x110>
 800a4a0:	2e00      	cmp	r6, #0
 800a4a2:	d04b      	beq.n	800a53c <_printf_i+0x1a8>
 800a4a4:	4616      	mov	r6, r2
 800a4a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4aa:	fb03 5711 	mls	r7, r3, r1, r5
 800a4ae:	5dc7      	ldrb	r7, [r0, r7]
 800a4b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4b4:	462f      	mov	r7, r5
 800a4b6:	42bb      	cmp	r3, r7
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	d9f4      	bls.n	800a4a6 <_printf_i+0x112>
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	d10b      	bne.n	800a4d8 <_printf_i+0x144>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	07df      	lsls	r7, r3, #31
 800a4c4:	d508      	bpl.n	800a4d8 <_printf_i+0x144>
 800a4c6:	6923      	ldr	r3, [r4, #16]
 800a4c8:	6861      	ldr	r1, [r4, #4]
 800a4ca:	4299      	cmp	r1, r3
 800a4cc:	bfde      	ittt	le
 800a4ce:	2330      	movle	r3, #48	@ 0x30
 800a4d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4d8:	1b92      	subs	r2, r2, r6
 800a4da:	6122      	str	r2, [r4, #16]
 800a4dc:	f8cd a000 	str.w	sl, [sp]
 800a4e0:	464b      	mov	r3, r9
 800a4e2:	aa03      	add	r2, sp, #12
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	f7ff fee6 	bl	800a2b8 <_printf_common>
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d14a      	bne.n	800a586 <_printf_i+0x1f2>
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f4:	b004      	add	sp, #16
 800a4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	f043 0320 	orr.w	r3, r3, #32
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	4833      	ldr	r0, [pc, #204]	@ (800a5d0 <_printf_i+0x23c>)
 800a504:	2778      	movs	r7, #120	@ 0x78
 800a506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a50a:	6823      	ldr	r3, [r4, #0]
 800a50c:	6831      	ldr	r1, [r6, #0]
 800a50e:	061f      	lsls	r7, r3, #24
 800a510:	f851 5b04 	ldr.w	r5, [r1], #4
 800a514:	d402      	bmi.n	800a51c <_printf_i+0x188>
 800a516:	065f      	lsls	r7, r3, #25
 800a518:	bf48      	it	mi
 800a51a:	b2ad      	uxthmi	r5, r5
 800a51c:	6031      	str	r1, [r6, #0]
 800a51e:	07d9      	lsls	r1, r3, #31
 800a520:	bf44      	itt	mi
 800a522:	f043 0320 	orrmi.w	r3, r3, #32
 800a526:	6023      	strmi	r3, [r4, #0]
 800a528:	b11d      	cbz	r5, 800a532 <_printf_i+0x19e>
 800a52a:	2310      	movs	r3, #16
 800a52c:	e7ac      	b.n	800a488 <_printf_i+0xf4>
 800a52e:	4827      	ldr	r0, [pc, #156]	@ (800a5cc <_printf_i+0x238>)
 800a530:	e7e9      	b.n	800a506 <_printf_i+0x172>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	f023 0320 	bic.w	r3, r3, #32
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	e7f6      	b.n	800a52a <_printf_i+0x196>
 800a53c:	4616      	mov	r6, r2
 800a53e:	e7bd      	b.n	800a4bc <_printf_i+0x128>
 800a540:	6833      	ldr	r3, [r6, #0]
 800a542:	6825      	ldr	r5, [r4, #0]
 800a544:	6961      	ldr	r1, [r4, #20]
 800a546:	1d18      	adds	r0, r3, #4
 800a548:	6030      	str	r0, [r6, #0]
 800a54a:	062e      	lsls	r6, r5, #24
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	d501      	bpl.n	800a554 <_printf_i+0x1c0>
 800a550:	6019      	str	r1, [r3, #0]
 800a552:	e002      	b.n	800a55a <_printf_i+0x1c6>
 800a554:	0668      	lsls	r0, r5, #25
 800a556:	d5fb      	bpl.n	800a550 <_printf_i+0x1bc>
 800a558:	8019      	strh	r1, [r3, #0]
 800a55a:	2300      	movs	r3, #0
 800a55c:	6123      	str	r3, [r4, #16]
 800a55e:	4616      	mov	r6, r2
 800a560:	e7bc      	b.n	800a4dc <_printf_i+0x148>
 800a562:	6833      	ldr	r3, [r6, #0]
 800a564:	1d1a      	adds	r2, r3, #4
 800a566:	6032      	str	r2, [r6, #0]
 800a568:	681e      	ldr	r6, [r3, #0]
 800a56a:	6862      	ldr	r2, [r4, #4]
 800a56c:	2100      	movs	r1, #0
 800a56e:	4630      	mov	r0, r6
 800a570:	f7f5 fed6 	bl	8000320 <memchr>
 800a574:	b108      	cbz	r0, 800a57a <_printf_i+0x1e6>
 800a576:	1b80      	subs	r0, r0, r6
 800a578:	6060      	str	r0, [r4, #4]
 800a57a:	6863      	ldr	r3, [r4, #4]
 800a57c:	6123      	str	r3, [r4, #16]
 800a57e:	2300      	movs	r3, #0
 800a580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a584:	e7aa      	b.n	800a4dc <_printf_i+0x148>
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	4632      	mov	r2, r6
 800a58a:	4649      	mov	r1, r9
 800a58c:	4640      	mov	r0, r8
 800a58e:	47d0      	blx	sl
 800a590:	3001      	adds	r0, #1
 800a592:	d0ad      	beq.n	800a4f0 <_printf_i+0x15c>
 800a594:	6823      	ldr	r3, [r4, #0]
 800a596:	079b      	lsls	r3, r3, #30
 800a598:	d413      	bmi.n	800a5c2 <_printf_i+0x22e>
 800a59a:	68e0      	ldr	r0, [r4, #12]
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	4298      	cmp	r0, r3
 800a5a0:	bfb8      	it	lt
 800a5a2:	4618      	movlt	r0, r3
 800a5a4:	e7a6      	b.n	800a4f4 <_printf_i+0x160>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	47d0      	blx	sl
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d09d      	beq.n	800a4f0 <_printf_i+0x15c>
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	68e3      	ldr	r3, [r4, #12]
 800a5b8:	9903      	ldr	r1, [sp, #12]
 800a5ba:	1a5b      	subs	r3, r3, r1
 800a5bc:	42ab      	cmp	r3, r5
 800a5be:	dcf2      	bgt.n	800a5a6 <_printf_i+0x212>
 800a5c0:	e7eb      	b.n	800a59a <_printf_i+0x206>
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	f104 0619 	add.w	r6, r4, #25
 800a5c8:	e7f5      	b.n	800a5b6 <_printf_i+0x222>
 800a5ca:	bf00      	nop
 800a5cc:	0800a779 	.word	0x0800a779
 800a5d0:	0800a78a 	.word	0x0800a78a

0800a5d4 <memmove>:
 800a5d4:	4288      	cmp	r0, r1
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	eb01 0402 	add.w	r4, r1, r2
 800a5dc:	d902      	bls.n	800a5e4 <memmove+0x10>
 800a5de:	4284      	cmp	r4, r0
 800a5e0:	4623      	mov	r3, r4
 800a5e2:	d807      	bhi.n	800a5f4 <memmove+0x20>
 800a5e4:	1e43      	subs	r3, r0, #1
 800a5e6:	42a1      	cmp	r1, r4
 800a5e8:	d008      	beq.n	800a5fc <memmove+0x28>
 800a5ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5f2:	e7f8      	b.n	800a5e6 <memmove+0x12>
 800a5f4:	4402      	add	r2, r0
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	428a      	cmp	r2, r1
 800a5fa:	d100      	bne.n	800a5fe <memmove+0x2a>
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a606:	e7f7      	b.n	800a5f8 <memmove+0x24>

0800a608 <_sbrk_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4d06      	ldr	r5, [pc, #24]	@ (800a624 <_sbrk_r+0x1c>)
 800a60c:	2300      	movs	r3, #0
 800a60e:	4604      	mov	r4, r0
 800a610:	4608      	mov	r0, r1
 800a612:	602b      	str	r3, [r5, #0]
 800a614:	f7f6 fc2c 	bl	8000e70 <_sbrk>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d102      	bne.n	800a622 <_sbrk_r+0x1a>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	b103      	cbz	r3, 800a622 <_sbrk_r+0x1a>
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	24004d24 	.word	0x24004d24

0800a628 <_realloc_r>:
 800a628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a62c:	4680      	mov	r8, r0
 800a62e:	4615      	mov	r5, r2
 800a630:	460c      	mov	r4, r1
 800a632:	b921      	cbnz	r1, 800a63e <_realloc_r+0x16>
 800a634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a638:	4611      	mov	r1, r2
 800a63a:	f7ff bc59 	b.w	8009ef0 <_malloc_r>
 800a63e:	b92a      	cbnz	r2, 800a64c <_realloc_r+0x24>
 800a640:	f7ff fbea 	bl	8009e18 <_free_r>
 800a644:	2400      	movs	r4, #0
 800a646:	4620      	mov	r0, r4
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64c:	f000 f81a 	bl	800a684 <_malloc_usable_size_r>
 800a650:	4285      	cmp	r5, r0
 800a652:	4606      	mov	r6, r0
 800a654:	d802      	bhi.n	800a65c <_realloc_r+0x34>
 800a656:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a65a:	d8f4      	bhi.n	800a646 <_realloc_r+0x1e>
 800a65c:	4629      	mov	r1, r5
 800a65e:	4640      	mov	r0, r8
 800a660:	f7ff fc46 	bl	8009ef0 <_malloc_r>
 800a664:	4607      	mov	r7, r0
 800a666:	2800      	cmp	r0, #0
 800a668:	d0ec      	beq.n	800a644 <_realloc_r+0x1c>
 800a66a:	42b5      	cmp	r5, r6
 800a66c:	462a      	mov	r2, r5
 800a66e:	4621      	mov	r1, r4
 800a670:	bf28      	it	cs
 800a672:	4632      	movcs	r2, r6
 800a674:	f7ff fbc2 	bl	8009dfc <memcpy>
 800a678:	4621      	mov	r1, r4
 800a67a:	4640      	mov	r0, r8
 800a67c:	f7ff fbcc 	bl	8009e18 <_free_r>
 800a680:	463c      	mov	r4, r7
 800a682:	e7e0      	b.n	800a646 <_realloc_r+0x1e>

0800a684 <_malloc_usable_size_r>:
 800a684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a688:	1f18      	subs	r0, r3, #4
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bfbc      	itt	lt
 800a68e:	580b      	ldrlt	r3, [r1, r0]
 800a690:	18c0      	addlt	r0, r0, r3
 800a692:	4770      	bx	lr

0800a694 <_init>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	bf00      	nop
 800a698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69a:	bc08      	pop	{r3}
 800a69c:	469e      	mov	lr, r3
 800a69e:	4770      	bx	lr

0800a6a0 <_fini>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf00      	nop
 800a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a6:	bc08      	pop	{r3}
 800a6a8:	469e      	mov	lr, r3
 800a6aa:	4770      	bx	lr
